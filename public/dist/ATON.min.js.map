{"version":3,"sources":["ATON.node.js","ATON.pov.js","ATON.lightprobe.js","ATON.eventhub.js","ATON.mathub.js","ATON.utils.js","ATON.scenehub.js","ATON.nav.js","ATON.xr.js","ATON.sui.button.js","ATON.sui.js","ATON.avatar.js","ATON.vroadcast.js","ATON.semfactory.js","ATON.fe.js","ATON.mediarec.js","ATON.js"],"names":["Node","THREE","Group","id","type","traverse","o","isMesh","geometry","LP","userData","undefined","update","material","envMap","getEnvTex","ATON","NTYPES","SCENE","bPickable","_rootG","_rootVisible","_nodes","snodes","SEM","_rootSem","semnodes","UI","_rootUI","uinodes","as","kwords","_bCloneOnLoadHit","castShadow","receiveShadow","onHover","onLeave","onSelect","ROOT_NID","nid","name","b","kw","K","split","k","c","children","C","addKeywords","s","description","au","audio","visible","layers","disable","enable","hide","show","enablePicking","disablePicking","M","cMat","matSTD","matHL","setMaterial","f","opacity","envtex","Utils","assignLightProbeToMesh","_lps","length","Vector3","cLP","Box3","setFromObject","getCenter","mdist","i","d","distanceToSquared","pos","clone","p","parent","removeChild","dispose","remove","num","node","N","add","bb","bs","Sphere","getBoundingSphere","x","y","z","position","copy","set","sx","sy","sz","scale","rx","ry","rz","rotation","quaternion","Nav","_qOri","url","onComplete","_assetsManager","then","modelVisitor","console","log","_assetReqNew","P","Promise","resolve","reject","_aLoader","load","data","model","scene","_assetReqComplete","err","filename","exportNode","h","POV","target","up","STD_UPVECTOR","fov","STD_FOV","nextPOV","prevPOV","povlist","push","kwarray","pov","LightProbe","res","near","far","_res","_near","_far","STD_FAR","_envtex","_prevCCtarget","_pmremGenerator","PMREMGenerator","_renderer","CCtarget","WebGLCubeRenderTarget","format","RGBEFormat","generateMipmaps","minFilter","LinearMipmapLinearFilter","encoding","sRGBEncoding","CC","CubeCamera","_rootVisibleGlobal","texture","EventHub","evLocal","evNetwork","on","fireEvent","clearEventHandlers","evtname","ehList","handler","handlerLocal","handlerNetwork","evhLocal","VRoadcast","bReplicate","executeHandlers","MatHub","materials","colors","addDefaults","_loader","MaterialLoader","white","Color","black","green","yellow","red","blue","orange","sem","darksem","fullyTransparent","MeshBasicMaterial","transparent","depthWrite","selector","color","flatShading","controllerRay","semanticShape","semanticShapeHL","semanticShapeEdit","mat","jsonfile","addMaterial","device","geomUnitSphere","SphereBufferGeometry","exporterGLTF","exporterOBJ","_dlink","document","createElement","style","display","body","appendChild","textureLoader","TextureLoader","window","isSecureContext","isMobile","test","navigator","userAgent","substr","isXRsupported","xr","isSessionSupported","filepath","lastIndexOf","toLowerCase","index","substring","startsWith","endpoint","obj","onReceive","onFail","$","ajax","xhrFields","withCredentials","JSON","stringify","contentType","dataType","success","fail","object","updateMatrixWorld","g","applyMatrix4","matrixWorld","toNonIndexed","mergedGeometries","BufferGeometryUtils","mergeBufferGeometries","mergedGeometry","mergeVertices","center","group","mesh","Mesh","parentNode","computeBoundsTree","map","anisotropy","_maxAnisotropy","magFilter","LinearFilter","v","prec","parseFloat","toPrecision","blob","href","URL","createObjectURL","download","click","str","downloadBlob","Blob","jsonobj","downloadText","buffer","ext","getFileExtension","bBin","opts","binary","GLTFExporter","parse","output","ArrayBuffer","downloadArrayBuffer","downloadJSONobj","OBJExporter","size","img","Image","_camera","aspect","updateProjectionMatrix","setSize","render","_mainRoot","b64img","domElement","toDataURL","src","replace","_onResize","noLP","BoxBufferGeometry","MeshStandardMaterial","PATH_RES","tex","createSceneNode","metalness","metalnessMap","roughnessMap","normalMap","dx","dz","PlaneBufferGeometry","rotateX","Math","PI","SceneHub","currID","currData","_bEdit","_bLoading","initBaseParsers","reqpath","sid","oncomplete","getJSON","parseScene","sobj","_jsonParsers","getSemanticNode","getSceneNode","child","nodes","edges","n","semid","S","SL","sphere","CL","semesh","_convexPoints","environment","env","pano","mainpano","setMainPanorama","PATH_COLLECTION","setMainPanoramaRotation","L","mainlight","direction","setMainLightDirection","_dMainL","intensity","shadows","toggleShadows","lps","lightprobes","auto","setAutoLP","navmode","setNavMode","viewpoints","povs","setHomePOV","setPosition","setTarget","setFOV","setKeywords","keywords","scenegraph","sg","G","getOrCreateSceneNode","removeChildren","urls","Array","isArray","forEach","u","attachTo","shadowcast","setShadowCast","shadowreceive","toYup","setYup","transform","setRotation","setScale","parid","childid","semanticgraph","getOrCreateSemanticNode","createSemanticNode","setDescription","setAudio","spheres","SemFactory","createSphere","convexshapes","points","createConvexShape","parser","patch","mode","MODE_ADD","O","MODE_DEL","jstr","PATH_RESTAPI","r","COSINOIDAL_DIST","cos","POVtransitionDuration","STD_POV_TRANS_DURATION","init","_mode","_rotSpeedOrbit","_rotSpeedFP","_inertia","setOrbitControl","_currPOV","_fromPOV","_reqPOV","homePOV","_tPOVcall","_tPOVprogress","_vDir","Quaternion","_motionAmt","_motionDir","getCurrentEyeLocation","getCurrentDirection","copyCurrentPOV","isTransitioning","isOrbit","MODE_ORBIT","isFirstPerson","MODE_FP","isDevOri","MODE_DEVORI","setFirstPersonControl","setDeviceOrientationControl","XR","isPresenting","_cOrbit","_camOrbit","PerspectiveCamera","innerWidth","innerHeight","STD_NEAR","enableAll","OrbitControls","rotateSpeed","enablePan","enableDamping","dampingFactor","screenSpacePanning","enableZoom","minDistance","maxDistance","addEventListener","_bControlChange","_controls","syncCurrCamera","_cFirstPerson","_camFP","_screenPointerCoords","_cDevOri","_camDevOri","DeviceOrientationControls","alphaOffset","setMotionAmount","setMotionDirection","stop","cam","getFOV","syncCurrPOV","getCamera","getWorldPosition","getWorldQuaternion","getWorldDirection","ctrl","handlePOV","handleXRtransition","handlePOVtransition","handleMotion","controller0","negate","fv","multiplyScalar","_dt","_clock","elapsedTime","lerpVectors","MathUtils","lerp","_currPos","_fromPos","_reqPos","tgt","subVectors","normalize","FP_EPS","requestPOV","duration","requestPOVbyBound","T","E","radius","requestPOVbyNode","getBound","requestRetarget","point","normal","distanceTo","computeDefaultHome","dv","sceneBS","getRootScene","eye","computeAndRequestDefaultHome","requestHome","scope","reorder","enabled","deviceOrientation","screenOrientation","absolute","alphaOffsetDevice","alphaOffsetScreen","onDeviceOrientationChangeEvent","zee","euler","q0","q1","event","onDeviceOrientationAbsoluteChangeEvent","onScreenOrientationChangeEvent","orientation","setObjectQuaternion","Euler","sqrt","alpha","beta","gamma","orient","setFromEuler","multiply","setFromAxisAngle","connect","disconnect","removeEventListener","getDirection","degToRad","iOSOrientationPermission","DeviceOrientationEvent","requestPermission","permissionState","catch","error","webkitCompassHeading","getDirectionMap","setReferenceSpaceType","setFramebufferScaleFactor","_bPresenting","currSession","rig","gControllers","controller0pos","controller1pos","controller0dir","controller1dir","_lastPosR","_lastPosL","gpad0","gpad1","_urlHand","HAND_R","defaultSelectHandler","uid","rh","getUINode","lh","avMats","avatars","am","_queryDataScene","userHeight","STD_TELEP_DURATION","FE","playAudioFromSemanticNode","_hoveredSemNode","_hoveredUI","H","_handleUISelection","setupControllerUI","controller1","HAND_L","session","onSessionEnded","setSession","C0","getController","C1","e","gamepad","_setupControllerR","_setupControllerL","setRefSpaceLocation","requestSession","optionalFeatures","onSessionStarted","end","raytick","rhand","lhand","createUINode","CylinderBufferGeometry","translate","raylen","getControllerGrip","prev","lengthSq","_deltaMotionController","Button","uiid","baseColor","switchColor","_bSwitched","container","ThreeMeshUI","Block","width","height","padding","borderRadius","backgroundColor","backgroundOpacity","fontFamily","fontTexture","justifyContent","alignContent","uiText","Text","content","fontSize","fontColor","_trigger","PlaneGeometry","SUI","STD_BTN_SIZE","text","mainSelector","getMaterial","setSelectorRadius","gPoints","buildInfoNode","bShowInfo","_labelScale","_labelScaleVR","infoNodeText","getSelectorRadius","setSelectorModel","path","bUseStdMat","infoNode","attachToRoot","infoContainer","getInfoNode","createToolbar","buttonlist","cont","m","button","_bPauseQuery","_queryDataSem","orientToCamera","Avatar","userid","username","message","_auTalk","_bPlayingAudio","_auChunks","_tStateCall","_tStateDur","_tProgress","_currState","_tgtState","realize","avaMats","SphereGeometry","usermaterial","getAvatarMaterialByUID","smesh","usermeshnode","setCloneOnLoadHit","userauinode","Sprite","uspritemats","userlabelnode","labelcontainer","usernametext","ucolors","usermessagetext","A","msg","vol","D","cs","ts","slerp","handleStateTransition","avol","shift","Audio","play","onended","setTalkVolume","address","location","origin","initMaterials","socket","_connected","_username","_numUsers","avatarList","avaGroup","setInterval","sendState","USER_STATE_FREQ","_lastStateSent","enableChatLog","_elChat","getNumUsers","ucolorsdark","ucolorhex","MM","texAUI","smat","SpriteMaterial","sizeAttenuation","sock","emit","REPLICATED_EVT","evhNetwork","isConnected","requestSceneEnter","sceneid","protocol","secure","rejectUnauthorized","io","connected","_registerSocketHandlers","_onConnected","setUsername","append","setMessage","_msg","scrollTop","scrollHeight","touchAvatar","decodeState","requestStateTransition","uname","getUsername","audioURL","currentTime","encodeState","Float32Array","binData","Int8Array","w","a8","a","cpov","lastPos","lastOri","dPos","dOri","angleTo","THRES_STATE_POS","THRES_STATE_ORI","getAvatar","loadRepresentation","clearAllAvatars","bConvexBuilding","convexPoints","convexNode","currConvexMesh","currSemNode","currMaterial","_numShapes","numPoints","geom","ConvexBufferGeometry","currSemesh","setVectorPrecision","setDefaultAndHighlightMaterials","offset","addConvexPoint","Object3D","PATH_RES_ICONS","_bPopup","bPopupBlurBG","_userAuth","_auSemNode","_auSemNodePlaying","_bReqHome","urlParams","URLSearchParams","search","_uiSetupBase","ddens","get","setDefaultPixelDensity","_kModShift","reqstr","PATH_RESTAPI_SCENE","uiAddButton","toggleFullScreen","isConnectionSecure","toggle","popupClose","html","idcontainer","icon","onPress","iconurl","iconid","endsWith","slice","htmlcode","addClass","removeClass","uiSwitchButton","MediaRec","isAudioRecording","stopMediaStreaming","startMediaStreaming","popupQR","screenfull","isFullscreen","popupVRC","checkAuth","attr","popupUser","inputid","value","val","regReplace","RegExp","auLib","switch","loop","getAudio","htmlcontent","cssClasses","clstr","htcont","stopPropagation","fadeIn","setPixelRatio","resetPixelDensity","fadeOut","focusOn3DView","popupShow","QRCode","getElementById","cover","takeScreenshot","parseInt","postJSON","keypress","keycode","keyCode","which","setEditMode","password","_bAudioRecording","_bStreaming","recorder","reset","mediaDevices","_ds","_streamChunk","auStreamInterval","getUserMedia","video","channelCount","echoCancellation","stream","RecordRTC","mimeType","auType","bitsPerSecond","auBitsPerSecond","audioBitsPerSecond","sampleRate","desiredSampRate","disableLogs","numberOfAudioChannels","onFinish","stopRecording","getDataURL","b64","compress","rblob","_auAVGvolume","realizeAudioRecorder","startRecording","getBlob","reader","FileReader","readAsDataURL","onloadend","base64data","result","_stopRecAndSend","RAD2DEG","DEG2RAD","PATH_MODS","PATH_THREE","PATH_DRACO_LIB","PATH_BASIS_LIB","PATH_MODELS","PATH_SCENES","SHADOWS_NEAR","SHADOWS_FAR","SHADOWS_SIZE","SHADOWS_RES","setPathCollection","setPathScenes","_setupBaseListeners","el","_updateScreenMove","_onMouseWheel","Hammer","srcEvent","_handleQueries","defaultDoubleTapFromScreenCoords","_kModCtrl","key","max","preventDefault","deltaY","focus","_handleQueryScene","bFPtrans","currDir","feye","ftgt","hsn","profileDevice","Clock","WebGLRenderer","antialias","preserveDrawingBuffer","_stdpxd","outputEncoding","setAnimationLoop","_onFrame","capabilities","getMaxAnisotropy","Cache","GLTFLoader","_dracoLoader","DRACOLoader","setDecoderPath","setDRACOLoader","_numReqLoad","_bAutoLP","_bShadowsFixedBound","initGraphs","_queryDataUI","_bQuerySemOcclusion","_bQueryNormals","Vector2","_rcScene","Raycaster","_rcSemantics","_rcUI","renderPause","renderResume","_setupLoadManager","_loadManager","LoadingManager","onStart","itemsLoaded","itemsTotal","onLoad","onProgress","onError","getRootSemantics","getRootUI","shadowMap","shadow","camera","left","right","bottom","top","updateDirShadows","addLightProbe","setNear","assignLightProbesByProximity","setTimeout","_mMainPano","updateLightProbes","Scene","background","setAsRoot","ambLight","AmbientLight","setBackgroundColor","bg","setNeutralAmbientLight","_indLP","LightProbeGenerator","fromCubeRenderTarget","tpano","_matMainPano","_gMainPano","fog","depthTest","frustumCulled","setMainPanoramaRadius","onAfterRender","DirectionalLight","_dMainLtgt","_dMainLpos","_dMainLdir","PCFSoftShadowMap","mapSize","_updateEnvironment","dt","getDelta","_fps","clientX","clientY","_registerRCS","_rcRR","_rcHandlers","_handleQuerySemantics","_handleQueryUI","hitsnum","getControllerWorldLocation","getControllerWorldDirection","setFromCamera","_hitsScene","intersectObjects","distance","face","Matrix3","getNormalMatrix","applyMatrix3","getSceneQueriedPoint","getSceneQueriedDistance","getSceneQueriedNormal","_hitsSem","list","sp","_hitsUI","hui"],"mappings":";AA2pBeA,aAAAA,SAAAA,EAAAA,GAAAA,OAAAA,EAAAA,mBAAAA,QAAAA,iBAAAA,OAAAA,SAAAA,SAAAA,GAAAA,cAAAA,GAAAA,SAAAA,GAAAA,OAAAA,GAAAA,mBAAAA,QAAAA,EAAAA,cAAAA,QAAAA,IAAAA,OAAAA,UAAAA,gBAAAA,IAAAA,GAAAA,SAAAA,EAAAA,EAAAA,GAAAA,KAAAA,aAAAA,GAAAA,MAAAA,IAAAA,UAAAA,qCAAAA,SAAAA,EAAAA,EAAAA,GAAAA,IAAAA,IAAAA,EAAAA,EAAAA,EAAAA,EAAAA,OAAAA,IAAAA,CAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,WAAAA,EAAAA,aAAAA,EAAAA,EAAAA,cAAAA,EAAAA,UAAAA,IAAAA,EAAAA,UAAAA,GAAAA,OAAAA,eAAAA,EAAAA,EAAAA,IAAAA,IAAAA,SAAAA,EAAAA,EAAAA,EAAAA,GAAAA,OAAAA,GAAAA,EAAAA,EAAAA,UAAAA,GAAAA,GAAAA,EAAAA,EAAAA,GAAAA,EAAAA,SAAAA,EAAAA,EAAAA,GAAAA,GAAAA,mBAAAA,GAAAA,OAAAA,EAAAA,MAAAA,IAAAA,UAAAA,sDAAAA,EAAAA,UAAAA,OAAAA,OAAAA,GAAAA,EAAAA,UAAAA,CAAAA,YAAAA,CAAAA,MAAAA,EAAAA,UAAAA,EAAAA,cAAAA,KAAAA,GAAAA,EAAAA,EAAAA,GAAAA,SAAAA,EAAAA,EAAAA,GAAAA,OAAAA,EAAAA,OAAAA,gBAAAA,SAAAA,EAAAA,GAAAA,OAAAA,EAAAA,UAAAA,EAAAA,IAAAA,EAAAA,GAAAA,SAAAA,EAAAA,GAAAA,IAAAA,EAAAA,IAAAA,OAAAA,WAAAA,IAAAA,EAAAA,EAAAA,EAAAA,GAAAA,GAAAA,EAAAA,CAAAA,IAAAA,EAAAA,EAAAA,MAAAA,YAAAA,EAAAA,QAAAA,UAAAA,EAAAA,UAAAA,QAAAA,EAAAA,EAAAA,MAAAA,KAAAA,WAAAA,OAAAA,EAAAA,KAAAA,IAAAA,SAAAA,EAAAA,EAAAA,GAAAA,OAAAA,GAAAA,WAAAA,EAAAA,IAAAA,mBAAAA,EAAAA,EAAAA,GAAAA,EAAAA,SAAAA,EAAAA,GAAAA,QAAAA,IAAAA,EAAAA,MAAAA,IAAAA,eAAAA,6DAAAA,OAAAA,EAAAA,SAAAA,IAAAA,GAAAA,oBAAAA,UAAAA,QAAAA,UAAAA,OAAAA,EAAAA,GAAAA,QAAAA,UAAAA,KAAAA,OAAAA,EAAAA,GAAAA,mBAAAA,MAAAA,OAAAA,EAAAA,IAAAA,OAAAA,KAAAA,UAAAA,SAAAA,KAAAA,QAAAA,UAAAA,KAAAA,GAAAA,gBAAAA,EAAAA,MAAAA,GAAAA,OAAAA,GAAAA,SAAAA,EAAAA,GAAAA,OAAAA,EAAAA,OAAAA,eAAAA,OAAAA,eAAAA,SAAAA,GAAAA,OAAAA,EAAAA,WAAAA,OAAAA,eAAAA,KAAAA,GAAAA,SAAAA,EAAAA,EAAAA,EAAAA,GAAAA,OAAAA,KAAAA,EAAAA,OAAAA,eAAAA,EAAAA,EAAAA,CAAAA,MAAAA,EAAAA,YAAAA,EAAAA,cAAAA,EAAAA,UAAAA,IAAAA,EAAAA,GAAAA,EAAAA,EAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EA3oBTA,IAAAA,EAAAA,SAAAA,GA2oBSA,EAAAA,EA3oBIC,MAAMC,OA2oBVF,IAAAA,EAAAA,EAAAA,GAzoBHG,SAAAA,EAAAA,EAAIC,GAAK,IAAA,EAAA,OAAA,EAAA,KAAA,GAwUD,EAAA,EAvUhB,EAAA,EAAA,KAAA,OAuUgB,oBAAA,WAchB,OAbKC,EAAAA,SAAS,SAACC,GACPA,GAAAA,EAAEC,QAAUD,EAAEE,SAAS,CACnBC,IAAAA,EAAKH,EAAEI,SAASD,QAETE,IAAPF,IACAA,EAAGG,SACHN,EAAEO,SAASC,OAASL,EAAGM,gBAOnC,EAAA,KAnVKX,EAAAA,KAAOA,GAAaY,KAAKC,OAAOC,MAEhCC,EAAAA,WAAY,EAEb,EAAKf,OAASY,KAAKC,OAAOC,QACrBE,EAAAA,OAASJ,KAAKK,aACdC,EAAAA,OAASN,KAAKO,QAGnB,EAAKnB,OAASY,KAAKC,OAAOO,MACrBJ,EAAAA,OAASJ,KAAKS,SACdH,EAAAA,OAASN,KAAKU,UAInB,EAAKtB,OAASY,KAAKC,OAAOU,KACrBP,EAAAA,OAASJ,KAAKY,QACdN,EAAAA,OAASN,KAAKa,SAIlBC,EAAAA,GAAG3B,GAEH4B,EAAAA,YAASpB,EAETqB,EAAAA,kBAAmB,EAGnBC,EAAAA,YAAgB,EAChBC,EAAAA,eAAgB,EAGhBC,EAAAA,aAAWxB,EACXyB,EAAAA,aAAWzB,EACX0B,EAAAA,cAAW1B,EArCC,EAyoBNX,OAAAA,EAAAA,EAAAA,CAAAA,CAAAA,IAAAA,KA3lBZG,MAAAA,SAAAA,GACKA,QAAOQ,IAAPR,GACAA,IAAOa,KAAKsB,SAMT,OAJFhB,KAAAA,OAAOnB,GAAM,KACboC,KAAAA,IAAOpC,EACPqC,KAAAA,KAAOrC,EAEL,OAmlBIH,CAAAA,IAAAA,YAhlBJ,MAAA,WAIA,OAHFsB,KAAAA,OAAON,KAAKsB,UAAY,KACxBC,KAAAA,IAAMvB,KAAKsB,SAET,OA4kBItC,CAAAA,IAAAA,oBAzkBGyC,MAAAA,SAAAA,GAEP,OADFT,KAAAA,iBAAmBS,EACjB,OAukBIzC,CAAAA,IAAAA,cA9jBH0C,MAAAA,SAAAA,GACJC,IAAAA,EAAID,EAAGE,MAAM,KAGZ,IAAA,IAAIC,UADWlC,IAAhB,KAAKoB,SAAsB,KAAKA,OAAS,IAC/BY,EAAQZ,KAAAA,OAAQY,EAAEE,KAAO,EAGlC,IAAA,IAAIC,KAAK,KAAKC,SAAS,CACpBC,IAAAA,EAAI,KAAKD,SAASD,QACPnC,IAAXqC,EAAE5C,MAAoB4C,EAAEC,YAAYP,GAGrC,OAAA,OAkjBI1C,CAAAA,IAAAA,aAxiBJ0C,MAAAA,SAAAA,GACH,QAAgB/B,IAAhB,KAAKoB,OACD,YAAoBpB,IAApB,KAAKoB,OAAOW,KAsiBT1C,CAAAA,IAAAA,iBA7hBAkD,MAAAA,SAAAA,GAEJ,OADFxC,KAAAA,SAASyC,YAAcD,EACrB,OA2hBIlD,CAAAA,IAAAA,iBAlhBC,MAAA,WACL,OAAA,KAAKU,SAASyC,cAihBVnD,CAAAA,IAAAA,WA9gBNoD,MAAAA,SAAAA,GAEE,OADF1C,KAAAA,SAAS2C,MAAQD,EACf,OA4gBIpD,CAAAA,IAAAA,WAzgBL,MAAA,WACC,OAAA,KAAKU,SAAS2C,QAwgBVrD,CAAAA,IAAAA,OAhgBT,MAAA,WAAA,IAAA,EAAA,KACGsD,KAAAA,SAAU,EACVjD,KAAAA,SAAS,SAACC,GAAQA,EAAEiD,OAAOC,QAAQ,EAAKpD,UA8flCJ,CAAAA,IAAAA,OAtfT,MAAA,WAAA,IAAA,EAAA,KAGK,OAFFsD,KAAAA,SAAU,EACX,KAAKnC,WAAW,KAAKd,SAAS,SAACC,GAAQA,EAAEiD,OAAOE,OAAO,EAAKrD,QACzD,OAmfIJ,CAAAA,IAAAA,SA3eRyC,MAAAA,SAAAA,GACCA,YAAM9B,IAAN8B,EACI,KAAKa,QAAgB,KAAKI,OAClB,KAAKC,OAGjBlB,EAAU,KAAKkB,OACP,KAAKD,SAoeN1D,CAAAA,IAAAA,iBA5dC,MAAA,WAAA,IAAA,EAAA,KAGL,OAFFmB,KAAAA,WAAY,EACZd,KAAAA,SAAS,SAACC,GAAQA,EAAEiD,OAAOC,QAAQ,EAAKpD,QACtC,OAydIJ,CAAAA,IAAAA,gBAjdA,MAAA,WAAA,IAAA,EAAA,KAGJ,OAFFmB,KAAAA,WAAY,EACZd,KAAAA,SAAS,SAACC,GAAQA,EAAEiD,OAAOE,OAAO,EAAKrD,QACrC,OA8cIJ,CAAAA,IAAAA,cA3cHyC,MAAAA,SAAAA,GAID,OAHHA,EAAG,KAAKmB,gBACP,KAAKC,iBAEH,OAucI7D,CAAAA,IAAAA,cA9bH8D,MAAAA,SAAAA,GAAE,IAAA,EAAA,KAWH,OAVFpD,KAAAA,SAASqD,KAAOD,EAEhBzD,KAAAA,SAAS,SAACC,GACPA,EAAEC,SACF,EAAKG,SAASqD,KAAOD,EACrBxD,EAAEO,SAAWiD,KAKd,OAmbI9D,CAAAA,IAAAA,cA5aF,MAAA,WACF,OAAA,KAAKU,SAASqD,OA2aV/D,CAAAA,IAAAA,kCAvaiBgE,MAAAA,SAAAA,EAAQC,GAI7B,OAHFvD,KAAAA,SAASsD,OAASA,EAClBtD,KAAAA,SAASuD,MAASA,EAEhB,OAmaIjE,CAAAA,IAAAA,YAjaJ,MAAA,WAEA,OADH,KAAKU,SAASuD,OAAO,KAAKC,YAAY,KAAKxD,SAASuD,OACjD,OA+ZIjE,CAAAA,IAAAA,yBA7ZS,MAAA,WAEb,OADH,KAAKU,SAASsD,QAAQ,KAAKE,YAAY,KAAKxD,SAASsD,QAClD,OA2ZIhE,CAAAA,IAAAA,aAvZJmE,MAAAA,SAAAA,GAQA,OAPF9D,KAAAA,SAAS,SAACC,GACPA,EAAEC,SACFD,EAAEO,SAASuD,QAAUD,KAKtB,OA+YInE,CAAAA,IAAAA,gBA3YDyC,MAAAA,SAAAA,GASH,OARFR,KAAAA,WAAaQ,EAEbpC,KAAAA,SAAS,SAACC,GACPA,EAAEC,SACFD,EAAE2B,WAAaQ,KAIhB,OAkYIzC,CAAAA,IAAAA,mBAhYEyC,MAAAA,SAAAA,GASN,OARFP,KAAAA,cAAgBO,EAEhBpC,KAAAA,SAAS,SAACC,GACPA,EAAEC,SACFD,EAAE4B,cAAgBO,KAInB,OAuXIzC,CAAAA,IAAAA,YApXLqE,MAAAA,SAAAA,GASC,OARFhE,KAAAA,SAAS,SAACC,GACPA,EAAEC,SACXD,EAAEO,SAASC,OAAUuD,KAMb,OA2WIrE,CAAAA,IAAAA,mBAxWES,MAAAA,SAAAA,GAKN,OAJFJ,KAAAA,SAAS,SAACC,GACPA,EAAEC,QAAUD,EAAEE,UAAUQ,KAAKsD,MAAMC,uBAAuB9D,EAAIH,KAG/D,OAmWIN,CAAAA,IAAAA,+BA/Ve,MAAA,WACtBgB,OAAqB,IAArBA,KAAKwD,KAAKC,OAAqB,MAE9BpE,KAAAA,SAAS,SAACC,GACPA,GAAAA,EAAEC,QAAUD,EAAEE,SAAS,CACnBsC,IAAAA,EAAI,IAAI7C,MAAMyE,QAGdC,IAFO,IAAI1E,MAAM2E,MAAOC,cAAcvE,GAAGwE,UAAUhC,QAE3CnC,GACRoE,OAAQpE,EAEP,IAAA,IAAIqE,KAAKhE,KAAKwD,KAAK,CAChB/D,IAAAA,EAAKO,KAAKwD,KAAKQ,GACfC,EAAInC,EAAEoC,kBAAkBzE,EAAG0E,WAEnBxE,IAARgE,GAAqBM,EAAIF,KACzBA,EAAQE,EACRN,EAAMlE,GAIVkE,GAAK3D,KAAKsD,MAAMC,uBAAuBI,EAAKrE,MAIjD,QAsUIN,CAAAA,IAAAA,YA/SJ,MAAA,WACHgD,IAAAA,EAAI,KAAKoC,QAQNpC,OANPA,EAAE3C,SAAS,SAACC,GACJA,EAAEC,SACFD,EAAEO,SAAWP,EAAEO,SAASuE,WAIzBpC,IAsSIhD,CAAAA,IAAAA,SAjSP,MAAA,WACAqF,IAAAA,EAAI,KAAKC,YAEH3E,IAAN0E,QAA6B1E,IAAV0E,EAAE9C,KAAmB8C,EAAEE,YAAa,QA8RhDvF,CAAAA,IAAAA,cA3RH8C,MAAAA,SAAAA,GACJA,QAAMnC,IAANmC,EAAAA,CAEMA,EAAEP,IAYL,YAXO5B,IAAVmC,EAAEP,MAAmB,KAAKjB,OAAOwB,EAAEP,UAAO5B,GAE9CmC,EAAEwC,YAAS3E,EAEXmC,EAAEzC,SAAS,SAACC,GACJA,EAAEE,UAAUF,EAAEE,SAASgF,UACvBlF,EAAEO,UAAUP,EAAEO,SAAS2E,YAG1BC,KAAAA,OAAO3C,GAEL,QA4QI9C,CAAAA,IAAAA,iBAvQC,MAAA,WAEP,IADD0F,IACKV,EADC,KAAKjC,SAAS0B,OACR,EAAIO,GAAG,EAAGA,IAAUO,KAAAA,YAAY,KAAKxC,SAASiC,IAEvD,OAAA,OAmQIhF,CAAAA,IAAAA,WAvPN2F,MAAAA,SAAAA,GACDC,IAAAA,EAAqB,iBAATD,EAAoB,KAAKrE,OAAOqE,GAAQA,EAKjDC,OAJHA,IACAA,EAAEC,IAAI,MACFD,EAAElF,SAASqD,OAAM,KAAKrD,SAASqD,KAAO6B,EAAElF,SAASqD,OAElD6B,IAiPI5F,CAAAA,IAAAA,eAxOD,MAAA,WAGH,OAFFoB,KAAAA,OAAOyE,IAAI,MACZ,KAAKzE,OAAOV,SAASqD,OAAM,KAAKrD,SAASqD,KAAO,KAAK3C,OAAOV,SAASqD,MAClE,KAAK3C,SAqODpB,CAAAA,IAAAA,WA5NL,MAAA,WACF8F,IAAAA,GAAK,IAAI7F,MAAM2E,MAAOC,cAAe,MACrCkB,EAAK,IAAI9F,MAAM+F,OAGZD,OAFPD,EAAGG,kBAAkBF,GAEdA,IAuNI/F,CAAAA,IAAAA,cA7MHkG,MAAAA,SAAAA,EAAEC,EAAEC,GAIL,OAHHF,aAAajG,MAAMyE,QAAS,KAAK2B,SAASC,KAAKJ,GAC9C,KAAKG,SAASE,IAAIL,EAAEC,EAAEC,GAEpB,OAyMIpG,CAAAA,IAAAA,WA7LNwG,MAAAA,SAAAA,EAAGC,EAAGC,GAOJ,OANHF,aAAcvG,MAAMyE,QAAS,KAAKiC,MAAML,KAAKE,SAElC7F,IAAP8F,IAAmBA,EAAKD,EAAIE,EAAKF,GAChCG,KAAAA,MAAMJ,IAAIC,EAAGC,EAAGC,IAGlB,OAsLI1G,CAAAA,IAAAA,cA5KH4G,MAAAA,SAAAA,EAAGC,EAAGC,GAIP,OAHHF,aAAc3G,MAAMyE,QAAS,KAAKqC,SAAST,KAAKM,GAC/C,KAAKG,SAASR,IAAIK,EAAGC,EAAGC,GAEtB,OAwKI9G,CAAAA,IAAAA,iBAnKC,MAAA,WAEL,OADFgH,KAAAA,WAAWV,KAAMtF,KAAKiG,IAAIC,OACxB,OAiKIlH,CAAAA,IAAAA,SA9JP,MAAA,WAEG,OADF+G,KAAAA,SAASR,KAAK,cAAc,EAAI,GAC9B,OA4JIvG,CAAAA,IAAAA,OAjJVmH,MAAAA,SAAAA,EAAKC,GACFD,QAAQxG,IAARwG,EAAmB,OAAO,KAE1BvB,IAAAA,EAAI,KAGHA,GAAAA,EAAE5D,uBAAiDrB,IAA7BK,KAAKqG,eAAeF,GAWpCvB,OAVP5E,KAAKqG,eAAeF,GAAKG,KAAK,SAAEhH,GACxB0C,IAAAA,EAAI1C,EAAE8E,QAEVpE,KAAKsD,MAAMiD,aAAa3B,EAAG5C,GAC3B4C,EAAEC,IAAK7C,GAEHoE,GAAYA,MAGpBI,QAAQC,IAAI,QACL7B,EAIPA,EAAExF,OAASY,KAAKC,OAAOC,OAAOF,KAAK0G,aAAaP,GAEhDQ,IAAAA,EAAI,IAAIC,QAAS,SAAEC,EAASC,GAC5B9G,KAAK+G,SAASC,KAAMb,EAAK,SAACc,GAClBC,IAAAA,EAAQD,EAAKE,OAASF,EAAKE,MAAM,GAGrCnH,KAAKsD,MAAMiD,aAAa3B,EAAGsC,GAE3BtC,EAAEC,IAAKqC,GAEPL,EAAQK,GACRV,QAAQC,IAAI,SAASN,EAAI,WAErBvB,EAAExF,OAASY,KAAKC,OAAOC,OAAOF,KAAKoH,kBAAkBjB,GAErDC,GAAYA,UAEpBzG,EACA,SAAC0H,GACGb,QAAQC,IAAIY,GAGRzC,EAAExF,OAASY,KAAKC,OAAOC,OAAOF,KAAKoH,kBAAkBjB,GACrDC,GAAYA,QAwCjB,OAFHxB,EAAE5D,mBAAkBhB,KAAKqG,eAAeF,GAAOQ,GAE5C,OA4DI3H,CAAAA,IAAAA,WAzDLsI,MAAAA,SAAAA,GAGC,OAFPtH,KAAKsD,MAAMiE,WAAW,KAAMD,GAErB,OAsDItI,CAAAA,IAAAA,aAnDHwI,MAAAA,SAAAA,GAED,OADFrG,KAAAA,QAAUgC,EACR,OAiDInE,CAAAA,IAAAA,aA/CHwI,MAAAA,SAAAA,GAED,OADFpG,KAAAA,QAAU+B,EACR,OA6CInE,CAAAA,IAAAA,cA3CFwI,MAAAA,SAAAA,GAEF,OADFnG,KAAAA,SAAW8B,EACT,SAyCInE,EA3oBTA,GA2oBSA,EAAAA,EAAAA,QAAAA,QAAAA;;ACjiBAyI,aAAAA,SAAAA,EAAAA,EAAAA,GAAAA,KAAAA,aAAAA,GAAAA,MAAAA,IAAAA,UAAAA,qCAAAA,SAAAA,EAAAA,EAAAA,GAAAA,IAAAA,IAAAA,EAAAA,EAAAA,EAAAA,EAAAA,OAAAA,IAAAA,CAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,WAAAA,EAAAA,aAAAA,EAAAA,EAAAA,cAAAA,EAAAA,UAAAA,IAAAA,EAAAA,UAAAA,GAAAA,OAAAA,eAAAA,EAAAA,EAAAA,IAAAA,IAAAA,SAAAA,EAAAA,EAAAA,EAAAA,GAAAA,OAAAA,GAAAA,EAAAA,EAAAA,UAAAA,GAAAA,GAAAA,EAAAA,EAAAA,GAAAA,EAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EA5GTA,IAAAA,EAAAA,WAEMtI,SAAAA,EAAAA,GAAG,EAAA,KAAA,GACNgF,KAAAA,IAAS,IAAIlF,MAAMyE,QAAQ,EAAE,EAAE,GAC/BgE,KAAAA,OAAS,IAAIzI,MAAMyE,QAAQ,EAAE,EAAE,GAC/BiE,KAAAA,GAAS3H,KAAK4H,aACdC,KAAAA,IAAS7H,KAAKiG,IAAI6B,QAElB/G,KAAAA,YAASpB,EAEToI,KAAAA,aAAUpI,EACVqI,KAAAA,aAAUrI,EAGVmB,KAAAA,GAAG3B,GA8FGsI,OAAAA,EAAAA,EAAAA,CAAAA,CAAAA,IAAAA,KA3FZtI,MAAAA,SAAAA,GACKA,QAAOQ,IAAPR,EAKG,OAHPa,KAAKiG,IAAIgC,QAAQ9I,GAAM,KAClBA,KAAAA,GAAKA,EAEH,OAqFIsI,CAAAA,IAAAA,cA3EHvC,MAAAA,SAAAA,EAAEC,EAAEC,GAIL,OAHHF,aAAajG,MAAMyE,QAAS,KAAKS,IAAImB,KAAKJ,GACzC,KAAKf,IAAIoB,IAAIL,EAAEC,EAAEC,GAEf,OAuEIqC,CAAAA,IAAAA,YA7DLvC,MAAAA,SAAAA,EAAEC,EAAEC,GAIH,OAHHF,aAAajG,MAAMyE,QAAS,KAAKgE,OAAOpC,KAAKJ,GAC5C,KAAKwC,OAAOnC,IAAIL,EAAEC,EAAEC,GAElB,OAyDIqC,CAAAA,IAAAA,SAhDRtE,MAAAA,SAAAA,GAGI,OAFF0E,KAAAA,IAAM1E,EAEJ,OA6CIsE,CAAAA,IAAAA,aApCJ/F,MAAAA,SAAAA,GAIA,YAHa/B,IAAhB,KAAKoB,SAAsB,KAAKA,OAAS,IACxCA,KAAAA,OAAOmH,KAAKxG,GAEV,OAgCI+F,CAAAA,IAAAA,cA7BHU,MAAAA,SAAAA,GAED,OADFpH,KAAAA,OAASoH,EACP,OA2BIV,CAAAA,IAAAA,aApBJW,MAAAA,SAAAA,GACH,GAACA,EAGE,OAFFL,KAAAA,QAAUK,EAER,OAgBIX,CAAAA,IAAAA,aATJW,MAAAA,SAAAA,GACH,GAACA,EAGE,OAFFJ,KAAAA,QAAUI,EAER,SAKIX,EA5GTA,GA4GSA,EAAAA,EAAAA,QAAAA,QAAAA;;AC2CAY,aAAAA,SAAAA,EAAAA,EAAAA,GAAAA,KAAAA,aAAAA,GAAAA,MAAAA,IAAAA,UAAAA,qCAAAA,SAAAA,EAAAA,EAAAA,GAAAA,IAAAA,IAAAA,EAAAA,EAAAA,EAAAA,EAAAA,OAAAA,IAAAA,CAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,WAAAA,EAAAA,aAAAA,EAAAA,EAAAA,cAAAA,EAAAA,UAAAA,IAAAA,EAAAA,UAAAA,GAAAA,OAAAA,eAAAA,EAAAA,EAAAA,IAAAA,IAAAA,SAAAA,EAAAA,EAAAA,EAAAA,GAAAA,OAAAA,GAAAA,EAAAA,EAAAA,UAAAA,GAAAA,GAAAA,EAAAA,EAAAA,GAAAA,EAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EArJTA,IAAAA,EAAAA,WAEMC,SAAAA,EAAAA,EAAKC,EAAMC,GAAI,EAAA,KAAA,GAClBrE,KAAAA,IAAM,IAAIlF,MAAMyE,QAAQ,EAAE,EAAE,GAE5B+E,KAAAA,UAAiB9I,IAAR2I,EAAqBA,EAAO,GACrCI,KAAAA,WAAkB/I,IAAT4I,EAAqBA,EAAO,EACrCI,KAAAA,UAAiBhJ,IAAR6I,EAAqBA,EAAOxI,KAAKiG,IAAI2C,QAU9CC,KAAAA,aAAUlJ,EACVmJ,KAAAA,mBAAgBnJ,EAEhBoJ,KAAAA,gBAAkB,IAAI9J,MAAM+J,eAAehJ,KAAKiJ,WAiI1CZ,OAAAA,EAAAA,EAAAA,CAAAA,CAAAA,IAAAA,cA9FHnD,MAAAA,SAAAA,EAAEC,EAAEC,GAOL,OANHF,aAAajG,MAAMyE,QAAS,KAAKS,IAAImB,KAAKJ,GACzC,KAAKf,IAAIoB,IAAIL,EAAEC,EAAEC,GAKf,OAuFIiD,CAAAA,IAAAA,UApFPE,MAAAA,SAAAA,GAEG,OADFG,KAAAA,MAAQH,EACN,OAkFIF,CAAAA,IAAAA,SAhFRG,MAAAA,SAAAA,GAEI,OADFG,KAAAA,KAAOH,EACL,OA8EIH,CAAAA,IAAAA,SArEP,MAAA,WACA,KAAKQ,SAAS,KAAKA,QAAQrE,UAC3B,KAAKsE,eAAe,KAAKA,cAActE,UAEvC0E,IAAAA,EAAW,IAAIjK,MAAMkK,sBAAuB,KAAKV,KAAM,CACvDW,OAAQnK,MAAMoK,WACdC,iBAAiB,EACjBC,UAAWtK,MAAMuK,yBACjBC,SAAUxK,MAAMyK,eAGhBC,EAAK,IAAI1K,MAAM2K,WAAY,KAAKlB,MAAO,KAAKC,KAAMO,GA2C/C,OA1CPS,EAAGtE,SAASC,KAAK,KAAKnB,KAEtBwF,EAAG/J,OAAQI,KAAKiJ,UAAWjJ,KAAK6J,oBAE3BhB,KAAAA,QAAUK,EAASY,QAoBnBhB,KAAAA,cAAgBI,EAkBd,OAeIb,CAAAA,IAAAA,YAXJ,MAAA,WACA,OAAA,KAAKQ,UAUDR,CAAAA,IAAAA,eAPFzD,MAAAA,SAAAA,QAOEyD,EArJTA,GAqJSA,EAAAA,EAAAA,QAAAA,QAAAA;;AC3EA0B,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EA/Ef,IAAIA,EAAW,CAGfA,KAAgB,WAEZA,EAASC,QAAY,GACrBD,EAASE,UAAY,GAGrBjK,KAAKkK,GAAqBH,EAASG,GACnClK,KAAKmK,UAAqBJ,EAASI,UACnCnK,KAAKoK,mBAAqBL,EAASK,oBAOvCL,mBAA8B,SAACM,GAC3BN,EAASC,QAAQK,GAAa,GAC9BN,EAASE,UAAUI,GAAW,IAIlCN,gBAA2B,SAACO,EAAQrD,GAC5B,GAACqD,EAEA,IAAA,IAAI9C,EAAI,EAAGA,EAAI8C,EAAO7G,OAAQ+D,IAAK,CAChC+C,IAAAA,EAAUD,EAAO9C,GACjB+C,GAASA,EAAQtD,KAe7B8C,GAAc,SAACM,EAASG,EAAcC,GAE9BD,QAAiB7K,IAAjB6K,EAA2B,CACvBE,IAAAA,EAAWX,EAASC,aAEErK,IAAtB+K,EAASL,KAAwBK,EAASL,GAAW,IACzDK,EAASL,GAASnC,KAAKsC,QAIJ7K,IAAnB8K,GACAzK,KAAK2K,UAAUT,GAAGG,EAASI,IAgBnCV,UAAqB,SAACM,EAASpD,EAAM2D,GAC7BN,IAAAA,EAASP,EAASC,QAAQK,GAC9BN,EAASc,gBAAgBP,EAAQrD,GAE5B2D,GACL5K,KAAK2K,UAAUR,UAAUE,EAASpD,KAGvB8C,EAAAA,EAAAA,QAAAA,QAAAA;;ACmBAe,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EAjGf,IAAIA,EAAS,CAEbA,KAAc,WACVA,EAAOC,UAAY,GACnBD,EAAOE,OAAY,GAEnBF,EAAOG,cAEPH,EAAOI,QAAU,IAAIjM,MAAMkM,gBAG/BL,YAAqB,WAGjBA,EAAOE,OAAOI,MAAS,IAAInM,MAAMoM,MAAM,EAAE,EAAE,GAC3CP,EAAOE,OAAOM,MAAS,IAAIrM,MAAMoM,MAAM,EAAE,EAAE,GAC3CP,EAAOE,OAAOO,MAAS,IAAItM,MAAMoM,MAAM,EAAE,EAAE,GAC3CP,EAAOE,OAAOQ,OAAS,IAAIvM,MAAMoM,MAAM,EAAE,EAAE,GAC3CP,EAAOE,OAAOS,IAAS,IAAIxM,MAAMoM,MAAM,EAAE,EAAE,GAC3CP,EAAOE,OAAOU,KAAS,IAAIzM,MAAMoM,MAAM,EAAE,EAAE,GAC3CP,EAAOE,OAAOW,OAAS,IAAI1M,MAAMoM,MAAM,EAAE,GAAI,GAE7CP,EAAOE,OAAOY,IAAU,IAAI3M,MAAMoM,MAAM,EAAE,EAAE,GAC5CP,EAAOE,OAAOa,QAAU,IAAI5M,MAAMoM,MAAM,EAAE,EAAE,IAG5CP,EAAOC,UAAUe,iBAAmB,IAAI7M,MAAM8M,kBAAkB,CAC5DC,aAAa,EACbC,YAAY,EACZ7I,QAAS,IAIb0H,EAAOC,UAAUmB,SAAW,IAAIjN,MAAM8M,kBAAkB,CACpDI,MAAOrB,EAAOE,OAAOO,MACrBS,aAAa,EACbC,YAAY,EACZ7I,QAAS,GACTgJ,aAAa,IAIjBtB,EAAOC,UAAUsB,cAAgB,IAAIpN,MAAM8M,kBAAkB,CACzDI,MAAOrB,EAAOE,OAAOI,MACrBY,aAAa,EACb5I,QAAS,GACT6I,YAAY,EACZG,aAAa,IAIjBtB,EAAOC,UAAUuB,cAAgB,IAAIrN,MAAM8M,kBAAkB,CACzDI,MAAOrB,EAAOE,OAAOY,IACrBI,aAAa,EACbC,YAAY,EACZ7I,QAAS,GACTgJ,aAAa,IAEjBtB,EAAOC,UAAUwB,gBAAkB,IAAItN,MAAM8M,kBAAkB,CAC3DI,MAAOrB,EAAOE,OAAOY,IACrBI,aAAa,EACbC,YAAY,EACZ7I,QAAS,GACTgJ,aAAa,IAEjBtB,EAAOC,UAAUyB,kBAAoB,IAAIvN,MAAM8M,kBAAkB,CAC7DI,MAAOrB,EAAOE,OAAOW,OACrBK,aAAa,EACbC,YAAY,EACZ7I,QAAS,GACTgJ,aAAa,KAIrBtB,YAAqB,SAAC3L,EAAIsN,GAClB3B,EAAOC,UAAU5L,GACjBqH,QAAQC,IAAI,oBAAoBtH,EAAG,uBAIvC2L,EAAOC,UAAU5L,GAAMsN,GAG3B3B,aAAsB,SAAC3L,EAAIuN,GACvB5B,EAAOI,QAAQlE,KAAK0F,EAAU,SAACD,GAC3B3B,EAAO6B,YAAYxN,EAAIsN,SAE3B9M,EACA,SAAC0H,GACGb,QAAQC,IAAIY,MAIpByD,YAAqB,SAAC3L,GACX2L,OAAAA,EAAOC,UAAU5L,KAGb2L,EAAAA,EAAAA,QAAAA,QAAAA;;ACwRAxH,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EAAAA,IAAAA,OAAAA,EAzXXA,EAAQ,CAGZA,KAAa,WAETtD,KAAK4M,OAAS,GAEdtJ,EAAMuJ,eAAiB,IAAI5N,MAAM6N,qBAAsB,EAAK,GAAI,IAGhExJ,EAAMyJ,kBAAepN,EACrB2D,EAAM0J,iBAAerN,EAErB2D,EAAM2J,OAASC,SAASC,cAAc,KACtC7J,EAAM2J,OAAOG,MAAMC,QAAU,OAC7BH,SAASI,KAAKC,YAAajK,EAAM2J,QAEjC3J,EAAMkK,cAAgB,IAAIvO,MAAMwO,eAOpCnK,mBAA2B,WAChBoK,OAAAA,OAAOC,iBAKlBrK,cAAsB,WAGlBtD,KAAK4M,OAAOgB,UAAW,EAUvB5N,KAAK4M,OAAOgB,YARL,qUAAqUC,KAAKC,UAAUC,aACpV,0kDAA0kDF,KAAKC,UAAUC,UAAUC,OAAO,EAAE,KAUnnDhO,KAAK4M,OAAOqB,eAAgB,EACvB,OAAQH,WACZA,UAAUI,GAAGC,mBAAoB,gBAAiB7H,KAAM,SAAW7E,GACxDA,GACAzB,KAAK4M,OAAOqB,eAAgB,EAC5BzH,QAAQC,IAAI,qBAGZzG,KAAK4M,OAAOqB,eAAgB,EAC5BzH,QAAQC,IAAI,2BAU5BnD,SAAiB,WACNtD,OAAAA,KAAK4M,OAAOgB,UAOvBtK,iBAAyB,WACdtD,OAAAA,KAAK4M,OAAOqB,eAKvB3K,iBAAyB,SAAE8K,GACnBA,OAAAA,EAASJ,OAAOI,EAASC,YAAY,KAAK,GAAGC,eAGrDhL,cAAsB,SAAE8K,GAChBG,IAAAA,EAAQH,EAASC,YAAY,KAC7BE,OAAW,IAAXA,EAAqBH,EAASI,UAAW,EAAGD,EAAQ,GAEjD,IAGXjL,cAAsB,SAACpB,GACfA,QAAAA,EAAEuM,WAAW,cACbvM,EAAEuM,WAAW,aAIrBnL,SAAiB,SAACoL,EAAUC,EAAKC,EAAWC,GACxCC,EAAEC,KAAK,CACH5I,IAAKuI,EACLtP,KAAK,OACL4P,UAAW,CAAEC,iBAAiB,GAC9BhI,KAAMiI,KAAKC,UAAUR,GACrBS,YAAY,kCACZC,SAAS,OAETC,QAAS,SAACrI,GACF2H,GAAWA,EAAU3H,MAE9BsI,KAAK,SAAClI,GACLb,QAAQC,IAAIY,GACRwH,GAAQA,OAKpBvL,YAAoB,SAAEkM,GAClBA,EAAOC,mBAAmB,GAEpBjQ,IAAAA,EAAW,GACjBgQ,EAAOnQ,SAAU,SAAAyC,GACRA,GAAAA,EAAEvC,OAAQ,CACLmQ,IAAAA,EAAI5N,EAAEtC,SACZkQ,EAAEC,aAAc7N,EAAE8N,aAClBpQ,EAAS0I,KAAMwH,EAAEG,mBAKnBC,IAAAA,EAAmB7Q,MAAM8Q,oBAAoBC,sBAAuBxQ,GAAU,GAC9EyQ,EAAmBhR,MAAM8Q,oBAAoBG,cAAeJ,GAAmBK,SAE/EC,EAAQ,IAAInR,MAAMC,MAClBmR,EAAO,IAAIpR,MAAMqR,KAAML,GAEtBG,OADPA,EAAMvL,IAAKwL,GACJD,GAIX9M,aAAqB,SAACiN,EAAYrJ,GAC1B,IAACA,EAAO,OAAO,EAIftC,IAAAA,EAAI2L,EACJnR,EAAOwF,EAAExF,KAEb8H,EAAM7H,SAAU,SAAEC,QAEMK,IAAhBiF,EAAEzE,YACEyE,EAAEzE,UAAWb,EAAEiD,OAAOE,OAAOrD,GAC5BE,EAAEiD,OAAOC,QAAQpD,IAGtBE,EAAEC,SAIEH,IAASY,KAAKC,OAAOC,QAErBZ,EAAE2B,YAAgB,EAClB3B,EAAE4B,eAAgB,EAGd5B,EAAEE,WACFF,EAAEE,SAASgR,oBACXhK,QAAQC,IAAI,iBAIQ,OAAnBnH,EAAEO,SAAS4Q,MAKZnR,EAAEO,SAAS4Q,IAAIC,WAAa1Q,KAAK2Q,eACjCrR,EAAEO,SAAS4Q,IAAIlH,UAAatK,MAAMuK,yBAClClK,EAAEO,SAAS4Q,IAAIG,UAAa3R,MAAM4R,eAKtCzR,IAASY,KAAKC,OAAOO,MACrBlB,EAAEO,SAAWG,KAAK8K,OAAOC,UAAUuB,eAInC1H,EAAElF,SAASqD,OACXzD,EAAEO,SAAW+E,EAAElF,SAASqD,UAOxCO,mBAA2B,SAACwN,EAAGC,GAKpBD,OAJPA,EAAE5L,EAAI8L,WAAYF,EAAE5L,EAAE+L,YAAYF,IAClCD,EAAE3L,EAAI6L,WAAYF,EAAE3L,EAAE8L,YAAYF,IAClCD,EAAE1L,EAAI4L,WAAYF,EAAE1L,EAAE6L,YAAYF,IAE3BD,GAIXxN,aAAqB,SAAC4N,EAAM5J,QACP3H,IAAb2H,IAEJhE,EAAM2J,OAAOkE,KAAOC,IAAIC,gBAAiBH,GACzC5N,EAAM2J,OAAOqE,SAAWhK,EACxBhE,EAAM2J,OAAOsE,UAIjBjO,aAAqB,SAAEkO,EAAKlK,GACxBhE,EAAMmO,aAAc,IAAIC,KAAM,CAAEF,GAAO,CAAEpS,KAAM,eAAkBkI,IAIrEhE,gBAAwB,SAACqO,EAASrK,GAC9BhE,EAAMsO,aAAc1C,KAAKC,UAAUwC,GAAUrK,IAGjDhE,oBAA4B,SAAEuO,EAAQvK,GAClChE,EAAMmO,aAAc,IAAIC,KAAM,CAAEG,GAAU,CAAEzS,KAAM,6BAAgCkI,IAItFhE,WAAmB,SAACqB,EAAM2C,GAClBwK,IAAAA,EAAMxO,EAAMyO,iBAAiBzK,GAC7BwK,KAAAA,EAAIrO,OAAS,GAAbqO,CAGAA,GAAQ,QAARA,GAAyB,SAARA,EAAe,CAC5BE,IAEAC,EAAO,CAEPC,OAJgB,QAARJ,QASenS,IAAvB2D,EAAMyJ,eAA4BzJ,EAAMyJ,aAAe,IAAI9N,MAAMkT,cAErE7O,EAAMyJ,aAAaqF,MAAOzN,EAAM,SAAE0N,GACzBA,aAAkBC,YACnBhP,EAAMiP,oBAAqBF,EAAQ/K,IAGnCd,QAAQC,IAAK4L,GACb/O,EAAMkP,gBAAgBH,EAAQ/K,KAEnC2K,GAIHH,GAAQ,QAARA,EAAc,MACYnS,IAAtB2D,EAAM0J,cAA2B1J,EAAM0J,YAAc,IAAI/N,MAAMwT,aAE/DJ,IAAAA,EAAS/O,EAAM0J,YAAYoF,MAAMzN,GAErCrB,EAAMsO,aAAaS,EAAQ/K,MAInChE,eAAuB,SAACoP,EAAMpL,GACtBqL,IAAAA,EAAM,IAAIC,MAEdpM,QAAQC,IAAI,wBAAwBiM,GAEpC1S,KAAKiG,IAAI4M,QAAQC,OAAS,EAC1B9S,KAAKiG,IAAI4M,QAAQE,yBAEjB/S,KAAKiJ,UAAU+J,QAAQN,EAAKA,GAC5B1S,KAAKiJ,UAAUgK,OAAQjT,KAAKkT,UAAWlT,KAAKiG,IAAI4M,SAE5CM,IAAAA,EAASnT,KAAKiJ,UAAUmK,WAAWC,YAUhCV,OATPA,EAAIW,IAAMH,EAEN7L,IACAhE,EAAM2J,OAAOkE,KAAOgC,EAAOI,QAAQ,YAAa,sBAChDjQ,EAAM2J,OAAOqE,SAAWhK,EACxBhE,EAAM2J,OAAOsE,SAGjBvR,KAAKwT,YACEb,GAGXrP,uBAA+B,SAAC7D,EAAI4Q,QACrB1Q,IAAPF,QAA6BE,IAAT0Q,IAEpBA,EAAKoD,OAETpD,EAAK3Q,SAASD,GAAKA,KAUvB6D,eAAuB,SAACnE,GAChBuQ,IAAAA,EAAI,IAAIzQ,MAAMyU,kBAAmB,EAAE,EAAE,GAErCjH,EAAM,IAAIxN,MAAM0U,qBAEpBrQ,EAAMkK,cAAcxG,KAAMhH,KAAK4T,SAAS,uBAAyB,SAACC,GAC9DA,EAAIpK,SAAWxK,MAAMyK,aACrB+C,EAAIgE,IAAMoD,IAGVjP,IAAAA,EAAI5E,KAAK8T,gBAAgB3U,GAKtByF,OAJPA,EAAEC,IAAK,IAAI5F,MAAMqR,KAAKZ,IACtB9K,EAAE1B,YAAYuJ,GAEd7H,EAAEhC,gBACKgC,GAIXtB,kBAA0B,SAACnE,GACnBuQ,IAAAA,EAAI,IAAIzQ,MAAMyU,kBAAmB,EAAE,EAAE,GAErCjH,EAAM,IAAIxN,MAAM0U,qBACpBlH,EAAIsH,UAAY,EAEhBzQ,EAAMkK,cAAcxG,KAAMhH,KAAK4T,SAAS,uBAAyB,SAACC,GAC9DA,EAAIpK,SAAWxK,MAAMyK,aACrB+C,EAAIgE,IAAMoD,IAGdvQ,EAAMkK,cAAcxG,KAAMhH,KAAK4T,SAAS,2BAA6B,SAACC,GAClEA,EAAIpK,SAAWxK,MAAMyK,aACrB+C,EAAIuH,aAAeH,EACnBpH,EAAIwH,aAAeJ,IAGvBvQ,EAAMkK,cAAcxG,KAAMhH,KAAK4T,SAAS,2BAA6B,SAACC,GAClEA,EAAIpK,SAAWxK,MAAMyK,aACrB+C,EAAIyH,UAAYL,IAOhBjP,IAAAA,EAAI5E,KAAK8T,gBAAgB3U,GAKtByF,OAJPA,EAAEC,IAAK,IAAI5F,MAAMqR,KAAKZ,IACtB9K,EAAE1B,YAAYuJ,GAEd7H,EAAEhC,gBACKgC,GAIXtB,aAAqB,SAACwG,EAASqK,EAAGC,QACnBzU,IAAPwU,IAAkBA,EAAK,QAChBxU,IAAPyU,IAAkBA,EAAK,GAEvB1E,IAAAA,EAAI,IAAIzQ,MAAMoV,oBAAqBF,EAAIC,GAEvC3H,EAAM,IAAIxN,MAAM0U,0BACJhU,IAAZmK,GAAuBxG,EAAMkK,cAAcxG,KAAK8C,EAAS,SAAC+J,GAC1DA,EAAIpK,SAAWxK,MAAMyK,aACrB+C,EAAIgE,IAAMoD,IAGVjP,IAAAA,EAAI5E,KAAK8T,kBAAkBQ,QAAmB,IAAVC,KAAKC,IAItC5P,OAHPA,EAAEC,IAAK,IAAI5F,MAAMqR,KAAKZ,EAAGjD,IACzB7H,EAAEhC,gBAEKgC,IAIItB,EAAAA,EAAAA,QAAAA,QAAAA;;ACkDAmR,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EA3af,IAAIA,EAAW,CAEfA,SAAoB,EACpBA,SAAoB,EAKpBA,KAAgB,WACZA,EAASC,YAAW/U,EACpB8U,EAASE,cAAWhV,EACpB8U,EAASG,QAAW,EAEpBH,EAASI,WAAY,EAErBJ,EAASK,mBASbL,YAAuB,SAAChT,GACpBgT,EAASG,OAASnT,EAClB+E,QAAQC,IAAI,aAAahF,IAY7BgT,KAAgB,SAACM,EAASC,EAAKC,GAMpBnG,OAHP2F,EAASI,WAAY,EACrBrO,QAAQC,IAAI,kBAAkBuO,GAEvBlG,EAAEoG,QAASH,EAAS,SAAE9N,GACzBwN,EAASE,SAAY1N,EACrBwN,EAASC,OAAYM,EACrBP,EAASI,WAAY,EAIrBJ,EAASU,WAAWlO,GAEhBgO,GAAYA,IAChBjV,KAAKmK,UAAU,kBAAmB6K,MAI1CP,WAAsB,SAACW,GAEfA,QAASzV,KADbyV,OAAiBzV,IAATyV,EAAqBX,EAASE,SAAWS,GAG5C,IAAA,IAAIvT,KAAKuT,EACNX,EAASY,aAAaxT,IAAI4S,EAASY,aAAaxT,GAAIuT,EAAKvT,KAGrE4S,gBAA2B,SAAClT,EAAKnC,QAChBO,IAATP,IAAoBA,EAAOY,KAAKC,OAAOC,OAEvCyG,IAAAA,OAAIhH,EACJoC,EAAW,GAKX4E,GAHAvH,IAASY,KAAKC,OAAOO,MAAOmG,EAAI3G,KAAKsV,gBAAgB/T,IACrDnC,IAASY,KAAKC,OAAOC,QAAOyG,EAAI3G,KAAKuV,aAAahU,SAE5C5B,IAANgH,EAAAA,CAEC,IAAA,IAAI7E,KAAK6E,EAAE5E,SAAS,CACjByT,IAAAA,EAAQ7O,EAAE5E,SAASD,QAELnC,IAAd6V,EAAMjU,KAAmBQ,EAASmG,KAAMsN,EAAMjU,KAG/CQ,OAAAA,IAGX0S,kBAA6B,SAACrV,QACbO,IAATP,IAAoBA,EAAOY,KAAKC,OAAOC,OACvCuV,IAAAA,EAAQzV,KAAKO,OAEbnB,IAASY,KAAKC,OAAOO,MAAKiV,EAAQzV,KAAKU,UACvCtB,IAASY,KAAKC,OAAOU,KAAK8U,EAAQzV,KAAKa,SAEvC6U,IAAAA,EAAQ,GAEP,IAAA,IAAIC,KAAKF,EAAM,CACZ7Q,IAAAA,EAAI6Q,EAAME,GAKV/Q,GAAKA,EAAEN,QAAUM,EAAEN,OAAO/C,WAEE5B,IAAxB+V,EAAM9Q,EAAEN,OAAO/C,OAAoBmU,EAAM9Q,EAAEN,OAAO/C,KAAO,IAC7DmU,EAAM9Q,EAAEN,OAAO/C,KAAK2G,KAAKtD,EAAErD,MAM5BmU,OAAAA,GAGXjB,2BAAsC,SAACmB,GAC/BC,IAAAA,EAAI7V,KAAKsV,gBAAgBM,GACzBC,QAAMlW,IAANkW,EAAAA,CAEAC,IAAAA,EAAK,GAEJ,IAAA,IAAI5T,KAAK2T,EAAE9T,SAAS,CACjBgU,IAAAA,EAASF,EAAE9T,SAASG,GACpB6T,EAAO3W,MACP0W,EAAG5N,KAAK,CACJ8I,WAAW+E,EAAO1Q,SAASH,EAAE+L,YAAY,IACzCD,WAAW+E,EAAO1Q,SAASF,EAAE8L,YAAY,IACzCD,WAAW+E,EAAO1Q,SAASD,EAAE6L,YAAY,IACzCD,WAAW+E,EAAOpQ,MAAMT,EAAE+L,YAAY,MAK3C6E,OAAAA,IAGXrB,4BAAuC,SAACmB,GAChCC,IAAAA,EAAI7V,KAAKsV,gBAAgBM,GACzBC,QAAMlW,IAANkW,EAAAA,CAEAG,IAAAA,EAAK,GAEJ,IAAA,IAAI9T,KAAK2T,EAAE9T,SAAS,CACjBkU,IAAAA,EAASJ,EAAE9T,SAASG,GACpB+T,EAAOvW,SAASwW,eAChBF,EAAG9N,KAAK+N,EAAOvW,SAASwW,eAMzBF,OAAAA,IAIXvB,gBAA2B,WACvBA,EAASY,aAAe,GAGxBZ,EAASY,aAAac,YAAc,SAACC,GAE7BC,IAAAA,EAAOD,EAAIE,SACXF,EAAIE,WACAD,EAAKlQ,KAAKnG,KAAKuW,gBAAgBvW,KAAKwW,gBAAgBH,EAAKlQ,KACzDkQ,EAAKtQ,UAAU/F,KAAKyW,wBAAwBJ,EAAKtQ,WAGrD2Q,IAAAA,EAAIN,EAAIO,UACRD,IACIA,EAAEE,WAAW5W,KAAK6W,sBAAuB,IAAI5X,MAAMyE,QAAQgT,EAAEE,UAAU,GAAGF,EAAEE,UAAU,GAAGF,EAAEE,UAAU,KAErG5W,KAAK8W,UACDJ,EAAEvK,QAAWnM,KAAK8W,QAAQ3K,MAAQ,IAAIlN,MAAMoM,MAAMqL,EAAEvK,MAAM,GAAGuK,EAAEvK,MAAM,GAAGuK,EAAEvK,MAAM,KAChFuK,EAAEK,YAAW/W,KAAK8W,QAAQC,UAAYL,EAAEK,WAExCL,EAAEM,SAAShX,KAAKiX,cAAcP,EAAEM,WAIxCE,IAAAA,EAAMd,EAAIe,YACVD,GACIA,EAAIE,MAAMpX,KAAKqX,WAAU,IAMrC5C,EAASY,aAAaiC,QAAU,SAACA,QACb3X,IAAZ2X,GAEJtX,KAAKiG,IAAIsR,WAAWD,IAIxB7C,EAASY,aAAamC,WAAa,SAACC,GAC5BA,QAAS9X,IAAT8X,EAEC,IAAA,IAAIpT,KAAKoT,EAAK,CACXrP,IAAAA,EAAMqP,EAAKpT,GAEL,SAANA,EACArE,KAAKiG,IAAIyR,YACL,IAAI1X,KAAKyH,KACRkQ,YAAYvP,EAAI/C,SAAS,GAAG+C,EAAI/C,SAAS,GAAG+C,EAAI/C,SAAS,IACzDuS,UAAUxP,EAAIV,OAAO,GAAGU,EAAIV,OAAO,GAAGU,EAAIV,OAAO,IACjDmQ,OAAOzP,EAAIP,KACXiQ,YAAY1P,EAAI2P,WAIjB/X,IAAAA,KAAKyH,IAAIpD,GACZsT,YAAYvP,EAAI/C,UAChBuS,UAAUxP,EAAIV,QACdmQ,OAAOzP,EAAIP,KACXiQ,YAAY1P,EAAI2P,YAM7BtD,EAASY,aAAa2C,WAAa,SAACC,GAC5BA,QAAOtY,IAAPsY,EAAAA,CAEAxC,IAAAA,EAAQwC,EAAGxC,MACXC,EAAQuC,EAAGvC,MAGNnU,EAAAA,SAAAA,GACDqD,IAAAA,EAAI6Q,EAAMlU,GAGV2W,EAAIlY,KAAKmY,qBAAqB5W,GAAK6W,iBAGnCC,EAAOzT,EAAEyT,KACTA,IACIC,MAAMC,QAAQF,GACdA,EAAKG,QAAQ,SAAAC,GACTzY,KAAK8T,kBAAkB9M,KAAKhH,KAAKwW,gBAAgBiC,GAAGC,SAASR,KAIjEA,EAAElR,KAAKhH,KAAKwW,gBAAgB6B,IAKhCzT,EAAE+T,YAAeT,EAAEU,cAAchU,EAAE+T,YACnC/T,EAAEiU,eAAeX,EAAEU,cAAchU,EAAEiU,eAEnCjU,EAAEkU,OAAOZ,EAAEa,SAGXnU,EAAEmT,WAAUG,EAAEnX,OAAS6D,EAAEmT,UAGzBiB,IAAAA,EAAYpU,EAAEoU,UACdA,IACIA,EAAU3T,UAAU6S,EAAEP,YAAYqB,EAAU3T,SAAS,GAAG2T,EAAU3T,SAAS,GAAG2T,EAAU3T,SAAS,IACjG2T,EAAUjT,UAAUmS,EAAEe,YAAYD,EAAUjT,SAAS,GAAGiT,EAAUjT,SAAS,GAAGiT,EAAUjT,SAAS,IACjGiT,EAAUrT,OAAUuS,EAAEgB,SAASF,EAAUrT,MAAM,GAAGqT,EAAUrT,MAAM,GAAGqT,EAAUrT,MAAM,MAjC5F,IAAA,IAAIpE,KAAOkU,EAAPlU,EAAAA,GAsCJ,IAAA,IAAI4X,KAASzD,EAAM,CAChB3T,IAAAA,EAAW2T,EAAMyD,GAEjBxS,EAAI3G,KAAKuV,aAAa4D,GAEtBxS,QAAMhH,IAANgH,EACK,IAAA,IAAI7E,KAAKC,EAAS,CACfqX,IAAAA,EAAUrX,EAASD,GACnBE,EAAIhC,KAAKuV,aAAa6D,QAChBzZ,IAANqC,GAAiBA,EAAE0W,SAAS/R,OAoBhD8N,EAASY,aAAagE,cAAgB,SAACpB,GAC/BA,QAAOtY,IAAPsY,EAAAA,CAEAxC,IAAAA,EAAQwC,EAAGxC,MACXC,EAAQuC,EAAGvC,MAGNnU,EAAAA,SAAAA,GACDqD,IAAAA,EAAI6Q,EAAMlU,GAGV2W,EAAIlY,KAAKsZ,wBAAwB/X,GAAK6W,iBAGtCC,EAAOzT,EAAEyT,KACTA,IACIC,MAAMC,QAAQF,GACdA,EAAKG,QAAQ,SAAAC,GACTzY,KAAKuZ,qBAAqBvS,KAAKhH,KAAKwW,gBAAgBiC,GAAGC,SAASR,KAIpEA,EAAElR,KAAKhH,KAAKwW,gBAAgB6B,IAIhCzT,EAAEkU,OAAOZ,EAAEa,SAEXnU,EAAEzC,aAAa+V,EAAEsB,eAAe5U,EAAEzC,aAClCyC,EAAEvC,OAAO6V,EAAEuB,SAAS7U,EAAEvC,OAGtBuC,EAAEmT,WAAUG,EAAEnX,OAAS6D,EAAEmT,UAGzB2B,IAAAA,EAAU9U,EAAE8U,QACZpB,GAAAA,MAAMC,QAAQmB,GACT,IAAA,IAAIxX,KAAKwX,EAAQ,CACd7D,IAAAA,EAAI6D,EAAQxX,GAChBlC,KAAK2Z,WAAWC,aAAarY,EAAK,IAAItC,MAAMyE,QAAQmS,EAAE,GAAGA,EAAE,GAAGA,EAAE,IAAKA,EAAE,IAI3EgE,IAAAA,EAAejV,EAAEiV,aACjBvB,GAAAA,MAAMC,QAAQsB,GACT,IAAA,IAAI3X,KAAK2X,EAAa,CAIlB,IAHDhE,IAAAA,EAAIgE,EAAa3X,GAEjB4X,EAAS,GACJ9V,EAAE,EAAGA,EAAE6R,EAAEpS,OAAQO,GAAG,EAAE,CACvBK,IAAAA,EAAI,IAAIpF,MAAMyE,QAAQmS,EAAE7R,GAAG6R,EAAE7R,EAAE,GAAG6R,EAAE7R,EAAE,IAC1C8V,EAAO5R,KAAK7D,GAGhBrE,KAAK2Z,WAAWI,kBAAkBxY,EAAKuY,KA/C9C,IAAA,IAAIvY,KAAOkU,EAAPlU,EAAAA,GAsDJ,IAAA,IAAI4X,KAASzD,EAAM,CAChB3T,IAAAA,EAAW2T,EAAMyD,GAEjBxS,EAAI3G,KAAKsV,gBAAgB6D,GAEzBxS,QAAMhH,IAANgH,EACK,IAAA,IAAI7E,KAAKC,EAAS,CACfqX,IAAAA,EAAUrX,EAASD,GACnBE,EAAIhC,KAAKsV,gBAAgB8D,QACnBzZ,IAANqC,GAAiBA,EAAE0W,SAAS/R,QAuBpD8N,eAA0B,SAAC5S,EAAGmY,GAC1BvF,EAASY,aAAaxT,GAAKmY,GAK/BvF,SAAoB,SAACwF,EAAOC,EAAM9T,GAC1BqO,IAAAA,EAASI,WAAcJ,EAASG,aACtBjV,IAAVsa,EAAAA,MACSta,IAATua,IAAoBA,EAAOzF,EAAS0F,UAEpCnF,IAAAA,EAAMP,EAASC,OAEf0F,EAAI,GACRA,EAAEpF,IAAOA,EACToF,EAAEnT,KAAOgT,EACTG,EAAEF,KAAQA,IAASzF,EAAS4F,SAAW,MAAQ,MAE3CC,IAAAA,EAAOpL,KAAKC,UAAUiL,GAG1BtL,EAAEC,KAAK,CACH5I,IAAKnG,KAAKua,aAAa,aACvBnb,KAAK,OACL6H,KAAMqT,EACNlL,YAAY,kCACZC,SAAS,OAITC,QAAS,SAACkL,QACI7a,IAAN6a,IAEJ/F,EAASE,SAAW6F,EAGhBpU,GAAYA,WAMbqO,EAAAA,EAAAA,QAAAA,QAAAA;;ACwUAxO,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EAxvBf,IAAMwU,EAAkB,SAASvV,GAAW,OAAC,EAAMqP,KAAKmG,IAAIxV,EAAIqP,KAAKC,KAAO,GAMxEvO,EAAM,CAGVA,QAAe,GACfA,SAAe,IACfA,QAAe,IAEfA,OAAa,IACbA,uBAA6B,EAG7BA,WAAkB,EAClBA,QAAkB,EAClBA,YAAkB,GAGlBA,EAAI0U,sBAAwB1U,EAAI2U,uBAMhC3U,EAAI4U,KAAO,WACP5U,EAAI6U,WAAQnb,EAEZsG,EAAI8U,eAAiB,GACrB9U,EAAI+U,aAAkB,GACtB/U,EAAIgV,SAAiB,EAMrBhV,EAAIiV,kBAGJjV,EAAIkV,SAAW,IAAInb,KAAKyH,IACxBxB,EAAImV,SAAW,IAAIpb,KAAKyH,IACxBxB,EAAIoV,QAAW,IAAIrb,KAAKyH,IAExBxB,EAAIqV,aAAU3b,EAEdsG,EAAIsV,WAAa,EACjBtV,EAAIuV,cAAgB,EAEpBvV,EAAIgC,QAAU,GAIdhC,EAAIwV,MAAQ,IAAIxc,MAAMyE,QAAQ,EAAE,EAAE,GAClCuC,EAAIC,MAAQ,IAAIjH,MAAMyc,WAGtBzV,EAAI0V,WAAa,EACjB1V,EAAI2V,WAAa,IAAI3c,MAAMyE,QAAQ,EAAE,EAAE,IAS3CuC,EAAI4V,sBAAwB,WACjB5V,OAAAA,EAAIkV,SAAShX,KASxB8B,EAAI6V,oBAAsB,WACf7V,OAAAA,EAAIwV,OASfxV,EAAI8V,eAAiB,WACb3T,IAAAA,EAAM,IAAIpI,KAAKyH,IAKZW,OAJPA,EAAIjE,IAAImB,KAAKW,EAAIkV,SAAShX,KAC1BiE,EAAIV,OAAOpC,KAAKW,EAAIkV,SAASzT,QAC7BU,EAAIP,IAAM5B,EAAIkV,SAAStT,IAEhBO,GAOXnC,EAAI+V,gBAAkB,WACd/V,OAAAA,EAAIsV,WAAa,GAQzBtV,EAAIgW,QAAU,WAAchW,OAAAA,EAAI6U,QAAU7U,EAAIiW,YAM9CjW,EAAIkW,cAAgB,WAAclW,OAAAA,EAAI6U,QAAU7U,EAAImW,SAMpDnW,EAAIoW,SAAW,WAAcpW,OAAAA,EAAI6U,QAAU7U,EAAIqW,aAM/CrW,EAAIsR,WAAa,SAACD,QACE3X,IAAZ2X,IAEAA,IAAYrR,EAAIiW,YAAajW,EAAIiV,kBACjC5D,IAAYrR,EAAImW,SAAanW,EAAIsW,wBACjCjF,IAAYrR,EAAIqW,aAAarW,EAAIuW,gCAMzCvW,EAAIiV,gBAAkB,WACdlb,IAAAA,KAAKyc,GAAGC,eAAR1c,CAKAiG,GAHJA,EAAI6U,MAAQ7U,EAAIiW,gBAGIvc,IAAhBsG,EAAI0W,QAAsB,CAC1B1W,EAAI2W,UAAY,IAAI3d,MAAM4d,kBAAmB5W,EAAI6B,QAAS4F,OAAOoP,WAAapP,OAAOqP,YAAa9W,EAAI+W,SAAU/W,EAAI2C,SACpH3C,EAAI2W,UAAUra,OAAO0a,YAErBhX,EAAI0W,QAAU,IAAI1d,MAAMie,cAAejX,EAAI2W,UAAW5c,KAAKiJ,UAAUmK,YAEjEpR,IAAAA,EAAIiE,EAAI0W,QAEZ3a,EAAEmb,YAAgBlX,EAAI8U,eACtB/Y,EAAEob,WAAgB,EAEdnX,EAAIgV,SAAW,IACfjZ,EAAEqb,eAAgB,EAClBrb,EAAEsb,cAAgB,IAGtBtb,EAAEub,oBAAqB,EAEvBvb,EAAEwb,YAAc,EAChBxb,EAAEyb,YAAc,IAChBzb,EAAE0b,YAAc,IAEhB1b,EAAE2b,iBAAiB,SAAU,WAAQ1X,EAAI2X,iBAAkB,IAG/D3X,EAAI4X,UAAY5X,EAAI0W,QAEpB1W,EAAI4M,QAAU5M,EAAI2W,UAElB3W,EAAI4X,UAAUje,SACVqG,EAAIkV,UAAUlV,EAAI6X,mBAM1B7X,EAAIsW,sBAAwB,WACpBvc,IAAAA,KAAKyc,GAAGC,eAAR1c,CAKAiG,GAHJA,EAAI6U,MAAQ7U,EAAImW,aAGUzc,IAAtBsG,EAAI8X,cAA4B,CAChC9X,EAAI+X,OAAS,IAAI/e,MAAM4d,kBAAmB5W,EAAI6B,QAAS4F,OAAOoP,WAAapP,OAAOqP,YAAa9W,EAAI+W,SAAU/W,EAAI2C,SACjH3C,EAAI+X,OAAOzb,OAAO0a,YAElBhX,EAAI8X,cAAgB,IAAI9e,MAAMie,cAAejX,EAAI+X,OAAQhe,KAAKiJ,UAAUmK,YAEpEpR,IAAAA,EAAIiE,EAAI8X,cAEZ/b,EAAEwb,YAAc,EAChBxb,EAAEob,WAAc,EAChBpb,EAAEmb,YAAclX,EAAI+U,YAEhB/U,EAAIgV,SAAW,IACfjZ,EAAEqb,eAAgB,EAClBrb,EAAEsb,cAAgB,IAKtBtb,EAAE0F,OAAOpC,KAAKW,EAAI4M,QAAQxN,UAE1BrD,EAAEyb,YAAc,IAChBzb,EAAE0b,YAAc,IAGpBzX,EAAI4X,UAAY5X,EAAI8X,cAEpB9X,EAAI4M,QAAU5M,EAAI+X,OAElB/X,EAAI4X,UAAUje,SACVqG,EAAIkV,UAAUlV,EAAI6X,mBAoB1B7X,EAAIuW,4BAA8B,WACzBxc,KAAKsD,MAAMsK,aAEhB3H,EAAI6U,MAAQ7U,EAAIqW,YAChBtc,KAAKie,qBAAqB1Y,IAAI,EAAI,QAGb5F,IAAjBsG,EAAIiY,WACJjY,EAAIkY,WAAa,IAAIlf,MAAM4d,kBAAmB5W,EAAI6B,QAAS4F,OAAOoP,WAAapP,OAAOqP,YAAa9W,EAAI+W,SAAU/W,EAAI2C,SACrH3C,EAAIkY,WAAW5b,OAAO0a,YAEtBhX,EAAIiY,SAAW,IAAIjf,MAAMmf,0BAA0BnY,EAAIkY,WAAYne,KAAKiJ,UAAUmK,YAGlFnN,EAAIiY,SAASG,YAAc,GAG/BpY,EAAI4X,UAAY5X,EAAIiY,SACpBjY,EAAI4M,QAAY5M,EAAIkY,WAEpBlY,EAAI4X,UAAUje,SACVqG,EAAIkV,UAAUlV,EAAI6X,mBAS1B7X,EAAIqY,gBAAkB,SAACnb,GACnB8C,EAAI0V,WAAaxY,GASrB8C,EAAIsY,mBAAqB,SAACzN,GACtB7K,EAAI2V,WAAWtW,KAAKwL,IAMxB7K,EAAIuY,KAAO,WACPvY,EAAI0V,WAAa,GAUrB1V,EAAI4R,OAAS,SAAC1U,GACNnD,IAAAA,KAAKyc,GAAGC,eAAR1c,CAEJiG,EAAIkV,SAAStT,IAAM1E,EAEfsb,IAAAA,EAAMxY,EAAI4M,QACd4L,EAAI5W,IAAM1E,EACVsb,EAAI1L,2BAOR9M,EAAIyY,OAAS,WACFzY,OAAAA,EAAIkV,SAAStT,KAKxB5B,EAAI0Y,YAAc,WACV3e,GAAAA,KAAKyc,GAAGC,eAAe,CAEnB1a,IAAAA,EAAIhC,KAAKiJ,UAAUiF,GAAG0Q,UAAU3Y,EAAI4M,SAcxC,OAbA7Q,EAAE6c,iBAAkB5Y,EAAIkV,SAAShX,KACjCnC,EAAE8c,mBAAoB7Y,EAAIC,YAC1BlE,EAAE+c,kBAAmB9Y,EAAIwV,OAczBuD,IAAAA,EAAQ/Y,EAAI4X,UACZY,EAAQxY,EAAI4M,QAKZ5M,GAHJwY,EAAIM,kBAAkB9Y,EAAIwV,OAC1BgD,EAAIK,mBAAmB7Y,EAAIC,OAEvBD,EAAI6U,QAAU7U,EAAIqW,YAAlBrW,CAKAA,GAAAA,EAAI6U,QAAU7U,EAAImW,QAMlB,OALAnW,EAAIkV,SAAShX,IAAImB,KAAK0Z,EAAKtX,QAE3BzB,EAAIkV,SAASzT,OAAOxC,EAAIe,EAAIkV,SAAShX,IAAIe,EAAIe,EAAIwV,MAAMvW,EACvDe,EAAIkV,SAASzT,OAAOvC,EAAIc,EAAIkV,SAAShX,IAAIgB,EAAIc,EAAIwV,MAAMtW,OACvDc,EAAIkV,SAASzT,OAAOtC,EAAIa,EAAIkV,SAAShX,IAAIiB,EAAIa,EAAIwV,MAAMrW,GAI3Da,EAAIkV,SAAShX,IAAImB,KAAKmZ,EAAIpZ,UAC1BY,EAAIkV,SAASzT,OAAOpC,KAAK0Z,EAAKtX,aAd1BzB,EAAIkV,SAAShX,IAAImB,KAAKmZ,EAAIpZ,WAmBlCY,EAAIgZ,UAAY,WAGRjf,KAAKyc,GAAGC,eAAgBzW,EAAIiZ,qBAC3BjZ,EAAIkZ,sBAETlZ,EAAImZ,gBAQRnZ,EAAImZ,aAAe,WACXnZ,IAAAA,EAAI+V,mBAEc,GAAlB/V,EAAI0V,WAAkB,CAKlB3b,KAAKyc,GAAG4C,aAAerf,KAAKyc,GAAG4C,YAAY/c,SAC3CtC,KAAKyc,GAAG4C,YAAYN,kBAAkB9Y,EAAI2V,YAC1C3V,EAAI2V,WAAW0D,UAEdrZ,EAAI2V,WAAWtW,KAAKW,EAAIwV,OAEzB8D,IAAAA,EAAKtZ,EAAI2V,WAAWxX,QACxBmb,EAAGC,eAAevZ,EAAI0V,WAAa3b,KAAKyf,KAExCxZ,EAAIkV,SAAShX,IAAIU,IAAI0a,GACrBtZ,EAAIkV,SAASzT,OAAO7C,IAAI0a,KAIhCtZ,EAAIkZ,oBAAsB,WAClBlZ,KAAAA,EAAIsV,UAAY,GAAhBtV,CAMAA,GAJAA,EAAI0U,uBAAyB,EAAK1U,EAAIuV,cAAgB,EACrDvV,EAAIuV,eAAiBxb,KAAK0f,OAAOC,YAAc1Z,EAAIsV,WAAatV,EAAI0U,sBAGrE1U,EAAIuV,eAAiB,EAUrB,OARAvV,EAAIsV,WAAa,EAGjBtV,EAAIkV,SAAShX,IAAImB,KAAKW,EAAIoV,QAAQlX,KAClC8B,EAAIkV,SAASzT,OAAOpC,KAAKW,EAAIoV,QAAQ3T,QACrCzB,EAAIkV,SAAStT,IAAM5B,EAAIoV,QAAQxT,SAE/B7H,KAAKmK,UAAU,yBAA0BlE,EAAIoV,QAAQlc,IAIzD8G,EAAIuV,cAAgBf,EAAgBxU,EAAIuV,eAExCvV,EAAIkV,SAAShX,IAAIyb,YAAY3Z,EAAImV,SAASjX,IAAK8B,EAAIoV,QAAQlX,IAAK8B,EAAIuV,eACpEvV,EAAIkV,SAASzT,OAAOkY,YAAY3Z,EAAImV,SAAS1T,OAAQzB,EAAIoV,QAAQ3T,OAAQzB,EAAIuV,eAExEvV,EAAImV,SAASvT,KAAQ5B,EAAIoV,QAAQxT,MACtC5B,EAAIkV,SAAStT,IAAM5I,MAAM4gB,UAAUC,KAAK7Z,EAAImV,SAASvT,IAAK5B,EAAIoV,QAAQxT,IAAK5B,EAAIuV,eAI/EvV,EAAI4M,QAAQhL,IAAM5B,EAAIkV,SAAStT,IAC/B5B,EAAI4M,QAAQE,4BAIhB9M,EAAIiZ,mBAAqB,WACjBjZ,KAAAA,EAAIsV,UAAY,GAAhBtV,CAMAA,GAJAA,EAAI0U,uBAAyB,EAAK1U,EAAIuV,cAAgB,EACrDvV,EAAIuV,eAAiBxb,KAAK0f,OAAOC,YAAc1Z,EAAIsV,WAAatV,EAAI0U,sBAGrE1U,EAAIuV,eAAiB,EAWrB,OATAvV,EAAIsV,WAAa,EAKjB/U,QAAQC,IAAI,YAAYzG,KAAKyc,GAAGsD,SAAS5a,GACzCqB,QAAQC,IAAI,aAAaR,EAAIkV,SAAShX,IAAIgB,QAE1CnF,KAAKmK,UAAU,yBAA0BlE,EAAIoV,QAAQlc,IAIzDa,KAAKyc,GAAGsD,SAASH,YAAY5f,KAAKyc,GAAGuD,SAAUhgB,KAAKyc,GAAGwD,QAASha,EAAIuV,iBAMxEvV,EAAI6X,eAAiB,WACbkB,IAAAA,EAAQ/Y,EAAI4X,UACZY,EAAQxY,EAAI4M,QAEZ1O,EAAM8B,EAAIkV,SAAShX,IACnB+b,EAAMja,EAAIkV,SAASzT,OAGnB1H,KAAKyc,GAAGC,iBAWRzW,EAAI6U,QAAU7U,EAAIqW,aAOtBrW,EAAIwV,MAAM0E,WAAWD,EAAK/b,GAC1B8B,EAAIwV,MAAM2E,YAENna,EAAI6U,QAAU7U,EAAImW,SAClB4C,EAAKtX,OAAOpC,KAAKnB,GAEjBsa,EAAIpZ,SAASH,EAAI8Z,EAAKtX,OAAOxC,EAAKe,EAAIwV,MAAMvW,EAAIe,EAAIoa,OACpD5B,EAAIpZ,SAASF,EAAI6Z,EAAKtX,OAAOvC,EAAKc,EAAIwV,MAAMtW,EAAIc,EAAIoa,OACpD5B,EAAIpZ,SAASD,EAAI4Z,EAAKtX,OAAOtC,EAAKa,EAAIwV,MAAMrW,EAAIa,EAAIoa,SAGpD5B,EAAIpZ,SAASC,KAAKnB,GAClB6a,EAAKtX,OAAOpC,KAAK4a,KAlBjBzB,EAAIpZ,SAASC,KAAKnB,KAuB1B8B,EAAIrG,OAAS,WAITqG,EAAI0Y,cACJ1Y,EAAIgZ,YACJhZ,EAAI6X,kBAWR7X,EAAIqa,WAAa,SAAClY,EAAKmY,GACfvgB,KAAKub,WAAa,IAEtBvb,KAAKmK,UAAU,yBAA0B/B,EAAIjJ,SAE5BQ,IAAb4gB,IAAwBta,EAAI0U,sBAAwB4F,GAIxDta,EAAIsV,UAAYvb,KAAK0f,OAAOC,YAExB3f,KAAKyc,GAAGC,gBACRzW,EAAIoV,QAAQlX,IAAImB,KAAK8C,EAAIjE,IAAKiE,EAAIjE,IAAM8B,EAAIkV,SAAShX,KACrD8B,EAAImV,SAASjX,IAAImB,KAAKW,EAAIkV,SAAShX,KAEnCnE,KAAKyc,GAAGwD,QAAQ3a,KAAK8C,EAAIjE,IAAKiE,EAAIjE,IAAM8B,EAAIkV,SAAShX,KACrDnE,KAAKyc,GAAGuD,SAAS1a,KAAKtF,KAAKyc,GAAGsD,YAG9B9Z,EAAIoV,QAAQlX,IAAImB,KAAK8C,EAAIjE,IAAKiE,EAAIjE,IAAM8B,EAAIkV,SAAShX,KACrD8B,EAAIoV,QAAQ3T,OAAOpC,KAAM8C,EAAIV,OAAQU,EAAIV,OAASzB,EAAIkV,SAASzT,QAC/DzB,EAAIoV,QAAQxT,IAAMO,EAAIP,IAAKO,EAAIP,IAAM5B,EAAIkV,SAAStT,IAElD5B,EAAImV,SAASjX,IAAImB,KAAKW,EAAIkV,SAAShX,KACnC8B,EAAImV,SAAS1T,OAAOpC,KAAKW,EAAIkV,SAASzT,QACtCzB,EAAImV,SAASvT,IAAM5B,EAAIkV,SAAStT,OAKxC5B,EAAIua,kBAAoB,SAACzb,EAAIwb,GACrBxb,QAAOpF,IAAPoF,EAAAA,CAEA0b,IAAAA,EAAI,IAAIxhB,MAAMyE,QACdgd,EAAI,IAAIzhB,MAAMyE,QAElB+c,EAAEnb,KAAKP,EAAGoL,QAENqK,IAAAA,EAAgB,IAAZzV,EAAG4b,OACXD,EAAExb,EAAIub,EAAEvb,EAAKsV,EAAIvU,EAAIwV,MAAMvW,EAC3Bwb,EAAEvb,EAAIsb,EAAEtb,EAAKqV,EAAIvU,EAAIwV,MAAMtW,EAC3Bub,EAAEtb,EAAIqb,EAAErb,EAAKoV,EAAIvU,EAAIwV,MAAMrW,EAEvBgD,IAAAA,GAAM,IAAIpI,KAAKyH,KAAMkQ,YAAY+I,GAAG9I,UAAU6I,GAClDxa,EAAIqa,WAAWlY,EAAKmY,KAUxBta,EAAI2a,iBAAmB,SAACjL,EAAG4K,GACnB5K,QAAMhW,IAANgW,EAAAA,CAEA5Q,IAAAA,EAAK4Q,EAAEkL,WAEX5a,EAAIua,kBAAkBzb,EAAGwb,KAG7Bta,EAAI6a,gBAAkB,SAACC,EAAOC,EAAQT,GAC9Bzd,IAAAA,EAAI,IAAI7D,MAAMyE,QACdsd,QAAWrhB,IAAXqhB,EACAle,EAAE8c,YAAYmB,EAAO9a,EAAIkV,SAAShX,IAAK,QAEtC,CACGF,IAAAA,EAAI8c,EAAME,WAAWhb,EAAIkV,SAAShX,KACtCF,GAAK,GACLnB,EAAEoC,EAAI6b,EAAM7b,EAAK8b,EAAO9b,EAAIjB,EAC5BnB,EAAEqC,EAAI4b,EAAM5b,EAAK6b,EAAO7b,EAAIlB,EAC5BnB,EAAEsC,EAAI2b,EAAM3b,EAAK4b,EAAO5b,EAAInB,EAG5BmE,IAAAA,GAAM,IAAIpI,KAAKyH,KAAMkQ,YAAY7U,GAAG8U,UAAUmJ,GAAOlJ,OAAO5R,EAAIkV,SAAStT,KAC7ErB,QAAQC,IAAI2B,GAEZnC,EAAIqa,WAAWlY,EAAKmY,IAUxBta,EAAIib,mBAAqB,SAACC,QACXxhB,IAAPwhB,IAAkBA,EAAK,IAAIliB,MAAMyE,QAAQ,EAAE,GAAI,IAE/C0d,IAAAA,EAAUphB,KAAKqhB,eAAeR,WAE9BS,EAAM,IAAIriB,MAAMyE,QAChB0d,EAAQjR,OAAOjL,EAAKkc,EAAQT,OAASQ,EAAGjc,EAAI,IAC5Ckc,EAAQjR,OAAOhL,EAAKic,EAAQT,OAASQ,EAAGhc,EAAI,IAC5Cic,EAAQjR,OAAO/K,EAAKgc,EAAQT,OAASQ,EAAG/b,EAAI,KAGhDa,EAAIqV,SAAU,IAAItb,KAAKyH,KAAMkQ,YAAY2J,GAAK1J,UAAUwJ,EAAQjR,SAOpElK,EAAIyR,WAAa,SAACtP,GACdnC,EAAIqV,QAAUlT,GAGlBnC,EAAIsb,6BAA+B,SAAChB,EAAUY,GAC1Clb,EAAIib,mBAAmBC,GACvBlb,EAAIqa,WAAWra,EAAIqV,QAASiF,IAOhCta,EAAIub,YAAc,SAACjB,GACfta,EAAIqa,WAAWra,EAAIqV,QAASiF,IAUhCta,EAAImY,0BAA4B,SAAW5O,GACnCiS,IAAAA,EAAQ,KAEPjS,KAAAA,OAASA,EACTA,KAAAA,OAAOzJ,SAAS2b,QAAS,OACzBC,KAAAA,SAAU,EAEVC,KAAAA,kBAAoB,GACpBC,KAAAA,kBAAoB,EAEpBxD,KAAAA,YAAc,EACdyD,KAAAA,UAAW,EACXC,KAAAA,uBAAoBpiB,EACpBqiB,KAAAA,uBAAoBriB,EAErBsiB,IAgBIC,EACAC,EAEAC,EACAC,EApBJJ,EAAiC,SAAWK,GACzCb,EAAMK,WACTL,EAAMG,kBAAoBU,IAG1BC,EAAyC,SAAWD,GACpDb,EAAMG,kBAAoBU,EAC1Bb,EAAMK,UAAW,GAGjBU,EAAiC,WACjCf,EAAMI,kBAAoBnU,OAAO+U,aAAe,GAIhDC,GACIR,EAAM,IAAIjjB,MAAMyE,QAAS,EAAG,EAAG,GAC/Bye,EAAQ,IAAIljB,MAAM0jB,MAElBP,EAAK,IAAInjB,MAAMyc,WACf2G,EAAK,IAAIpjB,MAAMyc,YAAcnH,KAAKqO,KAAM,IAAO,EAAG,EAAGrO,KAAKqO,KAAM,KAE7D,SAAW5c,EAAY6c,EAAOC,EAAMC,EAAOC,GAC9Cb,EAAM5c,IAAKud,EAAMD,GAASE,EAAO,OACjC/c,EAAWid,aAAcd,GACzBnc,EAAWkd,SAAUb,GACrBrc,EAAWkd,SAAUd,EAAGe,iBAAkBjB,GAAOc,MAKpDI,KAAAA,QAAU,WACXZ,IAEA9U,OAAOiQ,iBAAkB,oBAAqB6E,GAAgC,GAC9E9U,OAAOiQ,iBAAkB,oBAAqBsE,GAAgC,GAC9EvU,OAAOiQ,iBAAkB,4BAA6B4E,GAAwC,GAE9Fd,EAAME,SAAU,GAGf0B,KAAAA,WAAa,WACd3V,OAAO4V,oBAAqB,oBAAqBd,GAAgC,GACjF9U,OAAO4V,oBAAqB,oBAAqBrB,GAAgC,GACjFvU,OAAO4V,oBAAqB,4BAA6Bf,GAAwC,GAEjGd,EAAME,SAAU,GAGf/hB,KAAAA,OAAS,WAGNgN,IAAAA,EAFC6U,IAAkB,IAAlBA,EAAME,UAGX/U,EAAS6U,EAAMG,mBAED,CACNiB,IAAAA,EAAQ,KAAKU,eAAiBtkB,MAAMsV,KAAKiP,SAAU,KAAKD,gBAAmB9B,EAAMpD,YAAc,EAC/FyE,EAAOlW,EAAOkW,KAAO7jB,MAAMsV,KAAKiP,SAAU5W,EAAOkW,MAAS,EAE1DC,EAAQnW,EAAOmW,MAAQ9jB,MAAMsV,KAAKiP,SAAU5W,EAAOmW,OAAU,EAC7DC,EAASvB,EAAMI,kBAAoB5iB,MAAMsV,KAAKiP,SAAU/B,EAAMI,mBAAsB,EAExFa,EAAqBjB,EAAMjS,OAAOxJ,WAAY6c,EAAOC,EAAMC,EAAOC,KAKrExe,KAAAA,QAAU,WACXid,EAAM4B,cAGLI,KAAAA,yBAA2B,WAC4B,mBAA7CC,uBAAuBC,mBAC9BD,uBAAuBC,oBAAoBrd,KAAK,SAAAsd,GAK5Cpd,QAAQC,IAAImd,KACbC,MAAMrd,QAAQsd,QAIpBP,KAAAA,aAAe,WACR,YAAuD,IAAhD9B,EAAMG,kBAAkBmC,qBAAuCtC,EAAMG,kBAAkBmC,qBAAuBtC,EAAMG,kBAAkBiB,OAGpJmB,KAAAA,gBAAkB,WACX,YAAuD,IAAhDvC,EAAMG,kBAAkBmC,qBAAwC,IAAMtC,EAAMG,kBAAkBmC,qBAAwBtC,EAAMG,kBAAkBiB,OAG5JO,KAAAA,WAIMnd,IAAAA,EAAAA,EAAAA,QAAAA,QAAAA;;ACtQAwW,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EA9ef,IAAIA,EAAK,CAETA,mBAAwB,IACxBA,OAAY,EACZA,OAAY,EAIZA,KAAU,WACNzc,KAAKiJ,UAAUiF,GAAGyT,SAAU,EAC5B3hB,KAAKiJ,UAAUiF,GAAG+V,sBAAuB,SAErCjkB,KAAK4M,OAAOgB,UAAU5N,KAAKiJ,UAAUiF,GAAGgW,0BAA0B,IAEtEzH,EAAG0H,cAAe,EAClB1H,EAAG2H,YAAc,KAEjB3H,EAAG4H,IAAM,IAAIplB,MAAMC,MAEnBud,EAAG4H,IAAIxf,IAAK7E,KAAKiG,IAAI4M,SACrB7S,KAAKY,QAAQiE,IAAI4X,EAAG4H,KAKpB5H,EAAGsD,SAAWtD,EAAG4H,IAAIhf,SACrBoX,EAAGuD,SAAW,IAAI/gB,MAAMyE,QACxB+Y,EAAGwD,QAAW,IAAIhhB,MAAMyE,QAExB+Y,EAAG6H,kBAAe3kB,EAElB8c,EAAG8H,eAAiB,IAAItlB,MAAMyE,QAC9B+Y,EAAG+H,eAAiB,IAAIvlB,MAAMyE,QAC9B+Y,EAAGgI,eAAiB,IAAIxlB,MAAMyE,QAC9B+Y,EAAGiI,eAAiB,IAAIzlB,MAAMyE,QAE9B+Y,EAAGkI,eAAYhlB,EACf8c,EAAGmI,eAAYjlB,EAEf8c,EAAGoI,WAAQllB,EACX8c,EAAGqI,WAAQnlB,EAEX8c,EAAGsI,SAAW/kB,KAAK4T,SAAS,uBAG5B5T,KAAKkK,GAAG,gBAAiB,SAACpI,GAClBA,IAAM2a,EAAGuI,QAAQvI,EAAGwI,qBAAqBnjB,KAEjD9B,KAAKkK,GAAG,cAAe,SAACpI,MAKxB9B,KAAKkK,GAAG,iBAAkB,SAACpI,GACvB0E,QAAQC,IAAI,WAAW3E,KAG3B9B,KAAKkK,GAAG,iBAAkB,SAACgb,GACnBC,IAAAA,EAAKnlB,KAAKolB,UAAU,SACpBC,EAAKrlB,KAAKolB,UAAU,SAEpBE,EAAStlB,KAAK8K,OAAOC,UAAUwa,QAC/BC,EAAKF,EAAOJ,EAAMI,EAAO7hB,QACzB4hB,GAAIA,EAAGniB,YAAYsiB,GACnBL,GAAIA,EAAGjiB,YAAYsiB,MAQ/B/I,aAAkB,WACPA,OAAAA,EAAG0H,cAId1H,qBAA0B,SAAC3a,GAEnB9B,GAAAA,KAAKylB,gBAAgB,CACjB9e,IAAAA,EAAI3G,KAAKylB,gBAAgBphB,EACrBrE,KAAKylB,gBAAgB9P,EAKvBxQ,EAAI,IAAKnF,KAAKiG,IAAIqa,YAAY,IAAItgB,KAAKyH,KAAMkQ,YAAYhR,EAAEzB,EAAGyB,EAAExB,EAAInF,KAAK0lB,WAAY/e,EAAEvB,GAAIqX,EAAGkJ,oBAGxG3lB,KAAK4lB,GAAGC,0BAA0B7lB,KAAK8lB,kBAK3CrJ,mBAAwB,WAChBzc,QAAoBL,IAApBK,KAAK+lB,WAA0B,OAAO,EAEtCC,IAAAA,EAAIhmB,KAAKolB,UAAUplB,KAAK+lB,YAGrB,OAFHC,GAAKA,EAAE3kB,UAAU2kB,EAAE3kB,YAEhB,GASXob,oBAAyB,SAACpY,GACtBoY,EAAG4H,IAAIhf,SAASC,KAAKjB,IAIzBoY,kBAAuB,SAACza,GAChBya,EAAG4C,cAEP5C,EAAG4C,YAAcrd,EACjBwE,QAAQC,IAAI,gBAGZzE,EAAE2b,iBAAkB,cAAe,WAC3BlB,EAAGwJ,sBAEPjmB,KAAKmK,UAAU,gBAAiBsS,EAAGuI,UAEvChjB,EAAE2b,iBAAkB,YAAa,WAC7B3d,KAAKmK,UAAU,cAAesS,EAAGuI,UAIrChjB,EAAE2b,iBAAkB,eAAgB,WAChC3d,KAAKmK,UAAU,iBAAkBsS,EAAGuI,UAExChjB,EAAE2b,iBAAkB,aAAc,WAC9B3d,KAAKmK,UAAU,eAAgBsS,EAAGuI,UAGtCvI,EAAGyJ,kBAAkBzJ,EAAGuI,QACxBhlB,KAAKmK,UAAU,wBAAyBsS,EAAGuI,UAI/CvI,kBAAuB,SAACza,GAChBya,EAAG0J,cAEP1J,EAAG0J,YAAcnkB,EACjBwE,QAAQC,IAAI,gBAGZzE,EAAE2b,iBAAkB,cAAgB,WAEhC3d,KAAKmK,UAAU,gBAAiBsS,EAAG2J,UAEvCpkB,EAAE2b,iBAAkB,YAAc,WAC9B3d,KAAKmK,UAAU,cAAesS,EAAG2J,UAIrCpkB,EAAE2b,iBAAkB,eAAgB,WAChC3d,KAAKmK,UAAU,iBAAkBsS,EAAG2J,UAExCpkB,EAAE2b,iBAAkB,aAAc,WAC9B3d,KAAKmK,UAAU,eAAgBsS,EAAG2J,UAGtC3J,EAAGyJ,kBAAkBzJ,EAAG2J,QACxBpmB,KAAKmK,UAAU,wBAAyBsS,EAAG2J,UAK/C3J,iBAAsB,SAAE4J,GACvBA,EAAQ1I,iBAAkB,MAAOlB,EAAG6J,gBAEpCtmB,KAAKiJ,UAAUiF,GAAGqY,WAAYF,GAC9B5J,EAAG2H,YAAciC,EAEVG,IAAAA,EAAKxmB,KAAKiJ,UAAUiF,GAAGuY,cAAc,GACrCC,EAAK1mB,KAAKiJ,UAAUiF,GAAGuY,cAAc,GAEzCjgB,QAAQC,IAAI+f,GAIRA,IACAA,EAAGlkB,SAAU,EAEbkkB,EAAG7I,iBAAkB,YAAa,SAACgJ,GAC/BH,EAAGI,QAAUD,EAAE1f,KAAK2f,QAcpBnK,EAAGoK,kBAAkBL,MAKzBE,IACAA,EAAGpkB,SAAU,EAEbokB,EAAG/I,iBAAkB,YAAa,SAACgJ,GAC/BD,EAAGE,QAAUD,EAAE1f,KAAK2f,QASpBnK,EAAGqK,kBAAkBJ,MAK7BjK,EAAGsK,oBAAoB/mB,KAAKiG,IAAIkV,SAAShX,KAEzCsY,EAAG0H,cAAe,EAClB3d,QAAQC,IAAI,qBAIZzG,KAAKmK,UAAU,UAAU,IAM7BsS,eAAoB,WAChBA,EAAG2H,YAAYd,oBAAqB,MAAO7G,EAAG6J,gBAC9C7J,EAAG2H,YAAc,KAEjB3H,EAAG0H,cAAe,EAElB1H,EAAGsK,oBAAqB,IAAI9nB,MAAMyE,QAAQ,EAAE,EAAE,IAE9C1D,KAAKmK,UAAU,UAAU,GAEzB3D,QAAQC,IAAI,YAMhBgW,OAAY,WACJ,GAACzc,KAAK4M,OAAOqB,cAGbwO,GAAmB,OAAnBA,EAAG2H,YAAqB,CAQxBtW,UAAUI,GAAG8Y,eAAgB,eAPX,CACdC,iBAAkB,CACd,WAKmD3gB,KAAMmW,EAAGyK,uBAKpEzK,EAAG2H,YAAY+C,OAIvB1K,kBAAuB,SAACjV,GAChB4f,IAGAC,OAAQ1nB,EACR2nB,OAAQ3nB,EAYR6H,QARoB7H,IAApB8c,EAAG6H,eACH7H,EAAG6H,aAAetkB,KAAKunB,eAEvB9K,EAAG6H,aAAazhB,iBAChB4Z,EAAG4H,IAAIxf,IAAI4X,EAAG6H,eAId9c,IAAMiV,EAAG2J,OACT3J,EAAG6H,aAAazf,IAAK4X,EAAG0J,aAExBmB,EAAQtnB,KAAKunB,aAAa,SAASvgB,KAAKyV,EAAGsI,UAAU7hB,YAAYlD,KAAK8K,OAAOC,UAAUsB,eAAe6M,UAAU,EAAE,EAAE,GACpHuD,EAAG0J,YAAYthB,IAAIyiB,OAGlB,CACG9nB,IAAAA,EAAW,IAAIP,MAAMuoB,uBAxBf,KAAA,KACA,EAuBgE,GAC1EhoB,EAAS8U,SAAUC,KAAKC,GAAK,GAC7BhV,EAASioB,UAAU,EAAE,GAAIC,KAErBrX,IAAAA,EAAO,IAAIpR,MAAMqR,KAAM9Q,EAAUQ,KAAK8K,OAAOC,UAAUsB,eAE3DoQ,EAAG4C,YAAYxa,IAAKwL,EAAKjM,SACzBqY,EAAG6H,aAAazf,IAAK4X,EAAG4C,aAExBgI,EAAQrnB,KAAKunB,aAAa,SAASvgB,KAAKyV,EAAGsI,UAAU7hB,YAAYlD,KAAK8K,OAAOC,UAAUsB,eAEvFoQ,EAAG4C,YAAYxa,IAAIwiB,GAInBrnB,GAAAA,KAAK2K,UAAUua,IAAI,CACfI,IAAAA,EAAStlB,KAAK8K,OAAOC,UAAUwa,QAC/BC,EAAKF,EAAOtlB,KAAK2K,UAAUua,IAAMI,EAAO7hB,QACxC+D,IAAMiV,EAAG2J,OAAQkB,EAAMpkB,YAAYsiB,GAClC6B,EAAMnkB,YAAYsiB,KAK/B/I,YAAiB,WAyBTuJ,IAAAA,EAAIvJ,EAAG0J,YAON,IAAA,IAAIrkB,KANT2a,EAAG0J,YAAc1J,EAAG4C,YACpB5C,EAAG4C,YAAc2G,EAKHvJ,EAAG4C,YAAYtd,SAAU0a,EAAG4C,YAAY5a,OAAOgY,EAAG4C,YAAYtd,SAASD,IAChF,IAAA,IAAIA,KAAK2a,EAAG0J,YAAYpkB,SAAU0a,EAAG0J,YAAY1hB,OAAOgY,EAAG0J,YAAYpkB,SAASD,IACrF2a,EAAG6H,aAAalM,iBAEhBqE,EAAGyJ,kBAAkBzJ,EAAG2J,QACxB3J,EAAGyJ,kBAAkBzJ,EAAGuI,QAExBxe,QAAQC,IAAI,4BAoDhBgW,mBAAwB,SAACzY,GACZ,IAANA,EAASyY,EAAGkL,kBAAkB,GAC7BlL,EAAGkL,kBAAkB,IAQ7BlL,2BAAgC,SAACzY,GACzBA,OAAM,IAANA,EAAgByY,EAAG+H,eACX/H,EAAG8H,gBAQnB9H,4BAAiC,SAACzY,GAC1BA,OAAM,IAANA,EAAgByY,EAAGiI,eACXjI,EAAGgI,gBAGnBhI,uBAA4B,SAACza,GACrBA,KAAAA,IAAMya,EAAG2J,aAA2BzmB,IAAjB8c,EAAGmI,WACtB5iB,IAAMya,EAAGuI,aAA2BrlB,IAAjB8c,EAAGkI,WAAtB3iB,CAEAqC,IAAAA,EAAQrC,IAAMya,EAAG2J,OAAS3J,EAAG+H,eAAiB/H,EAAG8H,eACjDqD,EAAQ5lB,IAAMya,EAAG2J,OAAS3J,EAAGmI,UAAYnI,EAAGkI,UAExC1lB,MAAMyE,QACVW,EAAEa,EAAI0iB,EAAK1iB,EACXb,EAAEc,EAAIyiB,EAAKziB,EACXd,EAAEe,EAAIwiB,EAAKxiB,GAGLyiB,WAEN7lB,IAAMya,EAAG2J,OAAQ3J,EAAGmI,UAAYvgB,EAC/BoY,EAAGkI,UAAYtgB,IAGxBoY,OAAY,WAEJA,EAAG4C,aAAe5C,EAAG4C,YAAY/c,UACjCma,EAAG4C,YAAYR,iBAAiBpC,EAAG8H,gBACnC9H,EAAG4C,YAAYN,kBAAkBtC,EAAGgI,gBACpChI,EAAGgI,eAAenF,SAElB7C,EAAGqL,uBAAuBrL,EAAGuI,SAG7BvI,EAAG0J,aAAe1J,EAAG0J,YAAY7jB,UACjCma,EAAG0J,YAAYtH,iBAAiBpC,EAAG+H,gBACnC/H,EAAG0J,YAAYpH,kBAAkBtC,EAAGiI,gBACpCjI,EAAGiI,eAAepF,SAElB7C,EAAGqL,uBAAuBrL,EAAG2J,WAmBtB3J,EAAAA,EAAAA,QAAAA,QAAAA;;AC9WAsL,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EApIf,IAAA,EAAA,EAAA,QAAA,mBAoIeA,SAAAA,EAAAA,GAAAA,OAAAA,GAAAA,EAAAA,WAAAA,EAAAA,CAAAA,QAAAA,GAAAA,SAAAA,EAAAA,GAAAA,OAAAA,EAAAA,mBAAAA,QAAAA,iBAAAA,OAAAA,SAAAA,SAAAA,GAAAA,cAAAA,GAAAA,SAAAA,GAAAA,OAAAA,GAAAA,mBAAAA,QAAAA,EAAAA,cAAAA,QAAAA,IAAAA,OAAAA,UAAAA,gBAAAA,IAAAA,GAAAA,SAAAA,EAAAA,EAAAA,GAAAA,KAAAA,aAAAA,GAAAA,MAAAA,IAAAA,UAAAA,qCAAAA,SAAAA,EAAAA,EAAAA,GAAAA,IAAAA,IAAAA,EAAAA,EAAAA,EAAAA,EAAAA,OAAAA,IAAAA,CAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,WAAAA,EAAAA,aAAAA,EAAAA,EAAAA,cAAAA,EAAAA,UAAAA,IAAAA,EAAAA,UAAAA,GAAAA,OAAAA,eAAAA,EAAAA,EAAAA,IAAAA,IAAAA,SAAAA,EAAAA,EAAAA,EAAAA,GAAAA,OAAAA,GAAAA,EAAAA,EAAAA,UAAAA,GAAAA,GAAAA,EAAAA,EAAAA,GAAAA,EAAAA,SAAAA,EAAAA,EAAAA,GAAAA,GAAAA,mBAAAA,GAAAA,OAAAA,EAAAA,MAAAA,IAAAA,UAAAA,sDAAAA,EAAAA,UAAAA,OAAAA,OAAAA,GAAAA,EAAAA,UAAAA,CAAAA,YAAAA,CAAAA,MAAAA,EAAAA,UAAAA,EAAAA,cAAAA,KAAAA,GAAAA,EAAAA,EAAAA,GAAAA,SAAAA,EAAAA,EAAAA,GAAAA,OAAAA,EAAAA,OAAAA,gBAAAA,SAAAA,EAAAA,GAAAA,OAAAA,EAAAA,UAAAA,EAAAA,IAAAA,EAAAA,GAAAA,SAAAA,EAAAA,GAAAA,IAAAA,EAAAA,IAAAA,OAAAA,WAAAA,IAAAA,EAAAA,EAAAA,EAAAA,GAAAA,GAAAA,EAAAA,CAAAA,IAAAA,EAAAA,EAAAA,MAAAA,YAAAA,EAAAA,QAAAA,UAAAA,EAAAA,UAAAA,QAAAA,EAAAA,EAAAA,MAAAA,KAAAA,WAAAA,OAAAA,EAAAA,KAAAA,IAAAA,SAAAA,EAAAA,EAAAA,GAAAA,OAAAA,GAAAA,WAAAA,EAAAA,IAAAA,mBAAAA,EAAAA,EAAAA,GAAAA,EAAAA,SAAAA,EAAAA,GAAAA,QAAAA,IAAAA,EAAAA,MAAAA,IAAAA,eAAAA,6DAAAA,OAAAA,EAAAA,SAAAA,IAAAA,GAAAA,oBAAAA,UAAAA,QAAAA,UAAAA,OAAAA,EAAAA,GAAAA,QAAAA,UAAAA,KAAAA,OAAAA,EAAAA,GAAAA,mBAAAA,MAAAA,OAAAA,EAAAA,IAAAA,OAAAA,KAAAA,UAAAA,SAAAA,KAAAA,QAAAA,UAAAA,KAAAA,GAAAA,gBAAAA,EAAAA,MAAAA,GAAAA,OAAAA,GAAAA,SAAAA,EAAAA,GAAAA,OAAAA,EAAAA,OAAAA,eAAAA,OAAAA,eAAAA,SAAAA,GAAAA,OAAAA,EAAAA,WAAAA,OAAAA,eAAAA,KAAAA,GA3HTA,IAAAA,EAAAA,SAAAA,GA2HSA,EAAAA,EA3HM/oB,EAAAA,SA2HN+oB,IAAAA,EAAAA,EAAAA,GAzHHC,SAAAA,EAAAA,GAAK,IAAA,EAAA,OAAA,EAAA,KAAA,IACPA,EAAAA,EAAAA,KAAAA,KAAAA,EAAMhoB,KAAKC,OAAOU,KAEnBsnB,UAAcjoB,KAAK8K,OAAOE,OAAOM,MACjC4c,EAAAA,YAAcloB,KAAK8K,OAAOE,OAAOO,MAEjC4c,EAAAA,YAAa,EAEbC,EAAAA,UAAY,IAAIC,YAAYC,MAAM,CACnCC,MAAO,GACPC,OAAQ,GACRC,QAAS,IACTC,aAAc,IACdC,gBAAiB,EAAKV,UACtBW,kBAAmB,GAEnBC,WAAY7oB,KAAK4T,SAAS,yBAC1BkV,YAAa9oB,KAAK4T,SAAS,mBAE3BmV,eAAgB,SAChBC,aAAc,WAEbnkB,EAAAA,IAAI,EAAKujB,WAETa,EAAAA,OAAS,IAAIZ,YAAYa,KAAK,CAC/BC,QAAS,SACTC,SAAU,IACVC,UAAWrpB,KAAK8K,OAAOE,OAAOI,QAE7Bgd,EAAAA,UAAUvjB,IAAI,EAAKokB,QAEnBK,EAAAA,SAAW,IAAIrqB,MAAMqR,KACtB,IAAIrR,MAAMsqB,cAAqC,GAAtBvpB,KAAKwpB,IAAIC,aAAwC,GAAtBzpB,KAAKwpB,IAAIC,aAAkB,GAC/EzpB,KAAK8K,OAAOC,UAAUe,kBAErBwd,EAAAA,SAASjkB,SAASE,IAAI,EAAE,EAAE,MAE1BV,EAAAA,IAAK,EAAKykB,UAEVnoB,EAAAA,QAAU,WACNinB,EAAAA,UAAU7iB,IAAI,CACfqjB,kBAAmB,MAGtBxnB,EAAAA,QAAU,WACNgnB,EAAAA,UAAU7iB,IAAI,CACfqjB,kBAAmB,MAItBhmB,EAAAA,gBAlDQ,EAyHFmlB,OAAAA,EAAAA,EAAAA,CAAAA,CAAAA,IAAAA,eAhEFjmB,MAAAA,SAAAA,GAGF,OAFFmmB,KAAAA,UAAYnmB,EACZ,KAAKqmB,YAAY,KAAKC,UAAU7iB,IAAI,CAAEojB,gBAAiB,KAAKV,YAC1D,OA6DIF,CAAAA,IAAAA,iBAtDAjmB,MAAAA,SAAAA,GAGJ,OAFFomB,KAAAA,YAAcpmB,EACf,KAAKqmB,YAAY,KAAKC,UAAU7iB,IAAI,CAAEojB,gBAAiB,KAAKT,cACzD,OAmDIH,CAAAA,IAAAA,UA5CP2B,MAAAA,SAAAA,GAEG,OADFT,KAAAA,OAAO1jB,IAAI,CAAE4jB,QAASO,IACpB,OA0CI3B,CAAAA,IAAAA,SAnCRtmB,MAAAA,SAAAA,GAKI,OAJF0mB,KAAAA,WAAa1mB,EACdA,EAAG,KAAK2mB,UAAU7iB,IAAI,CAAEojB,gBAAiB,KAAKT,cAC7C,KAAKE,UAAU7iB,IAAI,CAAEojB,gBAAiB,KAAKV,YAEzC,OA8BIF,CAAAA,IAAAA,UAvBP5hB,MAAAA,SAAAA,GAAI,IAAA,EAAA,KAkBD,OAjBPnG,KAAKsD,MAAMkK,cAAcxG,KAAKb,EAAK,SAAC2D,GAEhC,EAAKwf,SAASzpB,SAAW,IAAIZ,MAAM0U,qBAAqB,CACpDlD,IAAK3G,EACLkC,aAAa,EACbC,YAAY,IAShB,EAAKgd,OAAO5jB,SAASE,IAAI,GAAG,KAAM,KAG/B,SAKIwiB,EA3HTA,GA2HSA,EAAAA,EAAAA,QAAAA,QAAAA;;ACmEAyB,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EAxMf,IAAA,EAAA,EAAA,QAAA,yBAwMeA,SAAAA,EAAAA,GAAAA,OAAAA,GAAAA,EAAAA,WAAAA,EAAAA,CAAAA,QAAAA,GAjMf,IAAIA,EAAM,CAEVA,aAAmB,IAEnBA,EAAIzB,OAASA,EAAb,QAIAyB,EAAI3O,KAAO,WACP2O,EAAIG,aAAiB3pB,KAAKunB,eAI1BiC,EAAIG,aAAa9kB,IAAK,IAAI5F,MAAMqR,KAAMtQ,KAAKsD,MAAMuJ,eAAgB7M,KAAK8K,OAAO8e,YAAY,cACzFJ,EAAIG,aAAa9mB,iBAEjB2mB,EAAIK,kBAAkB,KACtBL,EAAIG,aAAarnB,SAAU,EAE3BtC,KAAKY,QAAQiE,IAAI2kB,EAAIG,cAErBH,EAAIM,QAAU9pB,KAAKunB,eACnBvnB,KAAKY,QAAQiE,IAAI2kB,EAAIM,SAErBN,EAAIO,gBACJP,EAAIQ,WAAY,EAEhBR,EAAIS,YAAgBjqB,KAAKsD,MAAMsK,WAAY,IAAM,EACjD4b,EAAIU,cAAgB,EAEpBlqB,KAAKkK,GAAI,oBAAqB,SAAC0L,GACtB4T,EAAIQ,WACTR,EAAIW,aAAa5kB,IAAI,CAAE4jB,QAASvT,OAgBxC4T,EAAIK,kBAAoB,SAACrP,GACrBgP,EAAIG,aAAahkB,MAAMJ,IAAIiV,EAAEA,EAAEA,IAOnCgP,EAAIY,kBAAoB,WACbZ,OAAAA,EAAIG,aAAahkB,MAAMT,GAQlCskB,EAAIa,iBAAmB,SAACC,EAAMC,QACb5qB,IAAT2qB,IAEJd,EAAIG,aAAavR,iBAEjBoR,EAAIG,aAAa3iB,KAAKsjB,GAAMznB,iBACxB0nB,GAAYf,EAAIG,aAAazmB,YAAalD,KAAK8K,OAAO8e,YAAY,eAG1EJ,EAAIO,cAAgB,WAChBP,EAAIgB,SAAWxqB,KAAKunB,eACpBiC,EAAIgB,SAASC,eAEbjB,EAAIkB,cAAgB,IAAIrC,YAAYC,MAAM,CACtCC,MAAO,IACPC,OAAQ,IACRC,QAAS,IACTC,aAAc,IAIdG,WAAY7oB,KAAK4T,SAAS,yBAC1BkV,YAAa9oB,KAAK4T,SAAS,mBAE3BoV,aAAc,SACdD,eAAgB,WAEpBS,EAAIgB,SAAS3lB,IAAI2kB,EAAIkB,eAErBlB,EAAIW,aAAe,IAAI9B,YAAYa,KAAK,CACpCC,QAAS,OACTC,SAAU,IACVC,UAAWrpB,KAAK8K,OAAOE,OAAOI,QAElCoe,EAAIkB,cAAc7lB,IAAI2kB,EAAIW,eAQ9BX,EAAImB,YAAc,WACPnB,OAAAA,EAAIgB,UAUfhB,EAAIoB,cAAgB,SAACC,EAAY1e,GACzBsU,IAAAA,EAAIzgB,KAAKunB,eAET7iB,EAAMmmB,EAAWpnB,OACjBglB,EAA6B,GAAnBe,EAAIC,aAEdqB,EAAO,IAAIzC,YAAYC,MAAM,CAC7BC,MAAQiB,EAAIC,aAAe/kB,EAAO+jB,EAClCD,OAAQgB,EAAIC,aAAehB,EAC3BA,QAAS,IACTC,aAAc,IACdC,gBAAiBxc,GAAenM,KAAK8K,OAAOE,OAAOM,MACnDsd,kBAAmB,GAEnBC,WAAY7oB,KAAK4T,SAAS,yBAC1BkV,YAAa9oB,KAAK4T,SAAS,mBAE3BoV,aAAc,SACdD,eAAgB,WAIhBgC,EAAS,GAAJrmB,EAAW8kB,EAAIC,aACxBsB,GAAuB,GAAjBvB,EAAIC,aAEL,IAAA,IAAIzlB,EAAE,EAAGA,EAAEU,EAAKV,IAAI,CACjBgnB,IAAAA,EAASH,EAAW7mB,GACxBgnB,EAAO3lB,SAASE,IAAKvB,EAAEwlB,EAAIC,aAAcsB,EAAG,EAAK,KACjDD,EAAKjmB,IAAImmB,GAINvK,OADPA,EAAE5b,IAAIimB,GACCrK,GAIX+I,EAAI5pB,OAAS,WACLI,KAAKiG,IAAI+V,mBAAqBhc,KAAKirB,aACnCzB,EAAIgB,SAASloB,SAAU,GAI3B+lB,YAAYzoB,SAERI,KAAKylB,iBACL+D,EAAIG,aAAarnB,SAAU,EAC3BknB,EAAIG,aAAatkB,SAASC,KAAKtF,KAAKylB,gBAAgBphB,IAGpDmlB,EAAIG,aAAarnB,SAAU,EAI3BtC,KAAKkrB,eAEDlrB,KAAKyc,GAAG0H,cACRqF,EAAIgB,SAASnlB,SAASC,KAAKtF,KAAKyc,GAAG8H,gBACnCiF,EAAIgB,SAASnlB,SAASF,GAAK,GAC3BqkB,EAAIgB,SAAStR,SAASsQ,EAAIU,iBAG1BV,EAAIgB,SAASnlB,SAASua,YAAY5f,KAAKkrB,cAAc7mB,EAAGrE,KAAKiG,IAAIkV,SAAShX,IAAK,IAC/EqlB,EAAIgB,SAAStR,SAASlZ,KAAKkrB,cAAcjnB,EAAIulB,EAAIS,cAErDT,EAAIgB,SAASW,iBAET3B,EAAIQ,YAAWR,EAAIgB,SAASloB,SAAU,GAC1CknB,EAAIG,aAAarnB,SAAU,GAG3BknB,EAAIgB,SAASloB,SAAU,IAKhBknB,IAAAA,EAAAA,EAAAA,QAAAA,QAAAA;;ACuDd,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EA7PD,IAAA,EAAA,EAAA,QAAA,mBA6PC,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAA,SAAA,EAAA,GAAA,OAAA,EAAA,mBAAA,QAAA,iBAAA,OAAA,SAAA,SAAA,GAAA,cAAA,GAAA,SAAA,GAAA,OAAA,GAAA,mBAAA,QAAA,EAAA,cAAA,QAAA,IAAA,OAAA,UAAA,gBAAA,IAAA,GAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,SAAA,EAAA,EAAA,GAAA,GAAA,mBAAA,GAAA,OAAA,EAAA,MAAA,IAAA,UAAA,sDAAA,EAAA,UAAA,OAAA,OAAA,GAAA,EAAA,UAAA,CAAA,YAAA,CAAA,MAAA,EAAA,UAAA,EAAA,cAAA,KAAA,GAAA,EAAA,EAAA,GAAA,SAAA,EAAA,EAAA,GAAA,OAAA,EAAA,OAAA,gBAAA,SAAA,EAAA,GAAA,OAAA,EAAA,UAAA,EAAA,IAAA,EAAA,GAAA,SAAA,EAAA,GAAA,IAAA,EAAA,IAAA,OAAA,WAAA,IAAA,EAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,IAAA,EAAA,EAAA,MAAA,YAAA,EAAA,QAAA,UAAA,EAAA,UAAA,QAAA,EAAA,EAAA,MAAA,KAAA,WAAA,OAAA,EAAA,KAAA,IAAA,SAAA,EAAA,EAAA,GAAA,OAAA,GAAA,WAAA,EAAA,IAAA,mBAAA,EAAA,EAAA,GAAA,EAAA,SAAA,EAAA,GAAA,QAAA,IAAA,EAAA,MAAA,IAAA,eAAA,6DAAA,OAAA,EAAA,SAAA,IAAA,GAAA,oBAAA,UAAA,QAAA,UAAA,OAAA,EAAA,GAAA,QAAA,UAAA,KAAA,OAAA,EAAA,GAAA,mBAAA,MAAA,OAAA,EAAA,IAAA,OAAA,KAAA,UAAA,SAAA,KAAA,QAAA,UAAA,KAAA,GAAA,gBAAA,EAAA,MAAA,GAAA,OAAA,GAAA,SAAA,EAAA,GAAA,OAAA,EAAA,OAAA,eAAA,OAAA,eAAA,SAAA,GAAA,OAAA,EAAA,WAAA,OAAA,eAAA,KAAA,GA3PoB4B,IAAAA,EAAAA,SAAAA,GA2PpB,EAAA,EA3PmCpsB,EAAAA,SA2PnC,IAAA,EAAA,EAAA,GAzPWkmB,SAAAA,EAAAA,GAAI,IAAA,EAAA,OAAA,EAAA,KAAA,IACNvlB,EAAAA,EAAAA,KAAAA,UAAAA,EAAmBK,KAAKC,OAAOU,KAEhC0qB,OAAWnG,EACXoG,EAAAA,cAAW3rB,EACX4rB,EAAAA,QAAW,MAGXC,EAAAA,aAAU7rB,EACV8rB,EAAAA,gBAAiB,EACjBC,EAAAA,UAAY,GAEZC,EAAAA,aAAe,EACfC,EAAAA,WAAc,GACdC,EAAAA,WAAc,EAEdC,EAAAA,WAAc,GACdA,EAAAA,WAAWzmB,SAAa,IAAIpG,MAAMyE,QAClCooB,EAAAA,WAAW9lB,WAAa,IAAI/G,MAAMyc,WAElCqQ,EAAAA,eAAYpsB,EAIZqsB,EAAAA,UAxBO,EAyPf,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,yBA9NsB9G,MAAAA,SAAAA,GAGf+G,IAAAA,EAAUjsB,KAAK8K,OAAOC,UAAUwa,QAG7B0G,OAAAA,EAFG/G,EAAM+G,EAAQxoB,UA0N3B,CAAA,IAAA,UArNQ,MAAA,WAEDiM,IAAAA,EAAI,IAAIzQ,MAAMitB,eAAgB,GAAK,GAAI,IAEtCC,KAAAA,aAAe,KAAKC,uBAAuB,KAAKf,QAEjDgB,IAAAA,EAAQ,IAAIptB,MAAMqR,KAAMZ,EAAG,KAAKyc,cAE/BG,KAAAA,aAAetsB,KAAKunB,eACpB+E,KAAAA,aAAaznB,IAAIwnB,GACjBC,KAAAA,aAAappB,YAAY,KAAKipB,cAG9BG,KAAAA,aAAaC,mBAAkB,GAG/BC,KAAAA,YAAc,IAAIvtB,MAAMwtB,OAAQzsB,KAAK2K,UAAU+hB,YAAY,KAAKrB,OAASrrB,KAAK2K,UAAU+hB,YAAYjpB,SACpG+oB,KAAAA,YAAYnnB,SAASE,IAAI,EAAE,EAAE,GAC7BinB,KAAAA,YAAYlqB,SAAU,EAItBqqB,KAAAA,cAAgB3sB,KAAKunB,eACrBqF,KAAAA,eAAiB,IAAIvE,YAAYC,MAAM,CACxCC,MAAO,GACPC,OAAQ,IACRC,QAAS,IACTC,aAAc,IAEdC,gBAAiB3oB,KAAK8K,OAAOE,OAAOM,MAEpCud,WAAY7oB,KAAK4T,SAAS,yBAC1BkV,YAAa9oB,KAAK4T,SAAS,qBAM1B+Y,KAAAA,cAActnB,SAASF,EAAI,GAC3BwnB,KAAAA,cAAc9nB,IAAI,KAAK+nB,gBAGvBC,KAAAA,aAAe,IAAIxE,YAAYa,KAAK,CACrCC,QAAS,SAAS,KAAKkC,OACvBjC,SAAU,IAEVC,UAAWrpB,KAAK2K,UAAUmiB,QAAQ,KAAKzB,OAASrrB,KAAK2K,UAAUmiB,QAAQrpB,UAEtEopB,KAAAA,aAAaxnB,SAASF,EAAI,EAG1B4nB,KAAAA,gBAAkB,IAAI1E,YAAYa,KAAK,CACxCC,QAAS,iBACTC,SAAU,IACVC,UAAWrpB,KAAK8K,OAAOE,OAAOI,QAE7B2hB,KAAAA,gBAAgB1nB,SAASF,GAAK,IAE9BynB,KAAAA,eAAe/nB,IAAI,KAAKgoB,cACxBD,KAAAA,eAAe/nB,IAAI,KAAKkoB,iBAExBloB,KAAAA,IAAI,KAAKynB,cACTznB,KAAAA,IAAI,KAAK8nB,eACT9nB,KAAAA,IAAI,KAAK2nB,eAsJjB,CAAA,IAAA,qBAlJkBrmB,MAAAA,SAAAA,GACX6mB,IAAAA,EAAI,KAQD,YAN4BrtB,IAA/BqtB,EAAEV,aAAavqB,SAAS,IACxBirB,EAAEV,aAAa7nB,OAAOuoB,EAAEV,aAAavqB,SAAS,IAGlDirB,EAAEV,aAAatlB,KAAKb,GAEb,OAyIV,CAAA,IAAA,cAtIWmlB,MAAAA,SAAAA,GAOD,OANFA,KAAAA,SAAWA,EAEXuB,KAAAA,aAAatnB,IAAI,CAClB4jB,QAASmC,IAGN,OA+HV,CAAA,IAAA,cA5HY,MAAA,WACL,QAAgB3rB,IAAhB,KAAK0rB,OACL,YAAkB1rB,IAAlB,KAAK2rB,SAA+B,SAAS,KAAKD,OAC/C,KAAKC,WAyHf,CAAA,IAAA,aAtHU2B,MAAAA,SAAAA,GAQA,OAPF1B,KAAAA,QAAU0B,EAGVF,KAAAA,gBAAgBxnB,IAAI,CACrB4jB,QAAS,KAAK8D,IAGX,OA8GV,CAAA,IAAA,gBA3GaC,MAAAA,SAAAA,GACNA,QAAQvtB,IAARutB,EAIAA,GAAAA,EAAM,EAAE,CACHV,KAAAA,YAAYlqB,SAAU,EACvBwO,IAAAA,EAAI,GAAa,IAANoc,EACVV,KAAAA,YAAY7mB,MAAMJ,IAAIuL,EAAEA,EAAEA,QAE9B,KAAK0b,YAAYlqB,SAAU,OARvBkqB,KAAAA,YAAYlqB,SAAU,IAyGlC,CAAA,IAAA,yBA9FsBuT,MAAAA,SAAAA,GACf,KAAK8V,aAAe,IAEnBA,KAAAA,YAAc3rB,KAAK0f,OAAOC,YAE1BmM,KAAAA,WAAWzmB,SAASC,KAAK,KAAKD,UAC9BymB,KAAAA,WAAW9lB,WAAWV,KAAK,KAAKU,YAEhC+lB,KAAAA,UAAYlW,KAsFpB,CAAA,IAAA,wBAjFsB,MAAA,WACf,KAAA,KAAK8V,YAAc,GAAnB,CAEAwB,IAAAA,EAAI,KAAKvB,WAEC,KAAKC,WAAfsB,GAAK,EAAuB,GACRntB,KAAK0f,OAAOC,YAAc,KAAKgM,aAAewB,EAElEC,IAAAA,EAAK,KAAKtB,WACVuB,EAAK,KAAKtB,UAGV,GAAA,KAAKF,YAAc,EAOnB,OANKF,KAAAA,aAAe,EAEftmB,KAAAA,SAASC,KAAK+nB,EAAGhoB,eAEjBinB,KAAAA,aAAatmB,WAAWV,KAAK+nB,EAAGrnB,YAKpCX,KAAAA,SAASua,YAAYwN,EAAG/nB,SAAUgoB,EAAGhoB,SAAU,KAAKwmB,YACpDS,KAAAA,aAAatmB,WAAWsnB,MAAMD,EAAGrnB,WAAY,KAAK6lB,eA0D1D,CAAA,IAAA,SAtDO,MAAA,WACC0B,KAAAA,wBAED9O,IAAAA,EAAOze,KAAKiG,IAAI4M,QAChByO,EAAMthB,KAAKiG,IAAIkV,SAAShX,IACxBsa,QAAQ9e,IAAR8e,QAA6B9e,IAAR2hB,EAArB7C,CAOCkO,KAAAA,cAAcxB,iBAKfqC,IAAAA,EAAO,KAAKhB,YAAY7mB,MAAMT,GAClCsoB,GAAQ,KAEG,IAAM,KAAKhB,YAAY7mB,MAAMJ,IAAIioB,EAAMA,EAAMA,GACnD,KAAKhB,YAAYlqB,SAAU,KAiCnC,CAAA,IAAA,cAtBY,MAAA,WAAA,IAAA,EAAA,KACL,KAAA,KAAKmpB,gBACL,KAAKC,UAAUjoB,OAAS,GAAxB,CAEAQ,IAAAA,EAAI,KAAKynB,UAAU+B,QAEnBrrB,EAAK,IAAIsrB,MACbtrB,EAAGkR,IAAMrP,EAAEgD,KAEX7E,EAAGurB,OACElC,KAAAA,gBAAiB,EAEtBrpB,EAAGwrB,QAAU,WACT,EAAKnC,gBAAiB,GAKrBoC,KAAAA,cAAc,QAItB,EA3PoBzC,GA2PpB,QAAA,QAAA;;ACyRczgB,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EAthBf,IAAA,EAAA,EAAA,QAAA,qBAshBeA,SAAAA,EAAAA,GAAAA,OAAAA,GAAAA,EAAAA,WAAAA,EAAAA,CAAAA,QAAAA,GAhhBf,IAAIA,EAAY,CAEhBA,gBAA4B,IAC5BA,eAA2B,OAG3BA,gBAA4B,IAC5BA,gBAA4B,KAE5BA,EAAUygB,OAASA,EAAnB,QAMAzgB,EAAUkQ,KAAO,WACblQ,EAAUmjB,QAAUpgB,OAAOqgB,SAASC,OAEpCrjB,EAAUsjB,gBAEVtjB,EAAUujB,YAASvuB,EACnBgL,EAAUwjB,YAAa,EAEvBxjB,EAAUyjB,eAAYzuB,EAEtBgL,EAAUua,SAAMvlB,EAChBgL,EAAU0jB,UAAY,EAEtB1jB,EAAU2jB,WAAa,GAEvB3jB,EAAU4jB,SAAWvuB,KAAKunB,aAAa,WACvC5c,EAAU4jB,SAAS9D,eAGnB/c,OAAO8gB,YAAa7jB,EAAU8jB,UAAqC,IAA1B9jB,EAAU+jB,iBACnD/jB,EAAUgkB,oBAAiBhvB,EAE3B6G,QAAQC,IAAI,yBACZkE,EAAUikB,iBAGdjkB,EAAUikB,cAAgB,WACtBjkB,EAAUkkB,QAAU/f,EAAE,eAAe4a,KAAK,KAG9C/e,EAAUmkB,YAAc,WACbnkB,OAAAA,EAAU0jB,WAIrB1jB,EAAUsjB,cAAgB,WAEtBtjB,EAAUmiB,QAAU,GACpBniB,EAAUmiB,QAAQ5kB,KAAM,IAAIjJ,MAAMoM,MAAM,EAAE,EAAE,IAC5CV,EAAUmiB,QAAQ5kB,KAAM,IAAIjJ,MAAMoM,MAAM,EAAE,EAAE,IAC5CV,EAAUmiB,QAAQ5kB,KAAM,IAAIjJ,MAAMoM,MAAM,EAAE,EAAE,IAC5CV,EAAUmiB,QAAQ5kB,KAAM,IAAIjJ,MAAMoM,MAAM,EAAE,EAAE,IAC5CV,EAAUmiB,QAAQ5kB,KAAM,IAAIjJ,MAAMoM,MAAM,EAAE,EAAE,IAC5CV,EAAUmiB,QAAQ5kB,KAAM,IAAIjJ,MAAMoM,MAAM,EAAE,EAAE,IAE5CV,EAAUokB,YAAc,GACxBpkB,EAAUokB,YAAY7mB,KAAM,IAAIjJ,MAAMoM,MAAM,GAAI,EAAI,IACpDV,EAAUokB,YAAY7mB,KAAM,IAAIjJ,MAAMoM,MAAM,GAAI,GAAI,IACpDV,EAAUokB,YAAY7mB,KAAM,IAAIjJ,MAAMoM,MAAM,EAAI,GAAI,IACpDV,EAAUokB,YAAY7mB,KAAM,IAAIjJ,MAAMoM,MAAM,EAAI,GAAI,KACpDV,EAAUokB,YAAY7mB,KAAM,IAAIjJ,MAAMoM,MAAM,EAAI,EAAI,KACpDV,EAAUokB,YAAY7mB,KAAM,IAAIjJ,MAAMoM,MAAM,GAAI,EAAI,KAEpDV,EAAUqkB,UAAY,GACtBrkB,EAAUqkB,UAAU9mB,KAAK,QACzByC,EAAUqkB,UAAU9mB,KAAK,QACzByC,EAAUqkB,UAAU9mB,KAAK,QACzByC,EAAUqkB,UAAU9mB,KAAK,QACzByC,EAAUqkB,UAAU9mB,KAAK,QACzByC,EAAUqkB,UAAU9mB,KAAK,QAErB+mB,IAAAA,EAAKjvB,KAAK8K,OAAOC,UACrBkkB,EAAG1J,QAAU,GAET9Y,IAAAA,EAAM,IAAIxN,MAAM8M,kBAAkB,CAClCI,MAAOxB,EAAUmiB,QAAQ,GACzB9gB,aAAa,EACb5I,QAAS,GACT6I,YAAY,EACZG,aAAa,IAGjB6iB,EAAG1J,QAAQrd,KAAKuE,GAEX,IAAA,IAAI3K,EAAE,EAAGA,EAAE6I,EAAUmiB,QAAQrpB,OAAQ3B,IAAI,CACtCgB,IAAAA,EAAI2J,EAAIrI,QACZtB,EAAEqJ,MAAQxB,EAAUmiB,QAAQhrB,GAE5BmtB,EAAG1J,QAAQrd,KAAKpF,GAIpB6H,EAAU+hB,YAAc,GAGnB,IADDwC,IAAAA,GAAS,IAAIjwB,MAAMwO,eAAgBzG,KAAMhH,KAAK4T,SAAS,eAClD9R,EAAE,EAAGA,EAAE6I,EAAUmiB,QAAQrpB,OAAQ3B,IAAI,CACtCqtB,IAAAA,EAAO,IAAIlwB,MAAMmwB,eAAe,CAChC3e,IAAKye,EACLjjB,YAAY,EACZE,MAAOxB,EAAUmiB,QAAQhrB,KAE7BqtB,EAAKE,iBAAkB,EAEvB1kB,EAAU+hB,YAAYxkB,KAAKinB,KAYnCxkB,EAAUR,UAAY,SAACE,EAASpD,GACxB,GAAC0D,EAAUwjB,WAAX,CACAmB,IAAAA,EAAO3kB,EAAUujB,OAEjBoB,GAAMA,EAAKC,KAAK5kB,EAAU6kB,eAAgB,CAAC7I,EAAGtc,EAASpG,EAAGgD,MAYlE0D,EAAUT,GAAK,SAACG,EAASE,GACjBA,QAAY5K,IAAZ4K,EAAAA,CAEAklB,IAAAA,EAAazvB,KAAK+J,SAASE,eAEHtK,IAAxB8vB,EAAWplB,KAAwBolB,EAAWplB,GAAW,IAC7DolB,EAAWplB,GAASnC,KAAKqC,KAO7BI,EAAU+kB,YAAc,WACb/kB,OAAAA,EAAUwjB,YAOrBxjB,EAAUlE,IAAM,SAACxC,GACT,GAAC0G,EAAUwjB,WAAX,CACAmB,IAAAA,EAAO3kB,EAAUujB,OAEjBoB,GAAMA,EAAKC,KAAK,MAAOtrB,KAS/B0G,EAAUglB,kBAAoB,SAACC,GACtBjlB,EAAUujB,cACCvuB,IAAZiwB,IAAuBA,EAAU5vB,KAAKyU,SAASC,aAEnC/U,IAAZiwB,EAKJjlB,EAAUujB,OAAOqB,KAAK,SAAUK,GAJ5BppB,QAAQC,IAAI,8CAapBkE,EAAUyY,QAAU,SAAC0K,GACbnjB,IAAAA,EAAUwjB,WAAVxjB,CACAmjB,IAASnjB,EAAUmjB,QAAUA,GAE7B7b,IAAAA,EAAO,GAGsB,WAA7BvE,OAAOqgB,SAAS8B,UAChB5d,EAAKqY,KAAO,kBACZrY,EAAK6d,QAAS,EACd7d,EAAK8d,oBAAqB,GAK1B9d,EAAKqY,KAAO,iBAGhB3f,EAAUujB,OAAS8B,GAAG5M,QAAQzY,EAAUmjB,QAAS7b,QAExBtS,IAArBgL,EAAUujB,SACdvjB,EAAUwjB,WAAaxjB,EAAUujB,OAAO+B,UAExCtlB,EAAUulB,6BAGdvlB,EAAU0Y,WAAa,gBACM1jB,IAArBgL,EAAUujB,SAEdvjB,EAAUujB,OAAO7K,aACjB1Y,EAAUwjB,YAAa,IAI3BxjB,EAAUwlB,aAAe,aAIzBxlB,EAAUylB,YAAc,SAAC9E,GACrB3gB,EAAUyjB,UAAY9C,OACG3rB,IAArBgL,EAAUujB,aACQvuB,IAAlBgL,EAAUua,MAEVva,EAAUkkB,SAASlkB,EAAUkkB,QAAQwB,OAAO,4BAA4B/E,EAAS,YACrF3gB,EAAUujB,OAAOqB,KAAK,QAASjE,KAEnC3gB,EAAU2lB,WAAa,SAACrD,GACpBtiB,EAAU4lB,KAAOtD,OACQttB,IAArBgL,EAAUujB,aACQvuB,IAAlBgL,EAAUua,MAEVva,EAAUkkB,UACVlkB,EAAUkkB,QAAQwB,OAAO,sBAAsB1lB,EAAUqkB,UAAUrkB,EAAUua,IAAI,GAAG,iBAAiB+H,EAAI,eACzGtiB,EAAUkkB,QAAQ2B,UAAU7lB,EAAUkkB,QAAQ4B,eAGlD9lB,EAAUujB,OAAOqB,KAAK,OAAQtC,KAKlCtiB,EAAUulB,wBAA0B,WAGhCvlB,EAAUujB,OAAOhkB,GAAG,UAAW,WAC3BS,EAAUwjB,YAAa,OAGMxuB,IAAzBK,KAAKyU,SAASC,QAAsB/J,EAAUglB,oBAElDnpB,QAAQC,IAAI,kCAAkCzG,KAAKyU,SAASC,QAC5D1U,KAAKmK,UAAU,iBAEfQ,EAAUwlB,iBAGdxlB,EAAUujB,OAAOhkB,GAAG,aAAc,WAC9BS,EAAUwjB,YAAa,EACvBxjB,EAAUua,SAAMvlB,EAEhBgL,EAAU4jB,SAAS7rB,OAEfiI,EAAUkkB,SAASlkB,EAAUkkB,QAAQwB,OAAO,sDAEhD7pB,QAAQC,IAAI,qBACZzG,KAAKmK,UAAU,sBAInBQ,EAAUujB,OAAOhkB,GAAGS,EAAU6kB,eAAgB,SAACvoB,GACvCoD,IAAAA,EAAUpD,EAAK0f,EACf1iB,EAAIgD,EAAKhD,EAETqG,EAAStK,KAAK+J,SAASE,UAAUI,GACrCrK,KAAK+J,SAASc,gBAAgBP,EAAQrG,KAG1C0G,EAAUujB,OAAOhkB,GAAG,KAAM,SAACjD,GACvBT,QAAQC,IAAI,cAAgBQ,GAC5B0D,EAAUua,IAAMje,EAEhB0D,EAAU4jB,SAAS5rB,OAEfgI,EAAUkkB,SAASlkB,EAAUkkB,QAAQwB,OAAO,kBAAkBppB,EAAK,YAEvEjH,KAAKmK,UAAU,iBAAkBlD,KAGrC0D,EAAUujB,OAAOhkB,GAAG,SAAU,SAACjD,GACvBie,IAAAA,EAAMje,EAGVT,QAAQC,IAAI,SAAUye,EAAI,sBACtBva,EAAUkkB,SAASlkB,EAAUkkB,QAAQwB,OAAO,YAAYnL,EAAI,8BAEhEva,EAAU+lB,YAAYxL,KAG1Bva,EAAUujB,OAAOhkB,GAAG,SAAU,SAACjD,GACvBie,IAAAA,EAAMje,EACNie,QAAQvlB,IAARulB,EAAAA,CAEA8H,IAAAA,EAAIriB,EAAU2jB,WAAWpJ,GACzB8H,GAAGA,EAAEtqB,OAET8D,QAAQC,IAAI,SAAUye,EAAI,mBACtBva,EAAUkkB,SAASlkB,EAAUkkB,QAAQwB,OAAO,YAAYnL,EAAI,2BAE5Dva,EAAU0jB,UAAU,GAAG1jB,EAAU0jB,eAGzC1jB,EAAUujB,OAAOhkB,GAAG,SAAU,SAACjD,GACvB4O,IAAAA,EAAIlL,EAAUgmB,YAAY1pB,GAE1Bie,EAAMrP,EAAEwV,OACJ1gB,EAAU+lB,YAAYxL,GAI5B0L,uBAAuB/a,KAG7BlL,EAAUujB,OAAOhkB,GAAG,QAAS,SAACjD,GACtBie,IAAAA,EAAQje,EAAKie,IACb2L,EAAQ5pB,EAAKzF,UAEL7B,IAARulB,IAEIva,EAAU+lB,YAAYxL,GAC5BkL,YAAYS,GAEdrqB,QAAQC,IAAI,SAAUye,EAAI,yBAAyB2L,GAC/ClmB,EAAUkkB,SAASlkB,EAAUkkB,QAAQwB,OAAO,YAAYnL,EAAI,yBAAyB2L,EAAM,eAGnGlmB,EAAUujB,OAAOhkB,GAAG,OAAQ,SAACjD,GACrBie,IAAAA,EAAMje,EAAKie,IACX+H,EAAMhmB,EAAKgmB,IAEX/H,QAAQvlB,IAARulB,EAAAA,CAEA8H,IAAAA,EAAIriB,EAAU+lB,YAAYxL,GAC9B8H,EAAEsD,WAAWrD,GAEbzmB,QAAQC,IAAI,SAAUye,EAAI,KAAK+H,GAC3BtiB,EAAUkkB,SAASlkB,EAAUkkB,QAAQwB,OAAO,sBAAsB1lB,EAAUqkB,UAAU9J,EAAI,GAAG,QAAQ8H,EAAE8D,cAAc,SAAS7D,EAAI,kBAG1ItiB,EAAUujB,OAAOhkB,GAAG,QAAS,SAACjD,GACtBie,IAAAA,EAAMje,EAAKie,IACXA,QAAQvlB,IAARulB,EAAAA,CAEA6L,IAAAA,EAAW9pB,EAAK5E,MAChB2qB,EAAIriB,EAAU+lB,YAAYxL,GAG9B8H,EAAEa,cAAc,QAKEluB,IAAdqtB,EAAExB,QACFwB,EAAExB,QAAU,IAAIkC,MAKhBV,EAAExB,QAAQwF,YAAc,EAG5BhE,EAAExB,QAAQlY,IAAMyd,EAChB/D,EAAExB,QAAQmC,WAalBhjB,EAAUsmB,YAAc,SAACpb,GACjB,GAACA,EAAD,CAEAmX,IAAAA,EAAI,IAAIkE,aAAa,GACzBlE,EAAE,GAAKnX,EAAExQ,SAASH,EAClB8nB,EAAE,GAAKnX,EAAExQ,SAASF,EAClB6nB,EAAE,GAAKnX,EAAExQ,SAASD,EAGd+rB,IAAAA,EAAU,IAAIC,UAAUpE,EAAEnb,QAWvBsf,OATPA,EAAQ,IAAwB,IAAjBtb,EAAE7P,WAAWd,EAC5BisB,EAAQ,IAAwB,IAAjBtb,EAAE7P,WAAWb,EAC5BgsB,EAAQ,IAAwB,IAAjBtb,EAAE7P,WAAWZ,EAC5B+rB,EAAQ,IAAwB,IAAjBtb,EAAE7P,WAAWqrB,EAE5BF,EAAQ,IAAMtb,EAAEwV,OAIT8F,IAIXxmB,EAAUgmB,YAAc,SAACQ,GACjBtb,IAAAA,EAAI,GACRA,EAAEwV,OAAS8F,EAAQ,IAGnBtb,EAAE7P,WAAa,IAAI/G,MAAMyc,WACrByV,EAAQ,IAAM,IACdA,EAAQ,IAAM,IACdA,EAAQ,IAAM,IACdA,EAAQ,IAAM,KAKb,IADDG,IAAAA,EAAK,IAAIF,UAAU,IACdptB,EAAE,EAAGA,EAAE,GAAIA,IAAKstB,EAAGttB,GAAKmtB,EAAQntB,GACrCgpB,IAAAA,EAAI,IAAIkE,aAAaI,EAAGzf,QAMrBgE,OAJPA,EAAExQ,SAAW,IAAIpG,MAAMyE,QAAQspB,EAAE,GAAGA,EAAE,GAAGA,EAAE,IAIpCnX,GAKXlL,EAAU/K,OAAS,WAGV,IAAA,IAAI2xB,EAAE,EAAGA,EAAE5mB,EAAU2jB,WAAW7qB,OAAQ8tB,IAAI,CACzCvE,IAAAA,EAAIriB,EAAU2jB,WAAWiD,GACzBvE,GAAKA,EAAE1qB,UACP0qB,EAAEpB,WAAajhB,EAAU+jB,gBACzB1B,EAAEptB,YAKd+K,EAAU8jB,UAAY,WACd9jB,QAAkBhL,IAAlBgL,EAAUua,KACTva,EAAUujB,QAAWvjB,EAAUwjB,WAAhC,CAEAqD,IAAAA,EAAOxxB,KAAKiG,IAAIkV,SAChB,GAACqW,EAAD,CAIA3b,IAAAA,EAAI,GASJlL,GARJkL,EAAExQ,SAAW,IAAIpG,MAAMyE,QACvBmS,EAAE7P,WAAa,IAAI/G,MAAMyc,WAEzB7F,EAAExQ,SAASC,KAAKksB,EAAKrtB,KACrB0R,EAAE7P,WAAWV,KAAKtF,KAAKiG,IAAIC,OAC3B2P,EAAEwV,OAAS1gB,EAAUua,SAGYvlB,IAA7BgL,EAAUgkB,eAA6B,CACnC8C,IAAAA,EAAU9mB,EAAUgkB,eAAetpB,SACnCqsB,EAAU/mB,EAAUgkB,eAAe3oB,WAEnC2rB,EAAOF,EAAQvtB,kBAAkBstB,EAAKrtB,KACtCytB,EAAOF,EAAQG,QAAQ7xB,KAAKiG,IAAIC,OAE/ByrB,GAAAA,EAAOhnB,EAAUmnB,iBAAmBF,EAAOjnB,EAAUonB,gBAAiB,OAI3EZ,IAAAA,EAAUxmB,EAAUsmB,YAAYpb,GACpClL,EAAUujB,OAAOqB,KAAK,SAAU4B,GAChCxmB,EAAUgkB,eAAiB9Y,KAO/BlL,EAAUqnB,UAAY,SAAC9M,GACZva,OAAAA,EAAU2jB,WAAWpJ,IAGhCva,EAAU+lB,YAAc,SAACxL,GAGjBva,QAA8BhL,IAA9BgL,EAAU2jB,WAAWpJ,GAAmB,CACpC8H,IAAAA,EAAI,IAAIriB,EAAUygB,OAAOlG,GAC7B8H,EAAEtU,SAAS/N,EAAU4jB,UAErBvB,EAAEiF,mBAAmBjyB,KAAK4T,SAAS,wBAGnCjJ,EAAU2jB,WAAWpJ,GAAO8H,EAK5BriB,EAAU0jB,YAGVrB,IAAAA,EAAIriB,EAAU2jB,WAAWpJ,GAGtB8H,OAFPA,EAAErqB,OAEKqqB,GAGXriB,EAAUunB,gBAAkB,WACnB,IAAA,IAAIluB,KAAK2G,EAAU2jB,WAAW,CACvB3jB,EAAU2jB,WAAWtqB,GAC3BtB,SAKKiI,IAAAA,EAAAA,EAAAA,QAAAA,QAAAA;;AC1SAgP,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EAzOf,IAAIA,EAAa,CAEjBA,KAAkB,WACdA,EAAWwY,iBAAkB,EAC7BxY,EAAWyY,aAAe,GAE1BzY,EAAW0Y,gBAAe1yB,EAC1Bga,EAAW2Y,oBAAiB3yB,EAG5Bga,EAAW4Y,YAAcvyB,KAAKuZ,qBAC9BI,EAAW4Y,YAAY1vB,iBACvB8W,EAAW4Y,YAAY9H,eAEvB9Q,EAAW6Y,aAAexyB,KAAK8K,OAAO8e,YAAY,iBAElDjQ,EAAW8Y,WAAa,GAK5B9Y,cAA2B,WACvBA,EAAW6Y,aAAexyB,KAAK8K,OAAO8e,YAAY,kBAGtDjQ,YAAyB,SAACoR,QACZprB,IAANorB,IACJpR,EAAW6Y,aAAezH,IAM9BpR,eAA4B,SAAYtV,GAEpCsV,EAAWyY,aAAalqB,KAAK7D,GACzBquB,IAAAA,EAAY/Y,EAAWyY,aAAa3uB,OAGpCX,EAAI,IAAI7D,MAAMqR,KAAMtQ,KAAKsD,MAAMuJ,eAAgB7M,KAAK8K,OAAO8e,YAAY,sBAKvE8I,GAJJ5vB,EAAEuC,SAASC,KAAKjB,GAChBvB,EAAE6C,MAAMJ,IAAI,KAAM,KAAM,MACxBvF,KAAKwpB,IAAIM,QAAQjlB,IAAK/B,GAElB4vB,EAAY,EAAG,OAAO,EAGtBC,IAAAA,EAAS,IAAI1zB,MAAM2zB,qBAAsBjZ,EAAWyY,cACpDnc,EAAS,IAAIhX,MAAMqR,KAAMqiB,EAAM3yB,KAAK8K,OAAO8e,YAAY,sBAKvD,GAACjQ,EAAWwY,gBAwBX,CACGU,IAAAA,EAAalZ,EAAW2Y,eAC5BO,EAAWrzB,SAASgF,UACpBquB,EAAWrzB,SAAWmzB,EAItB3yB,KAAKsD,MAAMwvB,mBAAmBzuB,EAAE,GAChCwuB,EAAWnzB,SAASwW,cAAchO,KAAM7D,EAAEa,GAC1C2tB,EAAWnzB,SAASwW,cAAchO,KAAM7D,EAAEc,GAC1C0tB,EAAWnzB,SAASwW,cAAchO,KAAM7D,EAAEe,OAlCd,CAM5BuU,EAAW4Y,YAAY1tB,IAAIoR,GAG3BA,EAAOvW,SAASwW,cAAgB,GAC3B,IAAA,IAAIlS,EAAE,EAAGA,EAAE0uB,EAAW1uB,IAGvBhE,KAAKsD,MAAMwvB,mBAAmBnZ,EAAWyY,aAAapuB,GAAG,GACzDiS,EAAOvW,SAASwW,cAAchO,KAAKyR,EAAWyY,aAAapuB,GAAGkB,GAC9D+Q,EAAOvW,SAASwW,cAAchO,KAAKyR,EAAWyY,aAAapuB,GAAGmB,GAC9D8Q,EAAOvW,SAASwW,cAAchO,KAAKyR,EAAWyY,aAAapuB,GAAGoB,GAGlEuU,EAAW2Y,eAAiBrc,EAC5B0D,EAAWwY,iBAAkB,EAiB1B,OAAA,GAGXxY,kBAA+B,WAC3BA,EAAWyY,aAAe,GAC1BzY,EAAWwY,iBAAkB,EAE7BxY,EAAW4Y,YAAYna,iBACvBpY,KAAKwpB,IAAIM,QAAQ1R,kBAGrBuB,sBAAmC,WACxBA,OAAAA,EAAW4Y,aAGtB5Y,oBAAiC,SAAC/D,GAM1B+D,GALJA,EAAWyY,aAAe,GAC1BzY,EAAWwY,iBAAkB,OAIExyB,IAA3Bga,EAAW4Y,YAAX5Y,MAEUha,IAAViW,IAAqBA,EAAQ,MAAM+D,EAAW8Y,YAE9C5c,IAAAA,EAAI7V,KAAKsV,gBAAgBM,IAAU5V,KAAKuZ,mBAAmB3D,GA2BxDC,OAzBPA,EAAEhR,IAAI8U,EAAW4Y,YAAYxwB,SAAS,IACtC8T,EAAE3S,YAAayW,EAAW6Y,cAC1B3c,EAAEkd,gCAAgCpZ,EAAW6Y,aAAcxyB,KAAK8K,OAAOC,UAAUwB,iBACjFsJ,EAAEjT,gBAEF+W,EAAW4Y,YAAYna,iBAUvBuB,EAAW8Y,aAQXzyB,KAAKwpB,IAAIM,QAAQ1R,iBAEVvC,IAGX8D,kBAA+B,SAAC/D,EAAOkE,GAC/B6Y,IAAAA,EAAS,IAAI1zB,MAAM2zB,qBAAsB9Y,GACzC7D,EAAS,IAAIhX,MAAMqR,KAAMqiB,EAAMhZ,EAAW6Y,cAE9Cvc,EAAOvW,SAASwW,cAAgB,GAC3B,IAAA,IAAIlS,EAAE,EAAGA,EAAE8V,EAAOrW,OAAQO,IAAI,CAC3BK,IAAAA,EAAIyV,EAAO9V,GACfhE,KAAKsD,MAAMwvB,mBAAmBzuB,EAAE,GAEhC4R,EAAOvW,SAASwW,cAAchO,KAAM7D,EAAEa,GACtC+Q,EAAOvW,SAASwW,cAAchO,KAAM7D,EAAEc,GACtC8Q,EAAOvW,SAASwW,cAAchO,KAAM7D,EAAEe,GAGtCyQ,IAAAA,EAAI7V,KAAKsZ,wBAAwB1D,GAM9BC,OALPA,EAAEhR,IAAIoR,GACNJ,EAAEkd,gCAAgCpZ,EAAW6Y,aAAcxyB,KAAK8K,OAAOC,UAAUwB,iBAEjFsJ,EAAEjT,gBAEKiT,GAGX8D,sBAAmC,SAAYqZ,GACvC,IAAChzB,KAAKylB,gBAAiB,OAAO,OAEnB9lB,IAAXqzB,IAAsBA,EAAS,KAE/B3uB,IAAAA,EAAMrE,KAAKylB,gBAAgBphB,EAC3Bid,EAAMthB,KAAKiG,IAAI4V,wBAUZxX,OAHPA,EAAEub,YAAYvb,EAAGid,EAAK0R,GAEtBrZ,EAAWsZ,eAAe5uB,GACnBA,GAMXsV,aAA0B,SAAC/D,EAAOmY,EAAUpN,GACpCoN,QAAapuB,IAAbouB,QACWpuB,IAAXghB,EAAAA,MAQUhhB,IAAViW,IAAqBA,EAAQ,MAAM+D,EAAW8Y,YAE9C5c,IAAAA,EAAI7V,KAAKsZ,wBAAwB1D,GAGjC9S,EAAI,IAAI7D,MAAMqR,KAAMtQ,KAAKsD,MAAMuJ,eAAgB8M,EAAW6Y,cAG1Dzc,EAAS,IAAI9W,MAAMi0B,SAahBrd,OAZPE,EAAO1Q,SAASC,KAAKyoB,GACrBhY,EAAOpQ,MAAMJ,IAAIob,EAAQA,EAAQA,GACjC5K,EAAOlR,IAAI/B,GAEX+S,EAAEhR,IAAKkR,GACPF,EAAEjT,gBACFiT,EAAEkd,gCAAgCpZ,EAAW6Y,aAAcxyB,KAAK8K,OAAOC,UAAUwB,iBAIjFoN,EAAW8Y,aAEJ5c,IAGX8D,oBAAiC,SAAC/D,GAC1B,GAAC5V,KAAKylB,gBAAN,CAEAphB,IAAAA,EAAIrE,KAAKylB,gBAAgBphB,EACzBmW,EAAIxa,KAAKwpB,IAAIY,oBAEVzQ,OAAAA,EAAWC,aAAahE,EAAOvR,EAAEmW,MAG7Bb,EAAAA,EAAAA,QAAAA,QAAAA;;ACwSAiM,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EAjhBf,IAAIA,EAAK,CAGTA,gBAAqB,EACrBA,gBAAqB,EAGrBA,QAAa,WACTA,EAAGuN,eAAiBnzB,KAAK4T,SAAS,SAElCgS,EAAGwN,SAAU,EACbxN,EAAGyN,aAAe,IAClBzN,EAAG0N,UAAY,GAEf1N,EAAG2N,gBAAa5zB,EAChBimB,EAAG4N,mBAAoB,EAEvB5N,EAAG6N,WAAY,EAEf7N,EAAG8N,UAAY,IAAIC,gBAAgBjmB,OAAOqgB,SAAS6F,QAEnDhO,EAAGiO,eAEH7zB,KAAKgsB,UAGD8H,IAAAA,EAAQ9zB,KAAK4lB,GAAG8N,UAAUK,IAAI,KAC9BD,GAASA,EAAM,GAAK9zB,KAAKg0B,uBAAuBF,IAIxDlO,qBAA0B,WACtB5lB,KAAKkK,GAAG,mBAAoB,WAAM4E,EAAE,aAAanM,SACjD3C,KAAKkK,GAAG,2BAA4B,WAChC4E,EAAE,aAAapM,OAIXkjB,EAAG6N,iBAEkB9zB,IAArBK,KAAKiG,IAAIqV,SACTtb,KAAKiG,IAAIsb,6BAA6B,IAG1CqE,EAAG6N,WAAY,KAGnBzzB,KAAKkK,GAAG,kBAAkB,gBACGvK,IAArBK,KAAKiG,IAAIqV,SAAuBtb,KAAKiG,IAAIub,YAAY,OAKjEoE,6BAAkC,SAACziB,QAErBxD,IAANwD,IAAiBA,EAAI,MAEzBnD,KAAKkK,GAAG,aAAc,SAACjG,GACfjE,QAAkCL,IAAlCK,KAAKiG,IAAI4X,UAAUL,WAEnBxd,GAAAA,KAAKi0B,WAAW,CAChBj0B,KAAKiG,IAAI4X,UAAUL,YAAa,EAE5BhD,IAAAA,EAAIxa,KAAKwpB,IAAIG,aAAahkB,MAAMT,GACpCsV,IAAOvW,EAAEd,GACD,MAAQnD,KAAKwpB,IAAIK,kBAAkBrP,QAG3Cxa,KAAKiG,IAAI4X,UAAUL,YAAa,KAK5CoI,YAAiB,SAAC5Q,GACVA,QAAQrV,IAARqV,EAAAA,CAEAkf,IAAAA,EAASl0B,KAAKm0B,mBAAqBnf,EACnChV,KAAKyU,SAASG,SAAQsf,GAAU,SAEpCl0B,KAAKyU,SAASzN,KAAKktB,EAAQlf,GAC3BxO,QAAQC,IAAIytB,KAQhBtO,aAAkB,WACdA,EAAGwO,YAAY,eAAe,aAAcp0B,KAAKq0B,kBAC7Cr0B,KAAKsD,MAAMgxB,sBAAsB1O,EAAGwO,YAAY,eAAe,KAAMp0B,KAAKyc,GAAG8X,QAEjF3O,EAAGwO,YAAY,kBAAkB,OAAQ,WAAMp0B,KAAKiG,IAAIub,YAAY,OAGxEoE,aAAkB,WACd9W,EAAE,YAAYyC,MAAOqU,EAAG4O,YACxB1lB,EAAE,aAAa2lB,KAAK,aAAaz0B,KAAK4T,SAAS,iBAInDgS,YAAiB,SAAC8O,EAAaC,EAAMC,GAC7BC,IAAAA,EACAC,EAEAH,EAAKI,SAAS,SACdF,EAAUF,EACVG,EAAUH,EAAKK,MAAM,GAAG,KAGxBH,EAAUjP,EAAGuN,eAAewB,EAAK,OACjCG,EAAUH,GAGVM,IAAAA,EAAW,gBAAgBH,EAAO,+BAA+BD,EAAQ,WAC7E/lB,EAAE,IAAI4lB,GAAarE,OAAO4E,GAEtBL,GAAS9lB,EAAE,QAAQgmB,GAAQvjB,MAAOqjB,IAG1ChP,eAAoB,SAACkP,EAAQrzB,GACrBA,EAAGqN,EAAE,QAAQgmB,GAAQI,SAAS,cAC7BpmB,EAAE,QAAQgmB,GAAQK,YAAY,eAGvCvP,gBAAqB,SAAC8O,GAClB9O,EAAGwO,YAAYM,EAAa,OAAQ,WAChC10B,KAAKiG,IAAIub,YAAY,OAI7BoE,uBAA4B,SAAC8O,GACzB9O,EAAGwO,YAAYM,EAAa,KAAM,WAC1B10B,KAAKiG,IAAIkW,iBACTnc,KAAKiG,IAAIiV,kBACT0K,EAAGwP,eAAe,MAAK,KAGvBp1B,KAAKiG,IAAIsW,wBACTqJ,EAAGwP,eAAe,MAAK,OAKnCxP,cAAmB,SAAC8O,GACX10B,KAAKsD,MAAMgxB,sBAGhB1O,EAAGwO,YAAYM,EAAa,KAAM10B,KAAKyc,GAAG8X,SAE9C3O,6BAAkC,SAAC8O,GAC1B10B,KAAKsD,MAAMgxB,sBACXt0B,KAAKsD,MAAMsK,YAEhBgY,EAAGwO,YAAYM,EAAY,SAAU,WAC7B10B,KAAKiG,IAAIoW,YACTrc,KAAKiG,IAAIiV,kBACT0K,EAAGwP,eAAe,UAAS,KAG3Bp1B,KAAKiG,IAAIuW,8BACToJ,EAAGwP,eAAe,UAAS,OAKvCxP,gBAAqB,SAAC8O,GACb10B,KAAKsD,MAAMgxB,sBAEhB1O,EAAGwO,YAAYM,EAAa,OAAQ,WAC5B10B,KAAKq1B,SAASC,oBACdt1B,KAAKq1B,SAASE,qBAEdzmB,EAAE,aAAaqmB,YAAY,iBAG3Bn1B,KAAKq1B,SAASG,sBAEd1mB,EAAE,aAAaomB,SAAS,mBAKpCtP,cAAmB,SAAC8O,GAChB9O,EAAGwO,YAAYM,EAAY,KAAM9O,EAAG6P,UAGxC7P,sBAA2B,SAAC8O,GACxB9O,EAAGwO,YAAYM,EAAa,aAAc,WACtC10B,KAAKq0B,mBACLqB,WAAWC,aAAc/P,EAAGwP,eAAe,cAAa,GAASxP,EAAGwP,eAAe,cAAa,MAIxGxP,eAAoB,SAAC8O,GACjB9O,EAAGwO,YAAYM,EAAa,MAAO,WAC3B10B,KAAK2K,UAAU+kB,cACf9J,EAAGgQ,WAGH51B,KAAK2K,UAAUyY,YAIvBpjB,KAAKkK,GAAG,iBAAkB,SAACgb,GACnBlhB,IAAAA,EAAKkhB,EAAI,EACbpW,EAAE,YAAYomB,SAAS,WAAWlxB,GAElC4hB,EAAGiQ,UAAU,SAAC5uB,QACUtH,IAAhBsH,EAAKqkB,UAAkEtrB,KAAK2K,UAAUylB,YAAYnpB,EAAKqkB,cAInHtrB,KAAKkK,GAAG,mBAAoB,WACxB4E,EAAE,YAAYgnB,KAAK,QAAQ,cAInClQ,gBAAqB,SAAC8O,GAClB9O,EAAGwO,YAAYM,EAAa,OAAQ,WAChC9O,EAAGmQ,eAIXnQ,oBAAyB,SAAC8O,GACtB9O,EAAGwO,YAAYM,EAAa,OAAQ,WAChC9O,EAAGiQ,UAAU,SAAC5uB,QACYtH,IAAlBsH,EAAKqkB,UACLtrB,KAAKyU,SAASG,QAAU5U,KAAKyU,SAASG,OACtCgR,EAAGwP,eAAe,OAAOp1B,KAAKyU,SAASG,SAIvCgR,EAAGmQ,iBAOnBnQ,sBAA2B,SAACoQ,GACxBlnB,EAAE,IAAIknB,GAAS9rB,GAAG,qBAAsB,WAChC+rB,IAAAA,EAAQnnB,EAAE,IAAIknB,GAASE,MACvBC,EAAa,IAAIC,OAAO,cAAe,MAC3CtnB,EAAE,IAAIknB,GAASE,IAAKD,EAAM1iB,QAAQ4iB,EAAY,QAKtDvQ,mBAAwB,WACpBA,EAAGyQ,MAAQ,GAEXzQ,EAAGyQ,MAAMC,OAAS,IAAI5I,MAAM1tB,KAAK4T,SAAS,oBAC1CgS,EAAGyQ,MAAMC,OAAOC,MAAO,GAG3B3Q,0BAA+B,SAAChQ,GAExBA,QAAUjW,IAAViW,EAAAA,CAEAC,IAAAA,EAAI7V,KAAKsV,gBAAgBM,GACzBC,QAAMlW,IAANkW,EAAAA,CAEAzT,IAAAA,EAAKyT,EAAE2gB,gBACA72B,IAAPyC,SAEkBzC,IAAlBimB,EAAG2N,aAA0B3N,EAAG2N,WAAa,IAAI7F,OAErD9H,EAAG4N,mBAAoB,EACvB5N,EAAG2N,WAAWjgB,IAAMlR,EAEpBwjB,EAAG2N,WAAW5F,OAEd/H,EAAG2N,WAAW3F,QAAU,WACpBhI,EAAG4N,mBAAoB,OAO/B5N,UAAe,SAAC6Q,EAAaC,GACrB9Q,GAAAA,EAAGwN,QAAS,OAAO,EAEnBuD,IAAAA,EAAQ,aACRD,IAAYC,GAASD,GAErBE,IAAAA,EAAS,mCAAmCD,EAAM,KAoB/C,OAnBPC,GAAUH,EAAY,SAEtB3nB,EAAE,YAAY2lB,KAAKmC,GACnB9nB,EAAE,mBAAmByC,MAAM,SAACoV,GAAMA,EAAEkQ,oBACpC/nB,EAAE,YAAYgoB,SAEdlR,EAAGwN,SAAU,EAETxN,EAAGyN,aAAe,IAClBrzB,KAAKiJ,UAAU8tB,cAAenR,EAAGyN,cACjCrzB,KAAKiJ,UAAUgK,OAAQjT,KAAKkT,UAAWlT,KAAKiG,IAAI4M,UAGpD7S,KAAKirB,cAAe,EAGpBnc,EAAE,iBAAiBpM,OACnBoM,EAAE,oBAAoBpM,QAEf,GAGXkjB,WAAgB,WACZA,EAAGwN,SAAU,EAGTxN,EAAGyN,aAAe,GAAKrzB,KAAKg3B,oBAEhCloB,EAAE,YAAYmoB,UAGdj3B,KAAKirB,cAAe,EAEpBnc,EAAE,iBAAiBnM,OACnBmM,EAAE,oBAAoBnM,OAEtB3C,KAAKk3B,iBAGTtR,QAAa,WAIJ,GAFU,4DAET5lB,KAAK4lB,GAAGuR,UAFdV,2EAEK,CAEDtwB,IAAAA,EAAMuH,OAAOqgB,SAAS5c,KACtBimB,IAAAA,OAAOlqB,SAASmqB,eAAe,YAAalxB,KAGpDyf,gBAAqB,WACb0R,IAAAA,EAAQt3B,KAAKsD,MAAMi0B,eAAe,KAEtC3R,EAAGiQ,UAAU,SAACrb,GAENic,IAAAA,EAAc,sBAClBA,GAAe,oEACfA,GAAe,aAAaa,EAAMhkB,IAAI,SACtCmjB,GAAe,2FAEfA,GAAe,qFAAqF7Q,EAAGuN,eAAe,6BAEnGxzB,IAAf6a,EAAE8Q,WACFmL,GAAe,4FAQbz2B,KAAK4lB,GAAGuR,UAAUV,KAExB3nB,EAAE,kBAAkByC,MAAM,WACtBvR,KAAK4lB,GAAG4O,aAEJtyB,IAAAA,EAAIs1B,SAAU1oB,EAAE,eAAeonB,OACzBl2B,KAAKsD,MAAMi0B,eAAer1B,EAAE,cAG1C4M,EAAE,gBAAgByC,MAAM,WACpBvR,KAAK4lB,GAAG4O,aAERx0B,KAAKsD,MAAMm0B,SAASz3B,KAAKua,aAAa,YAAa,CAACvF,IAAKhV,KAAKyU,SAASC,OAAQ/B,IAAK2kB,EAAMhkB,KAAO,SAACkH,GAC9FhU,QAAQC,IAAI+T,WAO5BoL,SAAc,WACN6Q,IAAAA,EAAc,GAClBA,GAAe,iCAGfA,GAAe,kGACfA,GAAe,gFAAgFz2B,KAAK2K,UAAUyjB,UAAU,SAExHqI,GAAe,oGAGfA,GAAe,+EAGfA,GAAe,sFAETz2B,KAAK4lB,GAAGuR,UAAUV,EAAa,yBAEJ92B,IAA7BK,KAAK2K,UAAUyjB,WACftf,EAAE,kBAAkBnM,OACpBmM,EAAE,qBAAqBpM,SAGvBoM,EAAE,kBAAkBonB,IAAIl2B,KAAK2K,UAAUyjB,WACvCtf,EAAE,kBAAkBpM,OACpBoM,EAAE,qBAAqBnM,aAGAhD,IAAvBK,KAAK2K,UAAUua,KAAmBpW,EAAE,qBAAqBomB,SAAS,WAAYl1B,KAAK2K,UAAUua,IAAM,GAEvGpW,EAAE,cAAcuhB,OAAOrwB,KAAK2K,UAAUkkB,SAEtC/f,EAAE,aAAa4oB,SAAS,SAAC/Q,GAElBgR,GAAW,OADChR,EAAEiR,QAAUjR,EAAEiR,QAAUjR,EAAEkR,OACtB,CACXrmB,IAAAA,EAAM1C,EAAE,aAAaonB,MACzBl2B,KAAK2K,UAAU2lB,WAAY9e,GAC3B1C,EAAE,aAAaonB,IAAI,OAK3BpnB,EAAE,kBAAkB4oB,SAAS,SAAC/Q,GAEvBgR,GAAW,OADChR,EAAEiR,QAAUjR,EAAEiR,QAAUjR,EAAEkR,OACtB,CACXrmB,IAAAA,EAAM1C,EAAE,kBAAkBonB,MAC9Bl2B,KAAK2K,UAAUylB,YAAa5e,GAE5B1C,EAAE,kBAAkBpM,OACpBoM,EAAE,qBAAqB2lB,KAAKz0B,KAAK2K,UAAUyjB,WAC3Ctf,EAAE,qBAAqBnM,UAI/BmM,EAAE,qBAAqByC,MAAM,WACzBzC,EAAE,kBAAkBnM,OACpBmM,EAAE,qBAAqBpM,SAG3BoM,EAAE,oBAAoByC,MAAM,WACxBvR,KAAK2K,UAAU0Y,aACfrjB,KAAK4lB,GAAG4O,iBAMhB5O,UAAe,SAAChX,GACZE,EAAEC,KAAK,CACH3P,KAAM,MACN+G,IAAKnG,KAAKua,aAAa,OACvBvL,UAAW,CAAEC,iBAAiB,GAC9BI,SAAU,OAEVC,QAAS,SAACrI,GACN2e,EAAG0N,UAAYrsB,EACfT,QAAQC,IAAImf,EAAG0N,gBAEK3zB,IAAhBsH,EAAKqkB,eAAmD3rB,IAA3BK,KAAK2K,UAAUyjB,WAAuBpuB,KAAK2K,UAAUylB,YAAYnpB,EAAKqkB,UAEvG1c,EAAU3H,OAKtB2e,UAAe,WAEXA,EAAGiQ,UAAU,SAACrb,GAENA,QAAe7a,IAAf6a,EAAE8Q,SAAuB,CACrBmL,IAAAA,EAAc,aAAa7Q,EAAGuN,eAAe,iBAK5C,GAJLsD,GAAe,4BAA4Bjc,EAAE8Q,SAAS,gBAEtDmL,GAAe,oFAETz2B,KAAK4lB,GAAGuR,UAAUV,GAAe,OAEvC3nB,EAAE,gBAAgByC,MAAM,WACpBzC,EAAEilB,IAAI/zB,KAAKua,aAAa,SAAU,SAACC,GAC/BhU,QAAQC,IAAI+T,GACZxa,KAAKyU,SAASqjB,aAAY,GAC1B93B,KAAKmK,UAAU,YAGnBnK,KAAK4lB,GAAG4O,mBAMX,CACGiC,IAAAA,EAAc,aAAa7Q,EAAGuN,eAAe,iBAM5C,GALLsD,GAAe,6EACfA,GAAe,iFAEfA,GAAe,oFAETz2B,KAAK4lB,GAAGuR,UAAUV,GAAe,OAEvC3nB,EAAE,eAAeyC,MAAM,WACf+I,IAAAA,EAAOpL,KAAKC,UAAU,CACtBmc,SAAUxc,EAAE,eAAeonB,MAC3B6B,SAAUjpB,EAAE,eAAeonB,QAG/BpnB,EAAEC,KAAK,CACH5I,IAAKnG,KAAKua,aAAa,QACvBnb,KAAK,OACL6H,KAAMqT,EACNlL,YAAY,kCACZC,SAAS,OAETC,QAAS,SAACkL,GACNhU,QAAQC,IAAI+T,GACRA,IACAxa,KAAKmK,UAAU,QAASqQ,GACxBxa,KAAK4lB,GAAG4O,iBAIjBjlB,KAAK,SAAClI,GAELyH,EAAE,eAAe2lB,KAAK,gBACtB3lB,EAAE,eAAegnB,KAAK,QAAQ,gCAQnClQ,EAAAA,EAAAA,QAAAA,QAAAA;;AC3QAyP,aAAAA,SAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GAAAA,IAAAA,IAAAA,EAAAA,EAAAA,GAAAA,GAAAA,EAAAA,EAAAA,MAAAA,MAAAA,GAAAA,YAAAA,EAAAA,GAAAA,EAAAA,KAAAA,EAAAA,GAAAA,QAAAA,QAAAA,GAAAA,KAAAA,EAAAA,GAAAA,SAAAA,EAAAA,GAAAA,OAAAA,WAAAA,IAAAA,EAAAA,KAAAA,EAAAA,UAAAA,OAAAA,IAAAA,QAAAA,SAAAA,EAAAA,GAAAA,IAAAA,EAAAA,EAAAA,MAAAA,EAAAA,GAAAA,SAAAA,EAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,OAAAA,GAAAA,SAAAA,EAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,QAAAA,GAAAA,OAAAA,MAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EAtQf,IAAIA,EAAW,CACfA,OAAkB,YAClBA,MAAkB,OAIlBA,gBAA4B,IAC5BA,iBAA4B,IAC5BA,SAAoB,EAGpBA,KAAgB,WACZA,EAAS2C,kBAAmB,EAC5B3C,EAAS4C,aAAc,EAEvB5C,EAAS6C,cAAWv4B,GAGxB01B,qBAAgC,SAAEjvB,GAC1BivB,QAAsB11B,IAAtB01B,EAAS6C,SACT7C,EAAS6C,SAASC,QACd/xB,GAAYA,QAIf,CACG,IAACpG,KAAKsD,MAAMgxB,qBAAsB,OAClC,IAACxmB,UAAUsqB,aAAc,YAERz4B,IAAjB01B,EAASgD,MAAmBhD,EAASgD,IAAM7J,YAAa6G,EAASiD,aAAcjD,EAASkD,mBAEnFzqB,UAAUsqB,aAAaI,aAAa,CACzCC,OAAO,EACPp2B,OAAO,EACPq2B,aAAc,EACdC,kBAAkB,IAGnBryB,KAAH,WAAQ,IAAA,EAAA,EAAA,mBAAA,KAAA,SAAesyB,EAAAA,GAAf,OAAA,mBAAA,KAAA,SAAA,GAAA,OAAA,OAAA,EAAA,KAAA,EAAA,MAAA,KAAA,EACJvD,EAAS6C,SAAWW,UAAUD,EAAQ,CAClCx5B,KAAM,QACN05B,SAAUzD,EAAS0D,OAEnBC,cAAe3D,EAAS4D,gBACxBC,mBAAoB7D,EAAS4D,gBAE7BE,WAAY,MACZC,gBAAiB,MAEjBC,aAAa,EAGbC,sBAAuB,IA6CvBlzB,GAAYA,IA3DZ,KAAA,EAAA,IAAA,MAAA,OAAA,EAAA,SAAA,MAAR,OAAA,SAAA,GAAA,OAAA,EAAA,MAAA,KAAA,YAAA,MAgERivB,iBAA4B,WACjBA,OAAAA,EAAS2C,kBAIpB3C,gBAA2B,SAAEkE,GACpBlE,EAAS6C,SAKd7C,EAAS6C,SAASsB,cAAc,WAgB5BnE,EAAS6C,SAASuB,WAAW,SAACC,GAErB15B,KAAK2K,UAAUujB,aAAiCvuB,IAAvBK,KAAK2K,UAAUua,KAK7CllB,KAAK2K,UAAUujB,OAAOyL,UAAS,GAAOznB,QAAO,GAAMqd,KAAK,QAAS,CAC7DltB,MAAOq3B,EACPxU,IAAKllB,KAAK2K,UAAUua,MAIpBqU,GAAUA,KAVNA,GAAUA,QAvBlBA,GAAUA,KAiDtBlE,UAAqB,SAACuE,GACbA,GACA55B,KAAK2K,UAAUujB,QAKpBluB,KAAK2K,UAAUujB,OAAOqB,KAAK,QAAS,CAChCre,KAAM0oB,EACN1U,IAAKllB,KAAK2K,UAAUua,IACpBgI,IAAKmI,EAASwE,gBAKtBxE,eAA0B,WACtBA,EAASyE,qBAAqB,WAErBzE,EAAS6C,WACV7C,EAAS2C,mBAEbxxB,QAAQC,IAAI,gBAEZ4uB,EAAS6C,SAAS6B,iBAClB1E,EAAS2C,kBAAmB,OAIpC3C,cAAyB,WAChBA,EAAS6C,UAEd7C,EAAS6C,SAASsB,cAAc,WACxBI,IAAAA,EAAQvE,EAAS6C,SAAS8B,UAI9BxzB,QAAQC,IAAI,mBAERwzB,IAAAA,EAAS,IAAIC,WACjBD,EAAOE,cAAcP,GACrBK,EAAOG,UAAY,WACXC,IAAAA,EAAaJ,EAAOK,OAExBt6B,KAAKmK,UAAU,uBAAwBkwB,IAG3ChF,EAAS2C,kBAAmB,KAIpC3C,qBAAgC,WACxBA,EAAS2C,iBAAkB3C,EAASmE,gBACnCnE,EAAS0E,kBAGlB1E,aAAwB,WACfA,EAAS6C,UACT7C,EAAS4C,aAEd5C,EAASkF,gBAAgB,WACrBlF,EAAS6C,SAAS6B,oBAK1B1E,oBAA+B,WAC3BA,EAASyE,qBAAqB,WACrBzE,EAAS6C,WACV7C,EAAS2C,mBAGbxxB,QAAQC,IAAI,wBAEZ4uB,EAAS6C,SAAS6B,iBAClB1E,EAAS2C,kBAAmB,EAC5B3C,EAAS4C,aAAc,OAK/B5C,mBAA8B,WACrBA,EAAS6C,UACT7C,EAAS2C,mBAEdxxB,QAAQC,IAAI,uBAEZ4uB,EAASkF,gBAAgB,WACrBlF,EAAS4C,aAAc,EACvB5C,EAAS2C,kBAAmB,MAWpC3C,0BAAqC,WAC7BA,EAAS2C,iBAAkB3C,EAASE,qBACnCF,EAASG,wBAGHH,EAAAA,EAAAA,QAAAA,QAAAA;;ACvQf,aAurCer1B,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EA9qCf,IAAA,EAAA,EAAA,QAAA,mBACA,EAAA,EAAA,QAAA,kBAEA,EAAA,EAAA,QAAA,yBAEA,EAAA,EAAA,QAAA,uBACA,EAAA,EAAA,QAAA,qBACA,EAAA,EAAA,QAAA,oBACA,EAAA,EAAA,QAAA,uBACA,EAAA,EAAA,QAAA,kBACA,EAAA,EAAA,QAAA,iBACA,EAAA,EAAA,QAAA,kBACA,EAAA,EAAA,QAAA,wBACA,EAAA,EAAA,QAAA,yBACA,EAAA,EAAA,QAAA,iBACA,EAAA,EAAA,QAAA,uBA+pCeA,SAAAA,EAAAA,GAAAA,OAAAA,GAAAA,EAAAA,WAAAA,EAAAA,CAAAA,QAAAA,GAlrCf,IAAIA,EAAO,GACX0N,OAAO1N,KAAOA,EAqBdA,EAAKhB,KAAaA,EAAlB,QACAgB,EAAKyH,IAAaA,EAAlB,QACAzH,EAAKqI,WAAaA,EAAlB,QAIArI,EAAK+J,SAAaA,EAAlB,QACA/J,EAAKsD,MAAaA,EAAlB,QACAtD,EAAKyU,SAAaA,EAAlB,QACAzU,EAAK8K,OAAaA,EAAlB,QACA9K,EAAKiG,IAAaA,EAAlB,QACAjG,EAAKyc,GAAaA,EAAlB,QACAzc,EAAKwpB,IAAaA,EAAlB,QACAxpB,EAAK2K,UAAaA,EAAlB,QACA3K,EAAK2Z,WAAaA,EAAlB,QACA3Z,EAAK4lB,GAAaA,EAAlB,QACA5lB,EAAKq1B,SAAaA,EAAlB,QAKAr1B,EAAK4H,aAAe,IAAI3I,MAAMyE,QAAQ,EAAE,EAAE,GAC1C1D,EAAKsB,SAAW,IAEhBtB,EAAKw6B,QAAW,IAAQjmB,KAAKC,GAC7BxU,EAAKy6B,QAAWlmB,KAAKC,GAAK,IAG1BxU,EAAKC,OAAS,GAEdD,EAAKC,OAAOC,MAAS,EACrBF,EAAKC,OAAOO,IAAS,EACrBR,EAAKC,OAAOU,GAAS,EAGrBX,EAAKua,aAAqB7M,OAAOqgB,SAASC,OAAS,QACnDhuB,EAAKm0B,mBAAqBn0B,EAAKua,aAAe,SAC9Cva,EAAK06B,UAAqBhtB,OAAOqgB,SAASC,OAAS,SACnDhuB,EAAK26B,WAAqB36B,EAAK06B,UAAY,SAC3C16B,EAAK46B,eAAqB56B,EAAK26B,WAAW,0BAC1C36B,EAAK66B,eAAqB76B,EAAK26B,WAAW,0BAE1C36B,EAAKwW,gBAAkB9I,OAAOqgB,SAASC,OAAS,eAChDhuB,EAAK86B,YAAkB96B,EAAKwW,gBAAkB,UAC9CxW,EAAK+6B,YAAkBrtB,OAAOqgB,SAASC,OAAS,WAChDhuB,EAAK4T,SAAkBlG,OAAOqgB,SAASC,OAAS,QAEhDhuB,EAAKg7B,aAAe,GACpBh7B,EAAKi7B,YAAe,GACpBj7B,EAAKk7B,aAAe,GACpBl7B,EAAKm7B,YAAe,KAMpBn7B,EAAKo7B,kBAAoB,SAAC9Q,GACtBtqB,EAAKwW,gBAA+C8T,EACpDtqB,EAAK86B,YAAkB96B,EAAKwW,gBAAgB,WAOhDxW,EAAKq7B,cAAgB,SAAC/Q,GAClBtqB,EAAK+6B,YAA2CzQ,GAIpDtqB,EAAKs7B,oBAAsB,WACnBC,IAAAA,EAAKv7B,EAAKiJ,UAAUmK,WAExB1F,OAAOiQ,iBAAkB,SAAU3d,EAAKwT,WAAW,GACnD+nB,EAAG5d,iBAAkB,YAAa3d,EAAKw7B,mBAAmB,GAG1DD,EAAG5d,iBAAiB,YAAa,SAACgJ,GACb,IAAbA,EAAEqE,QAAchrB,EAAKmK,UAAU,kBAClB,IAAbwc,EAAEqE,QAAchrB,EAAKmK,UAAU,sBAGvCoxB,EAAG5d,iBAAkB,QAAS3d,EAAKy7B,eAAe,GAIlDC,OAAOH,GAAIrxB,GAAG,YAAa,SAACyc,GACxB3mB,EAAKmK,UAAU,YAAawc,EAAEgV,YAIlCD,OAAOH,GAAIrxB,GAAG,MAAO,SAACyc,GAQd3mB,GAPJA,EAAKw7B,kBAAkB7U,EAAEgV,UACzB37B,EAAK47B,iBAEL57B,EAAKmK,UAAU,MAAOwc,EAAEgV,eAIAh8B,IAApBK,EAAK+lB,WAAL/lB,CACAgmB,IAAAA,EAAIhmB,EAAKolB,UAAUplB,EAAK+lB,YACxBC,GAAKA,EAAE3kB,UAAU2kB,EAAE3kB,cAG3BrB,EAAKkK,GAAG,YAAa,SAACyc,GAElB3mB,EAAK67B,iCAAiClV,KAS1C3mB,EAAKi0B,YAAa,EAClBj0B,EAAK87B,WAAa,EAElBP,EAAG5d,iBAAiB,UAAW,SAACgJ,GACd,UAAVA,EAAEoV,MAAmB/7B,EAAKi0B,YAAa,GAC7B,YAAVtN,EAAEoV,MAAmB/7B,EAAK87B,WAAa,GAE3C97B,EAAKmK,UAAU,WAAYwc,EAAEoV,OAE9B,GAEHR,EAAG5d,iBAAiB,QAAS,SAACgJ,GACZ,UAAVA,EAAEoV,MAAmB/7B,EAAKi0B,YAAa,GAC7B,YAAVtN,EAAEoV,MAAmB/7B,EAAK87B,WAAa,GAE3C97B,EAAKmK,UAAU,QAASwc,EAAEoV,OAE3B,GAGH/7B,EAAKkK,GAAG,WAAY,SAACrI,GAEbA,GAAI,MAAJA,EAAQ,CACJsB,IAAAA,EAAInD,EAAKiG,IAAIyY,SAAW,EAC5B1e,EAAKiG,IAAI4R,OAAO1U,GAEhBtB,GAAI,MAAJA,EAAQ,CACJsB,IAAAA,EAAInD,EAAKiG,IAAIyY,SAAW,EAC5B1e,EAAKiG,IAAI4R,OAAO1U,GAGhBtB,GAAI,WAAJA,EAAa,CACT2Y,IAAAA,EAAIxa,EAAKwpB,IAAIG,aAAahkB,MAAMT,EAAI,IACxClF,EAAKwpB,IAAIK,kBAAkBrP,GAE3B3Y,GAAI,aAAJA,EAAe,CACX2Y,IAAAA,EAAIxa,EAAKwpB,IAAIG,aAAahkB,MAAMT,EAAI,IACxCsV,EAAIjG,KAAKynB,IAAIxhB,EAAG,KAChBxa,EAAKwpB,IAAIK,kBAAkBrP,OAiBvCxa,EAAKwT,UAAY,WACbxT,EAAKiG,IAAI4M,QAAQC,OAASpF,OAAOoP,WAAapP,OAAOqP,YACrD/c,EAAKiG,IAAI4M,QAAQE,yBAEjB/S,EAAKiJ,UAAU+J,QAAStF,OAAOoP,WAAYpP,OAAOqP,aAClDvW,QAAQC,IAAI,aAGhBzG,EAAKy7B,cAAgB,SAAC9U,GAClBA,EAAEsV,iBAEFj8B,EAAKmK,UAAU,aAAcwc,EAAEuV,SAGnCl8B,EAAKk3B,cAAgB,WACjBl3B,EAAKiJ,UAAUmK,WAAW+oB,SAI9Bn8B,EAAK67B,iCAAmC,SAAClV,GACrC3mB,EAAKw7B,kBAAkB7U,GACvB3mB,EAAKo8B,oBAEDC,IAAAA,EAAWr8B,EAAKiG,IAAIkW,iBAAmBnc,EAAKiG,IAAIoW,WAGhDrc,GAAAA,EAAKylB,iBAAmB4W,EAAxBr8B,CACI2G,IAAAA,EAAI3G,EAAKylB,gBAAgBphB,EAGzBO,GAFI5E,EAAKylB,gBAAgB9P,EAEvBxQ,EAAI,GAAI,CACNm3B,IAAAA,EAAUt8B,EAAKiG,IAAIwV,MACnB8gB,EAAO,IAAIt9B,MAAMyE,QAAQiD,EAAEzB,EAAGyB,EAAExB,EAAEnF,EAAK0lB,WAAY/e,EAAEvB,GACrDo3B,EAAO,IAAIv9B,MAAMyE,QACjB64B,EAAKr3B,EAAIo3B,EAAQp3B,EACjBq3B,EAAKp3B,EAAIm3B,EAAQn3B,EACjBo3B,EAAKn3B,EAAIk3B,EAAQl3B,GAGjBqC,GAAM,IAAIzH,EAAKyH,KAAMkQ,YAAY4kB,GAAM3kB,UAAU4kB,GAErDx8B,EAAKiG,IAAIqa,WAAW7Y,EAAK,SAf7BzH,CAqBAy8B,IAAAA,EAAMz8B,EAAKsV,gBAAgBtV,EAAK8lB,iBAChC9lB,EAAKkrB,eAAiBuR,EACtBz8B,EAAKiG,IAAI2a,iBAAkB6b,EAAK,IAIhCz8B,EAAKylB,iBACLzlB,EAAKiG,IAAI6a,gBAAgB9gB,EAAKylB,gBAAgBphB,OAA6B1E,EAAW,MAS9FK,EAAKq0B,iBAAmB,WACpBqB,WAAWnB,UAoBfv0B,EAAKgsB,QAAU,WACXxlB,QAAQC,IAAI,WAEZzG,EAAKsD,MAAMuX,OACX7a,EAAKsD,MAAMo5B,gBAKX18B,EAAK0f,OAAS,IAAIzgB,MAAM09B,OAAM,GAU9B38B,EAAKiJ,UAAY,IAAIhK,MAAM29B,cARb,CAEVC,WAAW,EACXha,OAAO,EAEPia,uBAAuB,IAI3B98B,EAAKiJ,UAAU+J,QAAStF,OAAOoP,WAAYpP,OAAOqP,aAGlD/c,EAAK+8B,QAAU,EACf/8B,EAAKiJ,UAAU8tB,cAAe/2B,EAAK+8B,SACnCv2B,QAAQC,IAAIzG,EAAK+8B,SAEjB/8B,EAAKiJ,UAAU+zB,eAAiB/9B,MAAMyK,aAGtC1J,EAAKiJ,UAAUg0B,iBAAkBj9B,EAAKk9B,UAGtCl9B,EAAK2Q,eAAiB3Q,EAAKiJ,UAAUk0B,aAAaC,mBAClD52B,QAAQC,IAAIzG,EAAKiJ,UAAUk0B,cAE3Bl+B,MAAMo+B,MAAM1b,SAAU,EAEtB3hB,EAAK0lB,WAAa,IAElBxY,SAASI,KAAKC,YAAavN,EAAKiJ,UAAUmK,YAU1CpT,EAAK+J,SAAS8Q,OACd7a,EAAK8K,OAAO+P,OAGZ7a,EAAKqG,eAAiB,GACtBrG,EAAK+G,SAAW,IAAI9H,MAAMq+B,WAC1Bt9B,EAAKu9B,aAAe,IAAIt+B,MAAMu+B,YAC9Bx9B,EAAKu9B,aAAaE,eAAgBz9B,EAAK46B,gBACvC56B,EAAK+G,SAAS22B,eAAgB19B,EAAKu9B,cACnCv9B,EAAK29B,YAAc,EAKnB39B,EAAKwD,KAAO,GACZxD,EAAK49B,UAAW,EAEhB59B,EAAK69B,qBAAsB,EAE3B79B,EAAK89B,aACL99B,EAAKyU,SAASoG,OAGd7a,EAAKiG,IAAI4U,OAGT7a,EAAKyc,GAAG5B,OAGR7a,EAAKwpB,IAAI3O,OAGT7a,EAAK2K,UAAUkQ,OAGf7a,EAAKq1B,SAASxa,OAGd7a,EAAK2Z,WAAWkB,OAGhB7a,EAAKylB,qBAAkB9lB,EACvBK,EAAKkrB,mBAAkBvrB,EACvBK,EAAK+9B,kBAAkBp+B,EAEvBK,EAAK8lB,qBAAkBnmB,EACvBK,EAAK+lB,gBAAkBpmB,EAEvBK,EAAKg+B,qBAAsB,EAC3Bh+B,EAAKi+B,gBAAkB,EACvBj+B,EAAKirB,cAAkB,EAgBvBjrB,EAAKie,qBAAuB,IAAIhf,MAAMi/B,QAAQ,EAAI,GAGlDl+B,EAAKm+B,SAAW,IAAIl/B,MAAMm/B,UAC1Bp+B,EAAKm+B,SAAS57B,OAAOgD,IAAIvF,EAAKC,OAAOC,OACrCF,EAAKq+B,aAAe,IAAIp/B,MAAMm/B,UAC9Bp+B,EAAKq+B,aAAa97B,OAAOgD,IAAIvF,EAAKC,OAAOO,KACzCR,EAAKs+B,MAAQ,IAAIr/B,MAAMm/B,UACvBp+B,EAAKs+B,MAAM/7B,OAAOgD,IAAIvF,EAAKC,OAAOU,IAIlCX,EAAKs7B,sBAELt7B,EAAKk3B,iBAMTl3B,EAAKu+B,YAAc,WACfv+B,EAAKiJ,UAAUg0B,sBAAkBt9B,IAMrCK,EAAKw+B,aAAe,WAChBx+B,EAAKiJ,UAAUg0B,iBAAkBj9B,EAAKk9B,WAG1Cl9B,EAAKy+B,kBAAoB,WACrBz+B,EAAK0+B,aAAe,IAAIz/B,MAAM0/B,eAC9B3+B,EAAK0+B,aAAaE,QAAU,SAAEz4B,EAAK04B,EAAaC,GAC/Ct4B,QAAQC,IAAK,yBAA2BN,EAAM,aAAe04B,EAAc,OAASC,EAAa,WAC9F9+B,EAAKmK,UAAU,mBAAoBhE,IAGvCnG,EAAK0+B,aAAaK,OAAS,WAC1Bv4B,QAAQC,IAAK,qBACVzG,EAAKmK,UAAU,6BAGnBnK,EAAK0+B,aAAaM,WAAa,SAAE74B,EAAK04B,EAAaC,KAInD9+B,EAAK0+B,aAAaO,QAAU,SAAE94B,GAC7BK,QAAQC,IAAK,8BAAgCN,KASlDnG,EAAKg0B,uBAAyB,SAAC/vB,GAC3BjE,EAAK+8B,QAAU94B,EACfjE,EAAKiJ,UAAU8tB,cAAe9yB,IAMlCjE,EAAKg3B,kBAAoB,WACrBh3B,EAAKiJ,UAAU8tB,cAAe/2B,EAAK+8B,UAOvC/8B,EAAKO,OAAW,GAChBP,EAAKU,SAAW,GAChBV,EAAKa,QAAW,GAShBb,EAAK8T,gBAAkB,SAAC3U,GACb,OAAA,IAAIa,EAAKhB,KAAKG,EAAIa,EAAKC,OAAOC,QAQzCF,EAAKuV,aAAe,SAACpW,GACbA,QAAOQ,IAAPR,EACGa,OAAAA,EAAKO,OAAOpB,IAQvBa,EAAKmY,qBAAuB,SAAChZ,GACrByF,IAAAA,EAAI5E,EAAKuV,aAAapW,GACtByF,YAAMjF,IAANiF,EAAwBA,EACrB5E,EAAK8T,gBAAgB3U,IAOhCa,EAAKqhB,aAAe,WACTrhB,OAAAA,EAAKK,cAWhBL,EAAKuZ,mBAAqB,SAACpa,GAChB,OAAA,IAAIa,EAAKhB,KAAKG,EAAIa,EAAKC,OAAOO,MAQzCR,EAAKsV,gBAAkB,SAACnW,GAChBA,QAAOQ,IAAPR,EACGa,OAAAA,EAAKU,SAASvB,IAQzBa,EAAKsZ,wBAA0B,SAACna,GACxB0W,IAAAA,EAAI7V,EAAKsV,gBAAgBnW,GACzB0W,YAAMlW,IAANkW,EAAwBA,EACrB7V,EAAKuZ,mBAAmBpa,IAOnCa,EAAKk/B,iBAAmB,WACbl/B,OAAAA,EAAKS,UAWhBT,EAAKunB,aAAe,SAACpoB,GACV,OAAA,IAAIa,EAAKhB,KAAKG,EAAIa,EAAKC,OAAOU,KAQzCX,EAAKolB,UAAY,SAACjmB,GACVA,QAAOQ,IAAPR,EACGa,OAAAA,EAAKa,QAAQ1B,IAOxBa,EAAKm/B,UAAY,WACNn/B,OAAAA,EAAKY,SAIhBZ,EAAK0G,aAAe,SAACP,GACjBnG,EAAK29B,cACL39B,EAAKmK,UAAU,mBAAoBhE,IAEvCnG,EAAKoH,kBAAoB,SAACjB,GAIlBnG,GAHJA,EAAKmK,UAAU,uBAAwBhE,GACvCnG,EAAK29B,cAED39B,EAAK29B,aAAe,EAAE,CACtB39B,EAAKmK,UAAU,4BAGXrI,IAAAA,EAAI9B,EAAKK,aAAawgB,WAAW1Q,OACjCqK,EAAIxa,EAAKK,aAAawgB,WAAWF,OAEjC3gB,EAAKiJ,UAAUm2B,UAAUzd,UACzB3hB,EAAKK,aAAahB,SAAS,SAACC,GACpBA,EAAEC,SACFD,EAAE2B,YAAa,EACf3B,EAAE4B,eAAgB,KAKtBlB,EAAK69B,sBACL79B,EAAKk7B,aAAiB,IAAF1gB,EAEpBxa,EAAK8W,QAAQuoB,OAAOC,OAAOC,MAAUv/B,EAAKk7B,aAC1Cl7B,EAAK8W,QAAQuoB,OAAOC,OAAOE,MAASx/B,EAAKk7B,aACzCl7B,EAAK8W,QAAQuoB,OAAOC,OAAOG,QAAUz/B,EAAKk7B,aAC1Cl7B,EAAK8W,QAAQuoB,OAAOC,OAAOI,IAAS1/B,EAAKk7B,aAEzCl7B,EAAK2/B,iBAAiB79B,KAI1B9B,EAAK49B,gBACgBj+B,IAAjBK,EAAKwD,KAAK,GAAkBxD,EAAK4/B,eAAe,IAAI5/B,EAAKqI,YAAasP,YAAY7V,GAAG+9B,QAAQrlB,IAE7Fxa,EAAKwD,KAAK,GAAGmU,YAAY7V,EAAEoD,EAAGpD,EAAEqD,EAAGrD,EAAEsD,GAAGy6B,QAAQrlB,GAEpDhU,QAAQC,IAAI,YAGhBzG,EAAKqhB,eAAeye,+BAKpBC,WAAY,WACJj+B,GAAK9B,EAAKggC,YAAYhgC,EAAKggC,WAAW36B,SAASC,KAAKxD,GACxD9B,EAAKigC,qBACN,OAMXjgC,EAAK89B,WAAa,WAEd99B,EAAKkT,UAAY,IAAIjU,MAAMihC,MAC3BlgC,EAAKkT,UAAUitB,WAAa,IAAIlhC,MAAMoM,MAAO,GAAI,GAAI,IAGrDrL,EAAK6J,mBAAqB,IAAI5K,MAAMC,MACpCc,EAAKkT,UAAUrO,IAAI7E,EAAK6J,oBAExB7J,EAAKK,aAAeL,EAAK8T,kBAAkBssB,YAC3CpgC,EAAK6J,mBAAmBhF,IAAI7E,EAAKK,cAIjCL,EAAKS,SAAWT,EAAKuZ,qBAAqB6mB,YAC1CpgC,EAAKkT,UAAUrO,IAAI7E,EAAKS,UAGxBT,EAAKY,QAAUZ,EAAKunB,eAAe6Y,YACnCpgC,EAAKkT,UAAUrO,IAAI7E,EAAKY,SAGxBZ,EAAKqgC,SAAW,IAAIphC,MAAMqhC,aAAc,IAAIrhC,MAAMoM,MAAM,EAAE,EAAE,IAC5DrL,EAAK6J,mBAAmBhF,IAAI7E,EAAKqgC,WAGrCrgC,EAAKugC,mBAAqB,SAACC,GACvBxgC,EAAKkT,UAAUitB,WAAaK,GAMhCxgC,EAAKqX,UAAY,SAAC5V,GACdzB,EAAK49B,SAAWn8B,GAGpBzB,EAAKygC,uBAAyB,SAAClP,GAC3BvxB,EAAKqgC,SAASl0B,MAAQ,IAAIlN,MAAMoM,MAAOkmB,EAAEA,EAAEA,IAO/CvxB,EAAK4/B,cAAgB,SAACngC,GACO,IAArBO,EAAKwD,KAAKC,QAAczD,EAAKygC,uBAAuB,IAExDzgC,EAAKwD,KAAK0E,KAAKzI,IAMnBO,EAAKigC,kBAAoB,WACjBjgC,GAAqB,IAArBA,EAAKwD,KAAKC,OAAVzD,CAEC,IAAA,IAAIgE,KAAKhE,EAAKwD,KAAMxD,EAAKwD,KAAKQ,GAAGpE,SAGlCI,EAAKwD,KAAK,KACNxD,EAAK0gC,QAAQ1gC,EAAKkT,UAAUzO,OAAOzE,EAAK0gC,QAE5C1gC,EAAK0gC,OAASzhC,MAAM0hC,oBAAoBC,qBAAsB5gC,EAAKiJ,UAAWjJ,EAAKwD,KAAK,GAAGsF,eAC3F9I,EAAKkT,UAAUrO,IAAK7E,EAAK0gC,SAK7B1gC,EAAKK,aAAahB,SAAS,SAACC,GACpBG,IAAAA,EAAKH,EAAEI,SAASD,QACTE,IAAPF,GAAoBA,aAAcO,EAAKqI,aACvC/I,EAAEO,SAASC,OAASL,EAAGM,eAM/ByG,QAAQC,IAAI,kBAahBzG,EAAKuW,gBAAkB,SAAC+T,GAEhBuW,IAAAA,GAAQ,IAAI5hC,MAAMwO,eAAgBzG,KAAKsjB,GAC3CuW,EAAMp3B,SAAWxK,MAAMyK,kBAEG/J,IAAtBK,EAAK8gC,cAOT9gC,EAAK+gC,WAAa,IAAI9hC,MAAM6N,qBAAsB,EAAK,GAAG,IAE1D9M,EAAK8gC,aAAe,IAAI7hC,MAAM8M,kBAAkB,CAC5C0E,IAAKowB,EAILG,KAAK,EACLC,WAAW,EACXh1B,YAAY,IAKhBjM,EAAKggC,WAAa,IAAI/gC,MAAMqR,KAAKtQ,EAAK+gC,WAAY/gC,EAAK8gC,cACvD9gC,EAAKggC,WAAWkB,eAAgB,EAChClhC,EAAKmhC,sBAAyC,GAAnBnhC,EAAKiG,IAAI2C,SAEpC5I,EAAKggC,WAAWoB,cAAgB,WAE5BphC,EAAKggC,WAAW36B,SAASC,KAAKtF,EAAKiG,IAAIkV,SAAShX,MAGpDnE,EAAK6J,mBAAmBhF,IAAI7E,EAAKggC,aA7B7BhgC,EAAK8gC,aAAarwB,IAAMowB,GAiChC7gC,EAAKmhC,sBAAwB,SAAC3mB,QACF7a,IAApBK,EAAK+gC,YACT/gC,EAAK+gC,WAAWp7B,OAAQ6U,EAAEA,EAAEA,IAShCxa,EAAKyW,wBAA0B,SAAC+D,QACJ7a,IAApBK,EAAKggC,YACThgC,EAAKggC,WAAWj6B,SAASR,IAAK,EAAEiV,EAAE,IAStCxa,EAAK6W,sBAAwB,SAAC/F,GAEtB7M,IAAAA,EAAI6M,EAAE1M,QAEVH,EAAEiB,GAAwB,GAAnBlF,EAAKi7B,YACZh3B,EAAEkB,GAAwB,GAAnBnF,EAAKi7B,YACZh3B,EAAEmB,GAAwB,GAAnBpF,EAAKi7B,iBAESt7B,IAAjBK,EAAK8W,UACL9W,EAAK8W,QAAU,IAAI7X,MAAMoiC,iBAAkB,IAAIpiC,MAAMoM,MAAM,EAAE,EAAE,GAAI,GACnErL,EAAK8W,QAAQ7V,YAAa,EAE1BjB,EAAKshC,WAAa,IAAIriC,MAAMi0B,SAC5BlzB,EAAK6J,mBAAmBhF,IAAI7E,EAAKshC,YACjCthC,EAAK8W,QAAQpP,OAAS1H,EAAKshC,WAE3BthC,EAAKygC,uBAAuB,IAE5BzgC,EAAK6J,mBAAmBhF,IAAI7E,EAAK8W,SACjC9W,EAAKuhC,WAAa,IAAItiC,MAAMyE,SAGhC1D,EAAKwhC,WAAav9B,EAElBjE,EAAK8W,QAAQzR,SAASE,KAAKtB,EAAEiB,GAAGjB,EAAEkB,GAAGlB,EAAEmB,IAG3CpF,EAAKiX,cAAgB,SAACxV,GACdzB,QAAiBL,IAAjBK,EAAK8W,QAELrV,GAAAA,EAAE,CA2BEzB,GA1BJA,EAAK8W,QAAQ7V,YAAa,EAC1BjB,EAAKiJ,UAAUm2B,UAAUzd,SAAU,EAInC3hB,EAAKiJ,UAAUm2B,UAAUhgC,KAAUH,MAAMwiC,iBAGzCzhC,EAAK8W,QAAQuoB,OAAOqC,QAAQnZ,MAASvoB,EAAKm7B,YAC1Cn7B,EAAK8W,QAAQuoB,OAAOqC,QAAQlZ,OAASxoB,EAAKm7B,YAC1Cn7B,EAAK8W,QAAQuoB,OAAOC,OAAO/2B,KAAUvI,EAAKg7B,aAC1Ch7B,EAAK8W,QAAQuoB,OAAOC,OAAO92B,IAAUxI,EAAKi7B,YAG1Cj7B,EAAK8W,QAAQuoB,OAAOC,OAAOC,MAAUv/B,EAAKk7B,aAC1Cl7B,EAAK8W,QAAQuoB,OAAOC,OAAOE,MAASx/B,EAAKk7B,aACzCl7B,EAAK8W,QAAQuoB,OAAOC,OAAOG,QAAUz/B,EAAKk7B,aAC1Cl7B,EAAK8W,QAAQuoB,OAAOC,OAAOI,IAAS1/B,EAAKk7B,aAEzCl7B,EAAKK,aAAahB,SAAS,SAACC,GACpBA,EAAEC,SACFD,EAAE2B,YAAa,EACf3B,EAAE4B,eAAgB,KAItBlB,EAAK69B,oBAAoB,CACrB/7B,IAAAA,EAAI9B,EAAKK,aAAawgB,WAAW1Q,OACrCnQ,EAAK2/B,iBAAiB79B,GAG1B0E,QAAQC,IAAI,mBAGZzG,EAAK8W,QAAQ7V,YAAa,EAC1BjB,EAAKiJ,UAAUm2B,UAAUzd,SAAU,EACnCnb,QAAQC,IAAI,gBAIpBzG,EAAK2/B,iBAAmB,SAACt7B,QACG1E,IAApBK,EAAKwhC,kBAEC7hC,IAAN0E,IAAiBA,EAAIrE,EAAKiG,IAAI4V,yBAElC7b,EAAKuhC,WAAWr8B,EAAIb,EAAEa,EAAKlF,EAAKiG,IAAIwV,MAAMvW,EAAIlF,EAAKk7B,aACnDl7B,EAAKuhC,WAAWp8B,EAAId,EAAEc,EAAKnF,EAAKiG,IAAIwV,MAAMtW,EAAInF,EAAKk7B,aACnDl7B,EAAKuhC,WAAWn8B,EAAIf,EAAEe,EAAKpF,EAAKiG,IAAIwV,MAAMrW,EAAIpF,EAAKk7B,aAEnDl7B,EAAK8W,QAAQzR,SAASE,IAClBvF,EAAKuhC,WAAWr8B,EAAIlF,EAAKwhC,WAAWt8B,EACpClF,EAAKuhC,WAAWp8B,EAAInF,EAAKwhC,WAAWr8B,EACpCnF,EAAKuhC,WAAWn8B,EAAIpF,EAAKwhC,WAAWp8B,GAExCpF,EAAKshC,WAAWj8B,SAASC,KAAKtF,EAAKuhC,cAGvCvhC,EAAK2hC,mBAAqB,WACjB3hC,EAAKiJ,UAAUm2B,UAAUzd,UAC1B3hB,EAAK69B,qBAET79B,EAAK2/B,qBAMT3/B,EAAKk9B,SAAW,WAGR0E,IAAAA,EAAK5hC,EAAK0f,OAAOmiB,WAErB7hC,EAAK8hC,KAAO,EAAMF,EAClB5hC,EAAKyf,IAAOmiB,EAEZ5hC,EAAKiG,IAAI2X,iBAAkB,EAC3B5d,EAAKiG,IAAI4X,UAAUje,OAAOgiC,GAE1B5hC,EAAKiJ,UAAUgK,OAAQjT,EAAKkT,UAAWlT,EAAKiG,IAAI4M,SAU5C7S,EAAKyc,GAAG0H,cAAcnkB,EAAKyc,GAAG7c,SAGlCI,EAAK47B,iBAGL57B,EAAKiG,IAAIrG,SAGTI,EAAK2K,UAAU/K,SAGfI,EAAKwpB,IAAI5pB,SAGTI,EAAK2hC,qBAEL3hC,EAAKmK,UAAU,UAGnBnK,EAAKw7B,kBAAoB,SAAC7U,GAGlB3mB,GAFJ2mB,EAAEsV,iBAEEj8B,EAAKiG,IAAI6U,QAAU9a,EAAKiG,IAAIqW,YAG5B,OAFAtc,EAAKie,qBAAqB/Y,EAAI,OAC9BlF,EAAKie,qBAAqB9Y,EAAI,GAIrCnF,EAAKie,qBAAqB/Y,EAAMyhB,EAAEob,QAAUr0B,OAAOoP,WAAe,EAAI,EACtE9c,EAAKie,qBAAqB9Y,GAAOwhB,EAAEqb,QAAUt0B,OAAOqP,YAAgB,EAAI,GAQzE/c,EAAKiiC,aAAe,WAChBjiC,EAAKkiC,MAAQ,EACbliC,EAAKmiC,YAAc,GAEnBniC,EAAKmiC,YAAYj6B,KAAMlI,EAAKo8B,mBAC5Bp8B,EAAKmiC,YAAYj6B,KAAMlI,EAAKoiC,uBAC5BpiC,EAAKmiC,YAAYj6B,KAAMlI,EAAKqiC,iBAGhCriC,EAAK47B,eAAiB,WACd57B,EAAKirB,cACLjrB,EAAK29B,YAAc,GACnB39B,EAAKiG,IAAI+V,oBAObhc,EAAKo8B,oBACLp8B,EAAKoiC,wBACLpiC,EAAKqiC,mBAITriC,EAAKo8B,kBAAoB,WAejBkG,GAdAtiC,EAAKyc,GAAGC,eACR1c,EAAKm+B,SAAS54B,IAAKvF,EAAKyc,GAAG8lB,2BAA2B,GAAIviC,EAAKyc,GAAG+lB,4BAA4B,IAG9FxiC,EAAKm+B,SAASsE,cAAeziC,EAAKie,qBAAsBje,EAAKiG,IAAI4M,SAErE7S,EAAK0iC,WAAa,GAElB1iC,EAAKm+B,SAASwE,iBAAkB3iC,EAAKkT,UAAUnR,UAAU,EAAM/B,EAAK0iC,YAKtD1iC,EAAK0iC,WAAWj/B,QACf,EACXzD,EAAKylB,qBAAkB9lB,MADvB2iC,CAKA96B,IAAAA,EAAIxH,EAAK0iC,WAAW,GAExB1iC,EAAKylB,gBAAkB,GACvBzlB,EAAKylB,gBAAgBphB,EAAImD,EAAEuZ,MAC3B/gB,EAAKylB,gBAAgBxhB,EAAIuD,EAAEo7B,SAC3B5iC,EAAKylB,gBAAgBnmB,EAAIkI,EAAEgI,OAKtBxP,EAAKi+B,gBACK,OAAXz2B,EAAEq7B,WACgBljC,IAAlB6H,EAAEq7B,KAAK7hB,SAEXhhB,EAAKylB,gBAAgB7V,aAAc,IAAI3Q,MAAM6jC,SAAUC,gBAAiBv7B,EAAEgI,OAAOI,aACjF5P,EAAKylB,gBAAgB9P,EAAInO,EAAEq7B,KAAK7hB,OAAO5c,QAAQ4+B,aAAchjC,EAAKylB,gBAAgB7V,aAAcwQ,eAUpGpgB,EAAKijC,qBAAuB,WACpBjjC,QAAyBL,IAAzBK,EAAKylB,gBACFzlB,OAAAA,EAAKylB,gBAAgBphB,GAUhCrE,EAAKkjC,wBAA0B,WACvBljC,QAAyBL,IAAzBK,EAAKylB,gBACFzlB,OAAAA,EAAKylB,gBAAgBxhB,GAUhCjE,EAAKmjC,sBAAwB,WACrBnjC,QAAyBL,IAAzBK,EAAKylB,gBACFzlB,OAAAA,EAAKylB,gBAAgB9P,GAKhC3V,EAAKoiC,sBAAwB,WAYrBE,GAXAtiC,EAAKyc,GAAGC,eACR1c,EAAKq+B,aAAa94B,IAAKvF,EAAKyc,GAAG8lB,2BAA2B,GAAIviC,EAAKyc,GAAG+lB,4BAA4B,IAGlGxiC,EAAKq+B,aAAaoE,cAAeziC,EAAKie,qBAAsBje,EAAKiG,IAAI4M,SAEzE7S,EAAKojC,SAAW,GAChBpjC,EAAKq+B,aAAasE,iBAAkB3iC,EAAKkT,UAAUnR,UAAU,EAAM/B,EAAKojC,UAG1DpjC,EAAKojC,SAAS3/B,QACb,EAAX6+B,CAGItiC,GAFJA,EAAKkrB,mBAAgBvrB,EAEjBK,EAAK8lB,gBAAgB,CACrB9lB,EAAKmK,UAAU,oBAAqBnK,EAAK8lB,iBACrCjQ,IAAAA,EAAI7V,EAAKsV,gBAAgBtV,EAAK8lB,iBAC9BjQ,GAAKA,EAAEzU,SAASyU,EAAEzU,UAG1BpB,EAAK8lB,qBAAkBnmB,MATvB2iC,CAaA96B,IAAAA,EAAIxH,EAAKojC,SAAS,GAGlBpjC,GAAAA,EAAKg+B,qBAAuBh+B,EAAKylB,iBAC7BzlB,EAAKylB,gBAAgBxhB,EAAIuD,EAAEo7B,SAD/B5iC,CAKQA,GAFJA,EAAKkrB,mBAAgBvrB,EAEjBK,EAAK8lB,gBAAgB,CACrB9lB,EAAKmK,UAAU,oBAAqBnK,EAAK8lB,iBACrCjQ,IAAAA,EAAI7V,EAAKsV,gBAAgBtV,EAAK8lB,iBAC9BjQ,GAAKA,EAAEzU,SAASyU,EAAEzU,UAG1BpB,EAAK8lB,qBAAkBnmB,MAX3BK,CAgBJA,EAAKkrB,cAAgB,GACrBlrB,EAAKkrB,cAAc7mB,EAAImD,EAAEuZ,MACzB/gB,EAAKkrB,cAAcjnB,EAAIuD,EAAEo7B,SACzB5iC,EAAKkrB,cAAc5rB,EAAIkI,EAAEgI,OACzBxP,EAAKkrB,cAAcmY,KAAO,GAKnBC,IAFH5sB,IAAAA,EAAI1W,EAAKkrB,cAAcmY,KACvBC,EAAK97B,EAAEgI,OAAOlL,OACXg/B,GACCA,EAAG/hC,KAAO+hC,EAAG/hC,MAAQvB,EAAKsB,UAAUoV,EAAExO,KAAKo7B,EAAG/hC,KAClD+hC,EAAKA,EAAGh/B,OAGRm4B,IAAAA,EAAM/lB,EAAE,GACR+lB,GAAAA,GACIz8B,EAAK8lB,kBAAoB2W,EAAI,CACzBz8B,GAAAA,EAAK8lB,gBAAgB,CACrB9lB,EAAKmK,UAAU,oBAAqBnK,EAAK8lB,iBACrCjQ,IAAAA,EAAI7V,EAAKsV,gBAAgBtV,EAAK8lB,iBAC9BjQ,GAAKA,EAAEzU,SAASyU,EAAEzU,UAG1BpB,EAAK8lB,gBAAkB2W,EACvBz8B,EAAKmK,UAAU,oBAAqBsyB,GAChC5mB,IAAAA,EAAI7V,EAAKsV,gBAAgBmnB,GACzB5mB,GAAKA,EAAE1U,SAAS0U,EAAE1U,cAOlCnB,EAAKqiC,eAAiB,WAYdC,GAXAtiC,EAAKyc,GAAGC,gBAAkB1c,EAAKyc,GAAG4C,YAClCrf,EAAKs+B,MAAM/4B,IAAKvF,EAAKyc,GAAG8lB,2BAA2B,GAAIviC,EAAKyc,GAAG+lB,4BAA4B,IAG3FxiC,EAAKs+B,MAAMmE,cAAeziC,EAAKie,qBAAsBje,EAAKiG,IAAI4M,SAElE7S,EAAKujC,QAAU,GACfvjC,EAAKs+B,MAAMqE,iBAAkB3iC,EAAKkT,UAAUnR,UAAU,EAAM/B,EAAKujC,SAGnDvjC,EAAKujC,QAAQ9/B,QACZ,EAAX6+B,CAGItiC,GAFJA,EAAK+9B,kBAAep+B,EAEhBK,EAAK+lB,WAAW,CAChB/lB,EAAKmK,UAAU,cAAenK,EAAK+lB,YAC/BlQ,IAAAA,EAAI7V,EAAKolB,UAAUplB,EAAK+lB,YACxBlQ,GAAKA,EAAEzU,SAASyU,EAAEzU,UAG1BpB,EAAK+lB,gBAAapmB,MATlB2iC,CAaA96B,IAAAA,EAAIxH,EAAKujC,QAAQ,GAGjBvjC,GAAAA,EAAKylB,iBACDzlB,EAAKylB,gBAAgBxhB,EAAIuD,EAAEo7B,SAD/B5iC,CAKQA,GAFJA,EAAK+9B,kBAAep+B,EAEhBK,EAAK+lB,WAAW,CAChB/lB,EAAKmK,UAAU,oBAAqBnK,EAAK+lB,YACrClQ,IAAAA,EAAI7V,EAAKolB,UAAUplB,EAAK+lB,YACxBlQ,GAAKA,EAAEzU,SAASyU,EAAEzU,UAG1BpB,EAAK+lB,gBAAapmB,MAXtBK,CAgBJA,EAAK+9B,aAAe,GACpB/9B,EAAK+9B,aAAa15B,EAAImD,EAAEuZ,MACxB/gB,EAAK+9B,aAAa95B,EAAIuD,EAAEo7B,SACxB5iC,EAAK+9B,aAAaz+B,EAAIkI,EAAEgI,OACxBxP,EAAK+9B,aAAasF,KAAO,GAKlBC,IAFH5sB,IAAAA,EAAI1W,EAAK+9B,aAAasF,KACtBC,EAAK97B,EAAEgI,OAAOlL,OACXg/B,GACCA,EAAG/hC,KAAO+hC,EAAG/hC,MAAQvB,EAAKsB,UAAUoV,EAAExO,KAAKo7B,EAAG/hC,KAClD+hC,EAAKA,EAAGh/B,OAGRk/B,IAAAA,EAAM9sB,EAAE,GACR8sB,GAAAA,GACIxjC,EAAK+lB,aAAeyd,EAAI,CACpBxjC,GAAAA,EAAK+lB,WAAW,CAChB/lB,EAAKmK,UAAU,cAAenK,EAAK+lB,YAC/BlQ,IAAAA,EAAI7V,EAAKolB,UAAUplB,EAAK+lB,YACxBlQ,GAAKA,EAAEzU,SAASyU,EAAEzU,UAG1BpB,EAAK+lB,WAAayd,EAClBxjC,EAAKmK,UAAU,cAAeq5B,GAC1B3tB,IAAAA,EAAI7V,EAAKolB,UAAUoe,GACnB3tB,GAAKA,EAAE1U,SAAS0U,EAAE1U,cAMnBnB,IAAAA,EAAAA,EAAAA,QAAAA,QAAAA","file":"ATON.min.js","sourceRoot":"..\\src","sourcesContent":["/*\r\n    ATON Node Class\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n//import Period from \"./ATON.period.js\";\r\n\r\n\r\n/**\r\nClass representing an ATON node.\r\nConstructor allows to create different types (scene nodes, semantic nodes and UI nodes)\r\n@class Node\r\n@example \r\nlet myNode = new ATON.Node(\"someID\")\r\n*/\r\nclass Node extends THREE.Group {\r\n\r\nconstructor(id, type){\r\n    super();\r\n\r\n    this.type = type? type : ATON.NTYPES.SCENE;\r\n    \r\n    this.bPickable = true;\r\n\r\n    if (this.type === ATON.NTYPES.SCENE){\r\n        this._rootG = ATON._rootVisible;\r\n        this._nodes = ATON.snodes;\r\n        //this.period = undefined; // TODO: assign period object (read-only, centralized) - NOT USED FOR NOW\r\n    }\r\n    if (this.type === ATON.NTYPES.SEM){\r\n        this._rootG = ATON._rootSem;\r\n        this._nodes = ATON.semnodes;\r\n        //this.period = undefined;\r\n    }\r\n\r\n    if (this.type === ATON.NTYPES.UI){\r\n        this._rootG = ATON._rootUI;\r\n        this._nodes = ATON.uinodes;\r\n    }\r\n\r\n    // Register\r\n    this.as(id);\r\n\r\n    this.kwords = undefined;\r\n\r\n    this._bCloneOnLoadHit = true;\r\n\r\n    // Shadows\r\n    this.castShadow    = false;\r\n    this.receiveShadow = false;\r\n\r\n    // Local handlers\r\n    this.onHover  = undefined;\r\n    this.onLeave  = undefined;\r\n    this.onSelect = undefined;\r\n}\r\n\r\n/**\r\n(Re)assign node ID\r\n@param {string} id - the new ID\r\n@example\r\nmyNode.as(\"newID\")\r\n*/\r\nas(id){\r\n    if (id === undefined) return;\r\n    if (id === ATON.ROOT_NID) return;\r\n\r\n    this._nodes[id] = this;\r\n    this.nid  = id;\r\n    this.name = id;\r\n\r\n    return this;\r\n}\r\n\r\nsetAsRoot(){\r\n    this._nodes[ATON.ROOT_NID] = this;\r\n    this.nid = ATON.ROOT_NID;\r\n\r\n    return this;\r\n}\r\n\r\nsetCloneOnLoadHit(b){\r\n    this._bCloneOnLoadHit = b;\r\n    return this;\r\n}\r\n\r\n/**\r\nAdd keyword(s) to this node. Keywords are also recursively added into the sub-graph\r\n@param {string} kw - the keyword or comma-separated list of keywords\r\n@example\r\nmyNode.addKeywords(\"heritage,reconstruction\");\r\n*/\r\naddKeywords(kw){\r\n    let K = kw.split(\",\");\r\n\r\n    if (this.kwords === undefined) this.kwords = {};\r\n    for (let k in K) this.kwords[ K[k] ] = true;\r\n\r\n    // recurse into ATON nodes\r\n    for (let c in this.children){\r\n        let C = this.children[c];\r\n        if (C.type !== undefined) C.addKeywords(kw);\r\n    }\r\n\r\n    return this;\r\n}\r\n\r\n/**\r\nReturns true if this node has specific keyword\r\n@param {string} kw - the keyword\r\n@returns {boolean}\r\n@example\r\nif (myNode.hasKeyword(\"heritage\")){ ... }\r\n*/\r\nhasKeyword(kw){\r\n    if (this.kwords === undefined) return;\r\n    return (this.kwords[kw] !== undefined);\r\n}\r\n\r\n/**\r\nSet custom description (string) to the node\r\n@param {string} s - content\r\n@example\r\nmyNode.setDescription(\"This is a small description\");\r\n*/\r\nsetDescription(s){\r\n    this.userData.description = s;\r\n    return this;\r\n}\r\n\r\n/**\r\nGet node description (string) if any\r\n@returns {string}\r\n@example\r\nlet desc = myNode.getDescription();\r\n*/\r\ngetDescription(){\r\n    return this.userData.description;\r\n}\r\n\r\nsetAudio(au){\r\n    this.userData.audio = au;\r\n    return this;\r\n}\r\n\r\ngetAudio(){\r\n    return this.userData.audio;\r\n}\r\n\r\n/**\r\nHide this node (and sub-graph), also invisible to queries (ray casting, picking)\r\n@example\r\nmyNode.hide()\r\n*/\r\nhide(){ \r\n    this.visible = false;\r\n    this.traverse((o) => { o.layers.disable(this.type); });\r\n}\r\n\r\n/**\r\nShow this node (and sub-graph). If pickable, becomes sensible to queries (ray casting)\r\n@example\r\nmyNode.show()\r\n*/\r\nshow(){ \r\n    this.visible = true;\r\n    if (this.bPickable) this.traverse((o) => { o.layers.enable(this.type); });\r\n    return this;\r\n}\r\n\r\n/**\r\nToggle node visibility. If visible, becomes invisible, and viceversa.\r\n@example\r\nmyNode.toggle()\r\n*/\r\ntoggle(b){\r\n    if (b === undefined){\r\n        if (this.visible) return this.hide();\r\n        else return this.show();\r\n    }\r\n\r\n    if (b) return this.show();\r\n    else return this.hide();\r\n}\r\n\r\n/**\r\nDisable this node for runtime queries (ray casters). Useful for instance on vegetation, etc...\r\n@example\r\nmyNode.load(\"somevegetation.gltf\").disablePicking()\r\n*/\r\ndisablePicking(){\r\n    this.bPickable = false;\r\n    this.traverse((o) => { o.layers.disable(this.type); });\r\n    return this;  \r\n}\r\n\r\n/**\r\nEnable this node for runtime queries (ray casters)\r\n@example\r\nmyNode.enablePicking()\r\n*/\r\nenablePicking(){\r\n    this.bPickable = true;\r\n    this.traverse((o) => { o.layers.enable(this.type); });\r\n    return this;\r\n}\r\n\r\nsetPickable(b){\r\n    if (b) this.enablePicking();\r\n    else this.disablePicking();\r\n\r\n    return this;\r\n}\r\n\r\n/**\r\nSet cascading material. Note this applies to this node and all children (even all those still loading)\r\n@param {THREE.Material} M - the Material\r\n@example\r\nmyNode.setMaterial( new THREE.MeshBasicMaterial({ transparent: true, opacity: 0.2, wireframe: true }) )\r\n*/\r\nsetMaterial(M){\r\n    this.userData.cMat = M;\r\n\r\n    this.traverse((o) => {\r\n        if (o.isMesh){\r\n            this.userData.cMat = M;\r\n            o.material = M;\r\n            //o.material.needsUpdate = true;\r\n            }\r\n    });\r\n\r\n    return this;\r\n}\r\n\r\n/** \r\nGet cascading material\r\n@returns {THREE.Material}\r\n*/\r\ngetMaterial(){\r\n    return this.userData.cMat;\r\n}\r\n\r\n// Set default and highlight materials\r\nsetDefaultAndHighlightMaterials(matSTD, matHL){\r\n    this.userData.matSTD = matSTD;\r\n    this.userData.matHL  = matHL;\r\n\r\n    return this;\r\n}\r\nhighlight(){\r\n    if (this.userData.matHL) this.setMaterial(this.userData.matHL);\r\n    return this;\r\n}\r\nrestoreDefaultMaterial(){\r\n    if (this.userData.matSTD) this.setMaterial(this.userData.matSTD);\r\n    return this;\r\n}\r\n\r\n// Set cascading opacity\r\nsetOpacity(f){\r\n    this.traverse((o) => {\r\n        if (o.isMesh){\r\n            o.material.opacity = f;\r\n            //o.material.needsUpdate = true;\r\n        }\r\n    });\r\n\r\n    return this;\r\n}\r\n\r\n// FIXME: not working\r\nsetShadowCast(b){\r\n    this.castShadow = b;\r\n\r\n    this.traverse((o) => {\r\n        if (o.isMesh){\r\n            o.castShadow = b;\r\n        }\r\n    });\r\n\r\n    return this;\r\n};\r\nsetShadowReceive(b){\r\n    this.receiveShadow = b;\r\n\r\n    this.traverse((o) => {\r\n        if (o.isMesh){\r\n            o.receiveShadow = b;\r\n        }\r\n    });\r\n\r\n    return this;\r\n};\r\n\r\nsetEnvMap(envtex){\r\n    this.traverse((o) => {\r\n        if (o.isMesh){\r\n\t\t\to.material.envMap  = envtex;\r\n\t\t\t//o.material.combine = THREE.MultiplyOperation;\r\n            //o.material.needsUpdate = true;\r\n        }\r\n    });\r\n\r\n    return this;\r\n}\r\n\r\nassignLightProbe(LP){\r\n    this.traverse((o) => {\r\n        if (o.isMesh && o.geometry) ATON.Utils.assignLightProbeToMesh(LP, o);\r\n    });\r\n\r\n    return this;\r\n}\r\n\r\n// (re)assign LPs for each mesh depending on proximity\r\nassignLightProbesByProximity(){\r\n    if (ATON._lps.length === 0) return this;\r\n\r\n    this.traverse((o) => {\r\n        if (o.isMesh && o.geometry){\r\n            let c = new THREE.Vector3();\r\n            let bbox = new THREE.Box3().setFromObject(o).getCenter(c);\r\n\r\n            let cLP   = undefined;\r\n            let mdist = undefined;\r\n\r\n            for (let i in ATON._lps){\r\n                let LP = ATON._lps[i];\r\n                let d = c.distanceToSquared(LP.pos);\r\n\r\n                if (cLP === undefined || d < mdist){\r\n                    mdist = d;\r\n                    cLP = LP;\r\n                }\r\n            }\r\n\r\n            if (cLP) ATON.Utils.assignLightProbeToMesh(cLP, o);\r\n        }\r\n    });\r\n\r\n    return this;\r\n};\r\n\r\n// Find & update all LPs under this subgraph\r\n// FIXME: not working\r\nupdateLightProbes = ()=>{\r\n    this.traverse((o) => {\r\n        if (o.isMesh && o.geometry){\r\n            let LP = o.userData.LP;\r\n\r\n            if (LP !== undefined){\r\n                LP.update();\r\n                o.material.envMap = LP.getEnvTex();\r\n                //o.material.envMapIntensity = 5.0;\r\n                //console.log(\"x\");\r\n            }\r\n        }\r\n    });\r\n\r\n    return this;\r\n};\r\n\r\n// Deep clone\r\nduplicate(){\r\n    let C = this.clone();\r\n\r\n    C.traverse((o)=>{\r\n        if (o.isMesh){\r\n            o.material = o.material.clone();\r\n        }\r\n    });\r\n\r\n    return C;\r\n}\r\n\r\n\r\n// FIXME: xxx\r\ndelete(){\r\n    let p = this.parent;\r\n\r\n    if (p !== undefined && p.nid !== undefined) p.removeChild( this );\r\n}\r\n\r\nremoveChild(c){\r\n    if (c === undefined) return;\r\n\r\n    let nid = c.nid;\r\n    if (c.nid !== undefined) this._nodes[c.nid] = undefined;\r\n\r\n    c.parent = undefined;\r\n\r\n    c.traverse((o) => {\r\n        if (o.geometry) o.geometry.dispose();\r\n        if (o.material) o.material.dispose();\r\n    });\r\n\r\n    this.remove(c);\r\n\r\n    return this;\r\n}\r\n/**\r\nDelete all children of this node\r\n*/\r\nremoveChildren(){\r\n    let num = this.children.length;\r\n    for (let i=(num-1); i>=0; i--) this.removeChild(this.children[i]);\r\n\r\n    return this;\r\n}\r\n\r\n\r\n/**\r\nAttach this node to parent by providing ID (string) or node object\r\n@param {string|Node} node - the parent node\r\n@example\r\nmyNode.attachTo(\"someGroupID\")\r\n@example\r\nmyNode.attachTo(myParentGroup)\r\n*/\r\nattachTo(node){\r\n    let N = (typeof node === 'string')? this._nodes[node] : node;\r\n    if (N){\r\n        N.add(this);\r\n        if (N.userData.cMat) this.userData.cMat = N.userData.cMat;\r\n        }\r\n    return N;\r\n}\r\n\r\n/**\r\nAttach this node to main root. This is usually mandatory in order to visualize the node and all its descendants.\r\nDepending on node type this will be the scene root (visible scene-graph), the semantic-graph root or UI root\r\n@example\r\nmyNode.attachToRoot()\r\n*/\r\nattachToRoot(){\r\n    this._rootG.add(this);\r\n    if (this._rootG.userData.cMat) this.userData.cMat = this._rootG.userData.cMat;\r\n    return this._rootG;\r\n}\r\n\r\n/**\r\nReturn bounding sphere of this node\r\n@returns {THREE.Sphere}\r\n@example\r\nlet bs = myNode.getBound()\r\n*/\r\ngetBound(){\r\n    let bb = new THREE.Box3().setFromObject( this );\r\n    let bs = new THREE.Sphere();\r\n    bb.getBoundingSphere(bs);\r\n\r\n    return bs;\r\n}\r\n\r\n/**\r\nSet location (translation) of this node\r\n@example\r\nmyNode.setPosition(1.0,3.0,0.0)\r\n@example\r\nmyNode.setPosition( new THREE.Vector3(1.0,3.0,0.0) )\r\n*/\r\nsetPosition(x,y,z){\r\n    if (x instanceof THREE.Vector3) this.position.copy(x);\r\n    else this.position.set(x,y,z);\r\n\r\n    return this;\r\n}\r\n\r\n/**\r\nSet scale of this node\r\n@example\r\nmyNode.setScale(3.0,2.0,1.0)\r\n@example\r\nmyNode.setScale(2.0)\r\n@example\r\nmyNode.setScale( new THREE.Vector3(3.0,2.0,1.0) )\r\n*/\r\nsetScale(sx,sy,sz){\r\n    if (sx instanceof THREE.Vector3) this.scale.copy(sx);\r\n    else {\r\n        if (sy === undefined){ sy = sx; sz = sx; }\r\n        this.scale.set(sx,sy,sz);\r\n        }\r\n    \r\n    return this;\r\n}\r\n\r\n/**\r\nSet rotation of this node (Euler rx,ry,rz) in radians\r\n@example\r\nmyNode.setRotation(3.0,2.0,1.0)\r\n@example\r\nmyNode.setRotation( new THREE.Vector3(3.0,2.0,1.0) )\r\n*/\r\nsetRotation(rx,ry,rz){\r\n    if (rx instanceof THREE.Vector3) this.rotation.copy(rx);\r\n    else this.rotation.set(rx,ry,rz);\r\n    \r\n    return this;\r\n}\r\n/**\r\nOrient this node to current camera\r\n*/\r\norientToCamera(){\r\n    this.quaternion.copy( ATON.Nav._qOri );\r\n    return this;\r\n}\r\n\r\nsetYup(){\r\n    this.rotation.set(-1.57079632679,0.0,0.0);\r\n    return this;  \r\n}\r\n\r\n/**\r\nLoad a 3D model under this node, with optional onComplete handler.\r\nNote the system will take care of loading the resources in background, and will manage duplicate requests to same resources avoiding waste of bandwidth\r\n@param {string} url - the url of the 3D model\r\n@param {function} onComplete - the optional handler to be fired on completion\r\n@example\r\nmyNode.load(\"mymodel.gltf\", ()=>{ console.log(\"completed!\") })\r\n*/\r\nload(url, onComplete){\r\n    if (url === undefined) return this;\r\n\r\n    let N = this;\r\n\r\n    // [C] Promise already requested\r\n    if ( N._bCloneOnLoadHit && ATON._assetsManager[url] !== undefined ){\r\n        ATON._assetsManager[url].then(( o ) =>{\r\n            let C = o.clone();\r\n\r\n            ATON.Utils.modelVisitor(N, C); // check\r\n            N.add( C );\r\n\r\n            if (onComplete) onComplete();\r\n        });\r\n\r\n        console.log(\"HIT!\");\r\n        return N;\r\n    }\r\n\r\n    // Fire request\r\n    if (N.type === ATON.NTYPES.SCENE) ATON._assetReqNew(url);\r\n\r\n    let P = new Promise( ( resolve, reject ) => {\r\n        ATON._aLoader.load( url, (data)=>{\r\n            let model = data.scene || data.scene[0];\r\n\r\n            // Visit loaded model\r\n            ATON.Utils.modelVisitor(N, model);\r\n\r\n            N.add( model );\r\n\r\n            resolve(model);\r\n            console.log(\"Model \"+url+\" loaded\");\r\n            \r\n            if (N.type === ATON.NTYPES.SCENE) ATON._assetReqComplete(url);\r\n\r\n            if (onComplete) onComplete();\r\n        },\r\n        undefined,\r\n        (err)=>{\r\n            console.log(err);\r\n            //reject(model);\r\n\r\n            if (N.type === ATON.NTYPES.SCENE) ATON._assetReqComplete(url);\r\n            if (onComplete) onComplete();\r\n        });\r\n\r\n/*\r\n        ATON._aLoader.load( url+\"__LOD2-d.gltf\", (data)=>{\r\n            let model = data.scene || data.scene[0];\r\n            ATON._modelVisitor(model);\r\n\r\n            let C = new THREE.Vector3();\r\n            let bb = new THREE.Box3().setFromObject( model ).getCenter(C);\r\n            model.position.set(-C.x,-C.y,-C.z);\r\n\r\n            let lod = new THREE.LOD();\r\n            lod.position.set(C.x,C.y,C.z);\r\n            lod.matrixAutoUpdate = true;\r\n            lod.addLevel(model, 40.0);\r\n            N.add(lod);\r\n\r\n            //N.add( model );\r\n\r\n            resolve(model);\r\n            console.log(\"ATON model \"+url+\" loaded\");\r\n\r\n            ATON._aLoader.load( url+\"__LOD1-d.gltf\", (data2)=>{\r\n                let model2 = data2.scene || data2.scene[0];\r\n                ATON._modelVisitor(model2);\r\n\r\n                model2.position.set(-C.x,-C.y,-C.z);\r\n                \r\n                lod.addLevel(model2, 0.0);\r\n            });\r\n            \r\n            ATON._assetReqComplete(url);\r\n        });\r\n*/\r\n    });\r\n\r\n    // Register\r\n    if (N._bCloneOnLoadHit) ATON._assetsManager[url] = P;\r\n\r\n    return this;\r\n}\r\n\r\nexportAs( filename ){\r\n    ATON.Utils.exportNode(this, filename);\r\n\r\n    return this;\r\n}\r\n\r\nsetOnHover( h ){\r\n    this.onHover = f;\r\n    return this;\r\n}\r\nsetOnLeave( h ){\r\n    this.onLeave = f;\r\n    return this;\r\n}\r\nsetOnSelect( h ){\r\n    this.onSelect = f;\r\n    return this;\r\n}\r\n\r\n// Assign a period to this node\r\n// TODO: \r\n/*\r\nsetPeriod(p){\r\n    if (this.type === ATON.NTYPES.UI) return this; // not on UI nodes\r\n\r\n    let P = (typeof p === 'string')? ATON.periods[p] : p;\r\n    if (P === undefined) return this;\r\n\r\n    this.period = P;\r\n    return this;\r\n}\r\n\r\nfilterByPeriodID(id){\r\n    if (this.period === undefined) return this;\r\n\r\n    if (this.period.id !== id){\r\n        this.hide();\r\n        return this;\r\n        }\r\n    else {\r\n        this.show();\r\n        return this;\r\n    }\r\n\r\n    this.traverse((o) => {\r\n        if (o.period){\r\n            if (o.period.id === id) this.show();\r\n            else this.hide();\r\n        }\r\n    });\r\n\r\n    return this;\r\n}\r\n*/\r\n\r\n}\r\n\r\nexport default Node;","/*\r\n    ATON Viewpoint Class\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\n/**\r\nClass representing a Viewpoint (POV) in the 3D space, abstracting from device used (mobile, desktop or immersive XR).\r\nConstructor allows to assign the POV a unique ID (`string`)\r\n@class POV\r\n@example \r\nnew ATON.POV(\"myView\")\r\n*/\r\nclass POV {\r\n\r\nconstructor(id){\r\n    this.pos    = new THREE.Vector3(1,0,0);\r\n    this.target = new THREE.Vector3(0,0,0);\r\n    this.up     = ATON.STD_UPVECTOR;\r\n    this.fov    = ATON.Nav.STD_FOV;\r\n\r\n    this.kwords = undefined;\r\n\r\n    this.nextPOV = undefined;\r\n    this.prevPOV = undefined;\r\n\r\n    // Register\r\n    this.as(id);\r\n}\r\n\r\nas(id){\r\n    if (id === undefined) return;\r\n\r\n    ATON.Nav.povlist[id] = this;\r\n    this.id = id;\r\n\r\n    return this;\r\n}\r\n\r\n/**\r\nSet eye position\r\n@example\r\nnew ATON.POV(\"myView\").setPosition(2.0,6.0,1.5)\r\n@example\r\nmypov.setPosition( new THREE.Vector3(2.0,6.0,1.5) )\r\n*/\r\nsetPosition(x,y,z){\r\n    if (x instanceof THREE.Vector3) this.pos.copy(x);\r\n    else this.pos.set(x,y,z);\r\n\r\n    return this;\r\n}\r\n\r\n/**\r\nSet target position\r\n@example\r\nnew ATON.POV(\"myView\").setTarget(8.0,6.0,1.5)\r\n@example\r\nmypov.setTarget( new THREE.Vector3(8.0,6.0,1.5) ).setPosition(2.0,6.0,1.5)\r\n*/\r\nsetTarget(x,y,z){\r\n    if (x instanceof THREE.Vector3) this.target.copy(x);\r\n    else this.target.set(x,y,z);\r\n\r\n    return this;\r\n}\r\n\r\n/**\r\nSet field of view (FOV) in degrees\r\n@param {number} f\r\n@example\r\nnew ATON.POV(\"myView\").setFOV(70.0)\r\n*/\r\nsetFOV(f){\r\n    this.fov = f;\r\n\r\n    return this;\r\n}\r\n\r\n/**\r\nAdd a keyword to this viewpoint\r\n@param {string} kw - the keyword\r\n@example\r\nnew ATON.POV(\"myView\").addKeyword(\"heritage\")\r\n*/\r\naddKeyword(kw){\r\n    if (this.kwords === undefined) this.kwords = [];\r\n    this.kwords.push(kw);\r\n\r\n    return this;\r\n}\r\n\r\nsetKeywords(kwarray){\r\n    this.kwords = kwarray;\r\n    return this;\r\n}\r\n\r\n/**\r\nSet an optional next POV\r\n@param {POV} pov - the next POV\r\n*/\r\nsetNextPOV(pov){\r\n    if (!pov) return;\r\n    this.nextPOV = pov;\r\n\r\n    return this;\r\n}\r\n\r\n/**\r\nSet an optional previous POV\r\n@param {POV} pov - the previous POV\r\n*/\r\nsetPrevPOV(pov){\r\n    if (!pov) return;\r\n    this.prevPOV = pov;\r\n\r\n    return this;\r\n}\r\n\r\n}\r\n\r\nexport default POV;","/*\r\n    ATON Light Probe Class\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\n/**\r\nClass representing a light probe (LP), can be static or updated at runtime\r\n@class LightProbe\r\n@param {number} res - Resolution in pixel of lightprobe (default 64)\r\n@param {number} near - Capture near (default 1m)\r\n@param {number} far - Capture far (default 1Km)\r\n@example \r\nlet LP = new ATON.LightProbe()\r\n*/\r\nclass LightProbe {\r\n\r\nconstructor(res, near, far){\r\n    this.pos = new THREE.Vector3(0,0,0);\r\n\r\n    this._res  = (res !== undefined)?  res  : 64;\r\n    this._near = (near !== undefined)? near : 1.0;\r\n    this._far  = (far !== undefined)?  far  : ATON.Nav.STD_FAR;\r\n/*\r\n    this._LPtarget0 = undefined;\r\n    this._LPtarget1 = undefined;\r\n\r\n    this._LP0 = undefined;\r\n    this._LP1 = undefined;\r\n\r\n    this._flipLP = false;\r\n*/\r\n    this._envtex = undefined;\r\n    this._prevCCtarget = undefined;\r\n\r\n    this._pmremGenerator = new THREE.PMREMGenerator(ATON._renderer);\r\n\r\n    //this.realize();\r\n}\r\n\r\n/*\r\nrealize(){\r\n    this._LPtarget0 = new THREE.WebGLCubeRenderTarget( this._res, {\r\n        format: THREE.RGBFormat,\r\n        generateMipmaps: true,\r\n        minFilter: THREE.LinearMipmapLinearFilter,\r\n        encoding: THREE.sRGBEncoding // prevent the material's shader from recompiling every frame\r\n    });\r\n\r\n    this._LPtarget1 = new THREE.WebGLCubeRenderTarget( this._res, {\r\n        format: THREE.RGBFormat,\r\n        generateMipmaps: true,\r\n        minFilter: THREE.LinearMipmapLinearFilter,\r\n        encoding: THREE.sRGBEncoding\r\n    });\r\n\r\n    this._LP0 = new THREE.CubeCamera( this._near, this._far, this._LPtarget0 );\r\n    this._LP1 = new THREE.CubeCamera( this._near, this._far, this._LPtarget1 );\r\n\r\n    return this;\r\n}\r\n*/\r\n\r\n/**\r\nSet LP position\r\n@example\r\nLP.setPosition(2.0,6.0,1.5)\r\n@example\r\nLP.setPosition( new THREE.Vector3(2.0,6.0,1.5) )\r\n*/\r\nsetPosition(x,y,z){\r\n    if (x instanceof THREE.Vector3) this.pos.copy(x);\r\n    else this.pos.set(x,y,z);\r\n\r\n    //if (this._LP0) this._LP0.position.copy(this.pos);\r\n    //if (this._LP1) this._LP1.position.copy(this.pos);\r\n\r\n    return this;\r\n}\r\n\r\nsetNear(near){\r\n    this._near = near;\r\n    return this;\r\n}\r\nsetFar(far){ \r\n    this._far = far;\r\n    return this;\r\n}\r\n\r\n/**\r\nUpdate LP capture. Typically called when all 3D models are loaded and arranged into the scene.\r\nCan be called at runtime or whenever there is some change in the 3D scene\r\n@example\r\nLP.update()\r\n*/\r\nupdate(){\r\n    if (this._envtex) this._envtex.dispose();\r\n    if (this._prevCCtarget) this._prevCCtarget.dispose();\r\n\r\n    let CCtarget = new THREE.WebGLCubeRenderTarget( this._res, {\r\n        format: THREE.RGBEFormat,\r\n        generateMipmaps: true,\r\n        minFilter: THREE.LinearMipmapLinearFilter,\r\n        encoding: THREE.sRGBEncoding // prevent the material's shader from recompiling every frame\r\n    });\r\n\r\n    let CC = new THREE.CubeCamera( this._near, this._far, CCtarget );\r\n    CC.position.copy(this.pos);\r\n\r\n    CC.update( ATON._renderer, ATON._rootVisibleGlobal );\r\n\r\n    this._envtex = CCtarget.texture;\r\n    \r\n/*\r\n    console.log(CC);\r\n    console.log(CCtarget);\r\n\r\n    let CCtargetX = new THREE.WebGLCubeRenderTarget( this._res, {\r\n        format: THREE.RGBFormat,\r\n        //generateMipmaps: true,\r\n        minFilter: THREE.LinearMipmapLinearFilter,\r\n        encoding: THREE.sRGBEncoding\r\n    });\r\n\r\n    let CCX = new THREE.CubeCamera( this._near, this._far, CCtargetX );\r\n    CCX.position.copy(this.pos);\r\n\r\n    CCX.update( ATON._renderer, ATON._rootVisible );\r\n    this._envtex = this._pmremGenerator.fromCubemap(CCtargetX.texture).texture;\r\n*/\r\n\r\n    this._prevCCtarget = CCtarget;\r\n\r\n\r\n/*\r\n    if (this._LP0 === undefined || this._LP1 === undefined) return this;\r\n\r\n    this._flipLP = !this._flipLP;\r\n    //ATON._flipLP = !ATON._flipLP;\r\n\r\n    if (this._flipLP){\r\n        this._LP0.update( ATON._renderer, ATON._mainRoot );\r\n        this._envtex = this._LPtarget0.texture;\r\n    }\r\n    else {\r\n        this._LP1.update( ATON._renderer, ATON._mainRoot );\r\n        this._envtex = this._LPtarget1.texture;\r\n    }\r\n*/\r\n    return this;\r\n}\r\n\r\n\r\ngetEnvTex(){\r\n    return this._envtex;\r\n}\r\n\r\nassignToNode(N){\r\n    if (N === undefined) return;\r\n    //TODO:\r\n}\r\n\r\n}\r\n\r\nexport default LightProbe;","/*\r\n    ATON Event Hub\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\n/**\r\nATON Event Hub\r\n@namespace EventHub\r\n*/\r\nlet EventHub = {};\r\n\r\n//Initializes the component\r\nEventHub.init = ()=>{\r\n\r\n    EventHub.evLocal   = {};\r\n    EventHub.evNetwork = {};\r\n\r\n    // Expose\r\n    ATON.on                 = EventHub.on;\r\n    ATON.fireEvent          = EventHub.fireEvent;\r\n    ATON.clearEventHandlers = EventHub.clearEventHandlers\r\n};\r\n\r\n/**\r\nClear all event handlers for a given event\r\n@param {string} evtname - event name\r\n*/\r\nEventHub.clearEventHandlers = (evtname)=>{\r\n    EventHub.evLocal[evtname]   = [];\r\n    EventHub.evNetwork[evtname] = [];\r\n};\r\n\r\n// Execute all handlers from list with given data\r\nEventHub.executeHandlers = (ehList, data)=>{\r\n    if (!ehList) return;\r\n\r\n    for (let h = 0; h < ehList.length; h++) {\r\n        let handler = ehList[h];\r\n        if (handler) handler(data);\r\n    }\r\n};\r\n\r\n/**\r\nSubscribe to a given event, with local handler and optional network handler.\r\nThis is also accessible as ATON.on()\r\n@param {string} evtname - event name\r\n@param {function} handlerLocal - local event handler\r\n@param {function} handlerNetwork - optional network (see VRoadcast) event handler\r\n@example\r\nATON.EventHub.on(\"myEvent\", function(data){ console.log(\"received local event\"); })\r\n@example\r\nATON.on(\"myEvent\", function(data){ console.log(\"received local event\"); })\r\n*/\r\nEventHub.on = (evtname, handlerLocal, handlerNetwork)=>{\r\n    // Local event (default)\r\n    if (handlerLocal !== undefined){\r\n        let evhLocal = EventHub.evLocal;\r\n\r\n        if (evhLocal[evtname] === undefined) evhLocal[evtname] = []; // First time (event not registered)\r\n        evhLocal[evtname].push(handlerLocal);\r\n    }\r\n\r\n    // Received event (network)\r\n    if (handlerNetwork !== undefined){\r\n        ATON.VRoadcast.on(evtname, handlerNetwork);\r\n    }\r\n\r\n};\r\n\r\n/**\r\nFire a local (and optionally network) event, with data.\r\nThis is also accessible as ATON.fireEvent()\r\n@param {string} evtname - event name\r\n@param {object} data - object containing data to be transmitted with this event\r\n@param {bool} bReplicate - if true, it will replicate (broadcast) the event to other connected peers in the same scene (see VRoadcast)\r\n@example\r\nATON.EventHub.fireEvent(\"myEvent\", data)\r\n@example\r\nATON.fireEvent(\"myEvent\", data)\r\n*/\r\nEventHub.fireEvent = (evtname, data, bReplicate)=>{\r\n    let ehList = EventHub.evLocal[evtname];\r\n    EventHub.executeHandlers(ehList, data);\r\n\r\n    if (!bReplicate) return;\r\n    ATON.VRoadcast.fireEvent(evtname, data);\r\n};\r\n\r\nexport default EventHub;","/*\r\n    ATON Materials Hub\r\n    Centralized material manager\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\n/**\r\nATON Material Hub\r\n@namespace MatHub\r\n*/\r\nlet MatHub = {};\r\n\r\nMatHub.init = ()=>{\r\n    MatHub.materials = {};\r\n    MatHub.colors    = {};\r\n\r\n    MatHub.addDefaults();\r\n\r\n    MatHub._loader = new THREE.MaterialLoader();\r\n};\r\n\r\nMatHub.addDefaults = ()=>{\r\n\r\n    // Colors\r\n    MatHub.colors.white  = new THREE.Color(1,1,1);\r\n    MatHub.colors.black  = new THREE.Color(0,0,0);\r\n    MatHub.colors.green  = new THREE.Color(0,1,0);\r\n    MatHub.colors.yellow = new THREE.Color(1,1,0);\r\n    MatHub.colors.red    = new THREE.Color(1,0,0);\r\n    MatHub.colors.blue   = new THREE.Color(0,0,1);\r\n    MatHub.colors.orange = new THREE.Color(1,0.5,0);\r\n    \r\n    MatHub.colors.sem     = new THREE.Color(0,0,1);\r\n    MatHub.colors.darksem = new THREE.Color(0,0,0.1);\r\n\r\n    // Materials\r\n    MatHub.materials.fullyTransparent = new THREE.MeshBasicMaterial({ \r\n        transparent: true, \r\n        depthWrite: false, \r\n        opacity: 0.0\r\n    });\r\n    \r\n    // Selector\r\n    MatHub.materials.selector = new THREE.MeshBasicMaterial({\r\n        color: MatHub.colors.green,\r\n        transparent: true,\r\n        depthWrite: false,\r\n        opacity: 0.2, \r\n        flatShading: true\r\n    });\r\n\r\n    // XR/VR ray\r\n    MatHub.materials.controllerRay = new THREE.MeshBasicMaterial({ \r\n        color: MatHub.colors.white, \r\n        transparent: true, \r\n        opacity: 0.2,\r\n        depthWrite: false,\r\n        flatShading: true\r\n    });\r\n\r\n    // Semantic shapes\r\n    MatHub.materials.semanticShape = new THREE.MeshBasicMaterial({ \r\n        color: MatHub.colors.sem, \r\n        transparent: true,\r\n        depthWrite: false, \r\n        opacity: 0.1,\r\n        flatShading: true\r\n    });\r\n    MatHub.materials.semanticShapeHL = new THREE.MeshBasicMaterial({ \r\n        color: MatHub.colors.sem, \r\n        transparent: true,\r\n        depthWrite: false, \r\n        opacity: 0.3,\r\n        flatShading: true\r\n    });\r\n    MatHub.materials.semanticShapeEdit = new THREE.MeshBasicMaterial({ \r\n        color: MatHub.colors.orange, \r\n        transparent: true,\r\n        depthWrite: false, \r\n        opacity: 0.5,\r\n        flatShading: true\r\n    });\r\n};\r\n\r\nMatHub.addMaterial = (id, mat)=>{\r\n    if (MatHub.materials[id]){\r\n        console.log(\"MatHub: material \"+id+\" already registered\");\r\n        return;\r\n    }\r\n\r\n    MatHub.materials[id] = mat;\r\n};\r\n\r\nMatHub.loadMaterial = (id, jsonfile)=>{\r\n    MatHub._loader.load(jsonfile, (mat)=>{\r\n        MatHub.addMaterial(id, mat);\r\n    },\r\n    undefined,\r\n    (err)=>{\r\n        console.log(err);\r\n    });\r\n};\r\n\r\nMatHub.getMaterial = (id)=>{\r\n    return MatHub.materials[id];\r\n};\r\n\r\nexport default MatHub;","/*\r\n    ATON Utils\r\n    various utilities for device profiling, graph visiting, etc.\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\n/**\r\nATON Utils\r\n@namespace Utils\r\n*/\r\nlet Utils = {};\r\n\r\n\r\nUtils.init = ()=>{\r\n    // read-only object to inspect device capabilities\r\n    ATON.device = {};\r\n\r\n    Utils.geomUnitSphere = new THREE.SphereBufferGeometry( 1.0, 16, 16 );\r\n\r\n    // Export/Download utils\r\n    Utils.exporterGLTF = undefined;\r\n    Utils.exporterOBJ  = undefined;\r\n\r\n    Utils._dlink = document.createElement('a');\r\n    Utils._dlink.style.display = 'none';\r\n    document.body.appendChild( Utils._dlink ); // Firefox workaround, see #6594\r\n\r\n    Utils.textureLoader = new THREE.TextureLoader();\r\n};\r\n\r\n/**\r\nIf current connection is secure\r\n@returns {boolean}\r\n*/\r\nUtils.isConnectionSecure = ()=>{\r\n    return window.isSecureContext;\r\n}\r\n\r\n\r\n// Profile device capabilities\r\nUtils.profileDevice = ()=>{\r\n\r\n    // Detect mobile\r\n    ATON.device.isMobile = false;\r\n    let detectMobile = ()=>{\r\n        if(/(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|ipad|iris|kindle|Android|Silk|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(navigator.userAgent)\r\n        || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(navigator.userAgent.substr(0,4))){\r\n            return true;\r\n            }\r\n\r\n        return false;\r\n    };\r\n\r\n    ATON.device.isMobile = detectMobile();\r\n\r\n    // XR\r\n    ATON.device.isXRsupported = false;\r\n    if ( 'xr' in navigator ){\r\n\t    navigator.xr.isSessionSupported( 'immersive-vr' ).then( function ( b ){\r\n            if (b){\r\n                ATON.device.isXRsupported = true;\r\n                console.log(\"WebXR supported\");\r\n                }\r\n            else {\r\n                ATON.device.isXRsupported = false;\r\n                console.log(\"WebXR NOT supported\");\r\n                }\r\n\t\t});\r\n    }\r\n};\r\n\r\n/**\r\nIf current device is mobile (e.g. smartphone, tablet, Oculus Quest)\r\n@returns {boolean}\r\n*/\r\nUtils.isMobile = ()=>{\r\n    return ATON.device.isMobile;\r\n}\r\n\r\n/**\r\nIf current device supports WebXR\r\n@returns {boolean}\r\n*/\r\nUtils.isWebXRsupported = ()=>{\r\n    return ATON.device.isXRsupported;\r\n}\r\n\r\n\r\n// Path utils\r\nUtils.getFileExtension = ( filepath )=>{\r\n\treturn filepath.substr(filepath.lastIndexOf('.')+1).toLowerCase();\r\n};\r\n\r\nUtils.getBaseFolder = ( filepath )=>{\r\n    var index = filepath.lastIndexOf('/');\r\n    if (index !== -1) return filepath.substring( 0, index + 1 );\r\n    \r\n    return '';\r\n};\r\n\r\nUtils.isResourceURL = (s)=>{\r\n    if (s.startsWith(\"http://\"))  return true;\r\n    if (s.startsWith(\"https://\")) return true;\r\n    return false;\r\n};\r\n\r\nUtils.postJSON = (endpoint, obj, onReceive, onFail)=>{\r\n    $.ajax({\r\n        url: endpoint,\r\n        type:\"POST\",\r\n        xhrFields: { withCredentials: true },\r\n        data: JSON.stringify(obj),\r\n        contentType:\"application/json; charset=utf-8\",\r\n        dataType:\"json\",\r\n\r\n        success: (data)=>{\r\n            if (onReceive) onReceive(data);\r\n        }\r\n    }).fail((err)=>{\r\n        console.log(err);\r\n        if (onFail) onFail();\r\n    });\r\n};\r\n\r\n\r\nUtils.mergeObject = ( object )=>{\r\n    object.updateMatrixWorld( true );\r\n\r\n    const geometry = [];\r\n    object.traverse( c => {\r\n        if ( c.isMesh ){\r\n            const g = c.geometry;\r\n            g.applyMatrix4( c.matrixWorld );\r\n            geometry.push( g.toNonIndexed() );\r\n        }\r\n\r\n    });\r\n\r\n    const mergedGeometries = THREE.BufferGeometryUtils.mergeBufferGeometries( geometry, false );\r\n    const mergedGeometry   = THREE.BufferGeometryUtils.mergeVertices( mergedGeometries ).center();\r\n\r\n    const group = new THREE.Group();\r\n    const mesh = new THREE.Mesh( mergedGeometry );\r\n    group.add( mesh );\r\n    return group;\r\n};\r\n\r\n// Helper visitor routine\r\nUtils.modelVisitor = (parentNode, model)=>{\r\n    if (!model) return this;\r\n\r\n    //model = Utils.mergeObject(model);\r\n    \r\n    let N = parentNode;\r\n    let type = N.type; // Differentiate visit depending on node type\r\n\r\n    model.traverse( ( o ) => {\r\n\r\n        if (N.bPickable !== undefined){\r\n            if (N.bPickable) o.layers.enable(type);\r\n            else o.layers.disable(type);\r\n        }\r\n\r\n        if (o.isMesh){\r\n            //let numVertices = o.geometry.attributes.position.count;\r\n            //console.log(numVertices);\r\n\r\n            if (type === ATON.NTYPES.SCENE){\r\n                // TODO: \r\n                o.castShadow    = true; //N.castShadow;\r\n                o.receiveShadow = true; //N.receiveShadow;\r\n\r\n                // Build accelerated ray casting\r\n                if (o.geometry){\r\n                    o.geometry.computeBoundsTree();\r\n                    console.log(\"Computed BVH\");\r\n                }\r\n\r\n                // Ensure mipmapping is correct\r\n                if ( o.material.map !== null){\r\n                    //console.log(object.material.map);\r\n                    \r\n                    // Why do I have to do this?\r\n                    //o.material.map.generateMipmaps = false;\r\n                    o.material.map.anisotropy = ATON._maxAnisotropy;\r\n                    o.material.map.minFilter  = THREE.LinearMipmapLinearFilter;\r\n                    o.material.map.magFilter  = THREE.LinearFilter;\r\n                    //o.material.map.needsUpdate = true;\r\n                }\r\n            }\r\n\r\n            if (type === ATON.NTYPES.SEM){\r\n                o.material = ATON.MatHub.materials.semanticShape;\r\n            }\r\n\r\n            // Cascading material\r\n            if (N.userData.cMat){\r\n                o.material = N.userData.cMat;\r\n                //o.material.needsUpdate = true;\r\n            }\r\n        }\r\n    });\r\n};\r\n\r\nUtils.setVectorPrecision = (v, prec)=>{\r\n    v.x = parseFloat( v.x.toPrecision(prec) );\r\n    v.y = parseFloat( v.y.toPrecision(prec) );\r\n    v.z = parseFloat( v.z.toPrecision(prec) );\r\n    \r\n    return v;\r\n};\r\n\r\n// Export routines\r\nUtils.downloadBlob = (blob, filename)=>{\r\n    if (filename === undefined) return;\r\n\r\n    Utils._dlink.href = URL.createObjectURL( blob );\r\n    Utils._dlink.download = filename;\r\n    Utils._dlink.click();\r\n};\r\n\r\n// Download text ASCII data\r\nUtils.downloadText = ( str, filename )=>{\r\n    Utils.downloadBlob( new Blob( [ str ], { type: 'text/plain' } ), filename );\r\n};\r\n\r\n// Download json object\r\nUtils.downloadJSONobj = (jsonobj, filename)=>{\r\n    Utils.downloadText( JSON.stringify(jsonobj), filename );\r\n};\r\n\r\nUtils.downloadArrayBuffer = ( buffer, filename )=>{\r\n    Utils.downloadBlob( new Blob( [ buffer ], { type: 'application/octet-stream' } ), filename );\r\n};\r\n\r\n// Export ATON node\r\nUtils.exportNode = (node, filename)=>{\r\n    let ext = Utils.getFileExtension(filename);\r\n    if (ext.length < 1) return;\r\n\r\n    // GLTF\r\n    if (ext === \"glb\" || ext === \"gltf\"){\r\n        let bBin = (ext === \"glb\")? true : false;\r\n\r\n        let opts = {\r\n            //trs: true, // Export position, rotation and scale instead of matrix per node. Default is false\r\n            binary: bBin, // Export in binary (.glb) format, returning an ArrayBuffer. Default is false\r\n            //onlyVisible: false,\r\n            //truncateDrawRange: true\r\n        };\r\n\r\n        if (Utils.exporterGLTF === undefined) Utils.exporterGLTF = new THREE.GLTFExporter();\r\n\r\n        Utils.exporterGLTF.parse( node, ( output )=>{\r\n            if ( output instanceof ArrayBuffer ){\r\n                Utils.downloadArrayBuffer( output, filename);\r\n            }\r\n            else {\r\n                console.log( output );\r\n                Utils.downloadJSONobj(output, filename);\r\n            }\r\n        }, opts);\r\n    }\r\n\r\n    // OBJ format\r\n    if (ext === \"obj\"){\r\n        if (Utils.exporterOBJ === undefined) Utils.exporterOBJ = new THREE.OBJExporter();\r\n\r\n        let output = Utils.exporterOBJ.parse(node);\r\n        //console.log(output);\r\n        Utils.downloadText(output, filename);\r\n    }\r\n};\r\n\r\nUtils.takeScreenshot = (size, filename)=>{\r\n    let img = new Image();\r\n\r\n    console.log(\"Screenshot with size:\"+size);\r\n\r\n    ATON.Nav._camera.aspect = 1.0;\r\n    ATON.Nav._camera.updateProjectionMatrix();\r\n    \r\n    ATON._renderer.setSize(size,size);\r\n    ATON._renderer.render( ATON._mainRoot, ATON.Nav._camera );\r\n\r\n    let b64img = ATON._renderer.domElement.toDataURL();\r\n    img.src = b64img;\r\n\r\n    if (filename){\r\n        Utils._dlink.href = b64img.replace(\"image/png\", \"image/octet-stream\");\r\n        Utils._dlink.download = filename;\r\n        Utils._dlink.click();\r\n    }\r\n\r\n    ATON._onResize();\r\n    return img;\r\n};\r\n\r\nUtils.assignLightProbeToMesh = (LP, mesh)=>{\r\n    if (LP === undefined || mesh === undefined) return;\r\n\r\n    if (mesh.noLP) return;\r\n\r\n    mesh.userData.LP = LP;\r\n    //LP.update();\r\n    //mesh.material.envMap = LP.getEnvTex();\r\n    \r\n    //mesh.material.combine = THREE.MultiplyOperation;\r\n    //mesh.material.needsUpdate = true;\r\n\r\n    //console.log(mesh.userData);\r\n};\r\n\r\nUtils.createATONCube = (id)=>{\r\n    let g = new THREE.BoxBufferGeometry( 1,1,1 );\r\n\r\n    let mat = new THREE.MeshStandardMaterial();\r\n\r\n    Utils.textureLoader.load((ATON.PATH_RES+\"models/aton-cube.jpg\"), (tex)=>{\r\n        tex.encoding = THREE.sRGBEncoding;\r\n        mat.map = tex;\r\n    });\r\n\r\n    let N = ATON.createSceneNode(id);\r\n    N.add( new THREE.Mesh(g) );\r\n    N.setMaterial(mat);\r\n\r\n    N.enablePicking();\r\n    return N;\r\n};\r\n\r\n\r\nUtils.createATONCubePBR = (id)=>{\r\n    let g = new THREE.BoxBufferGeometry( 1,1,1 );\r\n\r\n    let mat = new THREE.MeshStandardMaterial();\r\n    mat.metalness = 1.0;\r\n\r\n    Utils.textureLoader.load((ATON.PATH_RES+\"models/aton-cube.jpg\"), (tex)=>{\r\n        tex.encoding = THREE.sRGBEncoding;\r\n        mat.map = tex;\r\n    });\r\n\r\n    Utils.textureLoader.load((ATON.PATH_RES+\"models/aton-cube-pbr.jpg\"), (tex)=>{\r\n        tex.encoding = THREE.sRGBEncoding;\r\n        mat.metalnessMap = tex;\r\n        mat.roughnessMap = tex;\r\n    });\r\n\r\n    Utils.textureLoader.load((ATON.PATH_RES+\"models/aton-cube-nrm.png\"), (tex)=>{\r\n        tex.encoding = THREE.sRGBEncoding;\r\n        mat.normalMap = tex;\r\n\r\n        //mat.bumpMap.anisotropy = ATON._maxAnisotropy;\r\n        //mat.bumpMap.minFilter  = THREE.LinearMipmapLinearFilter;\r\n        //mat.bumpMap.magFilter  = THREE.LinearFilter;\r\n    });\r\n\r\n    let N = ATON.createSceneNode(id);\r\n    N.add( new THREE.Mesh(g) );\r\n    N.setMaterial(mat);\r\n\r\n    N.enablePicking();\r\n    return N;\r\n};\r\n\r\n\r\nUtils.createGround = (texture, dx,dz)=>{\r\n    if (dx === undefined) dx = 1.0;\r\n    if (dz === undefined) dz = 1.0;\r\n\r\n    let g = new THREE.PlaneBufferGeometry( dx, dz );\r\n\r\n    let mat = new THREE.MeshStandardMaterial();\r\n    if (texture !== undefined) Utils.textureLoader.load(texture, (tex)=>{\r\n        tex.encoding = THREE.sRGBEncoding;\r\n        mat.map = tex;\r\n    });\r\n\r\n    let N = ATON.createSceneNode().rotateX(-Math.PI * 0.5);\r\n    N.add( new THREE.Mesh(g, mat) );\r\n    N.enablePicking();\r\n\r\n    return N;\r\n};\r\n\r\n\r\nexport default Utils;","/*\r\n    ATON Scene Hub\r\n    scene JSON routines\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\n/**\r\nATON Scene Hub\r\n@namespace SceneHub\r\n*/\r\nlet SceneHub = {};\r\n\r\nSceneHub.MODE_ADD = 0;\r\nSceneHub.MODE_DEL = 1;\r\n\r\n/**\r\nInitializes the component\r\n*/\r\nSceneHub.init = ()=>{\r\n    SceneHub.currID   = undefined; // Scene ID (sid)\r\n    SceneHub.currData = undefined; // holds compact object describing our ATON scene\r\n    SceneHub._bEdit   = false;     // edit mode (client can modify json on the server)\r\n\r\n    SceneHub._bLoading = false;\r\n\r\n    SceneHub.initBaseParsers();\r\n};\r\n\r\n/**\r\nThis enables/disables edit mode - i.e. changes to the scene are sent to server and become persistent\r\n@param {bool} b - true or false\r\n@example\r\nATON.SceneHub.setEditMode(true)\r\n*/\r\nSceneHub.setEditMode = (b)=>{\r\n    SceneHub._bEdit = b;\r\n    console.log(\"Edit mode:\"+b);\r\n};\r\n\r\n\r\n/**\r\n    Loads a scene by providing JSON path\r\n    @param {string} reqpath - JSON url\r\n    @param {string} sid - Scene ID\r\n    @param {function} oncomplete - Function to be called on complete\r\n    @example\r\n        ATON.SceneHub.load(\"http://path/to/scene.json\", \"sample\", ()=>{ console.log(\"Done!\"); });\r\n*/\r\nSceneHub.load = (reqpath, sid, oncomplete)=>{\r\n    //let args = reqpath.split(',');\r\n\r\n    SceneHub._bLoading = true;\r\n    console.log(\"Loading Scene: \"+sid);\r\n\r\n    return $.getJSON( reqpath, ( data )=>{\r\n        SceneHub.currData  = data;\r\n        SceneHub.currID    = sid; //scenejson.substring(scenejson.lastIndexOf('/')+1);\r\n        SceneHub._bLoading = false;\r\n\r\n        //console.log(ATON.currScene);\r\n\r\n        SceneHub.parseScene(data);\r\n\r\n        if (oncomplete) oncomplete();\r\n        ATON.fireEvent(\"SceneJSONLoaded\", sid);\r\n    });\r\n};\r\n\r\nSceneHub.parseScene = (sobj)=>{\r\n    sobj = (sobj === undefined)? SceneHub.currData : sobj;\r\n    if (sobj === undefined) return;\r\n\r\n    for (let k in sobj)\r\n        if (SceneHub._jsonParsers[k]) SceneHub._jsonParsers[k]( sobj[k] );\r\n};\r\n\r\nSceneHub.getJSONchildren = (nid, type)=>{\r\n    if (type === undefined) type = ATON.NTYPES.SCENE;\r\n\r\n    let P = undefined;\r\n    let children = [];\r\n\r\n    if (type === ATON.NTYPES.SEM)   P = ATON.getSemanticNode(nid);\r\n    if (type === ATON.NTYPES.SCENE) P = ATON.getSceneNode(nid);\r\n\r\n    if (P === undefined) return undefined;\r\n\r\n    for (let c in P.children){\r\n        let child = P.children[c];\r\n\r\n        if (child.nid !== undefined) children.push( child.nid );\r\n        }\r\n\r\n    return children;\r\n};\r\n\r\nSceneHub.getJSONgraphEdges = (type)=>{\r\n    if (type === undefined) type = ATON.NTYPES.SCENE;\r\n    let nodes = ATON.snodes;\r\n    \r\n    if (type === ATON.NTYPES.SEM) nodes = ATON.semnodes;\r\n    if (type === ATON.NTYPES.UI)  nodes = ATON.uinodes;\r\n\r\n    let edges = {};\r\n\r\n    for (let n in nodes){\r\n        let N = nodes[n];\r\n\r\n        //if (N && N.children) edges[n] = SceneHub.getJSONchildren(n, type);\r\n\r\n        let E = {};\r\n        if (N && N.parent && N.parent.nid){\r\n            //edges.push([N.parent.nid, N.nid]);\r\n            if (edges[N.parent.nid] === undefined) edges[N.parent.nid] = [];\r\n            edges[N.parent.nid].push(N.nid);\r\n            //edges[N.parent.nid].filter((v,i) => edges[N.parent.nid].indexOf(v) === i);\r\n        }\r\n    }\r\n\r\n    //console.log(edges);\r\n    return edges;\r\n};\r\n\r\nSceneHub.getJSONsemanticSpheresList = (semid)=>{\r\n    let S = ATON.getSemanticNode(semid);\r\n    if (S === undefined) return undefined;\r\n\r\n    let SL = [];\r\n\r\n    for (let s in S.children){\r\n        let sphere = S.children[s];\r\n        if (sphere.type){\r\n            SL.push([\r\n                parseFloat(sphere.position.x.toPrecision(3)), \r\n                parseFloat(sphere.position.y.toPrecision(3)), \r\n                parseFloat(sphere.position.z.toPrecision(3)), \r\n                parseFloat(sphere.scale.x.toPrecision(3))\r\n            ]);\r\n        }\r\n    }\r\n\r\n    return SL;\r\n};\r\n\r\nSceneHub.getJSONsemanticConvexShapes = (semid)=>{\r\n    let S = ATON.getSemanticNode(semid);\r\n    if (S === undefined) return undefined;\r\n\r\n    let CL = [];\r\n\r\n    for (let s in S.children){\r\n        let semesh = S.children[s];\r\n        if (semesh.userData._convexPoints){\r\n            CL.push(semesh.userData._convexPoints);\r\n        }\r\n    }\r\n\r\n    //console.log(CL);\r\n    \r\n    return CL;\r\n};\r\n\r\n// Top-level scene-JSON parsers\r\nSceneHub.initBaseParsers = ()=>{\r\n    SceneHub._jsonParsers = {};\r\n\r\n    // Environment\r\n    SceneHub._jsonParsers.environment = (env)=>{\r\n\r\n        let pano = env.mainpano;\r\n        if (env.mainpano){\r\n            if (pano.url) ATON.setMainPanorama(ATON.PATH_COLLECTION+pano.url);\r\n            if (pano.rotation) ATON.setMainPanoramaRotation(pano.rotation);\r\n        }\r\n\r\n        let L = env.mainlight;\r\n        if (L){\r\n            if (L.direction) ATON.setMainLightDirection( new THREE.Vector3(L.direction[0],L.direction[1],L.direction[2]) );\r\n\r\n            if (ATON._dMainL){\r\n                if (L.color)     ATON._dMainL.color = new THREE.Color(L.color[0],L.color[1],L.color[2]);\r\n                if (L.intensity) ATON._dMainL.intensity = L.intensity;\r\n\r\n                if (L.shadows) ATON.toggleShadows(L.shadows);\r\n            }\r\n        }\r\n\r\n        let lps = env.lightprobes;\r\n        if (lps){\r\n            if (lps.auto) ATON.setAutoLP(true);\r\n        }\r\n\r\n    };\r\n\r\n    // NavMode\r\n    SceneHub._jsonParsers.navmode = (navmode)=>{\r\n        if (navmode === undefined) return;\r\n\r\n        ATON.Nav.setNavMode(navmode);\r\n    };\r\n\r\n    // Viewpoints\r\n    SceneHub._jsonParsers.viewpoints = (povs)=>{\r\n        if (povs === undefined) return;\r\n\r\n        for (let p in povs){\r\n            let pov = povs[p];\r\n            \r\n            if (p === \"home\"){\r\n                ATON.Nav.setHomePOV( \r\n                    new ATON.POV()\r\n                    .setPosition(pov.position[0],pov.position[1],pov.position[2])\r\n                    .setTarget(pov.target[0],pov.target[1],pov.target[2])\r\n                    .setFOV(pov.fov)\r\n                    .setKeywords(pov.keywords)\r\n                );\r\n            }\r\n            else {\r\n                new ATON.POV(p)\r\n                .setPosition(pov.position)\r\n                .setTarget(pov.target)\r\n                .setFOV(pov.fov)\r\n                .setKeywords(pov.keywords);\r\n            }\r\n        }\r\n    };\r\n\r\n    // Visible scene-graph\r\n    SceneHub._jsonParsers.scenegraph = (sg)=>{\r\n        if (sg === undefined) return;\r\n\r\n        let nodes = sg.nodes;\r\n        let edges = sg.edges;\r\n\r\n        // nodes\r\n        for (let nid in nodes){\r\n            let N = nodes[nid]; // JSON node\r\n\r\n            //let G = ATON.createSceneNode(nid); // ATON node\r\n            let G = ATON.getOrCreateSceneNode(nid).removeChildren();\r\n            \r\n            // load models by urls list\r\n            let urls = N.urls;\r\n            if (urls){\r\n                if (Array.isArray(urls)){\r\n                    urls.forEach(u => {\r\n                        ATON.createSceneNode().load(ATON.PATH_COLLECTION+u).attachTo(G);\r\n                    });\r\n                }\r\n                else {\r\n                    G.load(ATON.PATH_COLLECTION+urls);\r\n                }\r\n            }\r\n\r\n            // FIXME: not working\r\n            if (N.shadowcast)    G.setShadowCast(N.shadowcast);\r\n            if (N.shadowreceive) G.setShadowCast(N.shadowreceive);\r\n\r\n            if (N.toYup) G.setYup();\r\n\r\n            // Keywords\r\n            if (N.keywords) G.kwords = N.keywords;\r\n\r\n            // Transform node\r\n            let transform = N.transform;\r\n            if (transform){\r\n                if (transform.position) G.setPosition(transform.position[0],transform.position[1],transform.position[2]);\r\n                if (transform.rotation) G.setRotation(transform.rotation[0],transform.rotation[1],transform.rotation[2]);\r\n                if (transform.scale)    G.setScale(transform.scale[0],transform.scale[1],transform.scale[2]);\r\n            }\r\n        }\r\n\r\n        // Build graph through relationships\r\n        for (let parid in edges){\r\n            let children = edges[parid];\r\n\r\n            let P = ATON.getSceneNode(parid);\r\n\r\n            if (P !== undefined){\r\n                for (let c in children){\r\n                    let childid = children[c];\r\n                    let C = ATON.getSceneNode(childid);\r\n                    if (C !== undefined) C.attachTo(P);\r\n                }\r\n            }\r\n        }\r\n/*\r\n        for (let e = 0; e < edges.length; e++){\r\n            let E = edges[e];\r\n\r\n            let from = E[0];\r\n            let to   = E[1];\r\n\r\n            if (from && to){\r\n                let child = ATON.getSceneNode(to);\r\n                if (child) child.attachTo(from);\r\n            }\r\n        }\r\n*/\r\n    };\r\n\r\n    // Semantic scene-graph\r\n    SceneHub._jsonParsers.semanticgraph = (sg)=>{\r\n        if (sg === undefined) return;\r\n\r\n        let nodes = sg.nodes;\r\n        let edges = sg.edges;\r\n\r\n        // nodes\r\n        for (let nid in nodes){\r\n            let N = nodes[nid]; // JSON node\r\n\r\n            //let G = ATON.createSemanticNode(nid);\r\n            let G = ATON.getOrCreateSemanticNode(nid).removeChildren();\r\n            \r\n            // load shapes by urls list\r\n            let urls = N.urls;\r\n            if (urls){\r\n                if (Array.isArray(urls)){\r\n                    urls.forEach(u => {\r\n                        ATON.createSemanticNode().load(ATON.PATH_COLLECTION+u).attachTo(G);\r\n                    });\r\n                }\r\n                else {\r\n                    G.load(ATON.PATH_COLLECTION+urls);\r\n                }\r\n            }\r\n\r\n            if (N.toYup) G.setYup();\r\n\r\n            if (N.description) G.setDescription(N.description);\r\n            if (N.audio) G.setAudio(N.audio);\r\n\r\n            // Keywords\r\n            if (N.keywords) G.kwords = N.keywords;\r\n\r\n            // Sphere [x,y,z, r]\r\n            let spheres = N.spheres;\r\n            if (Array.isArray(spheres)){\r\n                for (let s in spheres){\r\n                    let S = spheres[s];\r\n                    ATON.SemFactory.createSphere(nid, new THREE.Vector3(S[0],S[1],S[2]), S[3]);\r\n                }\r\n            }\r\n\r\n            let convexshapes = N.convexshapes;\r\n            if (Array.isArray(convexshapes)){\r\n                for (let s in convexshapes){\r\n                    let S = convexshapes[s];\r\n\r\n                    let points = [];\r\n                    for (let i=0; i<S.length; i+=3){\r\n                        let p = new THREE.Vector3(S[i],S[i+1],S[i+2]);\r\n                        points.push(p);\r\n                    }\r\n\r\n                    ATON.SemFactory.createConvexShape(nid, points);\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        // Build relationships\r\n        for (let parid in edges){\r\n            let children = edges[parid];\r\n\r\n            let P = ATON.getSemanticNode(parid);\r\n\r\n            if (P !== undefined){\r\n                for (let c in children){\r\n                    let childid = children[c];\r\n                    let C = ATON.getSemanticNode(childid);\r\n                    if (C !== undefined) C.attachTo(P);\r\n                }\r\n            }\r\n        }\r\n/*\r\n        for (let e = 0; e < edges.length; e++){\r\n            let E = edges[e];\r\n\r\n            let from = E[0];\r\n            let to   = E[1];\r\n\r\n            if (from && to){\r\n                let child = ATON.getSemanticNode(to);\r\n                if (child) child.attachTo(from);\r\n            }\r\n        }\r\n*/\r\n    };\r\n\r\n};\r\n\r\n// Adds custom scene parser to extend JSON scene\r\n// parser(k){ ... }\r\nSceneHub.addSceneParser = (k, parser)=>{\r\n    SceneHub._jsonParsers[k] = parser;\r\n};\r\n\r\n// [C] Sends JSON edit to server node\r\n// previously used: https://tools.ietf.org/html/rfc6902\r\nSceneHub.sendEdit = (patch, mode, onComplete)=>{\r\n    if (SceneHub._bLoading || !SceneHub._bEdit) return;\r\n    if (patch === undefined) return;\r\n    if (mode === undefined) mode = SceneHub.MODE_ADD;\r\n\r\n    let sid = SceneHub.currID;\r\n\r\n    let O = {};\r\n    O.sid  = sid;\r\n    O.data = patch;\r\n    O.mode = (mode === SceneHub.MODE_DEL)? \"DEL\" : \"ADD\";\r\n\r\n    let jstr = JSON.stringify(O);\r\n    //console.log(jstr);\r\n\r\n    $.ajax({\r\n        url: ATON.PATH_RESTAPI+\"edit/scene\",\r\n        type:\"POST\",\r\n        data: jstr,\r\n        contentType:\"application/json; charset=utf-8\",\r\n        dataType:\"json\",\r\n\r\n        // Update local scene JSON\r\n        // TODO: improve traffic by applying patch to local json, and NOT by receiving entire JSON \r\n        success: (r)=>{\r\n            if (r === undefined) return;\r\n            //console.log(r);\r\n            SceneHub.currData = r;\r\n            //console.log(ATON.currSceneHub.data);\r\n\r\n            if (onComplete) onComplete();\r\n        }\r\n    });\r\n};\r\n\r\n\r\nexport default SceneHub;","/*\r\n    ATON Navigation system\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\nconst COSINOIDAL_DIST = function(x){ return (1.0 - Math.cos(x * Math.PI)) / 2.0; };\r\n\r\n/**\r\nATON Navigation system\r\n@namespace Nav\r\n*/\r\nlet Nav = {};\r\n\r\n// Consts\r\nNav.STD_FOV  = 50.0;\r\nNav.STD_NEAR = 0.05;\r\nNav.STD_FAR  = 1000.0;\r\n\r\nNav.FP_EPS = 0.01;\r\nNav.STD_POV_TRANS_DURATION = 2.0;\r\n\r\n// Non-immersive navigation controls\r\nNav.MODE_ORBIT  = 0;\r\nNav.MODE_FP     = 1;\r\nNav.MODE_DEVORI = 2;\r\n\r\n\r\nNav.POVtransitionDuration = Nav.STD_POV_TRANS_DURATION;\r\n\r\n\r\n\r\n\r\n//Initialize nav system\r\nNav.init = ()=>{\r\n    Nav._mode = undefined;\r\n\r\n    Nav._rotSpeedOrbit = 0.4;\r\n    Nav._rotSpeedFP    = -0.2;\r\n    Nav._inertia       = 0.0; // 0.0 = disabled\r\n\r\n    // Setup controls\r\n    //Nav._camera = new THREE.PerspectiveCamera( Nav.STD_FOV, window.innerWidth / window.innerHeight, Nav.STD_NEAR, Nav.STD_FAR );\r\n    //Nav._camera.layers.enableAll();\r\n    //Nav._controls = new THREE.OrbitControls( Nav._camera, ATON._renderer.domElement);\r\n    Nav.setOrbitControl();\r\n\r\n    // POV data\r\n    Nav._currPOV = new ATON.POV(); // holds current viewpoint data (eye, target, etc...)\r\n    Nav._fromPOV = new ATON.POV(); // initial POV when requesting a transition\r\n    Nav._reqPOV  = new ATON.POV(); // requested POV for transition\r\n\r\n    Nav.homePOV = undefined; //new ATON.POV();\r\n\r\n    Nav._tPOVcall = -1.0;\r\n    Nav._tPOVprogress = 0.0;\r\n\r\n    Nav.povlist = {}; // This will handle registered POVs\r\n\r\n    // World direction and orientation (quat)\r\n    // consistent within standard and immersive XR\r\n    Nav._vDir = new THREE.Vector3(1,0,0);\r\n    Nav._qOri = new THREE.Quaternion();\r\n\r\n    // Motion\r\n    Nav._motionAmt = 0.0;\r\n    Nav._motionDir = new THREE.Vector3(0,1,0);\r\n};\r\n\r\n/**\r\nGet current eye location, consistent within standard and immersive XR sessions.\r\n@returns {THREE.Vector3}\r\n@example\r\nlet p = ATON.Nav.getCurrentEyeLocation();\r\n*/\r\nNav.getCurrentEyeLocation = ()=>{\r\n    return Nav._currPOV.pos;\r\n};\r\n\r\n/**\r\nGet current view direction (normalized). Consistent within standard and immersive XR sessions.\r\n@returns {THREE.Vector3}\r\n@example\r\nlet d = ATON.Nav.getCurrentDirection();\r\n*/\r\nNav.getCurrentDirection = ()=>{\r\n    return Nav._vDir;\r\n};\r\n\r\n/**\r\nGrab current POV and return a copy.\r\n@returns {POV}\r\n@example\r\nlet pov = ATON.Nav.copyCurrentPOV();\r\n*/\r\nNav.copyCurrentPOV = ()=>{\r\n    let pov = new ATON.POV();\r\n    pov.pos.copy(Nav._currPOV.pos);\r\n    pov.target.copy(Nav._currPOV.target);\r\n    pov.fov = Nav._currPOV.fov;\r\n\r\n    return pov;\r\n};\r\n\r\n/**\r\nReturn true if the navigation system is currently performing a transition\r\n@returns {boolean}\r\n*/\r\nNav.isTransitioning = ()=>{\r\n    if (Nav._tPOVcall >= 0.0) return true;\r\n    return false;\r\n};\r\n\r\n/**\r\nReturn true if the navigation system is in Orbit mode\r\n@returns {boolean}\r\n*/\r\nNav.isOrbit = ()=>{ return (Nav._mode === Nav.MODE_ORBIT); };\r\n\r\n/**\r\nReturn true if the navigation system is in First-person mode\r\n@returns {boolean}\r\n*/\r\nNav.isFirstPerson = ()=>{ return (Nav._mode === Nav.MODE_FP); };\r\n\r\n/**\r\nReturn true if the navigation system is in Device-orientation mode\r\n@returns {boolean}\r\n*/\r\nNav.isDevOri = ()=>{ return (Nav._mode === Nav.MODE_DEVORI); };\r\n\r\n/**\r\nSet Navigation mode\r\n@param {number} navmode - navigation mode (0: Orbit, 1: FirstPerson, 2: DeviceOrientation)\r\n*/\r\nNav.setNavMode = (navmode)=>{\r\n    if (navmode === undefined) return;\r\n\r\n    if (navmode === Nav.MODE_ORBIT)  Nav.setOrbitControl();\r\n    if (navmode === Nav.MODE_FP)     Nav.setFirstPersonControl();\r\n    if (navmode === Nav.MODE_DEVORI) Nav.setDeviceOrientationControl();\r\n};\r\n\r\n/**\r\nSet Orbit navigation mode (default)\r\n*/\r\nNav.setOrbitControl = ()=>{\r\n    if (ATON.XR.isPresenting()) return;\r\n\r\n    Nav._mode = Nav.MODE_ORBIT;\r\n\r\n    // One-time setup\r\n    if (Nav._cOrbit === undefined){\r\n        Nav._camOrbit = new THREE.PerspectiveCamera( Nav.STD_FOV, window.innerWidth / window.innerHeight, Nav.STD_NEAR, Nav.STD_FAR );\r\n        Nav._camOrbit.layers.enableAll();\r\n\r\n        Nav._cOrbit = new THREE.OrbitControls( Nav._camOrbit, ATON._renderer.domElement);\r\n\r\n        let C = Nav._cOrbit;\r\n\r\n        C.rotateSpeed   = Nav._rotSpeedOrbit;\r\n        C.enablePan     = true;\r\n        \r\n        if (Nav._inertia > 0.0){\r\n            C.enableDamping = true;\r\n            C.dampingFactor = 0.1;\r\n        }\r\n        \r\n        C.screenSpacePanning = true;\r\n        \r\n        C.enableZoom  = true;\r\n        C.minDistance = 0.03;\r\n        C.maxDistance = 1000.0;\r\n\r\n        C.addEventListener(\"change\", () => { Nav._bControlChange = true; });\r\n    }\r\n\r\n    Nav._controls = Nav._cOrbit;\r\n    //Nav._controls.target.copy(Nav._camera.position);\r\n    Nav._camera = Nav._camOrbit;\r\n    \r\n    Nav._controls.update();\r\n    if (Nav._currPOV) Nav.syncCurrCamera();\r\n};\r\n\r\n/**\r\nSet First-Person navigation mode\r\n*/\r\nNav.setFirstPersonControl = ()=>{\r\n    if (ATON.XR.isPresenting()) return;\r\n\r\n    Nav._mode = Nav.MODE_FP;\r\n\r\n    // One-time setup\r\n    if (Nav._cFirstPerson === undefined){\r\n        Nav._camFP = new THREE.PerspectiveCamera( Nav.STD_FOV, window.innerWidth / window.innerHeight, Nav.STD_NEAR, Nav.STD_FAR );\r\n        Nav._camFP.layers.enableAll();\r\n\r\n        Nav._cFirstPerson = new THREE.OrbitControls( Nav._camFP, ATON._renderer.domElement);\r\n\r\n        let C = Nav._cFirstPerson;\r\n\r\n        C.enableZoom  = false;\r\n        C.enablePan   = false;\r\n        C.rotateSpeed = Nav._rotSpeedFP;\r\n        \r\n        if (Nav._inertia > 0.0){\r\n            C.enableDamping = true;\r\n            C.dampingFactor = 0.1;\r\n        }\r\n        \r\n        //C.screenSpacePanning = true;\r\n\r\n        C.target.copy(Nav._camera.position);\r\n\r\n        C.minDistance = 0.05;\r\n        C.maxDistance = 0.05;\r\n    }\r\n\r\n    Nav._controls = Nav._cFirstPerson;\r\n    //Nav._controls.target.copy(Nav._camera.position);\r\n    Nav._camera = Nav._camFP;\r\n\r\n    Nav._controls.update();\r\n    if (Nav._currPOV) Nav.syncCurrCamera();\r\n/*\r\n    if (Nav._controls) ATON._controls.dispose();\r\n    ATON._controls = new THREE.FirstPersonControls( ATON._camera, ATON._renderer.domElement);\r\n    ATON._controls.lookSpeed = 0.1;\r\n    ATON._controls.movementSpeed = 10;\r\n    ATON._controls.noFly = true;\r\n    ATON._controls.lookVertical = false;\r\n\r\n    //ATON._camera.position.set( 20.0, 5.0, 0 );\r\n    ATON._controls.lookAt(0,4,0);\r\n\r\n    ATON._controls.update();\r\n    console.log(ATON._controls);\r\n*/\r\n};\r\n\r\n/**\r\nSet device-orientation navigation mode\r\n*/\r\nNav.setDeviceOrientationControl = ()=>{\r\n    if (!ATON.Utils.isMobile()) return;\r\n\r\n    Nav._mode = Nav.MODE_DEVORI;\r\n    ATON._screenPointerCoords.set(0.0,0.0);\r\n\r\n    // One-time setup\r\n    if (Nav._cDevOri === undefined){\r\n        Nav._camDevOri = new THREE.PerspectiveCamera( Nav.STD_FOV, window.innerWidth / window.innerHeight, Nav.STD_NEAR, Nav.STD_FAR );\r\n        Nav._camDevOri.layers.enableAll();\r\n\r\n        Nav._cDevOri = new THREE.DeviceOrientationControls(Nav._camDevOri, ATON._renderer.domElement);\r\n        //Nav._cDevOri = new Nav.DeviceOrientationControls(Nav._camDevOri, ATON._renderer.domElement);\r\n\r\n        Nav._cDevOri.alphaOffset = 0.0; //The alpha offset in radians\r\n    }\r\n\r\n    Nav._controls = Nav._cDevOri;\r\n    Nav._camera   = Nav._camDevOri;\r\n\r\n    Nav._controls.update();\r\n    if (Nav._currPOV) Nav.syncCurrCamera();\r\n};\r\n\r\n/**\r\nSet a motion amount\r\n@param {number} f - the motion amount\r\n@example\r\nATON.Nav.setMotionAmount(0.1);\r\n*/\r\nNav.setMotionAmount = (f)=>{\r\n    Nav._motionAmt = f;\r\n};\r\n\r\n/**\r\nSet a motion direction\r\n@param {THREE.Vector3} f - the motion direction\r\n@example\r\nATON.Nav.setMotionDirection( new THREE.Vector(1,0,0) );\r\n*/\r\nNav.setMotionDirection = (v)=>{\r\n    Nav._motionDir.copy(v);\r\n}\r\n\r\n/**\r\nStop current motion\r\n*/\r\nNav.stop = ()=>{\r\n    Nav._motionAmt = 0.0;\r\n    //TODO: stop any transition\r\n};\r\n\r\n/**\r\nSet field-of-view (FoV) in degrees\r\n@param {number} f\r\n@example\r\nATON.Nav.setFOV(30.0);\r\n*/\r\nNav.setFOV = (f)=>{\r\n    if (ATON.XR.isPresenting()) return; // skip for immersive sessions\r\n\r\n    Nav._currPOV.fov = f;\r\n\r\n    let cam = Nav._camera;\r\n    cam.fov = f;\r\n    cam.updateProjectionMatrix();\r\n};\r\n\r\n/**\r\nGet current field-of-view (FoV) in degrees\r\n@returns {number}\r\n*/\r\nNav.getFOV = ()=>{\r\n    return Nav._currPOV.fov;\r\n};\r\n\r\n\r\n// Retrieve currPOV from camera and controls\r\nNav.syncCurrPOV = ()=>{\r\n    if (ATON.XR.isPresenting()){\r\n        \r\n        let C = ATON._renderer.xr.getCamera(Nav._camera);\r\n        C.getWorldPosition( Nav._currPOV.pos );\r\n        C.getWorldQuaternion( Nav._qOri );\r\n        C.getWorldDirection( Nav._vDir );\r\n        //console.log(Nav._hmdPos);\r\n\r\n        //ATON.XR.hmdPos.copy(Nav._currPOV.pos);\r\n        //ATON.XR.hmdDir.copy(Nav._vDir);\r\n        \r\n        //ATON._renderer.xr.getCamera(Nav._camera);\r\n        //ATON._renderer.xr.getCamera(Nav._camera).getWorldDirection(Nav._vDir);\r\n        //Nav._camera.getWorldDirection(Nav._vDir);\r\n        \r\n        //Nav._currPOV.pos.copy(Nav._camera.position);\r\n        return;\r\n    }\r\n\r\n    let ctrl  = Nav._controls;\r\n    let cam   = Nav._camera;\r\n\r\n    cam.getWorldDirection(Nav._vDir);\r\n    cam.getWorldQuaternion(Nav._qOri);\r\n\r\n    if (Nav._mode === Nav.MODE_DEVORI){\r\n        Nav._currPOV.pos.copy(cam.position);\r\n        return;\r\n    }\r\n\r\n    if (Nav._mode === Nav.MODE_FP){\r\n        Nav._currPOV.pos.copy(ctrl.target);\r\n\r\n        Nav._currPOV.target.x = Nav._currPOV.pos.x + Nav._vDir.x; //ctrl.target.x - cam.position.x;\r\n        Nav._currPOV.target.y = Nav._currPOV.pos.y + Nav._vDir.y; //ctrl.target.y - cam.position.y;\r\n        Nav._currPOV.target.z = Nav._currPOV.pos.z + Nav._vDir.z; //ctrl.target.z - cam.position.z;\r\n        return;\r\n    }\r\n    \r\n    Nav._currPOV.pos.copy(cam.position);\r\n    Nav._currPOV.target.copy(ctrl.target);\r\n};\r\n\r\n// After syncCurrPOV and before updateCamera, we maniuplate currPOV\r\n//==================================================================================\r\nNav.handlePOV = ()=>{\r\n    //console.log(Nav._currPOV.pos);\r\n\r\n    if (ATON.XR.isPresenting()) Nav.handleXRtransition();\r\n    else Nav.handlePOVtransition();\r\n\r\n    Nav.handleMotion();\r\n\r\n    //if (ATON.XR.isPresenting()) console.log(ATON._renderer.xr);\r\n\r\n    // Handle constraints\r\n\r\n};\r\n\r\nNav.handleMotion = ()=>{\r\n    if (Nav.isTransitioning()) return;\r\n\r\n    if (Nav._motionAmt != 0.0){\r\n\r\n        //if ()\r\n\r\n\r\n        if (ATON.XR.controller0 && ATON.XR.controller0.visible){\r\n            ATON.XR.controller0.getWorldDirection(Nav._motionDir);\r\n            Nav._motionDir.negate();\r\n            }\r\n        else Nav._motionDir.copy(Nav._vDir);\r\n\r\n        let fv = Nav._motionDir.clone();\r\n        fv.multiplyScalar(Nav._motionAmt * ATON._dt);\r\n\r\n        Nav._currPOV.pos.add(fv);\r\n        Nav._currPOV.target.add(fv); // check if needed\r\n    }\r\n};\r\n\r\nNav.handlePOVtransition = ()=>{\r\n    if (Nav._tPOVcall < 0.0) return;\r\n\r\n    if (Nav.POVtransitionDuration <= 0.0) Nav._tPOVprogress = 1.0;\r\n    else Nav._tPOVprogress = (ATON._clock.elapsedTime - Nav._tPOVcall) / Nav.POVtransitionDuration;\r\n\r\n    // End\r\n    if (Nav._tPOVprogress >= 1.0){\r\n\r\n        Nav._tPOVcall = -1.0;\r\n        //Nav._controls.enabled = true;\r\n\r\n        Nav._currPOV.pos.copy(Nav._reqPOV.pos);\r\n        Nav._currPOV.target.copy(Nav._reqPOV.target);\r\n        Nav._currPOV.fov = Nav._reqPOV.fov;\r\n\r\n        ATON.fireEvent(\"POVTransitionCompleted\", Nav._reqPOV.id);\r\n        return;\r\n    }\r\n\r\n    Nav._tPOVprogress = COSINOIDAL_DIST(Nav._tPOVprogress);\r\n\r\n    Nav._currPOV.pos.lerpVectors(Nav._fromPOV.pos, Nav._reqPOV.pos, Nav._tPOVprogress);\r\n    Nav._currPOV.target.lerpVectors(Nav._fromPOV.target, Nav._reqPOV.target, Nav._tPOVprogress);\r\n\r\n    if (!Nav._fromPOV.fov || !Nav._reqPOV.fov) return;\r\n    Nav._currPOV.fov = THREE.MathUtils.lerp(Nav._fromPOV.fov, Nav._reqPOV.fov, Nav._tPOVprogress);\r\n\r\n    //console.log(Nav._camera);\r\n\r\n    Nav._camera.fov = Nav._currPOV.fov;\r\n    Nav._camera.updateProjectionMatrix();\r\n};\r\n\r\n// Immersive XR transitions\r\nNav.handleXRtransition = ()=>{\r\n    if (Nav._tPOVcall < 0.0) return;\r\n\r\n    if (Nav.POVtransitionDuration <= 0.0) Nav._tPOVprogress = 1.0;\r\n    else Nav._tPOVprogress = (ATON._clock.elapsedTime - Nav._tPOVcall) / Nav.POVtransitionDuration;\r\n\r\n    // End\r\n    if (Nav._tPOVprogress >= 1.0){\r\n\r\n        Nav._tPOVcall = -1.0;\r\n        //Nav._controls.enabled = true;\r\n\r\n        //ATON.XR.setRefSpaceLocation(Nav._reqXRpos);\r\n\r\n        console.log(\"XR height\"+ATON.XR._currPos.y);\r\n        console.log(\"HMD height\"+Nav._currPOV.pos.y);\r\n\r\n        ATON.fireEvent(\"POVTransitionCompleted\", Nav._reqPOV.id);\r\n        return;\r\n    }\r\n\r\n    ATON.XR._currPos.lerpVectors(ATON.XR._fromPos, ATON.XR._reqPos, Nav._tPOVprogress);\r\n    //ATON.XR._currPos.lerpVectors(Nav._fromPOV.pos, Nav._reqPOV.pos, Nav._tPOVprogress);\r\n\r\n};\r\n\r\n// Update internal camera from currPOV \r\nNav.syncCurrCamera = ()=>{\r\n    let ctrl  = Nav._controls;\r\n    let cam   = Nav._camera;\r\n    \r\n    let pos = Nav._currPOV.pos;\r\n    let tgt = Nav._currPOV.target;\r\n\r\n    // We are in VR\r\n    if (ATON.XR.isPresenting()){\r\n        ///let vrcam = ATON.XR.rig;\r\n        ///vrcam.position.copy(pos);\r\n        \r\n        ///ATON.XR.setRefSpaceLocation(pos);\r\n\r\n        //let C = ATON._renderer.xr.getCamera(cam);\r\n        //C.getWorldDirection(Nav._vDir);\r\n        return;\r\n    }\r\n\r\n    if (Nav._mode === Nav.MODE_DEVORI){\r\n        cam.position.copy(pos);\r\n        return;\r\n    }\r\n\r\n    // Common controls\r\n    //let d = new THREE.Vector3();\r\n    Nav._vDir.subVectors(tgt, pos);\r\n    Nav._vDir.normalize();\r\n\r\n    if (Nav._mode === Nav.MODE_FP){\r\n        ctrl.target.copy(pos);\r\n\r\n        cam.position.x = ctrl.target.x - (Nav._vDir.x * Nav.FP_EPS);\r\n        cam.position.y = ctrl.target.y - (Nav._vDir.y * Nav.FP_EPS);\r\n        cam.position.z = ctrl.target.z - (Nav._vDir.z * Nav.FP_EPS);\r\n    }\r\n    else {\r\n        cam.position.copy(pos);\r\n        ctrl.target.copy(tgt);\r\n    }\r\n};\r\n\r\n// Main update routine\r\nNav.update = ()=>{\r\n\r\n    //Nav._bXR = ATON.XR.isPresenting();\r\n\r\n    Nav.syncCurrPOV();\r\n    Nav.handlePOV();\r\n    Nav.syncCurrCamera();\r\n};\r\n\r\n\r\n/**\r\nRequest transition to viewpoint (POV)\r\n@param {POV} pov - the target POV\r\n@param {number} duration - duration of transition in seconds (optional), otherwise use standard duration\r\n@example\r\nATON.Nav.requestPOV( myTargetPOV );\r\n*/\r\nNav.requestPOV = (pov, duration)=>{\r\n    if (ATON._tPOVcall >= 0.0) return; // already requested\r\n\r\n    ATON.fireEvent(\"POVTransitionRequested\", pov.id);\r\n\r\n    if (duration !== undefined) Nav.POVtransitionDuration = duration;\r\n    \r\n    //Nav._controls.enabled = false;\r\n\r\n    Nav._tPOVcall = ATON._clock.elapsedTime;\r\n    \r\n    if (ATON.XR.isPresenting()){\r\n        Nav._reqPOV.pos.copy(pov.pos? pov.pos : Nav._currPOV.pos);\r\n        Nav._fromPOV.pos.copy(Nav._currPOV.pos);\r\n\r\n        ATON.XR._reqPos.copy(pov.pos? pov.pos : Nav._currPOV.pos);\r\n        ATON.XR._fromPos.copy(ATON.XR._currPos);\r\n    }\r\n    else {\r\n        Nav._reqPOV.pos.copy(pov.pos? pov.pos : Nav._currPOV.pos);\r\n        Nav._reqPOV.target.copy( pov.target? pov.target : Nav._currPOV.target);\r\n        Nav._reqPOV.fov = pov.fov? pov.fov : Nav._currPOV.fov;\r\n\r\n        Nav._fromPOV.pos.copy(Nav._currPOV.pos);\r\n        Nav._fromPOV.target.copy(Nav._currPOV.target);\r\n        Nav._fromPOV.fov = Nav._currPOV.fov;\r\n    }\r\n};\r\n\r\n\r\nNav.requestPOVbyBound = (bs, duration)=>{\r\n    if (bs === undefined) return;\r\n\r\n    let T = new THREE.Vector3();\r\n    let E = new THREE.Vector3();\r\n\r\n    T.copy(bs.center);\r\n    \r\n    let r = bs.radius * 2.5;\r\n    E.x = T.x - (r * Nav._vDir.x);\r\n    E.y = T.y - (r * Nav._vDir.y);\r\n    E.z = T.z - (r * Nav._vDir.z);\r\n\r\n    let pov = new ATON.POV().setPosition(E).setTarget(T);    \r\n    Nav.requestPOV(pov, duration);\r\n};\r\n\r\n/**\r\nRequest transition to specific ATON Node\r\n@param {Node} n - the target ATON Node\r\n@param {number} duration - duration of transition in seconds (optional), otherwise use standard duration\r\n@example\r\nATON.Nav.requestPOVbyNode( myNode );\r\n*/\r\nNav.requestPOVbyNode = (n, duration)=>{\r\n    if (n === undefined) return;\r\n    \r\n    let bs = n.getBound();\r\n\r\n    Nav.requestPOVbyBound(bs,duration);\r\n};\r\n\r\nNav.requestRetarget = (point, normal, duration)=>{\r\n    let M = new THREE.Vector3();\r\n    if (normal === undefined){\r\n        M.lerpVectors(point, Nav._currPOV.pos, 0.8);\r\n    }\r\n    else {\r\n        let d = point.distanceTo(Nav._currPOV.pos);\r\n        d *= 0.5;\r\n        M.x = point.x + (normal.x * d);\r\n        M.y = point.y + (normal.y * d);\r\n        M.z = point.z + (normal.z * d);\r\n    }\r\n\r\n    let pov = new ATON.POV().setPosition(M).setTarget(point).setFOV(Nav._currPOV.fov);\r\n    console.log(pov);\r\n    \r\n    Nav.requestPOV(pov, duration);\r\n};\r\n\r\n\r\n/**\r\nCompute a default home, depending on visibile bounding sphere. Typically called after all assets are loaded\r\n@param {THREE.Vector3} dv - the normalized offset direction (optional)\r\n@example\r\nATON.Nav.computeDefaultHome();\r\n*/\r\nNav.computeDefaultHome = (dv)=>{\r\n    if (dv === undefined) dv = new THREE.Vector3(1,0.7,1);\r\n\r\n    let sceneBS = ATON.getRootScene().getBound();\r\n\r\n    let eye = new THREE.Vector3(\r\n        sceneBS.center.x + (sceneBS.radius * dv.x * 1.5), \r\n        sceneBS.center.y + (sceneBS.radius * dv.y * 1.5), \r\n        sceneBS.center.z + (sceneBS.radius * dv.z * 1.5)\r\n    );\r\n\r\n    Nav.homePOV = new ATON.POV().setPosition(eye).setTarget(sceneBS.center);\r\n};\r\n\r\n/** \r\nSet the home viewpoint (POV)\r\n@param {POV} pov - the home POV\r\n*/\r\nNav.setHomePOV = (pov)=>{\r\n    Nav.homePOV = pov;\r\n};\r\n\r\nNav.computeAndRequestDefaultHome = (duration, dv)=>{\r\n    Nav.computeDefaultHome(dv);\r\n    Nav.requestPOV(Nav.homePOV, duration);\r\n};\r\n\r\n/** \r\nRequest home viewpoint\r\n@param {number} duration - transition duration\r\n*/\r\nNav.requestHome = (duration)=>{\r\n    Nav.requestPOV(Nav.homePOV, duration);\r\n};\r\n\r\n\r\n/*\r\nMobile devori (modified for absolute compass - UNSTABLE)\r\nauthor richt / http://richt.me\r\nauthor WestLangley / http://github.com/WestLangley\r\nW3C Device Orientation control (http://w3c.github.io/deviceorientation/spec-source-orientation.html)\r\n*/\r\nNav.DeviceOrientationControls = function ( object ) {\r\n    let scope = this;\r\n\r\n    this.object = object;\r\n    this.object.rotation.reorder( 'YXZ' );\r\n    this.enabled = true;\r\n\r\n    this.deviceOrientation = {};\r\n    this.screenOrientation = 0;\r\n\r\n    this.alphaOffset = 0; // radians\r\n    this.absolute = false;\r\n    this.alphaOffsetDevice = undefined;\r\n    this.alphaOffsetScreen = undefined;\r\n\r\n    let onDeviceOrientationChangeEvent = function ( event ) {\r\n        if(scope.absolute) return;\r\n        scope.deviceOrientation = event;\r\n    };\r\n\r\n    let onDeviceOrientationAbsoluteChangeEvent = function ( event ) {\r\n        scope.deviceOrientation = event;\r\n        scope.absolute = true;\r\n    };\r\n\r\n    let onScreenOrientationChangeEvent = function () {\r\n        scope.screenOrientation = window.orientation || 0;\r\n    };\r\n\r\n    // The angles alpha, beta and gamma form a set of intrinsic Tait-Bryan angles of type Z-X'-Y''\r\n    let setObjectQuaternion = function () {\r\n        let zee = new THREE.Vector3( 0, 0, 1 );\r\n        let euler = new THREE.Euler();\r\n\r\n        let q0 = new THREE.Quaternion();\r\n        let q1 = new THREE.Quaternion( - Math.sqrt( 0.5 ), 0, 0, Math.sqrt( 0.5 ) ); // - PI/2 around the x-axis\r\n\r\n        return function ( quaternion, alpha, beta, gamma, orient ) {\r\n            euler.set( beta, alpha, - gamma, 'YXZ' ); // 'ZXY' for the device, but 'YXZ' for us\r\n            quaternion.setFromEuler( euler ); // orient the device\r\n            quaternion.multiply( q1 ); // camera looks out the back of the device, not the top\r\n            quaternion.multiply( q0.setFromAxisAngle( zee, - orient ) ); // adjust for screen orientation\r\n        };\r\n\r\n    }();\r\n\r\n    this.connect = function () {\r\n        onScreenOrientationChangeEvent(); // run once on load\r\n\r\n        window.addEventListener( 'orientationchange', onScreenOrientationChangeEvent, false );\r\n        window.addEventListener( 'deviceorientation', onDeviceOrientationChangeEvent, false );\r\n        window.addEventListener( 'deviceorientationabsolute', onDeviceOrientationAbsoluteChangeEvent, false );\r\n\r\n        scope.enabled = true;\r\n    };\r\n\r\n    this.disconnect = function () {\r\n        window.removeEventListener( 'orientationchange', onScreenOrientationChangeEvent, false );\r\n        window.removeEventListener( 'deviceorientation', onDeviceOrientationChangeEvent, false );\r\n        window.removeEventListener( 'deviceorientationabsolute', onDeviceOrientationAbsoluteChangeEvent, false );\r\n\r\n        scope.enabled = false;\r\n    };\r\n\r\n    this.update = function () {\r\n        if ( scope.enabled === false ) return;\r\n\r\n        let device;\r\n        device = scope.deviceOrientation;\r\n\r\n        if ( device ) {\r\n            let alpha = this.getDirection() ? THREE.Math.degToRad( this.getDirection() ) + scope.alphaOffset : 0; // Z\r\n            let beta = device.beta ? THREE.Math.degToRad( device.beta ) : 0; // X'\r\n\r\n            let gamma = device.gamma ? THREE.Math.degToRad( device.gamma ) : 0; // Y''\r\n            let orient = scope.screenOrientation ? THREE.Math.degToRad( scope.screenOrientation ) : 0; // O\r\n\r\n            setObjectQuaternion( scope.object.quaternion, alpha, beta, gamma, orient );\r\n        }\r\n\r\n    };\r\n\r\n    this.dispose = ()=>{\r\n        scope.disconnect();\r\n    };\r\n\r\n    this.iOSOrientationPermission = ()=>{\r\n        if (typeof DeviceOrientationEvent.requestPermission === 'function') {\r\n            DeviceOrientationEvent.requestPermission().then(permissionState => {\r\n                if (permissionState === 'granted') {\r\n\r\n                }\r\n\r\n                console.log(permissionState);\r\n            }).catch(console.error);\r\n        }\r\n    }\r\n\r\n    this.getDirection = ()=>{\r\n        return (typeof scope.deviceOrientation.webkitCompassHeading != \"undefined\") ? scope.deviceOrientation.webkitCompassHeading : scope.deviceOrientation.alpha;\r\n    }\r\n\r\n    this.getDirectionMap = ()=>{\r\n        return (typeof scope.deviceOrientation.webkitCompassHeading != \"undefined\") ? (360 - scope.deviceOrientation.webkitCompassHeading) : scope.deviceOrientation.alpha;\r\n    }\r\n\r\n    this.connect();\r\n};\r\n\r\n\r\nexport default Nav;","/*\r\n    ATON immersive XR module\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\n/**\r\nATON Immersive XR\r\n@namespace XR\r\n*/\r\nlet XR = {};\r\n\r\nXR.STD_TELEP_DURATION = 0.03;\r\nXR.HAND_R = 0;\r\nXR.HAND_L = 1;\r\n\r\n\r\n//Initializes XR component\r\nXR.init = ()=>{\r\n    ATON._renderer.xr.enabled = true;\r\n    ATON._renderer.xr.setReferenceSpaceType( 'local' );\r\n    \r\n    if (ATON.device.isMobile) ATON._renderer.xr.setFramebufferScaleFactor(0.5); // WebXR density\r\n\r\n    XR._bPresenting = false;\r\n    XR.currSession = null;\r\n\r\n    XR.rig = new THREE.Group();\r\n    //XR.rig.position.set(0,0,0);\r\n    XR.rig.add( ATON.Nav._camera );\r\n    ATON._rootUI.add(XR.rig);\r\n\r\n    //XR.hmdOri = new THREE.Quaternion();\r\n    //XR.hmdPos = new THREE.Vector3();\r\n\r\n    XR._currPos = XR.rig.position; //new THREE.Vector3();\r\n    XR._fromPos = new THREE.Vector3();\r\n    XR._reqPos  = new THREE.Vector3();\r\n\r\n    XR.gControllers = undefined;\r\n\r\n    XR.controller0pos = new THREE.Vector3();\r\n    XR.controller1pos = new THREE.Vector3();\r\n    XR.controller0dir = new THREE.Vector3();\r\n    XR.controller1dir = new THREE.Vector3();\r\n\r\n    XR._lastPosR = undefined;\r\n    XR._lastPosL = undefined;\r\n\r\n    XR.gpad0 = undefined;\r\n    XR.gpad1 = undefined;\r\n\r\n    XR._urlHand = ATON.PATH_RES+\"models/hand/hand.glb\";\r\n\r\n    // Base ev\r\n    ATON.on(\"XRselectStart\", (c)=>{\r\n        if (c === XR.HAND_R) XR.defaultSelectHandler(c);\r\n    });\r\n    ATON.on(\"XRselectEnd\", (c)=>{\r\n        //ATON.Nav.stop();\r\n        //console.log(\"Sel end \"+c);\r\n    });\r\n\r\n    ATON.on(\"XRsqueezeStart\", (c)=>{\r\n        console.log(\"Squeeze \"+c);\r\n    });\r\n\r\n    ATON.on(\"VRC_IDassigned\", (uid)=>{\r\n        let rh = ATON.getUINode(\"Rhand\");\r\n        let lh = ATON.getUINode(\"Lhand\");\r\n\r\n        let avMats = ATON.MatHub.materials.avatars;\r\n        let am = avMats[uid % avMats.length];\r\n        if (lh) lh.setMaterial(am);\r\n        if (rh) rh.setMaterial(am);\r\n    });\r\n};\r\n\r\n/**\r\nReturn true if we are presenting (immersive mode)\r\n@returns {boolean}\r\n*/\r\nXR.isPresenting = ()=>{\r\n    return XR._bPresenting;\r\n};\r\n\r\n\r\nXR.defaultSelectHandler = (c)=>{\r\n\r\n    if (ATON._queryDataScene){\r\n        let P = ATON._queryDataScene.p;\r\n        let N = ATON._queryDataScene.n;\r\n\r\n        //P.y += 0.8; // with 'local': half user height\r\n\r\n        // FIXME: height offset needed for \"local\", fill this automatically\r\n        if (N.y > 0.7) ATON.Nav.requestPOV( new ATON.POV().setPosition(P.x, P.y + ATON.userHeight, P.z), XR.STD_TELEP_DURATION );\r\n    }\r\n\r\n    ATON.FE.playAudioFromSemanticNode(ATON._hoveredSemNode);\r\n    \r\n    //ATON.Nav.setMotionAmount(3.0);\r\n};\r\n\r\nXR._handleUISelection = ()=>{\r\n    if (ATON._hoveredUI === undefined) return false;\r\n\r\n    let H = ATON.getUINode(ATON._hoveredUI);\r\n    if (H && H.onSelect) H.onSelect();\r\n    \r\n    return true;\r\n}\r\n\r\n\r\n/**\r\nSet reference-space location (not the actual HMD camera location).\r\nThis can be used to move around the user, given a proper locomotion technique\r\n@param {THREE.Vector3} p - the new location of reference space\r\n*/\r\nXR.setRefSpaceLocation = (p)=>{\r\n    XR.rig.position.copy(p);\r\n};\r\n\r\n// Right\r\nXR._setupControllerR = (C)=>{\r\n    if (XR.controller0) return;\r\n\r\n    XR.controller0 = C;\r\n    console.log(\"R controller\");\r\n\r\n    // Main trigger\r\n    C.addEventListener( 'selectstart', ()=>{\r\n        if (XR._handleUISelection()) return;\r\n\r\n        ATON.fireEvent(\"XRselectStart\", XR.HAND_R);\r\n    });\r\n    C.addEventListener( 'selectend', ()=>{ \r\n        ATON.fireEvent(\"XRselectEnd\", XR.HAND_R);\r\n    });\r\n\r\n    // Squeeze\r\n    C.addEventListener( 'squeezestart', ()=>{\r\n        ATON.fireEvent(\"XRsqueezeStart\", XR.HAND_R);\r\n    });\r\n    C.addEventListener( 'squeezeend', ()=>{\r\n        ATON.fireEvent(\"XRsqueezeEnd\", XR.HAND_R);\r\n    });\r\n\r\n    XR.setupControllerUI(XR.HAND_R);\r\n    ATON.fireEvent(\"XRcontrollerConnected\", XR.HAND_R);\r\n};\r\n\r\n// Left\r\nXR._setupControllerL = (C)=>{\r\n    if (XR.controller1) return;\r\n\r\n    XR.controller1 = C;\r\n    console.log(\"L controller\");\r\n\r\n    // Main trigger\r\n    C.addEventListener( 'selectstart',  ()=>{\r\n        //if (XR._handleUISelection()) return;\r\n        ATON.fireEvent(\"XRselectStart\", XR.HAND_L);\r\n    });\r\n    C.addEventListener( 'selectend',  ()=>{ \r\n        ATON.fireEvent(\"XRselectEnd\", XR.HAND_L);\r\n    });\r\n\r\n    // Squeeze\r\n    C.addEventListener( 'squeezestart', ()=>{\r\n        ATON.fireEvent(\"XRsqueezeStart\", XR.HAND_L);\r\n    });\r\n    C.addEventListener( 'squeezeend', ()=>{\r\n        ATON.fireEvent(\"XRsqueezeEnd\", XR.HAND_L);\r\n    });\r\n\r\n    XR.setupControllerUI(XR.HAND_L);\r\n    ATON.fireEvent(\"XRcontrollerConnected\", XR.HAND_L);\r\n};\r\n\r\n\r\n// On XR session started\r\nXR.onSessionStarted = ( session )=>{\r\n\tsession.addEventListener( 'end', XR.onSessionEnded );\r\n\r\n\tATON._renderer.xr.setSession( session );\r\n\tXR.currSession = session;\r\n\r\n    let C0 = ATON._renderer.xr.getController(0);\r\n    let C1 = ATON._renderer.xr.getController(1);\r\n\r\n    console.log(C0);\r\n    //ATON.VRoadcast.log(JSON.stringify(C0));\r\n\r\n    // Controller 0\r\n    if (C0){\r\n        C0.visible = false;\r\n\r\n        C0.addEventListener( 'connected', (e) => {\r\n            C0.gamepad = e.data.gamepad;\r\n            //console.log(XR.controller0.gamepad);\r\n\r\n            //ATON.VRoadcast.log(JSON.stringify(e));\r\n\r\n            //let gp = C0.gamepad;\r\n            //if (gp.pose && gp.pose.hasPosition) C0.visible = true;\r\n\r\n/*          FIXME:\r\n            let h = gp.hand;\r\n            console.log(gp);\r\n            if (h === \"right\" || h === undefined) XR._setupControllerR(C0);\r\n            else if (h === \"left\") XR._setupControllerL(C0);\r\n*/\r\n            XR._setupControllerR(C0);\r\n        });\r\n    }\r\n\r\n    // Controller 1\r\n    if (C1){\r\n        C1.visible = false;\r\n\r\n        C1.addEventListener( 'connected', (e) => {\r\n            C1.gamepad = e.data.gamepad;\r\n            \r\n            //let gp = C1.gamepad;\r\n            //if (gp.pose && gp.pose.hasPosition) C1.visible = true;\r\n\r\n/*          FIXME:\r\n            if (gp.hand === \"right\" || gp.hand === undefined) XR._setupControllerR(C1);\r\n            else if (gp.hand === \"left\") XR._setupControllerL(C1);\r\n*/\r\n            XR._setupControllerL(C1);\r\n        });\r\n\r\n    }\r\n\r\n    XR.setRefSpaceLocation(ATON.Nav._currPOV.pos);\r\n\r\n    XR._bPresenting = true;\r\n    console.log(\"XR now presenting\");\r\n\r\n    //XR.setupControllersUI();\r\n\r\n    ATON.fireEvent(\"XRmode\", true);\r\n\r\n    //console.log(session);\r\n};\r\n\r\n// On XR session terminated\r\nXR.onSessionEnded = ( /*event*/ )=>{\r\n    XR.currSession.removeEventListener( 'end', XR.onSessionEnded );\r\n    XR.currSession = null;\r\n\r\n    XR._bPresenting = false;\r\n    //XR.rig.position.set(0.0,0.0,0.0);\r\n    XR.setRefSpaceLocation( new THREE.Vector3(0,0,0) );\r\n\r\n    ATON.fireEvent(\"XRmode\", false);\r\n\r\n    console.log(\"Quit XR\");\r\n};\r\n\r\n/**\r\nToggle immersive mode\r\n*/\r\nXR.toggle = ()=>{\r\n    if (!ATON.device.isXRsupported) return;\r\n\r\n    // Enter XR\r\n    if (XR.currSession === null){\r\n        let sessionInit = { \r\n            optionalFeatures: [\r\n                \"local\",\r\n                //\"local-floor\" \r\n                ///\"bounded-floor\"\r\n            ]\r\n        };\r\n        navigator.xr.requestSession( 'immersive-vr', sessionInit ).then( XR.onSessionStarted );\r\n        //console.log(navigator.xr);\r\n    }\r\n    // Exit XR\r\n    else {\r\n        XR.currSession.end();\r\n    }\r\n};\r\n\r\nXR.setupControllerUI = (h)=>{\r\n    let raytick = 0.003;\r\n    let raylen  = 5.0;\r\n\r\n    let rhand = undefined;\r\n    let lhand = undefined;\r\n\r\n    //console.log(\"Setup controller \"+h);\r\n\r\n    if (XR.gControllers === undefined){\r\n        XR.gControllers = ATON.createUINode();\r\n\r\n        XR.gControllers.disablePicking();\r\n        XR.rig.add(XR.gControllers);\r\n    }\r\n\r\n    // Left\r\n    if (h === XR.HAND_L){\r\n        XR.gControllers.add( XR.controller1 );\r\n\r\n        lhand = ATON.createUINode(\"Lhand\").load(XR._urlHand).setMaterial(ATON.MatHub.materials.controllerRay).setScale(-1,1,1);\r\n        XR.controller1.add(lhand);\r\n    }\r\n    // Right\r\n    else {\r\n        var geometry = new THREE.CylinderBufferGeometry( raytick,raytick, raylen, 4 );\r\n        geometry.rotateX( -Math.PI / 2 );\r\n        geometry.translate(0,0,-(raylen*0.5));\r\n\r\n        var mesh = new THREE.Mesh( geometry, ATON.MatHub.materials.controllerRay );\r\n\r\n        XR.controller0.add( mesh.clone() );\r\n        XR.gControllers.add( XR.controller0 );\r\n\r\n        rhand = ATON.createUINode(\"Rhand\").load(XR._urlHand).setMaterial(ATON.MatHub.materials.controllerRay);\r\n\r\n        XR.controller0.add(rhand);\r\n    }\r\n\r\n    // We are connected to VRoadcast\r\n    if (ATON.VRoadcast.uid){\r\n        let avMats = ATON.MatHub.materials.avatars;\r\n        let am = avMats[ATON.VRoadcast.uid % avMats.length];\r\n        if (h === XR.HAND_L) lhand.setMaterial(am);\r\n        else rhand.setMaterial(am);\r\n    }\r\n};\r\n\r\n// FIXME:\r\nXR.switchHands = ()=>{\r\n\r\n/*\r\n    let C0 = new THREE.Group();\r\n    for (let cr in XR.controller0.children){\r\n        C0.add(XR.controller0.children[cr]);\r\n    }\r\n\r\n    let C1 = new THREE.Group();\r\n    for (let cl in XR.controller1.children){\r\n        C1.add(XR.controller1.children[cl]);\r\n    }\r\n\r\n    //XR.controller1.removeChildren();\r\n    //XR.controller0.removeChildren();\r\n\r\n    return;\r\n\r\n    for (let c in C1.children){\r\n        XR.controller0.add(C1.children[c]);\r\n    }\r\n    for (let c in C0.children){\r\n        XR.controller1.add(C0.children[c]);\r\n    }\r\n*/\r\n    let H = XR.controller1;\r\n    XR.controller1 = XR.controller0;\r\n    XR.controller0 = H;\r\n\r\n    //XR.controller0 = ATON._renderer.xr.getController(1);\r\n    //XR.controller1 = ATON._renderer.xr.getController(0);\r\n\r\n    for (let c in XR.controller0.children) XR.controller0.remove(XR.controller0.children[c]);\r\n    for (let c in XR.controller1.children) XR.controller1.remove(XR.controller1.children[c]);\r\n    XR.gControllers.removeChildren();\r\n\r\n    XR.setupControllerUI(XR.HAND_L);\r\n    XR.setupControllerUI(XR.HAND_R);\r\n\r\n    console.log(\"VR controllers switched\");\r\n};\r\n\r\n\r\n/* DEPRECATED\r\nXR.setupControllersUI = ()=>{\r\n    if (XR.gControllers) return; // already set\r\n\r\n    let raytick = 0.003;\r\n    let raylen  = 5.0;\r\n    var geometry = new THREE.CylinderBufferGeometry( raytick,raytick, raylen, 4 );\r\n    geometry.rotateX( -Math.PI / 2 );\r\n    geometry.translate(0,0,-(raylen*0.5));\r\n\r\n    var mesh = new THREE.Mesh( geometry, ATON.MatHub.materials.controllerRay );\r\n\r\n    XR.controller0.add( mesh.clone() );\r\n    //XR.controller1.add( mesh.clone() );\r\n\r\n    let vrcMatHands = (uid)=>{\r\n        let avMats = ATON.MatHub.materials.avatars;\r\n        if (avMats === undefined || uid === undefined) return;\r\n        \r\n        let am = avMats[uid % avMats.length];\r\n        rhand.setMaterial( am );\r\n        lhand.setMaterial( am );\r\n    };\r\n\r\n    // Hands\r\n    let handurl = ATON.PATH_RES+\"models/hand/hand.glb\";\r\n    let rhand = ATON.createUINode(\"Rhand\").load(handurl).setMaterial(ATON.MatHub.materials.controllerRay);\r\n    let lhand = ATON.createUINode(\"Lhand\").load(handurl).setMaterial(ATON.MatHub.materials.controllerRay).setScale(-1,1,1);\r\n    XR.controller0.add(rhand);\r\n    XR.controller1.add(lhand);\r\n\r\n    if (ATON.VRoadcast.uid) vrcMatHands(ATON.VRoadcast.uid);\r\n    ATON.on(\"VRC_IDassigned\", vrcMatHands);\r\n\r\n    XR.gControllers = ATON.createUINode();\r\n    XR.gControllers.add( XR.controller0 );\r\n    XR.gControllers.add( XR.controller1 );\r\n\r\n    XR.controller0.visible = false;\r\n    XR.controller1.visible = false;\r\n\r\n    XR.gControllers.disablePicking();\r\n\r\n    XR.rig.add(XR.gControllers);\r\n};\r\n*/\r\n\r\n// Not working\r\nXR.getControllerSpace = (i)=>{\r\n   if (i === 1) XR.getControllerGrip(1);\r\n   else XR.getControllerGrip(0);\r\n};\r\n\r\n/**\r\nGet controller world location\r\n@param {number} i - the controller ID (0 or 1)\r\n@returns {THREE.Vector3}\r\n*/\r\nXR.getControllerWorldLocation = (i)=>{\r\n    if (i === 1) return XR.controller1pos;\r\n    else return XR.controller0pos;\r\n};\r\n\r\n/**\r\nGet controller world direction\r\n@param {number} i - the controller ID (0 or 1)\r\n@returns {THREE.Vector3}\r\n*/\r\nXR.getControllerWorldDirection = (i)=>{\r\n    if (i === 1) return XR.controller1dir;\r\n    else return XR.controller0dir;\r\n};\r\n\r\nXR._deltaMotionController = (C)=>{\r\n    if (C === XR.HAND_L && XR._lastPosL === undefined) return;\r\n    if (C === XR.HAND_R && XR._lastPosR === undefined) return;\r\n\r\n    let p    = (C === XR.HAND_L)? XR.controller1pos : XR.controller0pos;\r\n    let prev = (C === XR.HAND_L)? XR._lastPosL : XR._lastPosR;\r\n\r\n    let D = THREE.Vector3(\r\n        p.x - prev.x,\r\n        p.y - prev.y,\r\n        p.z - prev.z\r\n    );\r\n\r\n    let m = D.lengthSq();\r\n\r\n    if (C === XR.HAND_L) XR._lastPosL = p;\r\n    else XR._lastPosR = p;\r\n};\r\n\r\nXR.update = ()=>{\r\n    // R controller\r\n    if (XR.controller0 && XR.controller0.visible){\r\n        XR.controller0.getWorldPosition(XR.controller0pos);\r\n        XR.controller0.getWorldDirection(XR.controller0dir);\r\n        XR.controller0dir.negate();\r\n\r\n        XR._deltaMotionController(XR.HAND_R);\r\n    }\r\n    // L controller\r\n    if (XR.controller1 && XR.controller1.visible){\r\n        XR.controller1.getWorldPosition(XR.controller1pos);\r\n        XR.controller1.getWorldDirection(XR.controller1dir);\r\n        XR.controller1dir.negate(); \r\n\r\n        XR._deltaMotionController(XR.HAND_L);\r\n    }\r\n\r\n/*\r\n    if (XR.gpad0 && XR.gpad0.buttons){\r\n        //if (XR.gpad0.buttons[1] && XR.gpad0.buttons[1].pressed) ATON.fireEvent(\"XRsqueezePressed\", 0);\r\n        if (XR.gpad0.buttons[4] && XR.gpad0.buttons[4].pressed) ATON.fireEvent(\"XRbuttonAPressed\");\r\n        if (XR.gpad0.buttons[5] && XR.gpad0.buttons[5].pressed) ATON.fireEvent(\"XRbuttonBPressed\");\r\n    }\r\n\r\n    if (XR.gpad1 && XR.gpad1.buttons){\r\n        //if (XR.gpad1.buttons[1] && XR.gpad1.buttons[1].pressed) ATON.fireEvent(\"XRsqueezePressed\", 1);\r\n        if (XR.gpad1.buttons[4] && XR.gpad1.buttons[4].pressed) ATON.fireEvent(\"XRbuttonXPressed\");\r\n        if (XR.gpad1.buttons[5] && XR.gpad1.buttons[5].pressed) ATON.fireEvent(\"XRbuttonYPressed\");\r\n    }\r\n*/\r\n};\r\n\r\n\r\nexport default XR;","/*\r\n    ATON spatial UI Button class\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\nimport Node from \"./ATON.node.js\";\r\n\r\n/**\r\nClass representing a SpatialUI Button.\r\nConstructor requires a uiid (UI Node ID)\r\n@class Button\r\n@example \r\nnew ATON.SUI.Button(\"myButton\")\r\n*/\r\nclass Button extends Node {\r\n\r\nconstructor(uiid){\r\n    super(uiid, ATON.NTYPES.UI);\r\n\r\n    this.baseColor   = ATON.MatHub.colors.black;\r\n    this.switchColor = ATON.MatHub.colors.green;\r\n\r\n    this._bSwitched = false;\r\n\r\n    this.container = new ThreeMeshUI.Block({\r\n        width: 0.1,\r\n        height: 0.1,\r\n        padding: 0.01,\r\n        borderRadius: 0.02,\r\n        backgroundColor: this.baseColor,\r\n        backgroundOpacity: 0.5,\r\n\r\n        fontFamily: ATON.PATH_RES+\"fonts/custom-msdf.json\",\r\n        fontTexture: ATON.PATH_RES+\"fonts/custom.png\",\r\n\r\n        justifyContent: 'center',\r\n        alignContent: 'center'\r\n    });\r\n    this.add(this.container);\r\n\r\n    this.uiText = new ThreeMeshUI.Text({ \r\n        content: \"button\",\r\n        fontSize: 0.02,\r\n        fontColor: ATON.MatHub.colors.white\r\n    });\r\n    this.container.add(this.uiText);\r\n\r\n    this._trigger = new THREE.Mesh( \r\n        new THREE.PlaneGeometry( ATON.SUI.STD_BTN_SIZE*0.9, ATON.SUI.STD_BTN_SIZE*0.9, 2 ), \r\n        ATON.MatHub.materials.fullyTransparent\r\n    );\r\n    this._trigger.position.set(0,0,0.002);\r\n\r\n    this.add( this._trigger );\r\n\r\n    this.onHover = ()=>{\r\n        this.container.set({ \r\n            backgroundOpacity: 0.8\r\n        });\r\n    };\r\n    this.onLeave = ()=>{\r\n        this.container.set({ \r\n            backgroundOpacity: 0.5 \r\n        });\r\n    };\r\n\r\n    this.enablePicking();\r\n}\r\n\r\n/**\r\nSet base color of the button\r\n@param {THREE.Color} c - the color\r\n*/\r\nsetBaseColor(c){\r\n    this.baseColor = c;\r\n    if (!this._bSwitched) this.container.set({ backgroundColor: this.baseColor });\r\n    return this;\r\n}\r\n\r\n/**\r\nSet button switch color (when activated)\r\n@param {THREE.Color} c - the color\r\n*/\r\nsetSwitchColor(c){\r\n    this.switchColor = c;\r\n    if (this._bSwitched) this.container.set({ backgroundColor: this.switchColor });\r\n    return this;\r\n}\r\n\r\n/**\r\nSet button text\r\n@param {string} text\r\n*/\r\nsetText(text){\r\n    this.uiText.set({ content: text });\r\n    return this;\r\n}\r\n\r\n/**\r\nSwitch the button (ON/OFF)\r\n@param {boolean} b\r\n*/\r\nswitch(b){\r\n    this._bSwitched = b;\r\n    if (b) this.container.set({ backgroundColor: this.switchColor });\r\n    else this.container.set({ backgroundColor: this.baseColor });\r\n    \r\n    return this;\r\n}\r\n\r\n/**\r\nSet button icon\r\n@param {string} url - the url to the icon (tipically a PNG file)\r\n*/\r\nsetIcon(url){\r\n    ATON.Utils.textureLoader.load(url, (texture) => {\r\n\r\n        this._trigger.material = new THREE.MeshStandardMaterial({\r\n            map: texture,\r\n            transparent: true,\r\n            depthWrite: false\r\n        });\r\n/*\r\n        this.container.set({ \r\n            backgroundTexture: texture,\r\n            backgroundOpacity: 1.0,\r\n            backgroundColor: undefined \r\n        });\r\n*/\r\n        this.uiText.position.set(0,-0.035,0);\r\n    });\r\n\r\n    return this;\r\n}\r\n\r\n}\r\n\r\nexport default Button;","/*\r\n    ATON spatial UI\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\nimport Button from \"./ATON.sui.button.js\";\r\n\r\n\r\n/**\r\nATON Spatial UI\r\n@namespace SUI\r\n*/\r\nlet SUI = {};\r\n\r\nSUI.STD_BTN_SIZE = 0.1;\r\n\r\nSUI.Button = Button;\r\n\r\n\r\n//Initializes Spatial UI module\r\nSUI.init = ()=>{\r\n    SUI.mainSelector   = ATON.createUINode();\r\n    //SUI.secondSelector = ATON.createUINode();\r\n\r\n    //SUI._uiSelGeom = new THREE.SphereGeometry( 0.1, 16, 16 );\r\n    SUI.mainSelector.add( new THREE.Mesh( ATON.Utils.geomUnitSphere, ATON.MatHub.getMaterial(\"selector\") ));\r\n    SUI.mainSelector.disablePicking();\r\n\r\n    SUI.setSelectorRadius(0.05);\r\n    SUI.mainSelector.visible = false;\r\n\r\n    ATON._rootUI.add(SUI.mainSelector);\r\n\r\n    SUI.gPoints = ATON.createUINode();\r\n    ATON._rootUI.add(SUI.gPoints);\r\n\r\n    SUI.buildInfoNode();\r\n    SUI.bShowInfo = true;\r\n\r\n    SUI._labelScale   = ATON.Utils.isMobile()? 1.2 : 1.0;\r\n    SUI._labelScaleVR = 2.0;\r\n\r\n    ATON.on( \"SemanticNodeHover\", (semid)=>{\r\n        if (!SUI.bShowInfo) return;\r\n        SUI.infoNodeText.set({ content: semid });\r\n    });\r\n/*\r\n    ATON.on(\"UINodeHover\", (uiid)=>{\r\n        console.log(\"Hover UI node: \"+uiid);\r\n    });\r\n    ATON.on(\"UINodeLeave\", (uiid)=>{\r\n        console.log(\"Leave UI node: \"+uiid);\r\n    });\r\n*/\r\n};\r\n\r\n/**\r\nSet selector radius\r\n@param {number} r - the radius\r\n*/\r\nSUI.setSelectorRadius = (r)=>{\r\n    SUI.mainSelector.scale.set(r,r,r);\r\n};\r\n\r\n/**\r\nGet selector current radius\r\n@returns {number}\r\n*/\r\nSUI.getSelectorRadius = ()=>{\r\n    return SUI.mainSelector.scale.x;\r\n};\r\n\r\n/**\r\nSet selector 3D model\r\n@param {string} path - the model path (usually gltf or glb)\r\n@param {boolean} bUseStdMat - (optional) overwrites 3D model materials with standard selector material \r\n*/\r\nSUI.setSelectorModel = (path, bUseStdMat)=>{\r\n    if (path === undefined) return;\r\n\r\n    SUI.mainSelector.removeChildren();\r\n\r\n    SUI.mainSelector.load(path).disablePicking();\r\n    if (bUseStdMat) SUI.mainSelector.setMaterial( ATON.MatHub.getMaterial(\"selector\") );\r\n};\r\n\r\nSUI.buildInfoNode = ()=>{\r\n    SUI.infoNode = ATON.createUINode();\r\n    SUI.infoNode.attachToRoot();\r\n\r\n    SUI.infoContainer = new ThreeMeshUI.Block({\r\n        width: 0.15,\r\n        height: 0.05, //0.07,\r\n        padding: 0.01,\r\n        borderRadius: 0.02,\r\n        //backgroundColor: ATON.MatHub.colors.darksem,\r\n        //backgroundOpacity: 0.2,\r\n\r\n        fontFamily: ATON.PATH_RES+\"fonts/custom-msdf.json\", //ATON.PATH_MODS+'three-mesh-ui/examples/assets/Roboto-msdf.json',\r\n        fontTexture: ATON.PATH_RES+\"fonts/custom.png\", //ATON.PATH_MODS+'three-mesh-ui/examples/assets/Roboto-msdf.png',\r\n\r\n        alignContent: 'center', // could be 'center' or 'left'\r\n        justifyContent: 'center', // could be 'center' or 'start'\r\n    });\r\n    SUI.infoNode.add(SUI.infoContainer);\r\n\r\n    SUI.infoNodeText = new ThreeMeshUI.Text({ \r\n        content: \"Info\",\r\n        fontSize: 0.02,\r\n        fontColor: ATON.MatHub.colors.white\r\n    });\r\n    SUI.infoContainer.add(SUI.infoNodeText);\r\n    //SUI.infoNode.scale.set(0.07,0.07,0.07);\r\n};\r\n\r\n/**\r\nGet main UI Info Node\r\n@returns {Node}\r\n*/\r\nSUI.getInfoNode = ()=>{\r\n    return SUI.infoNode;\r\n};\r\n\r\n/**\r\nCreate a SpatialUI toolbar from a list of SUI buttons\r\nThis can be arranged anywhere in the scene or attached to other UI nodes\r\n@param {string} buttonlist - a list (array) of SUI buttons\r\n@param {THREE.Color} color - (optional) base color for the toolbar\r\n@returns {Node}\r\n*/\r\nSUI.createToolbar = (buttonlist, color)=>{\r\n    let T = ATON.createUINode();\r\n\r\n    let num = buttonlist.length;\r\n    let padding = SUI.STD_BTN_SIZE * 0.3;\r\n\r\n    let cont = new ThreeMeshUI.Block({\r\n        width: (SUI.STD_BTN_SIZE * num) + padding,\r\n        height: SUI.STD_BTN_SIZE + padding,\r\n        padding: 0.01,\r\n        borderRadius: 0.02,\r\n        backgroundColor: color? color : ATON.MatHub.colors.black,\r\n        backgroundOpacity: 0.3,\r\n\r\n        fontFamily: ATON.PATH_RES+\"fonts/custom-msdf.json\",\r\n        fontTexture: ATON.PATH_RES+\"fonts/custom.png\",\r\n\r\n        alignContent: 'center', // could be 'center' or 'left'\r\n        justifyContent: 'center', // could be 'center' or 'start'\r\n    });\r\n    //cont.position.set(0,0,0);\r\n\r\n    let m = (num*0.5) * SUI.STD_BTN_SIZE;\r\n    m -= (SUI.STD_BTN_SIZE*0.5);\r\n\r\n    for (let i=0; i<num; i++){\r\n        let button = buttonlist[i];\r\n        button.position.set((i*SUI.STD_BTN_SIZE)-m, 0.0, 0.01);\r\n        cont.add(button);\r\n    }\r\n\r\n    T.add(cont);\r\n    return T;\r\n};\r\n\r\n// Main update routine\r\nSUI.update = ()=>{\r\n    if (ATON.Nav.isTransitioning() || ATON._bPauseQuery){\r\n        SUI.infoNode.visible = false;\r\n        return;\r\n    }\r\n\r\n    ThreeMeshUI.update();\r\n\r\n    if (ATON._queryDataScene){\r\n        SUI.mainSelector.visible = true;\r\n        SUI.mainSelector.position.copy(ATON._queryDataScene.p);    \r\n    }\r\n    else {\r\n        SUI.mainSelector.visible = false;\r\n    }\r\n\r\n    // InfoNode (semantics)\r\n    if (ATON._queryDataSem){\r\n\r\n        if (ATON.XR._bPresenting){\r\n            SUI.infoNode.position.copy(ATON.XR.controller0pos); //.lerpVectors(ATON._queryDataSem.p, ATON.XR.controller0pos, 0.8);\r\n            SUI.infoNode.position.y += 0.1;\r\n            SUI.infoNode.setScale(SUI._labelScaleVR);\r\n        }\r\n        else {\r\n            SUI.infoNode.position.lerpVectors(ATON._queryDataSem.p, ATON.Nav._currPOV.pos, 0.2);\r\n            SUI.infoNode.setScale(ATON._queryDataSem.d * SUI._labelScale);\r\n        }\r\n        SUI.infoNode.orientToCamera();\r\n\r\n        if (SUI.bShowInfo) SUI.infoNode.visible = true;\r\n        SUI.mainSelector.visible = false;\r\n    }\r\n    else {\r\n        SUI.infoNode.visible = false;\r\n    }\r\n\r\n};\r\n\r\nexport default SUI;","/*\r\n    ATON Avatar Class\r\n    used in VRoadcast system\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\nimport Node from \"./ATON.node.js\";\r\n\r\nexport default class Avatar extends Node {\r\n\r\nconstructor(uid){\r\n    super(undefined /*uid*/, ATON.NTYPES.UI);\r\n\r\n    this.userid   = uid;\r\n    this.username = undefined; //\"User #\"+uid;\r\n    this.message  = \"...\";\r\n    \r\n    //this.bTalking = false;\r\n    this._auTalk = undefined;\r\n    this._bPlayingAudio = false;\r\n    this._auChunks = [];\r\n\r\n    this._tStateCall = -1.0;\r\n    this._tStateDur  = 0.1;\r\n    this._tProgress  = 0.0;\r\n\r\n    this._currState  = {};\r\n    this._currState.position   = new THREE.Vector3();\r\n    this._currState.quaternion = new THREE.Quaternion();\r\n\r\n    this._tgtState = undefined;\r\n\r\n    //console.log(this);\r\n\r\n    this.realize();\r\n}\r\n\r\ngetAvatarMaterialByUID(uid){\r\n    //if (uid === undefined) return 0;\r\n\r\n    let avaMats = ATON.MatHub.materials.avatars;\r\n    let mi = (uid % avaMats.length); //uid? (uid % avaMats.length) : 0;\r\n    \r\n    return avaMats[mi];\r\n}\r\n\r\nrealize(){\r\n    // build minimal representation\r\n    let g = new THREE.SphereGeometry( 0.2, 16, 16 );\r\n\r\n    this.usermaterial = this.getAvatarMaterialByUID(this.userid);\r\n\r\n    let smesh = new THREE.Mesh( g, this.usermaterial );\r\n\r\n    this.usermeshnode = ATON.createUINode();\r\n    this.usermeshnode.add(smesh);\r\n    this.usermeshnode.setMaterial(this.usermaterial);\r\n\r\n    // CHECK / FIXME: this is to avoid cloning of the same mesh when using same representation for all avatars\r\n    this.usermeshnode.setCloneOnLoadHit(false);\r\n\r\n    // Talk UI\r\n    this.userauinode = new THREE.Sprite( ATON.VRoadcast.uspritemats[this.userid % ATON.VRoadcast.uspritemats.length] );\r\n    this.userauinode.position.set(0,0,0);\r\n    this.userauinode.visible = false;\r\n\r\n\r\n    // Build Label\r\n    this.userlabelnode = ATON.createUINode();\r\n    this.labelcontainer = new ThreeMeshUI.Block({\r\n        width: 0.7,\r\n        height: 0.25,\r\n        padding: 0.03,\r\n        borderRadius: 0.05,\r\n        //backgroundColor: ATON.VRoadcast.ucolorsdark[this.userid % ATON.VRoadcast.ucolorsdark.length],\r\n        backgroundColor: ATON.MatHub.colors.black,\r\n\r\n        fontFamily: ATON.PATH_RES+\"fonts/custom-msdf.json\", //ATON.PATH_MODS+'three-mesh-ui/examples/assets/Roboto-msdf.json',\r\n        fontTexture: ATON.PATH_RES+\"fonts/custom.png\" //ATON.PATH_MODS+'three-mesh-ui/examples/assets/Roboto-msdf.png',\r\n\r\n        //alignContent: 'right', // could be 'center' or 'left'\r\n        //justifyContent: 'end', // could be 'center' or 'start'\r\n    });\r\n\r\n    this.userlabelnode.position.y = 0.4;\r\n    this.userlabelnode.add(this.labelcontainer);\r\n\r\n    // username text\r\n    this.usernametext = new ThreeMeshUI.Text({ \r\n        content: \"User #\"+this.userid,\r\n        fontSize: 0.09,\r\n        //fontColor: ATON.MatHub.colors.white\r\n        fontColor: ATON.VRoadcast.ucolors[this.userid % ATON.VRoadcast.ucolors.length]\r\n    });\r\n    this.usernametext.position.y = 0.0;\r\n\r\n    // message text\r\n    this.usermessagetext = new ThreeMeshUI.Text({ \r\n        content: \"\\nHello World!\",\r\n        fontSize: 0.03,\r\n        fontColor: ATON.MatHub.colors.white\r\n    });\r\n    this.usermessagetext.position.y = -0.03;\r\n\r\n    this.labelcontainer.add(this.usernametext);\r\n    this.labelcontainer.add(this.usermessagetext);\r\n    \r\n    this.add(this.usermeshnode);\r\n    this.add(this.userlabelnode);\r\n    this.add(this.userauinode);\r\n};\r\n\r\n// Loads custom avatar representation (3D model)\r\nloadRepresentation(url){\r\n    let A = this;\r\n\r\n    if (A.usermeshnode.children[0] !== undefined){\r\n        A.usermeshnode.remove(A.usermeshnode.children[0]);\r\n    }\r\n\r\n    A.usermeshnode.load(url); //.setMaterial(A.usermaterial);\r\n\r\n    return this;\r\n}\r\n\r\nsetUsername(username){\r\n    this.username = username;\r\n\r\n    this.usernametext.set({ \r\n        content: username\r\n    });\r\n\r\n    return this;\r\n}\r\n\r\ngetUsername(){\r\n    if (this.userid === undefined) return undefined;\r\n    if (this.username === undefined) return \"User #\"+this.userid;\r\n    return this.username;\r\n}\r\n\r\nsetMessage(msg){\r\n    this.message = msg;\r\n\r\n    // TODO: check for text length\r\n    this.usermessagetext.set({ \r\n        content: \"\\n\"+msg\r\n    });\r\n\r\n    return this;\r\n}\r\n\r\nsetTalkVolume(vol){\r\n    if (vol === undefined){\r\n        this.userauinode.visible = false;\r\n        return;\r\n    }\r\n    if (vol > 0){\r\n        this.userauinode.visible = true;\r\n        let v = 0.1 + (vol * 0.03);\r\n        this.userauinode.scale.set(v,v,v);\r\n    }\r\n    else this.userauinode.visible = false;\r\n}\r\n\r\nrequestStateTransition(S){\r\n    if (this._tStateCall >= 0.0) return; // already requested\r\n\r\n    this._tStateCall = ATON._clock.elapsedTime;\r\n\r\n    this._currState.position.copy(this.position);\r\n    this._currState.quaternion.copy(this.quaternion);\r\n\r\n    this._tgtState = S;\r\n    \r\n    //this._sDistance = this.position.distanceTo(S.position);\r\n}\r\n\r\nhandleStateTransition(){\r\n    if (this._tStateCall < 0.0) return;\r\n\r\n    let D = this._tStateDur; //(this._sDistance * this._tStateDur);\r\n\r\n    if (D <= 0.0) this._tProgress = 1.0;\r\n    else this._tProgress = (ATON._clock.elapsedTime - this._tStateCall) / D;\r\n\r\n    let cs = this._currState;\r\n    let ts = this._tgtState;\r\n\r\n    // End\r\n    if (this._tProgress >= 1.0){\r\n        this._tStateCall = -1.0;\r\n\r\n        this.position.copy(ts.position);\r\n        //this.quaternion.copy(ts.quaternion);\r\n        this.usermeshnode.quaternion.copy(ts.quaternion);\r\n\r\n        return;\r\n    }\r\n\r\n    this.position.lerpVectors(cs.position, ts.position, this._tProgress);\r\n    this.usermeshnode.quaternion.slerp(ts.quaternion, this._tProgress);\r\n    //THREE.Quaternion.slerp( cs.quaternion, ts.quaternion, this.usermeshnode.quaternion, this._tProgress);\r\n}\r\n\r\nupdate(){\r\n    this.handleStateTransition();\r\n\r\n    let cam  = ATON.Nav._camera;\r\n    let eye = ATON.Nav._currPOV.pos;\r\n    if (cam === undefined || eye === undefined) return;\r\n\r\n    //this.userlabelnode.lookAt( eye );\r\n\r\n    //this.userlabelnode.setRotationFromMatrix(cam.matrix); // quaternion.setFromRotationMatrix( cam.matrix );\r\n    //this.userlabelnode.rotation.copy(cam.rotation);\r\n\r\n    this.userlabelnode.orientToCamera(); //quaternion.copy( ATON.Nav._qOri );\r\n\r\n    // Talk UI\r\n    //this._handleTalk();\r\n\r\n    let avol = this.userauinode.scale.x;\r\n    avol *= 0.99; // shrinking rate\r\n\r\n    if (avol > 0.01) this.userauinode.scale.set(avol, avol, avol);\r\n    else this.userauinode.visible = false;\r\n\r\n/*\r\n    this.userlabelnode.rotation.y = Math.atan2(\r\n        ( cam.position.x - this.userlabelnode.position.x ),\r\n        ( cam.position.z - this.userlabelnode.position.z )\r\n    );\r\n*/\r\n    //this.userlabelnode.matrix.copy( cam.matrix );\r\n}\r\n\r\n_handleTalk(){\r\n    if (this._bPlayingAudio) return;\r\n    if (this._auChunks.length < 1) return;\r\n\r\n    let d = this._auChunks.shift();\r\n\r\n    let au = new Audio();\r\n    au.src = d.data;\r\n\r\n    au.play();\r\n    this._bPlayingAudio = true;\r\n\r\n    au.onended = ()=>{\r\n        this._bPlayingAudio = false;\r\n        //console.log(\"finished playing chunk\");\r\n    };\r\n\r\n    //this.setTalkVolume(d.volume);\r\n    this.setTalkVolume(5.0);\r\n}\r\n\r\n\r\n};","/*\r\n    ATON VRoadcast\r\n    real-time collaborative networking\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\nimport Avatar from \"./ATON.avatar.js\";\r\n\r\n/**\r\nATON VRoadcast component\r\n@namespace VRoadcast\r\n*/\r\nlet VRoadcast = {};\r\n\r\nVRoadcast.USER_STATE_FREQ = 0.25; // sec\r\nVRoadcast.REPLICATED_EVT = \"EREP\";\r\n\r\n// Thresholds state sending\r\nVRoadcast.THRES_STATE_POS = 0.01;\r\nVRoadcast.THRES_STATE_ORI = 0.08; // radians\r\n\r\nVRoadcast.Avatar = Avatar;\r\n\r\n\r\n/**\r\nInitialize the component\r\n*/\r\nVRoadcast.init = ()=>{\r\n    VRoadcast.address = window.location.origin;\r\n\r\n    VRoadcast.initMaterials();\r\n\r\n    VRoadcast.socket = undefined;\r\n    VRoadcast._connected = false;\r\n\r\n    VRoadcast._username = undefined;\r\n\r\n    VRoadcast.uid = undefined; // my userID (0,1,....)\r\n    VRoadcast._numUsers = 0;\r\n\r\n    VRoadcast.avatarList = [];\r\n\r\n    VRoadcast.avaGroup = ATON.createUINode(\"avatars\"); // holds all avatars representations\r\n    VRoadcast.avaGroup.attachToRoot();\r\n\r\n    // send own state with given freq\r\n    window.setInterval( VRoadcast.sendState, VRoadcast.USER_STATE_FREQ*1000.0 );\r\n    VRoadcast._lastStateSent = undefined;\r\n\r\n    console.log(\"VRoadcast initialized\");\r\n    VRoadcast.enableChatLog();\r\n};\r\n\r\nVRoadcast.enableChatLog = ()=>{\r\n    VRoadcast._elChat = $(\"<div></div>\").text(\"\");\r\n};\r\n\r\nVRoadcast.getNumUsers = ()=>{\r\n    return VRoadcast._numUsers;\r\n};\r\n\r\n// Register materials (avatars/users)\r\nVRoadcast.initMaterials = ()=>{\r\n\r\n    VRoadcast.ucolors = [];\r\n    VRoadcast.ucolors.push( new THREE.Color(1,0,0) );\r\n    VRoadcast.ucolors.push( new THREE.Color(1,1,0) );\r\n    VRoadcast.ucolors.push( new THREE.Color(0,1,0) );\r\n    VRoadcast.ucolors.push( new THREE.Color(0,1,1) );\r\n    VRoadcast.ucolors.push( new THREE.Color(0,0,1) );\r\n    VRoadcast.ucolors.push( new THREE.Color(1,0,1) );\r\n\r\n    VRoadcast.ucolorsdark = [];\r\n    VRoadcast.ucolorsdark.push( new THREE.Color(0.2,0.0,0.0) );\r\n    VRoadcast.ucolorsdark.push( new THREE.Color(0.2,0.2,0.0) );\r\n    VRoadcast.ucolorsdark.push( new THREE.Color(0.0,0.2,0.0) );\r\n    VRoadcast.ucolorsdark.push( new THREE.Color(0.0,0.2,0.2) );\r\n    VRoadcast.ucolorsdark.push( new THREE.Color(0.0,0.0,0.2) );\r\n    VRoadcast.ucolorsdark.push( new THREE.Color(0.2,0.0,0.2) );\r\n\r\n    VRoadcast.ucolorhex = [];\r\n    VRoadcast.ucolorhex.push(\"#F00\");\r\n    VRoadcast.ucolorhex.push(\"#FF0\");\r\n    VRoadcast.ucolorhex.push(\"#0F0\");\r\n    VRoadcast.ucolorhex.push(\"#0FF\");\r\n    VRoadcast.ucolorhex.push(\"#00F\");\r\n    VRoadcast.ucolorhex.push(\"#F0F\");\r\n\r\n    let MM = ATON.MatHub.materials;\r\n    MM.avatars = [];\r\n\r\n    let mat = new THREE.MeshBasicMaterial({\r\n        color: VRoadcast.ucolors[0], \r\n        transparent: true, \r\n        opacity: 0.4, \r\n        depthWrite: false,\r\n        flatShading: true\r\n    });\r\n\r\n    MM.avatars.push(mat);\r\n\r\n    for (let c=1; c<VRoadcast.ucolors.length; c++){\r\n        let M = mat.clone();\r\n        M.color = VRoadcast.ucolors[c];\r\n\r\n        MM.avatars.push(M);\r\n    }\r\n\r\n    // AudioUI user materials\r\n    VRoadcast.uspritemats = [];\r\n\r\n    let texAUI = new THREE.TextureLoader().load( ATON.PATH_RES+\"useraui.png\" );\r\n    for (let c=0; c<VRoadcast.ucolors.length; c++){\r\n        let smat = new THREE.SpriteMaterial({ \r\n            map: texAUI,\r\n            depthWrite: false,\r\n            color: VRoadcast.ucolors[c] // multiply\r\n        });\r\n        smat.sizeAttenuation = true;\r\n\r\n        VRoadcast.uspritemats.push(smat);\r\n    }\r\n};\r\n\r\n/**\r\nFire a replicated event (network)\r\n@param {string} evtname - the event name\r\n@param {object} data - object containing data to be transmitted with this event\r\n\r\n@example\r\nATON.VRoadcast.fireEvent(\"test\", 42);\r\n*/\r\nVRoadcast.fireEvent = (evtname, data)=>{\r\n    if (!VRoadcast._connected) return;\r\n    let sock = VRoadcast.socket;\r\n\r\n    if (sock) sock.emit(VRoadcast.REPLICATED_EVT, {e: evtname, d: data});\r\n    //else ATON.on(\"VRC_Connected\", ()=>{ sock.on(evtname, onReceive); });\r\n};\r\n\r\n/**\r\nSubscribe to a given network event, through given handler\r\n@param {string} evtname - the event name\r\n@param {function} handler - network event handler (how we handle incoming event)\r\n\r\n@example\r\nATON.VRoadcast.on(\"test\", function(data){ console.log(\"Received: \"+data); });\r\n*/\r\nVRoadcast.on = (evtname, handler)=>{\r\n    if (handler === undefined) return;\r\n\r\n    let evhNetwork = ATON.EventHub.evNetwork;\r\n\r\n    if (evhNetwork[evtname] === undefined) evhNetwork[evtname] = []; // First time (event not registered)\r\n    evhNetwork[evtname].push(handler);\r\n};\r\n\r\n/**\r\nReturn true if VRoadcast is connected to the service\r\n@returns {boolean}\r\n*/\r\nVRoadcast.isConnected = ()=>{\r\n    return VRoadcast._connected;\r\n};\r\n\r\n/**\r\nUtility for server-side logging\r\n@param {string} d - string data to be logged\r\n*/\r\nVRoadcast.log = (d)=>{\r\n    if (!VRoadcast._connected) return;\r\n    let sock = VRoadcast.socket;\r\n\r\n    if (sock) sock.emit(\"LOG\", d);\r\n};\r\n\r\n/**\r\nRequest enter in a given scene\r\n@param {string} sceneid - the scene id (sid)\r\n@example\r\nATON.VRoadcast.requestSceneEnter(\"testscene\");\r\n*/\r\nVRoadcast.requestSceneEnter = (sceneid)=>{\r\n    if (!VRoadcast.socket) return;\r\n    if (sceneid === undefined) sceneid = ATON.SceneHub.currID;\r\n\r\n    if (sceneid === undefined){\r\n        console.log(\"VRC ERROR: current scene ID is undefined\");\r\n        return;\r\n    }\r\n\r\n    VRoadcast.socket.emit(\"SENTER\", sceneid );\r\n};\r\n\r\n/**\r\nConnect to VRoadcast service\r\n@param {string} address - the address of the service (optional). Default is same server where main service is running\r\n@example\r\nATON.VRoadcast.connect();\r\n*/\r\nVRoadcast.connect = (address)=>{\r\n    if (VRoadcast._connected) return;\r\n    if (address) VRoadcast.address = address;\r\n\r\n    let opts = {};\r\n\r\n    // Secure connection\r\n    if (window.location.protocol === \"https:\"){\r\n        opts.path = '/svrc/socket.io';\r\n        opts.secure = true;\r\n        opts.rejectUnauthorized = false;\r\n        //opts.transports = ['websocket'], \r\n        //opts.upgrade = false \r\n    }\r\n    else {\r\n        opts.path = '/vrc/socket.io';\r\n    }\r\n\r\n    VRoadcast.socket = io.connect(VRoadcast.address, opts); //, { 'force new connection': true });\r\n\r\n    if (VRoadcast.socket === undefined) return;\r\n    VRoadcast._connected = VRoadcast.socket.connected;\r\n\r\n    VRoadcast._registerSocketHandlers();\r\n};\r\n\r\nVRoadcast.disconnect = ()=>{\r\n    if (VRoadcast.socket === undefined) return;\r\n\r\n    VRoadcast.socket.disconnect();\r\n    VRoadcast._connected = false;\r\n};\r\n\r\n\r\nVRoadcast._onConnected = ()=>{\r\n    //\r\n};\r\n\r\nVRoadcast.setUsername = (username)=>{\r\n    VRoadcast._username = username;\r\n    if (VRoadcast.socket === undefined) return;\r\n    if (VRoadcast.uid === undefined) return;\r\n\r\n    if (VRoadcast._elChat) VRoadcast._elChat.append(\"<i>Your username is now: \"+username+\"</i><br>\");\r\n    VRoadcast.socket.emit(\"UNAME\", username);\r\n};\r\nVRoadcast.setMessage = (msg)=>{\r\n    VRoadcast._msg = msg;\r\n    if (VRoadcast.socket === undefined) return;\r\n    if (VRoadcast.uid === undefined) return;\r\n\r\n    if (VRoadcast._elChat){\r\n        VRoadcast._elChat.append(\"<span style='color:\"+VRoadcast.ucolorhex[VRoadcast.uid%6]+\"'><b>YOU</b>: \"+msg+\"</span><br>\");\r\n        VRoadcast._elChat.scrollTop(VRoadcast._elChat.scrollHeight);\r\n    }\r\n\r\n    VRoadcast.socket.emit(\"UMSG\", msg);\r\n};\r\n\r\n\r\n// Handle incoming server msgs\r\nVRoadcast._registerSocketHandlers = ()=>{\r\n\r\n    // We connected to server\r\n    VRoadcast.socket.on('connect', ()=>{\r\n        VRoadcast._connected = true;\r\n\r\n        // Request enter in scene node (room)\r\n        if (ATON.SceneHub.currID !== undefined) VRoadcast.requestSceneEnter();\r\n        \r\n        console.log(\"VRC connected, entering scene: \"+ATON.SceneHub.currID);\r\n        ATON.fireEvent(\"VRC_Connected\");\r\n\r\n        VRoadcast._onConnected();\r\n    });\r\n\r\n    VRoadcast.socket.on('disconnect', ()=>{\r\n        VRoadcast._connected = false;\r\n        VRoadcast.uid = undefined;\r\n\r\n        VRoadcast.avaGroup.hide();\r\n\r\n        if (VRoadcast._elChat) VRoadcast._elChat.append(\"<i>YOU disconnected from VRoadcast service</i><br>\");\r\n\r\n        console.log(\"VRC disconnected!\");\r\n        ATON.fireEvent(\"VRC_Disconnected\");\r\n    });\r\n\r\n    // Incoming replicated event\r\n    VRoadcast.socket.on(VRoadcast.REPLICATED_EVT, (data)=>{\r\n        let evtname = data.e;\r\n        let d = data.d;\r\n\r\n        let ehList = ATON.EventHub.evNetwork[evtname];\r\n        ATON.EventHub.executeHandlers(ehList, d);\r\n    });\r\n\r\n    VRoadcast.socket.on('ID', (data)=>{\r\n        console.log(\"Your ID is \" + data);\r\n        VRoadcast.uid = data;\r\n\r\n        VRoadcast.avaGroup.show();\r\n\r\n        if (VRoadcast._elChat) VRoadcast._elChat.append(\"<i>Your ID is #\"+data+\"</i><br>\");\r\n\r\n        ATON.fireEvent(\"VRC_IDassigned\", data);\r\n    });\r\n\r\n    VRoadcast.socket.on('UENTER', (data)=>{\r\n        let uid = data;\r\n        //if (uid === VRoadcast.uid) return; // myself\r\n\r\n        console.log(\"User #\" +uid+\" entered the scene\");\r\n        if (VRoadcast._elChat) VRoadcast._elChat.append(\"<i>User #\"+uid+\" entered the scene</i><br>\");\r\n\r\n        VRoadcast.touchAvatar(uid);\r\n    });\r\n\r\n    VRoadcast.socket.on('ULEAVE', (data)=>{\r\n        let uid = data;\r\n        if (uid === undefined) return;\r\n        \r\n        let A = VRoadcast.avatarList[uid];\r\n        if (A) A.hide();\r\n\r\n        console.log(\"User #\" +uid+\" left the scene\");\r\n        if (VRoadcast._elChat) VRoadcast._elChat.append(\"<i>User #\"+uid+\" left the scene</i><br>\");\r\n\r\n        if (VRoadcast._numUsers>0) VRoadcast._numUsers--;\r\n    });\r\n\r\n    VRoadcast.socket.on('USTATE', (data)=>{\r\n        let S = VRoadcast.decodeState(data);\r\n\r\n        let uid = S.userid;\r\n        let A = VRoadcast.touchAvatar(uid);\r\n\r\n        //A.position.copy(S.position);\r\n        //A.quaternion.copy(S.quaternion);\r\n        A.requestStateTransition(S);\r\n    });\r\n\r\n    VRoadcast.socket.on('UNAME', (data)=>{\r\n        let uid   = data.uid;\r\n        let uname = data.name;\r\n\r\n        if (uid === undefined) return;\r\n\r\n        let A = VRoadcast.touchAvatar(uid);\r\n        A.setUsername(uname);\r\n\r\n        console.log(\"User #\" +uid+\" changed username to: \"+uname);\r\n        if (VRoadcast._elChat) VRoadcast._elChat.append(\"<i>User #\"+uid+\" changed username to: \"+uname+\"</i><br>\");\r\n    });\r\n\r\n    VRoadcast.socket.on('UMSG', (data)=>{\r\n        let uid = data.uid;\r\n        let msg = data.msg;\r\n\r\n        if (uid === undefined) return;\r\n\r\n        let A = VRoadcast.touchAvatar(uid);\r\n        A.setMessage(msg);\r\n\r\n        console.log(\"User #\" +uid+\": \"+msg);\r\n        if (VRoadcast._elChat) VRoadcast._elChat.append(\"<span style='color:\"+VRoadcast.ucolorhex[uid%6]+\"'><b>\"+A.getUsername()+\"</b>: \"+msg+\"</span><br>\");\r\n    });\r\n\r\n    VRoadcast.socket.on('UTALK', (data)=>{\r\n        let uid = data.uid;\r\n        if (uid === undefined) return;\r\n\r\n        let audioURL = data.audio;\r\n        let A = VRoadcast.touchAvatar(uid);\r\n\r\n        //A.setTalkVolume(data.vol);\r\n        A.setTalkVolume(5.0);\r\n\r\n        //let newblob  = new File([data.blob], \"blob\"+ATON.MediaRec.auExt, { type: ATON.MediaRec.auType });\r\n        //let audioURL = window.URL.createObjectURL(newblob);\r\n        \r\n        if (A._auTalk === undefined){\r\n            A._auTalk = new Audio();\r\n            //A._auTalk.type = ATON.MediaRec.auType;\r\n        }\r\n        else {\r\n            //A._auTalk.pause();\r\n            A._auTalk.currentTime = 0;    \r\n        }\r\n\r\n        A._auTalk.src = audioURL;\r\n        A._auTalk.play();\r\n  \r\n\r\n/*\r\n        A._auChunks.push({\r\n            data: audioURL,\r\n            volume: data.vol\r\n        });\r\n*/\r\n    });\r\n};\r\n\r\n// Encode state\r\nVRoadcast.encodeState = (S)=>{\r\n    if (!S) return;\r\n\r\n    let A = new Float32Array(6); // make sufficient room\r\n    A[0] = S.position.x;\r\n    A[1] = S.position.y;\r\n    A[2] = S.position.z;\r\n\r\n    // Convert to byte array, we use last float storage (4 bytes)\r\n    var binData = new Int8Array(A.buffer);\r\n\r\n    binData[16] = (S.quaternion.x * 128.0);\r\n    binData[17] = (S.quaternion.y * 128.0);\r\n    binData[18] = (S.quaternion.z * 128.0);\r\n    binData[19] = (S.quaternion.w * 128.0);\r\n\r\n    binData[20] = S.userid;\r\n\r\n    //binData[21] = parseInt(S.rank);\r\n\r\n    return binData;\r\n}\r\n\r\n// Decode state\r\nVRoadcast.decodeState = (binData)=>{\r\n    let S = {};\r\n    S.userid = binData[20];\r\n\r\n    // First decode quat\r\n    S.quaternion = new THREE.Quaternion(\r\n        binData[16] / 128.0,\r\n        binData[17] / 128.0,\r\n        binData[18] / 128.0,\r\n        binData[19] / 128.0\r\n    );\r\n\r\n    // Now decode floats\r\n    let a8 = new Int8Array(16);\r\n    for (var i=0; i<16; i++) a8[i] = binData[i];\r\n    let A = new Float32Array(a8.buffer);\r\n\r\n    S.position = new THREE.Vector3(A[0],A[1],A[2]);\r\n\r\n    //S.scale = A[3];\r\n\r\n    return S;\r\n}\r\n\r\n\r\n// Update\r\nVRoadcast.update = ()=>{\r\n\r\n    // State interpolation\r\n    for (let a=0; a<VRoadcast.avatarList.length; a++){\r\n        let A = VRoadcast.avatarList[a];\r\n        if (A && A.visible){\r\n            A._tStateDur = VRoadcast.USER_STATE_FREQ;\r\n            A.update();\r\n        }\r\n    }\r\n};\r\n\r\nVRoadcast.sendState = ()=>{\r\n    if (VRoadcast.uid === undefined) return;\r\n    if (!VRoadcast.socket || !VRoadcast._connected) return;\r\n    \r\n    let cpov = ATON.Nav._currPOV;\r\n    if (!cpov) return;\r\n\r\n    //console.log(cpov);\r\n\r\n    let S = {};\r\n    S.position = new THREE.Vector3();\r\n    S.quaternion = new THREE.Quaternion();\r\n\r\n    S.position.copy(cpov.pos);\r\n    S.quaternion.copy(ATON.Nav._qOri);\r\n    S.userid = VRoadcast.uid;\r\n\r\n    // Save bandwidth\r\n    if (VRoadcast._lastStateSent !== undefined){\r\n        let lastPos = VRoadcast._lastStateSent.position;\r\n        let lastOri = VRoadcast._lastStateSent.quaternion;\r\n\r\n        let dPos = lastPos.distanceToSquared(cpov.pos);\r\n        let dOri = lastOri.angleTo(ATON.Nav._qOri);\r\n\r\n        if ( dPos < VRoadcast.THRES_STATE_POS && dOri < VRoadcast.THRES_STATE_ORI) return;\r\n    }\r\n\r\n    // Encode and send\r\n    let binData = VRoadcast.encodeState(S);\r\n    VRoadcast.socket.emit(\"USTATE\", binData/*.buffer*/ );\r\n    VRoadcast._lastStateSent = S;\r\n\r\n    //console.log(\"State sent\");\r\n};\r\n\r\n\r\n// Avatars\r\nVRoadcast.getAvatar = (uid)=>{\r\n    return VRoadcast.avatarList[uid];\r\n};\r\n\r\nVRoadcast.touchAvatar = (uid)=>{\r\n\r\n    // First time\r\n    if (VRoadcast.avatarList[uid] === undefined){\r\n        let A = new VRoadcast.Avatar(uid);\r\n        A.attachTo(VRoadcast.avaGroup);\r\n        \r\n        A.loadRepresentation(ATON.PATH_RES+\"models/vrc/head.gltf\");\r\n        //console.log(VRoadcast.avaGroup);\r\n\r\n        VRoadcast.avatarList[uid] = A;\r\n\r\n        //console.log(VRoadcast.avatarList);\r\n        //console.log(ATON.MatHub.materials.avatars);\r\n        //console.log(A);\r\n        VRoadcast._numUsers++;\r\n    }\r\n\r\n    let A = VRoadcast.avatarList[uid];\r\n    A.show();\r\n\r\n    return A;\r\n}\r\n\r\nVRoadcast.clearAllAvatars = ()=>{\r\n    for (let i in VRoadcast.avatarList){\r\n        let A = VRoadcast.avatarList[i];\r\n        A.hide();\r\n        //A.dispose();\r\n    }\r\n};\r\n\r\nexport default VRoadcast;","/*\r\n    ATON Semantic shapes factory\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\n/**\r\nATON Semantic Factory\r\n@namespace SemFactory\r\n*/\r\nlet SemFactory = {};\r\n\r\nSemFactory.init = ()=>{\r\n    SemFactory.bConvexBuilding = false;\r\n    SemFactory.convexPoints = [];\r\n    //SemFactory.convexMeshes = [];\r\n    SemFactory.convexNode   = undefined; // keeps track of current convex semnode\r\n    SemFactory.currConvexMesh = undefined;\r\n    \r\n    // Temp sem node to hold developing convex mesh\r\n    SemFactory.currSemNode = ATON.createSemanticNode();\r\n    SemFactory.currSemNode.disablePicking();\r\n    SemFactory.currSemNode.attachToRoot();\r\n\r\n    SemFactory.currMaterial = ATON.MatHub.getMaterial(\"semanticShape\"); // current sem material we are using\r\n\r\n    SemFactory._numShapes = 0; // counter of shapes produced\r\n};\r\n\r\n\r\n// Current material\r\nSemFactory.resetMaterial = ()=>{\r\n    SemFactory.currMaterial = ATON.MatHub.getMaterial(\"semanticShape\");\r\n};\r\n\r\nSemFactory.setMaterial = (m)=>{\r\n    if (m === undefined) return;\r\n    SemFactory.currMaterial = m;\r\n};\r\n\r\n\r\n// Convex shapes\r\n// NOTE: if semid exists, add mesh under the same id\r\nSemFactory.addConvexPoint = (/*semid,*/ p)=>{\r\n\r\n    SemFactory.convexPoints.push(p);\r\n    let numPoints = SemFactory.convexPoints.length;\r\n\r\n    // Spatial UI\r\n    let M = new THREE.Mesh( ATON.Utils.geomUnitSphere, ATON.MatHub.getMaterial(\"semanticShapeEdit\"));\r\n    M.position.copy(p);\r\n    M.scale.set(0.001,0.001,0.001);\r\n    ATON.SUI.gPoints.add( M );\r\n\r\n    if (numPoints < 4) return false;\r\n\r\n    // lets build convex shape\r\n    let geom   = new THREE.ConvexBufferGeometry( SemFactory.convexPoints );\r\n    let semesh = new THREE.Mesh( geom, ATON.MatHub.getMaterial(\"semanticShapeEdit\") );\r\n\r\n    //let numMeshes = SemFactory.convexMeshes.length;\r\n\r\n    // First time: create semnode and add it to current sem group\r\n    if (!SemFactory.bConvexBuilding){\r\n        //if (semid === undefined) semid = \"sem\"+SemFactory._numShapes;\r\n\r\n        //SemFactory.convexNode = ATON.getSemanticNode(semid) || ATON.createSemanticNode(semid);\r\n        //SemFactory.convexNode = ATON.createSemanticNode();\r\n        //SemFactory.convexNode.add(semesh);\r\n        SemFactory.currSemNode.add(semesh);\r\n        \r\n        // Store\r\n        semesh.userData._convexPoints = [];\r\n        for (let i=0; i<numPoints; i++){\r\n            //semesh.userData._convexPoints.push( ATON.Utils.setVectorPrecision(SemFactory.convexPoints[i],3) );\r\n\r\n            ATON.Utils.setVectorPrecision(SemFactory.convexPoints[i],4);\r\n            semesh.userData._convexPoints.push(SemFactory.convexPoints[i].x);\r\n            semesh.userData._convexPoints.push(SemFactory.convexPoints[i].y);\r\n            semesh.userData._convexPoints.push(SemFactory.convexPoints[i].z);\r\n        }\r\n\r\n        SemFactory.currConvexMesh = semesh;\r\n        SemFactory.bConvexBuilding = true;\r\n    }\r\n\r\n    // keep updating current semantic geometry\r\n    else {\r\n        let currSemesh = SemFactory.currConvexMesh;\r\n        currSemesh.geometry.dispose();\r\n        currSemesh.geometry = geom;\r\n\r\n        //currSemesh.userData._convexPoints.push( ATON.Utils.setVectorPrecision(p,3) );\r\n\r\n        ATON.Utils.setVectorPrecision(p,4);\r\n        currSemesh.userData._convexPoints.push( p.x );\r\n        currSemesh.userData._convexPoints.push( p.y );\r\n        currSemesh.userData._convexPoints.push( p.z );\r\n    }\r\n\r\n    return true;\r\n};\r\n\r\nSemFactory.stopCurrentConvex = ()=>{\r\n    SemFactory.convexPoints = [];\r\n    SemFactory.bConvexBuilding = false;\r\n\r\n    SemFactory.currSemNode.removeChildren();\r\n    ATON.SUI.gPoints.removeChildren();\r\n};\r\n\r\nSemFactory.getCurrentConvexShape = ()=>{\r\n    return SemFactory.currSemNode\r\n};\r\n\r\nSemFactory.completeConvexShape = (semid)=>{\r\n    SemFactory.convexPoints = [];\r\n    SemFactory.bConvexBuilding = false;\r\n\r\n    //if (SemFactory.convexNode === undefined) return undefined;\r\n    //if (SemFactory.currConvexMesh === undefined) return undefined;\r\n    if (SemFactory.currSemNode === undefined) return;\r\n\r\n    if (semid === undefined) semid = \"sem\"+SemFactory._numShapes;\r\n\r\n    let S = ATON.getSemanticNode(semid) || ATON.createSemanticNode(semid);\r\n    \r\n    S.add(SemFactory.currSemNode.children[0]);\r\n    S.setMaterial( SemFactory.currMaterial );\r\n    S.setDefaultAndHighlightMaterials(SemFactory.currMaterial, ATON.MatHub.materials.semanticShapeHL);\r\n    S.enablePicking();\r\n\r\n    SemFactory.currSemNode.removeChildren();\r\n\r\n/*\r\n    SemFactory.convexNode = ATON.getSemanticNode(semid) || ATON.createSemanticNode(semid);\r\n    SemFactory.convexNode.add(SemFactory.currConvexMesh);\r\n\r\n    SemFactory.convexNode.setMaterial( SemFactory.currMaterial );\r\n    SemFactory.convexNode.setDefaultMaterial(SemFactory.currMaterial);\r\n    SemFactory.convexNode.enablePicking();\r\n*/\r\n    SemFactory._numShapes++;\r\n\r\n    //console.log(SemFactory.convexNode);\r\n    //console.log(SemFactory.convexNode.userData._convexPoints);\r\n\r\n    //return SemFactory.convexNode;\r\n\r\n    // Spatial UI\r\n    ATON.SUI.gPoints.removeChildren();\r\n\r\n    return S;\r\n};\r\n\r\nSemFactory.createConvexShape = (semid, points)=>{\r\n    let geom   = new THREE.ConvexBufferGeometry( points );\r\n    let semesh = new THREE.Mesh( geom, SemFactory.currMaterial );\r\n\r\n    semesh.userData._convexPoints = [];\r\n    for (let i=0; i<points.length; i++){\r\n        let p = points[i];\r\n        ATON.Utils.setVectorPrecision(p,4);\r\n\r\n        semesh.userData._convexPoints.push( p.x );\r\n        semesh.userData._convexPoints.push( p.y );\r\n        semesh.userData._convexPoints.push( p.z );\r\n        }\r\n\r\n    let S = ATON.getOrCreateSemanticNode(semid);\r\n    S.add(semesh);\r\n    S.setDefaultAndHighlightMaterials(SemFactory.currMaterial, ATON.MatHub.materials.semanticShapeHL);\r\n\r\n    S.enablePicking();\r\n\r\n    return S;\r\n};\r\n\r\nSemFactory.addSurfaceConvexPoint = (/*semid,*/ offset)=>{\r\n    if (!ATON._queryDataScene) return false;\r\n\r\n    if (offset === undefined) offset = 0.02;\r\n\r\n    let p   = ATON._queryDataScene.p;\r\n    let eye = ATON.Nav.getCurrentEyeLocation();\r\n/*\r\n    let n = ATON._queryDataScene.n;\r\n    p.x += (n.x * offset);\r\n    p.y += (n.y * offset);\r\n    p.z += (n.z * offset);\r\n*/\r\n    p.lerpVectors(p, eye, offset);\r\n\r\n    SemFactory.addConvexPoint(p);\r\n    return p;\r\n};\r\n\r\n\r\n// Spherical semantic shapes\r\n// NOTE: if semid exists, add mesh under the same id\r\nSemFactory.createSphere = (semid, location, radius)=>{\r\n    if (location === undefined) return undefined;\r\n    if (radius === undefined) return undefined;\r\n\r\n/*\r\n    if (ATON.getSemanticNode(semid)){\r\n        console.log(\"ERROR SemFactory: semantic node \"+semid+\" already exists.\");\r\n        return false;\r\n    }\r\n*/\r\n    if (semid === undefined) semid = \"sem\"+SemFactory._numShapes;\r\n\r\n    let S = ATON.getOrCreateSemanticNode(semid);\r\n\r\n    //let g = new THREE.SphereGeometry( 1.0, 16, 16 );\r\n    let M = new THREE.Mesh( ATON.Utils.geomUnitSphere, SemFactory.currMaterial );\r\n    \r\n    // Note: we add multiple spheres to the same <semid> node\r\n    let sphere = new THREE.Object3D();\r\n    sphere.position.copy(location);\r\n    sphere.scale.set(radius, radius, radius);\r\n    sphere.add(M);\r\n\r\n    S.add( sphere );\r\n    S.enablePicking();\r\n    S.setDefaultAndHighlightMaterials(SemFactory.currMaterial, ATON.MatHub.materials.semanticShapeHL);\r\n\r\n    //SemFactory.currParent.add( S );\r\n\r\n    SemFactory._numShapes++;\r\n\r\n    return S;\r\n};\r\n\r\nSemFactory.createSurfaceSphere = (semid)=>{\r\n    if (!ATON._queryDataScene) return undefined;\r\n\r\n    let p = ATON._queryDataScene.p;\r\n    let r = ATON.SUI.getSelectorRadius();\r\n\r\n    return SemFactory.createSphere(semid, p,r);\r\n};\r\n\r\nexport default SemFactory;","/*\r\n    ATON Front-end blueprint\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\n/**\r\nATON Front-end routines\r\n@namespace FE\r\n*/\r\nlet FE = {};\r\n\r\n// Semantic-shapes types\r\nFE.SEMSHAPE_SPHERE = 0;\r\nFE.SEMSHAPE_CONVEX = 1;\r\n\r\n\r\nFE.realize = ()=>{\r\n    FE.PATH_RES_ICONS = ATON.PATH_RES+\"icons/\";\r\n\r\n    FE._bPopup = false;     // showing popup\r\n    FE.bPopupBlurBG = 0.25; // blur 3D content on popup show, 0.0 to disable\r\n    FE._userAuth = {};\r\n\r\n    FE._auSemNode = undefined;\r\n    FE._auSemNodePlaying = false;\r\n\r\n    FE._bReqHome = false;   // auto-compute home\r\n\r\n    FE.urlParams = new URLSearchParams(window.location.search);\r\n\r\n    FE._uiSetupBase();\r\n\r\n    ATON.realize();\r\n\r\n    // built-in base front-end parameters\r\n    let ddens = ATON.FE.urlParams.get('d');\r\n    if (ddens && ddens>0.0) ATON.setDefaultPixelDensity(ddens);\r\n};\r\n\r\n// Add basic front-end events\r\nFE.addBasicLoaderEvents = ()=>{\r\n    ATON.on(\"NodeRequestFired\", ()=>{ $(\"#idLoader\").show(); });\r\n    ATON.on(\"AllNodeRequestsCompleted\", ()=>{ \r\n        $(\"#idLoader\").hide();\r\n        \r\n        //console.log(ATON.Nav.homePOV);\r\n\r\n        if (FE._bReqHome) return;\r\n\r\n        if (ATON.Nav.homePOV === undefined){\r\n            ATON.Nav.computeAndRequestDefaultHome(0.5);\r\n        }\r\n        \r\n        FE._bReqHome = true;\r\n    });\r\n\r\n    ATON.on(\"SceneJSONLoaded\",()=>{\r\n        if (ATON.Nav.homePOV !== undefined) ATON.Nav.requestHome(0.5);\r\n    });\r\n\r\n};\r\n\r\nFE.useMouseWheelToScaleSelector = (f)=>{\r\n\r\n    if (f === undefined) f = 0.001;\r\n\r\n    ATON.on(\"MouseWheel\", (d)=>{\r\n        if (ATON.Nav._controls.enableZoom === undefined) return;\r\n\r\n        if (ATON._kModShift){\r\n            ATON.Nav._controls.enableZoom = false;\r\n\r\n            let r = ATON.SUI.mainSelector.scale.x;\r\n            r += (-d*f);\r\n            if (r > 0.0001) ATON.SUI.setSelectorRadius(r);\r\n        }\r\n        else {\r\n            ATON.Nav._controls.enableZoom = true;\r\n        }\r\n    });\r\n};\r\n\r\nFE.loadSceneID = (sid)=>{\r\n    if (sid === undefined) return;\r\n\r\n    let reqstr = ATON.PATH_RESTAPI_SCENE + sid;\r\n    if (ATON.SceneHub._bEdit) reqstr += \",edit\";\r\n\r\n    ATON.SceneHub.load(reqstr, sid);\r\n    console.log(reqstr);\r\n};\r\n\r\n\r\n\r\n// HTML UI\r\n//=======================================\r\n// Sample basic UI setup\r\nFE.uiBasicSetup = ()=>{\r\n    FE.uiAddButton(\"idTopToolbar\",\"fullscreen\", ATON.toggleFullScreen );\r\n    if (ATON.Utils.isConnectionSecure()) FE.uiAddButton(\"idTopToolbar\",\"vr\", ATON.XR.toggle );\r\n\r\n    FE.uiAddButton(\"idBottomToolbar\",\"home\", ()=>{ ATON.Nav.requestHome(0.1); });\r\n};\r\n\r\nFE._uiSetupBase = ()=>{\r\n    $(\"#idPopup\").click( FE.popupClose );\r\n    $(\"#idLoader\").html(\"<img src='\"+ATON.PATH_RES+\"loader.png'>\");\r\n};\r\n\r\n// Add Generic button to a specific div container\r\nFE.uiAddButton = (idcontainer, icon, onPress)=>{\r\n    let iconurl;\r\n    let iconid;\r\n\r\n    if (icon.endsWith(\".png\")){\r\n        iconurl = icon;\r\n        iconid  = icon.slice(0,-4);\r\n    }\r\n    else {\r\n        iconurl = FE.PATH_RES_ICONS+icon+\".png\";\r\n        iconid  = icon;\r\n    }\r\n\r\n    let htmlcode = \"<div id='btn-\"+iconid+\"' class='atonBTN'><img src='\"+iconurl+\"'></div>\";\r\n    $(\"#\"+idcontainer).append(htmlcode);\r\n\r\n    if (onPress) $(\"#btn-\"+iconid).click( onPress );\r\n};\r\n\r\nFE.uiSwitchButton = (iconid, b)=>{\r\n    if (b) $(\"#btn-\"+iconid).addClass(\"switchedON\");\r\n    else $(\"#btn-\"+iconid).removeClass(\"switchedON\");\r\n};\r\n\r\nFE.uiAddButtonHome = (idcontainer)=>{\r\n    FE.uiAddButton(idcontainer, \"home\", ()=>{ \r\n        ATON.Nav.requestHome(0.3);\r\n    });\r\n};\r\n\r\nFE.uiAddButtonFirstPerson = (idcontainer)=>{\r\n    FE.uiAddButton(idcontainer, \"fp\", ()=>{\r\n        if (ATON.Nav.isFirstPerson()){\r\n            ATON.Nav.setOrbitControl();\r\n            FE.uiSwitchButton(\"fp\",false);\r\n        }\r\n        else {\r\n            ATON.Nav.setFirstPersonControl();\r\n            FE.uiSwitchButton(\"fp\",true);\r\n        }\r\n    });\r\n};\r\n\r\nFE.uiAddButtonVR = (idcontainer)=>{\r\n    if (!ATON.Utils.isConnectionSecure()) return;\r\n    //if (!ATON.Utils.isWebXRsupported()) return; //Not showing on mobile\r\n\r\n    FE.uiAddButton(idcontainer, \"vr\", ATON.XR.toggle );\r\n};\r\nFE.uiAddButtonDeviceOrientation = (idcontainer)=>{\r\n    if (!ATON.Utils.isConnectionSecure()) return;\r\n    if (!ATON.Utils.isMobile()) return;\r\n\r\n    FE.uiAddButton(idcontainer,\"devori\", ()=>{\r\n        if (ATON.Nav.isDevOri()){\r\n            ATON.Nav.setOrbitControl();\r\n            FE.uiSwitchButton(\"devori\",false);\r\n        }\r\n        else {\r\n            ATON.Nav.setDeviceOrientationControl();\r\n            FE.uiSwitchButton(\"devori\",true);\r\n        }\r\n    });\r\n};\r\n\r\nFE.uiAddButtonTalk = (idcontainer)=>{\r\n    if (!ATON.Utils.isConnectionSecure()) return;\r\n\r\n    FE.uiAddButton(idcontainer, \"talk\", ()=>{\r\n        if (ATON.MediaRec.isAudioRecording()){\r\n            ATON.MediaRec.stopMediaStreaming();\r\n            //FE.uiSwitchButton(\"talk\",false);\r\n            $(\"#btn-talk\").removeClass(\"atonBTN-rec\");\r\n        }\r\n        else {\r\n            ATON.MediaRec.startMediaStreaming();\r\n            //FE.uiSwitchButton(\"talk\",true);\r\n            $(\"#btn-talk\").addClass(\"atonBTN-rec\");\r\n        }\r\n    });\r\n};\r\n\r\nFE.uiAddButtonQR = (idcontainer)=>{\r\n    FE.uiAddButton(idcontainer,\"qr\", FE.popupQR );\r\n};\r\n\r\nFE.uiAddButtonFullScreen = (idcontainer)=>{\r\n    FE.uiAddButton(idcontainer, \"fullscreen\", ()=>{\r\n        ATON.toggleFullScreen();\r\n        screenfull.isFullscreen? FE.uiSwitchButton(\"fullscreen\",false) : FE.uiSwitchButton(\"fullscreen\",true);\r\n    });\r\n};\r\n\r\nFE.uiAddButtonVRC = (idcontainer)=>{\r\n    FE.uiAddButton(idcontainer, \"vrc\", ()=>{\r\n        if (ATON.VRoadcast.isConnected()){\r\n            FE.popupVRC();\r\n        }\r\n        else {\r\n            ATON.VRoadcast.connect();\r\n        }\r\n    });\r\n\r\n    ATON.on(\"VRC_IDassigned\", (uid)=>{\r\n        let i = (uid%6);\r\n        $(\"#btn-vrc\").addClass(\"atonVRCu\"+i);\r\n        //$(\"#\"+idcontainer).addClass(\"atonVRCu\"+i+\"-bg\");\r\n        FE.checkAuth((data)=>{\r\n            if (data.username!==undefined /*&& ATON.VRoadcast._username===undefined*/) ATON.VRoadcast.setUsername(data.username);\r\n        });\r\n    });\r\n\r\n    ATON.on(\"VRC_Disconnected\", ()=>{\r\n        $(\"#btn-vrc\").attr(\"class\",\"atonBTN\");\r\n    });\r\n};\r\n\r\nFE.uiAddButtonUser = (idcontainer)=>{\r\n    FE.uiAddButton(idcontainer, \"user\", ()=>{\r\n        FE.popupUser();\r\n    });\r\n};\r\n\r\nFE.uiAddButtonEditMode = (idcontainer)=>{\r\n    FE.uiAddButton(idcontainer, \"edit\", ()=>{\r\n        FE.checkAuth((data)=>{\r\n            if (data.username !== undefined){\r\n                ATON.SceneHub._bEdit = !ATON.SceneHub._bEdit;\r\n                FE.uiSwitchButton(\"edit\",ATON.SceneHub._bEdit);\r\n            }\r\n\r\n            else {\r\n                FE.popupUser();  \r\n            }\r\n        });\r\n    });\r\n};\r\n\r\n// Attach ID validator to given input field\r\nFE.uiAttachInputFilterID = (inputid)=>{\r\n    $(\"#\"+inputid).on('keyup change input', ()=>{\r\n        let value = $(\"#\"+inputid).val();\r\n        let regReplace = new RegExp('[^A-Za-z-_]', 'ig');\r\n        $(\"#\"+inputid).val( value.replace(regReplace, '') );\r\n\r\n    });\r\n};\r\n\r\nFE.setupBasicUISounds = ()=>{\r\n    FE.auLib = {};\r\n\r\n    FE.auLib.switch = new Audio(ATON.PATH_RES+\"audio/switch.wav\");\r\n    FE.auLib.switch.loop = false;\r\n};\r\n\r\nFE.playAudioFromSemanticNode = (semid)=>{\r\n    //if (FE._auSemNodePlaying) return;\r\n    if (semid === undefined) return;\r\n\r\n    let S = ATON.getSemanticNode(semid);\r\n    if (S === undefined) return;\r\n\r\n    let au = S.getAudio();\r\n    if (au === undefined) return;\r\n\r\n    if (FE._auSemNode === undefined) FE._auSemNode = new Audio();\r\n    \r\n    FE._auSemNodePlaying = true;\r\n    FE._auSemNode.src = au;\r\n    //FE._auSemNode.type = ATON.MediaRec.auType;\r\n    FE._auSemNode.play();\r\n\r\n    FE._auSemNode.onended = ()=>{\r\n        FE._auSemNodePlaying = false;\r\n    };\r\n};\r\n\r\n\r\n// Popups\r\n//===================================================================\r\nFE.popupShow = (htmlcontent, cssClasses)=>{\r\n    if (FE._bPopup) return false;\r\n\r\n    let clstr = \"atonPopup \";\r\n    if (cssClasses) clstr += cssClasses;\r\n\r\n    let htcont = \"<div id='idPopupContent' class='\"+clstr+\"'>\";\r\n    htcont += htmlcontent+\"</div>\"\r\n\r\n    $('#idPopup').html(htcont);\r\n    $('#idPopupContent').click((e)=>{ e.stopPropagation(); });\r\n    $('#idPopup').fadeIn();\r\n\r\n    FE._bPopup = true;\r\n\r\n    if (FE.bPopupBlurBG > 0.0){\r\n        ATON._renderer.setPixelRatio( FE.bPopupBlurBG );\r\n        ATON._renderer.render( ATON._mainRoot, ATON.Nav._camera );\r\n    }\r\n\r\n    ATON._bPauseQuery = true;\r\n    //ATON.renderPause();\r\n\r\n    $(\"#idTopToolbar\").hide();\r\n    $(\"#idBottomToolbar\").hide();\r\n\r\n    return true;\r\n};\r\n\r\nFE.popupClose = ()=>{\r\n    FE._bPopup = false;\r\n\r\n    //ATON.renderResume();\r\n    if (FE.bPopupBlurBG > 0.0) ATON.resetPixelDensity();\r\n\r\n    $(\"#idPopup\").fadeOut();\r\n    //$(\"#idPopup\").empty();\r\n\r\n    ATON._bPauseQuery = false;\r\n\r\n    $(\"#idTopToolbar\").show();\r\n    $(\"#idBottomToolbar\").show();\r\n\r\n    ATON.focusOn3DView();\r\n};\r\n\r\nFE.popupQR = ()=>{\r\n    let htmlcontent = \"<h1>Share</h1>\";\r\n    htmlcontent += \"<div class='atonQRcontainer' id='idQRcode'></div><br><br>\";\r\n\r\n    if ( !ATON.FE.popupShow(htmlcontent) ) return;\r\n\r\n    let url = window.location.href;\r\n    new QRCode(document.getElementById(\"idQRcode\"), url);\r\n};\r\n\r\nFE.popupScreenShot = ()=>{\r\n    let cover = ATON.Utils.takeScreenshot(200);\r\n\r\n    FE.checkAuth((r)=>{\r\n\r\n        let htmlcontent = \"<h1>Screenshot</h1>\";\r\n        htmlcontent += \"This is a preview of what your screenshot will look like:<br><br>\";\r\n        htmlcontent += \"<img src='\"+cover.src+\"'><br>\";\r\n        htmlcontent += \"Resolution: <input id='isShotSize' type='number' min='100' max='4000' value='200'>px<br>\";\r\n\r\n        htmlcontent += \"<div class='atonBTN atonBTN-green' id='btnScreenShot' style='width:90%'><img src='\"+FE.PATH_RES_ICONS+\"sshot.png'>SHOT</div>\";\r\n\r\n        if (r.username !== undefined){\r\n            htmlcontent += \"<div class='atonBTN atonBTN-green' id='btnSetCover' style='width:90%'>Set as Cover</div>\";\r\n            /*\r\n            htmlcontent += \"<div class='atonBTN' id='btnSetCover' style='width:220px; height:220px; padding:5px'>\";\r\n            htmlcontent += \"<img src='\"+cover.src+\"'><br>\";\r\n            htmlcontent += \"Set as Cover</div>\";\r\n            */\r\n        }\r\n\r\n        if ( !ATON.FE.popupShow(htmlcontent) ) return;\r\n\r\n        $(\"#btnScreenShot\").click(()=>{\r\n            ATON.FE.popupClose();\r\n\r\n            let s = parseInt( $('#isShotSize').val() );\r\n            let img = ATON.Utils.takeScreenshot(s,\"shot.png\");\r\n        });\r\n\r\n        $(\"#btnSetCover\").click(()=>{\r\n            ATON.FE.popupClose();\r\n\r\n            ATON.Utils.postJSON(ATON.PATH_RESTAPI+\"setcover/\", {sid: ATON.SceneHub.currID, img: cover.src }, (r)=>{\r\n                console.log(r);\r\n            });\r\n\r\n        });\r\n    });\r\n};\r\n\r\nFE.popupVRC = ()=>{\r\n    let htmlcontent = \"\";\r\n    htmlcontent += \"<h1>Collaborative Session</h1>\";\r\n\r\n    // Username\r\n    htmlcontent += \"<input id='idVRCusername' type='text' size='10' placeholder='username...' style='display:none'>\";\r\n    htmlcontent += \"<div id='idVRCusernameBTN' class='atonBTN' style='width:200px; display:none'>\"+ATON.VRoadcast._username+\"</div>\";\r\n\r\n    htmlcontent += \"<div id='idChatBox' style='width:100%; height:150px; text-align:left;' class='scrollableY'></div>\";\r\n\r\n    //htmlcontent += \"<div style='text-align:left'>\";\r\n    htmlcontent += \"<input id='idVRCmsg' style='width:90%' type='text' placeholder='message...'>\";\r\n    //htmlcontent += \"</div>\";\r\n\r\n    htmlcontent += \"<div class='atonBTN atonBTN-red' id='idVRCdisconnect' style='width:90%'>LEAVE</div>\";\r\n\r\n    if ( !ATON.FE.popupShow(htmlcontent, \"atonPopupLarge\") ) return;\r\n\r\n    if (ATON.VRoadcast._username === undefined){\r\n        $('#idVRCusername').show();\r\n        $('#idVRCusernameBTN').hide();\r\n    }\r\n    else {\r\n        $('#idVRCusername').val(ATON.VRoadcast._username);\r\n        $('#idVRCusername').hide();\r\n        $('#idVRCusernameBTN').show();\r\n    }\r\n\r\n    if (ATON.VRoadcast.uid !== undefined) $('#idVRCusernameBTN').addClass(\"atonVRCu\"+(ATON.VRoadcast.uid % 6));\r\n\r\n    $(\"#idChatBox\").append(ATON.VRoadcast._elChat);\r\n\r\n    $(\"#idVRCmsg\").keypress((e)=>{\r\n        let keycode = (e.keyCode ? e.keyCode : e.which);\r\n        if(keycode == '13'){\r\n            let str = $(\"#idVRCmsg\").val();\r\n            ATON.VRoadcast.setMessage( str );\r\n            $(\"#idVRCmsg\").val(\"\");\r\n            //$(\"#idChatBox:first-child\").scrollTop( $(\"#idChatBox:first-child\").height() );\r\n        }\r\n    });\r\n\r\n    $(\"#idVRCusername\").keypress((e)=>{\r\n        let keycode = (e.keyCode ? e.keyCode : e.which);\r\n        if(keycode == '13'){\r\n            let str = $(\"#idVRCusername\").val();\r\n            ATON.VRoadcast.setUsername( str );\r\n            \r\n            $('#idVRCusername').hide();\r\n            $('#idVRCusernameBTN').html(ATON.VRoadcast._username);\r\n            $('#idVRCusernameBTN').show();\r\n        }\r\n    });\r\n\r\n    $(\"#idVRCusernameBTN\").click(()=>{\r\n        $('#idVRCusername').show();\r\n        $('#idVRCusernameBTN').hide();\r\n    });\r\n\r\n    $(\"#idVRCdisconnect\").click(()=>{\r\n        ATON.VRoadcast.disconnect();\r\n        ATON.FE.popupClose();\r\n    });\r\n\r\n};\r\n\r\n// User auth\r\nFE.checkAuth = (onReceive)=>{\r\n    $.ajax({\r\n        type: 'GET',\r\n        url: ATON.PATH_RESTAPI+\"user\",\r\n        xhrFields: { withCredentials: true },            \r\n        dataType: 'json',\r\n\r\n        success: (data)=>{\r\n            FE._userAuth = data;\r\n            console.log(FE._userAuth);\r\n\r\n            if (data.username!==undefined && ATON.VRoadcast._username===undefined) ATON.VRoadcast.setUsername(data.username);\r\n\r\n            onReceive(data);\r\n        }\r\n    });\r\n};\r\n\r\nFE.popupUser = ()=>{\r\n\r\n    FE.checkAuth((r)=>{\r\n        // We are already logged\r\n        if (r.username !== undefined){\r\n            let htmlcontent = \"<img src='\"+FE.PATH_RES_ICONS+\"user.png'><br>\";\r\n            htmlcontent += \"You are logged in as <b>'\"+r.username+\"'</b><br><br>\";\r\n\r\n            htmlcontent += \"<div class='atonBTN atonBTN-red' id='idLogoutBTN' style='width:90%'>LOGOUT</div>\";\r\n\r\n            if ( !ATON.FE.popupShow(htmlcontent) ) return;\r\n\r\n            $(\"#idLogoutBTN\").click(()=>{\r\n                $.get(ATON.PATH_RESTAPI+\"logout\", (r)=>{\r\n                    console.log(r);\r\n                    ATON.SceneHub.setEditMode(false);\r\n                    ATON.fireEvent(\"Logout\");\r\n                });\r\n\r\n                ATON.FE.popupClose();\r\n            });\r\n\r\n        }\r\n\r\n        // Not logged in\r\n        else {\r\n            let htmlcontent = \"<img src='\"+FE.PATH_RES_ICONS+\"user.png'><br>\";\r\n            htmlcontent += \"username:<input id='idUsername' type='text' maxlength='15' size='15' ><br>\";\r\n            htmlcontent += \"password:<input id='idPassword' type='password' maxlength='15' size='15' ><br>\";\r\n\r\n            htmlcontent += \"<div class='atonBTN atonBTN-green' id='idLoginBTN' style='width:90%'>LOGIN</div>\";\r\n\r\n            if ( !ATON.FE.popupShow(htmlcontent) ) return;\r\n\r\n            $(\"#idLoginBTN\").click(()=>{\r\n                let jstr = JSON.stringify({\r\n                    username: $(\"#idUsername\").val(),\r\n                    password: $(\"#idPassword\").val()\r\n                });\r\n\r\n                $.ajax({\r\n                    url: ATON.PATH_RESTAPI+\"login\",\r\n                    type:\"POST\",\r\n                    data: jstr,\r\n                    contentType:\"application/json; charset=utf-8\",\r\n                    dataType:\"json\",\r\n\r\n                    success: (r)=>{\r\n                        console.log(r);\r\n                        if (r){\r\n                            ATON.fireEvent(\"Login\", r);\r\n                            ATON.FE.popupClose();\r\n                        }\r\n                    }\r\n\r\n                }).fail((err)=>{\r\n                    //console.log(err);\r\n                    $(\"#idLoginBTN\").html(\"LOGIN FAILED\");\r\n                    $(\"#idLoginBTN\").attr(\"class\",\"atonBTN atonBTN-red\");\r\n                });\r\n            });\r\n        }\r\n    });\r\n};\r\n\r\n\r\nexport default FE;","/*\r\n    ATON Media Recorder\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\n/**\r\nATON Media Recorder\r\n@namespace MediaRec\r\n*/\r\nlet MediaRec = {};\r\nMediaRec.auType = \"audio/wav\";\r\nMediaRec.auExt  = \".wav\";\r\n//MediaRec.auType = \"audio/webm\";\r\n//MediaRec.auExt  = \".webm\";\r\n\r\nMediaRec.auBitsPerSecond  = 9000; //9000;\r\nMediaRec.auStreamInterval = 1000; //500;\r\nMediaRec.auMinVol = 1;\r\n\r\n\r\nMediaRec.init = ()=>{\r\n    MediaRec._bAudioRecording = false;\r\n    MediaRec._bStreaming = false;\r\n\r\n    MediaRec.recorder = undefined;\r\n};\r\n\r\nMediaRec.realizeAudioRecorder = ( onComplete )=>{\r\n    if (MediaRec.recorder !== undefined){\r\n        MediaRec.recorder.reset();\r\n        if (onComplete) onComplete();\r\n    }\r\n\r\n    // First time\r\n    else {\r\n        if (!ATON.Utils.isConnectionSecure()) return;\r\n        if (!navigator.mediaDevices) return;\r\n\r\n        if (MediaRec._ds === undefined) MediaRec._ds = setInterval( MediaRec._streamChunk, MediaRec.auStreamInterval);\r\n\r\n        let UM = navigator.mediaDevices.getUserMedia({ \r\n            video: false, \r\n            audio: true, \r\n            channelCount: 1,\r\n            echoCancellation: true,\r\n        });\r\n\r\n        UM.then(async function(stream){\r\n            MediaRec.recorder = RecordRTC(stream, { \r\n                type: 'audio',\r\n                mimeType: MediaRec.auType,\r\n                \r\n                bitsPerSecond: MediaRec.auBitsPerSecond,\r\n                audioBitsPerSecond: MediaRec.auBitsPerSecond,\r\n\r\n                sampleRate: 22050,\r\n                desiredSampRate: 22050,\r\n                \r\n                disableLogs: true,\r\n                \r\n                //recorderType: MediaStreamRecorder,\r\n                numberOfAudioChannels: 1,\r\n                //bufferSize: 16384,\r\n\r\n                //timeSlice: MediaRec.auStreamInterval,\r\n                //ondataavailable: MediaRec._onAuBlob,\r\n            });\r\n\r\n            // Audio analyser\r\n    /*\r\n            MediaRec._auAVGvolume = 0;\r\n\r\n            MediaRec._auCTX = new AudioContext();\r\n            const input = MediaRec._auCTX.createMediaStreamSource(stream);\r\n            const analyser = MediaRec._auCTX.createAnalyser();\r\n            const scriptProcessor = MediaRec._auCTX.createScriptProcessor();\r\n\r\n            // Some analyser setup\r\n            analyser.smoothingTimeConstant = 0.3;\r\n            analyser.fftSize = 1024;\r\n            \r\n            input.connect(analyser);\r\n            analyser.connect(scriptProcessor);\r\n            scriptProcessor.connect(MediaRec._auCTX.destination);\r\n\r\n            const getAverageVolume = array => {\r\n                const L = array.length;\r\n                if (L <= 0) return 0; \r\n                \r\n                let values = 0;\r\n                for (let i=0; i<L; i++) values += array[i];\r\n\r\n                return values / L;\r\n            };\r\n\r\n            scriptProcessor.onaudioprocess = audioProcessingEvent => {\r\n                if (!MediaRec._bAudioRecording) return;\r\n\r\n                const tempArray = new Uint8Array(analyser.frequencyBinCount);\r\n\r\n                analyser.getByteFrequencyData(tempArray);\r\n                MediaRec._auAVGvolume = parseInt(getAverageVolume(tempArray));\r\n                \r\n                //console.log(MediaRec._auAVGvolume);\r\n            };\r\n    */\r\n            if (onComplete) onComplete();\r\n        });\r\n    }\r\n};\r\n\r\nMediaRec.isAudioRecording = ()=>{\r\n    return MediaRec._bAudioRecording;\r\n};\r\n\r\n// helper routines\r\nMediaRec._stopRecAndSend = ( onFinish )=>{\r\n    if (!MediaRec.recorder){\r\n        if (onFinish) onFinish();\r\n        return;\r\n    }\r\n\r\n    MediaRec.recorder.stopRecording(()=>{\r\n/*\r\n        let rblob = MediaRec.recorder.getBlob();\r\n\r\n        if (!rblob || rblob.size < 5 || !ATON.VRoadcast.socket || ATON.VRoadcast.uid === undefined){ // || MediaRec._auAVGvolume <= MediaRec.auMinVol\r\n            if (onFinish) onFinish();\r\n            return;\r\n        }\r\n\r\n        let reader = new FileReader();\r\n        reader.readAsDataURL(rblob); \r\n        reader.onloadend = ()=>{\r\n            let b64 = reader.result;\r\n            //let b64 = reader.result.split(',')[1];\r\n            //b64 = \"data:audio/wav;base64,\" + b64;\r\n*/\r\n        MediaRec.recorder.getDataURL((b64)=>{\r\n\r\n            if (!ATON.VRoadcast.socket || ATON.VRoadcast.uid === undefined){ // || MediaRec._auAVGvolume <= MediaRec.auMinVol\r\n                if (onFinish) onFinish();\r\n                return;\r\n            }\r\n\r\n            ATON.VRoadcast.socket.compress(false).binary(true).emit(\"UTALK\", {\r\n                audio: b64,\r\n                uid: ATON.VRoadcast.uid,\r\n                //vol: MediaRec._auAVGvolume\r\n            });              \r\n            \r\n            if (onFinish) onFinish();\r\n        });\r\n/*\r\n        console.log(\"sending blob...\"+rblob.size);\r\n\r\n        ATON.VRoadcast.socket.compress(false).binary(true).emit(\"UTALK\", {\r\n            blob: rblob,\r\n            uid: ATON.VRoadcast.uid,\r\n            vol: MediaRec._auAVGvolume\r\n        });\r\n\r\n        if (onFinish) onFinish();\r\n*/\r\n    });\r\n};\r\n\r\nMediaRec._onAuBlob = (rblob)=>{\r\n    if (!rblob) return;\r\n    if (!ATON.VRoadcast.socket) return;\r\n    //if (ATON.vroadcast._auAVGvolume <= ATON.vroadcast.minAuVol) return;\r\n\r\n    //console.log(\"sending blob...\"+rblob.size);\r\n\r\n    ATON.VRoadcast.socket.emit(\"UTALK\", {\r\n        blob: rblob,\r\n        uid: ATON.VRoadcast.uid,\r\n        vol: MediaRec._auAVGvolume\r\n    });\r\n};\r\n\r\n// Audio Recording\r\nMediaRec.startRecording = ()=>{\r\n    MediaRec.realizeAudioRecorder(()=>{\r\n\r\n        if (!MediaRec.recorder) return;\r\n        if (MediaRec._bAudioRecording) return;\r\n\r\n        console.log(\"Recording...\");\r\n\r\n        MediaRec.recorder.startRecording();\r\n        MediaRec._bAudioRecording = true;\r\n    });\r\n};\r\n\r\nMediaRec.stopRecording = ()=>{\r\n    if (!MediaRec.recorder) return;\r\n\r\n    MediaRec.recorder.stopRecording(()=>{\r\n        let rblob = MediaRec.recorder.getBlob();\r\n        //let du = MediaRec.recorder.toURL();\r\n        //console.log(du);\r\n\r\n        console.log(\"Stop recording.\");\r\n\r\n        let reader = new FileReader();\r\n        reader.readAsDataURL(rblob); \r\n        reader.onloadend = ()=>{\r\n            let base64data = reader.result;                \r\n            //console.log(base64data);\r\n            ATON.fireEvent(\"AudioRecordCompleted\", base64data);\r\n        }\r\n\r\n        MediaRec._bAudioRecording = false;\r\n    });\r\n};\r\n\r\nMediaRec.startOrStopRecording = ()=>{\r\n    if (MediaRec._bAudioRecording) MediaRec.stopRecording();\r\n    else MediaRec.startRecording();\r\n};\r\n\r\nMediaRec._streamChunk = ()=>{\r\n    if (!MediaRec.recorder) return;\r\n    if (!MediaRec._bStreaming) return;\r\n\r\n    MediaRec._stopRecAndSend(()=>{ \r\n        MediaRec.recorder.startRecording();\r\n    });\r\n};\r\n\r\n// Audio Streaming\r\nMediaRec.startMediaStreaming = ()=>{\r\n    MediaRec.realizeAudioRecorder(()=>{\r\n        if (!MediaRec.recorder) return;\r\n        if (MediaRec._bAudioRecording) return;\r\n\r\n        //MediaRec.recorder.stopRecording(()=>{\r\n        console.log(\"Start MediaStreaming\");\r\n\r\n        MediaRec.recorder.startRecording();\r\n        MediaRec._bAudioRecording = true;\r\n        MediaRec._bStreaming = true;\r\n        //});\r\n    });\r\n};\r\n\r\nMediaRec.stopMediaStreaming = ()=>{\r\n    if (!MediaRec.recorder) return;\r\n    if (!MediaRec._bAudioRecording) return;\r\n\r\n    console.log(\"Stop MediaStreaming\");\r\n\r\n    MediaRec._stopRecAndSend(()=>{\r\n        MediaRec._bStreaming = false;\r\n        MediaRec._bAudioRecording = false;\r\n    });\r\n\r\n/*\r\n    MediaRec._stopRecAndSend(()=>{\r\n        clearInterval(MediaRec._dMediaRecorder);\r\n        MediaRec._bAudioRecording = false;\r\n    });\r\n*/\r\n};\r\n\r\nMediaRec.startOrStopMediaStreaming = ()=>{\r\n    if (MediaRec._bAudioRecording) MediaRec.stopMediaStreaming();\r\n    else MediaRec.startMediaStreaming();\r\n};\r\n\r\nexport default MediaRec;","/*!\r\n    @preserve\r\n\r\n \tATON\r\n\r\n \t@author Bruno Fanini\r\n\tVHLab, CNR ISPC\r\n\r\n==================================================================================*/\r\n\r\n'use strict';\r\n\r\n/**\r\n@namespace ATON\r\n*/\r\nlet ATON = {};\r\nwindow.ATON = ATON;\r\n\r\n// Import\r\nimport Node from \"./ATON.node.js\";\r\nimport POV from \"./ATON.pov.js\";\r\n//import Period from \"./ATON.period.js\";\r\nimport LightProbe from \"./ATON.lightprobe.js\";\r\n\r\nimport EventHub from \"./ATON.eventhub.js\";\r\nimport MatHub from \"./ATON.mathub.js\";\r\nimport Utils from \"./ATON.utils.js\";\r\nimport SceneHub from \"./ATON.scenehub.js\";\r\nimport Nav from \"./ATON.nav.js\";\r\nimport XR from \"./ATON.xr.js\";\r\nimport SUI from \"./ATON.sui.js\";\r\nimport VRoadcast from \"./ATON.vroadcast.js\";\r\nimport SemFactory from \"./ATON.semfactory.js\";\r\nimport FE from \"./ATON.fe.js\";\r\nimport MediaRec from \"./ATON.mediarec.js\";\r\n\r\n// Classes\r\nATON.Node       = Node;\r\nATON.POV        = POV;\r\nATON.LightProbe = LightProbe;\r\n//ATON.Period = Period;\r\n\r\n// NS\r\nATON.EventHub   = EventHub;\r\nATON.Utils      = Utils;\r\nATON.SceneHub   = SceneHub;\r\nATON.MatHub     = MatHub;\r\nATON.Nav        = Nav;\r\nATON.XR         = XR;\r\nATON.SUI        = SUI;\r\nATON.VRoadcast  = VRoadcast;\r\nATON.SemFactory = SemFactory;\r\nATON.FE         = FE;\r\nATON.MediaRec   = MediaRec;\r\n\r\n//==============================================================\r\n// Consts\r\n//==============================================================\r\nATON.STD_UPVECTOR = new THREE.Vector3(0,1,0);\r\nATON.ROOT_NID = \".\"; // reserved node ID for graph-roots\r\n\r\nATON.RAD2DEG = (180.0 / Math.PI);\r\nATON.DEG2RAD = (Math.PI / 180.0);\r\n\r\n// Node types\r\nATON.NTYPES = {};\r\n// 1 and 2 are reserved\r\nATON.NTYPES.SCENE  = 3;\r\nATON.NTYPES.SEM    = 4;\r\nATON.NTYPES.UI     = 5;\r\n\r\n// Folders\r\nATON.PATH_RESTAPI       = window.location.origin + \"/api/\"; // \"../api/\";\r\nATON.PATH_RESTAPI_SCENE = ATON.PATH_RESTAPI + \"scene/\";\r\nATON.PATH_MODS          = window.location.origin + \"/mods/\"; // \"../mods/\";\r\nATON.PATH_THREE         = ATON.PATH_MODS + \"three/\";\r\nATON.PATH_DRACO_LIB     = ATON.PATH_THREE+\"examples/js/libs/draco/\";\r\nATON.PATH_BASIS_LIB     = ATON.PATH_THREE+\"examples/js/libs/basis/\";\r\n\r\nATON.PATH_COLLECTION = window.location.origin + \"/collection/\"; // \"../collection/\";\r\nATON.PATH_MODELS     = ATON.PATH_COLLECTION + \"models/\";\r\nATON.PATH_SCENES     = window.location.origin + \"/scenes/\"; // \"../scenes/\";\r\nATON.PATH_RES        = window.location.origin + \"/res/\"; // \"../res/\";\r\n\r\nATON.SHADOWS_NEAR = 0.1;\r\nATON.SHADOWS_FAR  = 50.0;\r\nATON.SHADOWS_SIZE = 15.0;\r\nATON.SHADOWS_RES  = 1024; // 512\r\n\r\n/**\r\nSet path collection (3D models, audio, panoramas, ...)\r\n@param {string} path - path\r\n*/\r\nATON.setPathCollection = (path)=>{\r\n    ATON.PATH_COLLECTION = /*window.location.origin + */path;\r\n    ATON.PATH_MODELS     = ATON.PATH_COLLECTION+\"models/\";\r\n};\r\n\r\n/**\r\nSet path scenes\r\n@param {string} path - path\r\n*/\r\nATON.setPathScenes = (path)=>{\r\n    ATON.PATH_SCENES = /*window.location.origin +*/ path;\r\n};\r\n\r\n\r\nATON._setupBaseListeners = ()=>{\r\n    let el = ATON._renderer.domElement;\r\n\r\n    window.addEventListener( 'resize', ATON._onResize, false );\r\n    el.addEventListener( 'mousemove', ATON._updateScreenMove, false );\r\n    ///el.addEventListener('dblclick', ATON._doubleTap, false);\r\n\r\n    el.addEventListener('mousedown', (e)=>{\r\n        if (e.button === 1) ATON.fireEvent(\"MouseMidButton\");      // middle-click\r\n        if (e.button === 2) ATON.fireEvent(\"MouseRightButton\");    // right-click\r\n    });\r\n\r\n    el.addEventListener( 'wheel', ATON._onMouseWheel, false );\r\n\r\n\r\n    // Touch events\r\n    Hammer(el).on(\"doubletap\", (e)=>{\r\n        ATON.fireEvent(\"DoubleTap\", e.srcEvent);\r\n        //console.log(e.srcEvent);\r\n    });\r\n\r\n    Hammer(el).on(\"tap\", (e)=>{\r\n        ATON._updateScreenMove(e.srcEvent);\r\n        ATON._handleQueries();\r\n\r\n        ATON.fireEvent(\"Tap\", e.srcEvent);\r\n        //console.log(e.srcEvent);\r\n\r\n        // UI selection\r\n        if (ATON._hoveredUI === undefined) return;\r\n        let H = ATON.getUINode(ATON._hoveredUI);\r\n        if (H && H.onSelect) H.onSelect();\r\n    });\r\n\r\n    ATON.on(\"DoubleTap\", (e)=>{\r\n        //console.log(e);\r\n        ATON.defaultDoubleTapFromScreenCoords(e);\r\n    });\r\n\r\n    //ATON.on(\"Tap\", (e)=>{\r\n        //console.log(e);\r\n    //});\r\n\r\n\r\n    // Keyboard\r\n    ATON._kModShift = false;\r\n    ATON._kModCtrl  = false;\r\n\r\n    el.addEventListener(\"keydown\", (e)=>{\r\n        if (e.key === \"Shift\")   ATON._kModShift = true;\r\n        if (e.key === \"Control\") ATON._kModCtrl  = true;\r\n        \r\n        ATON.fireEvent(\"KeyPress\", e.key);\r\n        //ATON.fireEvent(\"KeyPress/\"+e.key);\r\n    }, false);\r\n\r\n    el.addEventListener(\"keyup\", (e)=>{\r\n        if (e.key === \"Shift\")   ATON._kModShift = false;\r\n        if (e.key === \"Control\") ATON._kModCtrl  = false;\r\n\r\n        ATON.fireEvent(\"KeyUp\", e.key);\r\n        //ATON.fireEvent(\"KeyUp/\"+e.key);\r\n    }, false);\r\n\r\n    // Defaults\r\n    ATON.on(\"KeyPress\", (k)=>{\r\n\r\n        if (k==='+'){\r\n            let f = ATON.Nav.getFOV() + 1.0;\r\n            ATON.Nav.setFOV(f);\r\n        }\r\n        if (k==='-'){\r\n            let f = ATON.Nav.getFOV() - 1.0;\r\n            ATON.Nav.setFOV(f);\r\n        }\r\n\r\n        if (k==='PageUp'){\r\n            let r = ATON.SUI.mainSelector.scale.x + 0.02;\r\n            ATON.SUI.setSelectorRadius(r);\r\n        }\r\n        if (k==='PageDown'){\r\n            let r = ATON.SUI.mainSelector.scale.x - 0.02;\r\n            r = Math.max(r, 0.01);\r\n            ATON.SUI.setSelectorRadius(r); \r\n        }\r\n    });\r\n\r\n    // Default semantic highlight\r\n/*\r\n    ATON.on(\"SemanticNodeLeave\", (semid)=>{\r\n        let S = ATON.getSemanticNode(semid);\r\n        if (S) S.restoreDefaultMaterial();\r\n    });\r\n    ATON.on(\"SemanticNodeHover\", (semid)=>{\r\n        let S = ATON.getSemanticNode(semid);\r\n        if (S) S.highlight();\r\n    });\r\n*/          \r\n};\r\n\r\nATON._onResize = ()=>{\r\n    ATON.Nav._camera.aspect = window.innerWidth / window.innerHeight;\r\n    ATON.Nav._camera.updateProjectionMatrix();\r\n\r\n    ATON._renderer.setSize( window.innerWidth, window.innerHeight );\r\n    console.log(\"onResize\");\r\n};\r\n\r\nATON._onMouseWheel = (e)=>{\r\n    e.preventDefault();\r\n\r\n    ATON.fireEvent(\"MouseWheel\", e.deltaY);\r\n};\r\n\r\nATON.focusOn3DView = ()=>{\r\n    ATON._renderer.domElement.focus();\r\n};\r\n\r\n// Default retarget from screen coordinates (eg.: on double tap)\r\nATON.defaultDoubleTapFromScreenCoords = (e)=>{\r\n    ATON._updateScreenMove(e);\r\n    ATON._handleQueryScene();\r\n\r\n    let bFPtrans = ATON.Nav.isFirstPerson() || ATON.Nav.isDevOri();\r\n\r\n    // When first-person mode, teleport (non immersive)\r\n    if (ATON._queryDataScene && bFPtrans){\r\n        let P = ATON._queryDataScene.p;\r\n        let N = ATON._queryDataScene.n;\r\n        \r\n        if (N.y > 0.7){\r\n            let currDir = ATON.Nav._vDir;\r\n            let feye = new THREE.Vector3(P.x, P.y+ATON.userHeight, P.z);\r\n            let ftgt = new THREE.Vector3(\r\n                feye.x + currDir.x,\r\n                feye.y + currDir.y,\r\n                feye.z + currDir.z,\r\n            );\r\n\r\n            let POV = new ATON.POV().setPosition(feye).setTarget(ftgt);\r\n\r\n            ATON.Nav.requestPOV(POV, 0.5);\r\n        }\r\n        return;\r\n    }\r\n\r\n    // In orbit mode, focus on selected SemNode...\r\n    let hsn = ATON.getSemanticNode(ATON._hoveredSemNode);\r\n    if (ATON._queryDataSem && hsn){\r\n        ATON.Nav.requestPOVbyNode( hsn, 0.3);\r\n        return;\r\n    }\r\n    // ...or perform standard retarget on picket surface point\r\n    if (ATON._queryDataScene){\r\n        ATON.Nav.requestRetarget(ATON._queryDataScene.p, /*ATON._queryDataScene.n*/undefined, 0.3);\r\n    }\r\n\r\n    // TODO: go POV in sight if any (panorama only mode)\r\n}\r\n\r\n/**\r\nToggle fullscreen\r\n*/\r\nATON.toggleFullScreen = ()=>{\r\n    screenfull.toggle();\r\n/*\r\n    if (b === undefined){\r\n        screenfull.toggle();\r\n        return;\r\n    }\r\n\r\n    if (b) screenfull.request();\r\n*/\r\n};\r\n\r\n\r\n//============================================================================\r\n// ATON init routines\r\n//============================================================================\r\n/**\r\nMain ATON initialization, it will take care of all sub-components initialization, device profiling and much more\r\n@example\r\nATON.realize()\r\n*/\r\nATON.realize = ()=>{\r\n    console.log(\"realize\");\r\n\r\n    ATON.Utils.init();\r\n    ATON.Utils.profileDevice();\r\n    \r\n    //THREE.Object3D.DefaultUp = new THREE.Vector3(0,0,1); // mismatches WebXR y-up\r\n\r\n    // Timing\r\n    ATON._clock = new THREE.Clock(true);\r\n\r\n    let wglopts = {\r\n        //canvas: document.getElementById(\"idView\"),\r\n        antialias: true, //ATON.device.isMobile? false : true,\r\n        alpha: true,\r\n        //pecision: \"mediump\"\r\n        preserveDrawingBuffer: true\r\n    };\r\n\r\n    ATON._renderer = new THREE.WebGLRenderer(wglopts);\r\n    ATON._renderer.setSize( window.innerWidth, window.innerHeight );\r\n    //console.log(ATON._renderer);\r\n\r\n    ATON._stdpxd = 1.0; //window.devicePixelRatio? (window.devicePixelRatio) : 1.0;\r\n    ATON._renderer.setPixelRatio( ATON._stdpxd );\r\n    console.log(ATON._stdpxd);\r\n    \r\n    ATON._renderer.outputEncoding = THREE.sRGBEncoding;\r\n    //console.log(ATON._renderer.getPixelRatio());\r\n\r\n    ATON._renderer.setAnimationLoop( ATON._onFrame );\r\n    //ATON._bDirtyLP = false;\r\n\r\n    ATON._maxAnisotropy = ATON._renderer.capabilities.getMaxAnisotropy();\r\n    console.log(ATON._renderer.capabilities);\r\n\r\n    THREE.Cache.enabled = true;\r\n\r\n    ATON.userHeight = 1.7;\r\n \r\n    document.body.appendChild( ATON._renderer.domElement );\r\n    //console.log(ATON._renderer);\r\n    \r\n    //let canvas = ATON._renderer.domElement;\r\n    //canvas.style.padding = \"0px\";\r\n    //canvas.style.margin  = \"0px\";\r\n    //canvas.style.border  = \"none\";\r\n    //canvas.style.width   = \"100%\";\r\n    //canvas.style.height  = \"100%\";\r\n\r\n    ATON.EventHub.init();\r\n    ATON.MatHub.init();\r\n\r\n    //ATON._setupLoadManager();\r\n    ATON._assetsManager = {};\r\n    ATON._aLoader = new THREE.GLTFLoader(/*ATON._loadManager*/);\r\n    ATON._dracoLoader = new THREE.DRACOLoader();\r\n    ATON._dracoLoader.setDecoderPath( ATON.PATH_DRACO_LIB );\r\n    ATON._aLoader.setDRACOLoader( ATON._dracoLoader );\r\n    ATON._numReqLoad = 0;\r\n\r\n    // Periods (TODO:)\r\n    //ATON.periods = [];\r\n\r\n    ATON._lps = []; // lightprobes\r\n    ATON._bAutoLP = false;\r\n    //ATON._dirtyLPs = true;\r\n    ATON._bShadowsFixedBound = false;\r\n\r\n    ATON.initGraphs();\r\n    ATON.SceneHub.init();\r\n\r\n    // Init nav system\r\n    ATON.Nav.init();\r\n\r\n    // XR\r\n    ATON.XR.init();\r\n\r\n    // Spatial UI\r\n    ATON.SUI.init();\r\n\r\n    // VRoadcast\r\n    ATON.VRoadcast.init();\r\n\r\n    // Media Recorder\r\n    ATON.MediaRec.init();\r\n\r\n    // Semantic Factory\r\n    ATON.SemFactory.init();\r\n\r\n    // Query / picked data\r\n    ATON._queryDataScene = undefined;\r\n    ATON._queryDataSem   = undefined;\r\n    ATON._queryDataUI    = undefined;\r\n\r\n    ATON._hoveredSemNode = undefined;\r\n    ATON._hoveredUI      = undefined;\r\n\r\n    ATON._bQuerySemOcclusion = true;\r\n    ATON._bQueryNormals  = true;\r\n    ATON._bPauseQuery    = false;\r\n\r\n    //window.setInterval(()=>{ if (!ATON._bPauseQuery) ATON._handleQueries(); }, 500 );\r\n\r\n    // Basis (future support)\r\n/*\r\n    ATON._basisLoader = new BasisTextureLoader();\r\n    ATON._basisLoader.setTranscoderPath( ATON.PATH_BASIS_LIB );\r\n    ATON._basisLoader.detectSupport( ATON._renderer );\r\n    \r\n    // Register BasisTextureLoader for .basis extension.\r\n    THREE.DefaultLoadingManager.addHandler( /\\.basis$/, ATON._basisLoader );\r\n*/\r\n\r\n\r\n    // Mouse/Touch screen coords\r\n    ATON._screenPointerCoords = new THREE.Vector2(0.0,0.0);\r\n\r\n    // Ray casters\r\n    ATON._rcScene = new THREE.Raycaster();\r\n    ATON._rcScene.layers.set(ATON.NTYPES.SCENE);\r\n    ATON._rcSemantics = new THREE.Raycaster();\r\n    ATON._rcSemantics.layers.set(ATON.NTYPES.SEM);\r\n    ATON._rcUI = new THREE.Raycaster();\r\n    ATON._rcUI.layers.set(ATON.NTYPES.UI);\r\n\r\n    //ATON._registerRCS(); // not used for now\r\n\r\n    ATON._setupBaseListeners();\r\n\r\n    ATON.focusOn3DView();\r\n};\r\n\r\n/**\r\nPause rendering\r\n*/\r\nATON.renderPause = ()=>{\r\n    ATON._renderer.setAnimationLoop( undefined );\r\n};\r\n\r\n/**\r\nResume rendering (if paused)\r\n*/\r\nATON.renderResume = ()=>{\r\n    ATON._renderer.setAnimationLoop( ATON._onFrame );\r\n};\r\n\r\nATON._setupLoadManager = ()=>{\r\n    ATON._loadManager = new THREE.LoadingManager();\r\n    ATON._loadManager.onStart = ( url, itemsLoaded, itemsTotal )=>{\r\n\t    console.log( 'Started loading file: ' + url + '.\\nLoaded ' + itemsLoaded + ' of ' + itemsTotal + ' files.' );\r\n        ATON.fireEvent(\"NodeRequestFired\", url);\r\n    };\r\n\r\n    ATON._loadManager.onLoad = ()=>{\r\n\t    console.log( 'Loading complete!');\r\n        ATON.fireEvent(\"AllNodeRequestsCompleted\");\r\n    };\r\n\r\n    ATON._loadManager.onProgress = ( url, itemsLoaded, itemsTotal )=>{\r\n\t    //console.log( 'Loading file: ' + url + '.\\nLoaded ' + itemsLoaded + ' of ' + itemsTotal + ' files.' );\r\n    };\r\n\r\n    ATON._loadManager.onError = ( url )=>{\r\n\t    console.log( 'There was an error loading ' + url );\r\n    };\r\n};\r\n\r\n/**\r\nSet the default pixel density (standard is 1.0)\r\n@example\r\nATON.setDefaultPixelDensity(0.5)\r\n*/\r\nATON.setDefaultPixelDensity = (d)=>{\r\n    ATON._stdpxd = d;\r\n    ATON._renderer.setPixelRatio( d );\r\n};\r\n\r\n/**\r\nReset pixel density to default\r\n*/\r\nATON.resetPixelDensity = ()=>{\r\n    ATON._renderer.setPixelRatio( ATON._stdpxd );\r\n};\r\n\r\n\r\n//============================================================================\r\n// Scene-graphs\r\n//============================================================================\r\nATON.snodes   = {}; // Visible scene-graph\r\nATON.semnodes = {}; // Semantics graph\r\nATON.uinodes  = {}; // UI graph\r\n\r\n// Visible scene-graph\r\n//=============================================\r\n/**\r\nCreate a scene node (visible scene-graph)\r\n@param {string} id - a string representing unique ID of the node (optional)\r\n@returns {Node}\r\n*/\r\nATON.createSceneNode = (id)=>{\r\n    return new ATON.Node(id, ATON.NTYPES.SCENE);\r\n};\r\n\r\n/**\r\nGet a previously created scene node (visible scene-graph)\r\n@param {string} id - the node ID\r\n@returns {Node}\r\n*/\r\nATON.getSceneNode = (id)=>{ \r\n    if (id === undefined) return undefined;    \r\n    return ATON.snodes[id];\r\n};\r\n\r\n/**\r\nGet or create a scene node (visible scene-graph)\r\n@param {string} id - the node ID\r\n@returns {Node}\r\n*/\r\nATON.getOrCreateSceneNode = (id)=>{\r\n    let N = ATON.getSceneNode(id);\r\n    if (N !== undefined) return N;\r\n    return ATON.createSceneNode(id);\r\n};\r\n\r\n/**\r\nGet root (visible scene-graph)\r\n@returns {Node}\r\n*/\r\nATON.getRootScene = ()=>{\r\n    return ATON._rootVisible;\r\n};\r\n\r\n// Semantics, shape descriptors\r\n//=============================================\r\n\r\n/**\r\nCreate a semantic node\r\n@param {string} id - a string representing unique ID of the node (optional)\r\n@returns {Node}\r\n*/\r\nATON.createSemanticNode = (id)=>{\r\n    return new ATON.Node(id, ATON.NTYPES.SEM);\r\n};\r\n\r\n/**\r\nGet a previously created semantic node\r\n@param {string} id - the node ID\r\n@returns {Node}\r\n*/\r\nATON.getSemanticNode = (id)=>{\r\n    if (id === undefined) return undefined; \r\n    return ATON.semnodes[id];\r\n};\r\n\r\n/**\r\nGet or create a semantic node\r\n@param {string} id - the node ID\r\n@returns {Node}\r\n*/\r\nATON.getOrCreateSemanticNode = (id)=>{\r\n    let S = ATON.getSemanticNode(id);\r\n    if (S !== undefined) return S;\r\n    return ATON.createSemanticNode(id);\r\n};\r\n\r\n/**\r\nGet root of semantic graph\r\n@returns {Node}\r\n*/\r\nATON.getRootSemantics = ()=>{\r\n    return ATON._rootSem;\r\n};\r\n\r\n// UI graph\r\n//=============================================\r\n\r\n/**\r\nCreate a UI node\r\n@param {string} id - a string representing unique ID of the node (optional)\r\n@returns {Node}\r\n*/\r\nATON.createUINode = (id)=>{\r\n    return new ATON.Node(id, ATON.NTYPES.UI);\r\n};\r\n\r\n/**\r\nGet a previously created UI node\r\n@param {string} id - the node ID\r\n@returns {Node}\r\n*/\r\nATON.getUINode = (id)=>{\r\n    if (id === undefined) return undefined; \r\n    return ATON.uinodes[id];\r\n};\r\n\r\n/**\r\nGet root of UI graph\r\n@returns {Node}\r\n*/\r\nATON.getRootUI = ()=>{\r\n    return ATON._rootUI;\r\n};\r\n\r\n// Asset loading routines\r\nATON._assetReqNew = (url)=>{\r\n    ATON._numReqLoad++;\r\n    ATON.fireEvent(\"NodeRequestFired\", url);\r\n};\r\nATON._assetReqComplete = (url)=>{\r\n    ATON.fireEvent(\"NodeRequestCompleted\", url);\r\n    ATON._numReqLoad--;\r\n\r\n    if (ATON._numReqLoad <= 0){\r\n        ATON.fireEvent(\"AllNodeRequestsCompleted\");\r\n\r\n        // Bounds\r\n        let c = ATON._rootVisible.getBound().center;\r\n        let r = ATON._rootVisible.getBound().radius;\r\n\r\n        if (ATON._renderer.shadowMap.enabled){\r\n            ATON._rootVisible.traverse((o) => {\r\n                if (o.isMesh){\r\n                    o.castShadow = true;\r\n                    o.receiveShadow = true;\r\n                }\r\n            });\r\n\r\n            // TODO: experimental\r\n            if (ATON._bShadowsFixedBound){\r\n                ATON.SHADOWS_SIZE = r*1.5;\r\n\r\n                ATON._dMainL.shadow.camera.left   = -ATON.SHADOWS_SIZE;\r\n                ATON._dMainL.shadow.camera.right  = ATON.SHADOWS_SIZE;\r\n                ATON._dMainL.shadow.camera.bottom = -ATON.SHADOWS_SIZE;\r\n                ATON._dMainL.shadow.camera.top    = ATON.SHADOWS_SIZE;\r\n\r\n                ATON.updateDirShadows(c);\r\n            }\r\n        }\r\n\r\n        if (ATON._bAutoLP){\r\n            if (ATON._lps[0] === undefined) ATON.addLightProbe( new ATON.LightProbe().setPosition(c).setNear(r) );\r\n            else {\r\n                ATON._lps[0].setPosition(c.x, c.y, c.z).setNear(r);\r\n            }\r\n            console.log(\"Auto LP\");\r\n        }\r\n\r\n        ATON.getRootScene().assignLightProbesByProximity();\r\n\r\n        //ATON._bDirtyLP = true;\r\n\r\n        // FIXME: dirty\r\n        setTimeout( ()=>{\r\n            if (c && ATON._mMainPano) ATON._mMainPano.position.copy(c);\r\n            ATON.updateLightProbes();\r\n        }, 1000);\r\n\r\n    }\r\n};\r\n\r\n\r\nATON.initGraphs = ()=>{\r\n    // Global root\r\n    ATON._mainRoot = new THREE.Scene();\r\n    ATON._mainRoot.background = new THREE.Color( 0.7,0.7,0.7 );\r\n\r\n    // visible scene-graph\r\n    ATON._rootVisibleGlobal = new THREE.Group();\r\n    ATON._mainRoot.add(ATON._rootVisibleGlobal);\r\n\r\n    ATON._rootVisible = ATON.createSceneNode().setAsRoot();\r\n    ATON._rootVisibleGlobal.add(ATON._rootVisible);\r\n\r\n\r\n    // semantics graph\r\n    ATON._rootSem = ATON.createSemanticNode().setAsRoot();\r\n    ATON._mainRoot.add(ATON._rootSem);\r\n\r\n    // UI graph\r\n    ATON._rootUI = ATON.createUINode().setAsRoot();\r\n    ATON._mainRoot.add(ATON._rootUI);\r\n\r\n    // Uniform lighting\r\n    ATON.ambLight = new THREE.AmbientLight( new THREE.Color(1,1,1) /*ATON._mainRoot.background*/ );\r\n    ATON._rootVisibleGlobal.add(ATON.ambLight);\r\n};\r\n\r\nATON.setBackgroundColor = (bg)=>{\r\n    ATON._mainRoot.background = bg;\r\n};\r\n\r\n//==============================================================\r\n// LightProbes\r\n//==============================================================\r\nATON.setAutoLP = (b)=>{\r\n    ATON._bAutoLP = b;\r\n};\r\n\r\nATON.setNeutralAmbientLight = (a)=>{\r\n    ATON.ambLight.color = new THREE.Color( a,a,a );\r\n};\r\n\r\n/**\r\nAdd a LightProbe to the scene\r\n@param {LightProbe} LP - the light probe being added \r\n*/\r\nATON.addLightProbe = (LP)=>{\r\n    if (ATON._lps.length === 0) ATON.setNeutralAmbientLight(0.1);\r\n\r\n    ATON._lps.push(LP);\r\n};\r\n\r\n/**\r\nUpdate all LightProbes in the scene\r\n*/\r\nATON.updateLightProbes = ()=>{\r\n    if (ATON._lps.length === 0) return;\r\n\r\n    for (let i in ATON._lps) ATON._lps[i].update();\r\n\r\n    // FIXME: indirect LP based on first LP (for now)\r\n    if (ATON._lps[0]){\r\n        if (ATON._indLP) ATON._mainRoot.remove(ATON._indLP);\r\n\r\n        ATON._indLP = THREE.LightProbeGenerator.fromCubeRenderTarget( ATON._renderer, ATON._lps[0]._prevCCtarget );\r\n        ATON._mainRoot.add( ATON._indLP );\r\n    }\r\n\r\n    //for (let i in ATON._lps) ATON._lps[i].update();\r\n\r\n    ATON._rootVisible.traverse((o) => {\r\n        let LP = o.userData.LP;\r\n        if (LP !== undefined && LP instanceof ATON.LightProbe){\r\n            o.material.envMap = LP.getEnvTex();\r\n            //o.material.combine = THREE.AddOperation;\r\n            //o.material.envMapIntensity = 5.0;\r\n        }\r\n    });\r\n\r\n    console.log(\"LPs updated.\");\r\n};\r\n\r\n//==============================================================\r\n// Environment\r\n//==============================================================\r\n\r\n/**\r\nSet the main panorama (360)\r\n@param {string} path - url to equirectangular image\r\n@example\r\nATON.setMainPanorama(\"my/pano.jpg\");\r\n*/\r\nATON.setMainPanorama = (path)=>{\r\n\r\n    let tpano = new THREE.TextureLoader().load(path);\r\n    tpano.encoding = THREE.sRGBEncoding;\r\n\r\n    if (ATON._matMainPano !== undefined){\r\n        ATON._matMainPano.map = tpano;\r\n        //ATON._matMainPano.emissive = tpano;\r\n        return;\r\n    }\r\n\r\n    // First time: create it\r\n    ATON._gMainPano = new THREE.SphereBufferGeometry( 1.0, 60,60 );\r\n\r\n    ATON._matMainPano = new THREE.MeshBasicMaterial({ \r\n        map: tpano, \r\n        //emissive: tpano,\r\n        //castShadow: false,\r\n        //receiveShadow: false,\r\n        fog: false,\r\n        depthTest: false,\r\n        depthWrite: false,\r\n        //depthFunc: THREE.AlwaysDepth,\r\n        //side: THREE.DoubleSide\r\n    });\r\n\r\n    ATON._mMainPano = new THREE.Mesh(ATON._gMainPano, ATON._matMainPano);\r\n    ATON._mMainPano.frustumCulled = false;\r\n    ATON.setMainPanoramaRadius(ATON.Nav.STD_FAR * 0.9);\r\n\r\n    ATON._mMainPano.onAfterRender = ()=>{\r\n        //if (ATON._numReqLoad > 0) return;\r\n        ATON._mMainPano.position.copy(ATON.Nav._currPOV.pos);\r\n    };\r\n\r\n    ATON._rootVisibleGlobal.add(ATON._mMainPano);\r\n};\r\n\r\n\r\nATON.setMainPanoramaRadius = (r)=>{\r\n    if (ATON._gMainPano === undefined) return;\r\n    ATON._gMainPano.scale( -r,r,r );\r\n};\r\n\r\n/**\r\nSet main panorama rotation (radians) around up vector\r\n@param {number} r - rotation\r\n@example\r\nATON.setMainPanoramaRotation(1.5);\r\n*/\r\nATON.setMainPanoramaRotation = (r)=>{\r\n    if (ATON._mMainPano === undefined) return;\r\n    ATON._mMainPano.rotation.set( 0,r,0 );\r\n};\r\n\r\n/**\r\nSet and activate main directional light\r\n@param {THREE.Vector3} v - light direction\r\n@example\r\nATON.setMainLightDirection( new THREE.Vector(0.1,-1.0,0.0) );\r\n*/\r\nATON.setMainLightDirection = (v)=>{\r\n\r\n    let d = v.clone();\r\n\r\n    d.x *= ATON.SHADOWS_FAR * 0.5;\r\n    d.y *= ATON.SHADOWS_FAR * 0.5;\r\n    d.z *= ATON.SHADOWS_FAR * 0.5;\r\n\r\n    if (ATON._dMainL === undefined){\r\n        ATON._dMainL = new THREE.DirectionalLight( new THREE.Color(1,1,1), 1.0 );\r\n        ATON._dMainL.castShadow = false;\r\n\r\n        ATON._dMainLtgt = new THREE.Object3D();\r\n        ATON._rootVisibleGlobal.add(ATON._dMainLtgt);\r\n        ATON._dMainL.target = ATON._dMainLtgt;\r\n\r\n        ATON.setNeutralAmbientLight(0.1);\r\n\r\n        ATON._rootVisibleGlobal.add(ATON._dMainL);\r\n        ATON._dMainLpos = new THREE.Vector3();\r\n    }\r\n\r\n    ATON._dMainLdir = d;\r\n\r\n    ATON._dMainL.position.set(-d.x,-d.y,-d.z);\r\n};\r\n\r\nATON.toggleShadows = (b)=>{\r\n    if (ATON._dMainL === undefined) return;\r\n\r\n    if (b){\r\n        ATON._dMainL.castShadow = true;\r\n        ATON._renderer.shadowMap.enabled = true;\r\n\r\n        //ATON._renderer.shadowMap.type    = THREE.BasicShadowMap;\r\n        //ATON._renderer.shadowMap.type    = THREE.PCFShadowMap;\r\n        ATON._renderer.shadowMap.type    = THREE.PCFSoftShadowMap; // bleeding\r\n        //ATON._renderer.shadowMap.type    = THREE.VSMShadowMap;\r\n\r\n        ATON._dMainL.shadow.mapSize.width  = ATON.SHADOWS_RES;\r\n        ATON._dMainL.shadow.mapSize.height = ATON.SHADOWS_RES;\r\n        ATON._dMainL.shadow.camera.near    = ATON.SHADOWS_NEAR;\r\n        ATON._dMainL.shadow.camera.far     = ATON.SHADOWS_FAR;\r\n        //ATON._dMainL.shadow.bias = 0.0001;\r\n\r\n        ATON._dMainL.shadow.camera.left   = -ATON.SHADOWS_SIZE;\r\n        ATON._dMainL.shadow.camera.right  = ATON.SHADOWS_SIZE;\r\n        ATON._dMainL.shadow.camera.bottom = -ATON.SHADOWS_SIZE;\r\n        ATON._dMainL.shadow.camera.top    = ATON.SHADOWS_SIZE;\r\n\r\n        ATON._rootVisible.traverse((o) => {\r\n            if (o.isMesh){\r\n                o.castShadow = true;\r\n                o.receiveShadow = true;\r\n            }\r\n        });\r\n\r\n        if (ATON._bShadowsFixedBound){\r\n            let c = ATON._rootVisible.getBound().center;\r\n            ATON.updateDirShadows(c);\r\n        }\r\n\r\n        console.log(\"Shadows ON\");\r\n    }\r\n    else {\r\n        ATON._dMainL.castShadow = false;\r\n        ATON._renderer.shadowMap.enabled = false;\r\n        console.log(\"Shadows OFF\");\r\n    }\r\n};\r\n\r\nATON.updateDirShadows = (p)=>{\r\n    if (ATON._dMainLdir === undefined) return;\r\n\r\n    if (p === undefined) p = ATON.Nav.getCurrentEyeLocation();\r\n\r\n    ATON._dMainLpos.x = p.x + (ATON.Nav._vDir.x * ATON.SHADOWS_SIZE);\r\n    ATON._dMainLpos.y = p.y + (ATON.Nav._vDir.y * ATON.SHADOWS_SIZE);\r\n    ATON._dMainLpos.z = p.z + (ATON.Nav._vDir.z * ATON.SHADOWS_SIZE);\r\n\r\n    ATON._dMainL.position.set(\r\n        ATON._dMainLpos.x - ATON._dMainLdir.x, \r\n        ATON._dMainLpos.y - ATON._dMainLdir.y, \r\n        ATON._dMainLpos.z - ATON._dMainLdir.z\r\n    );\r\n    ATON._dMainLtgt.position.copy(ATON._dMainLpos);\r\n};\r\n\r\nATON._updateEnvironment = ()=>{\r\n    if (!ATON._renderer.shadowMap.enabled) return;\r\n    if (ATON._bShadowsFixedBound) return;\r\n\r\n    ATON.updateDirShadows();\r\n};\r\n\r\n//==============================================================\r\n// Update routines\r\n//==============================================================\r\nATON._onFrame = ()=>{\r\n    // TODO: add pause render\r\n\r\n    let dt = ATON._clock.getDelta();\r\n\r\n    ATON._fps = 1.0 / dt;\r\n    ATON._dt  = dt;\r\n    \r\n    ATON.Nav._bControlChange = false;\r\n    ATON.Nav._controls.update(dt);\r\n\r\n    ATON._renderer.render( ATON._mainRoot, ATON.Nav._camera );\r\n\r\n/*\r\n    if (ATON.Nav._bControlChange){\r\n        }\r\n    else {\r\n        //ATON._handleScreenPick();\r\n        }\r\n*/\r\n\r\n    if (ATON.XR._bPresenting) ATON.XR.update();\r\n\r\n    // Spatial queries\r\n    ATON._handleQueries();\r\n\r\n    // Navigation system\r\n    ATON.Nav.update();\r\n\r\n    // VRoadcast\r\n    ATON.VRoadcast.update();\r\n\r\n    // UI\r\n    ATON.SUI.update();\r\n\r\n    // Environment/lighting\r\n    ATON._updateEnvironment();\r\n\r\n    ATON.fireEvent(\"frame\");\r\n};\r\n\r\nATON._updateScreenMove = (e)=>{\r\n    e.preventDefault();\r\n\r\n    if (ATON.Nav._mode === ATON.Nav.MODE_DEVORI){\r\n        ATON._screenPointerCoords.x = 0.0;\r\n        ATON._screenPointerCoords.y = 0.0;\r\n        return;\r\n    }\r\n\r\n\tATON._screenPointerCoords.x = ( e.clientX / window.innerWidth ) * 2 - 1;\r\n\tATON._screenPointerCoords.y = -( e.clientY / window.innerHeight ) * 2 + 1;\r\n\r\n    //console.log(ATON._screenPointerCoords);\r\n};\r\n\r\n//==============================================================\r\n// Query rountines\r\n//==============================================================\r\nATON._registerRCS = ()=>{\r\n    ATON._rcRR = 0;\r\n    ATON._rcHandlers = [];\r\n\r\n    ATON._rcHandlers.push( ATON._handleQueryScene );\r\n    ATON._rcHandlers.push( ATON._handleQuerySemantics );\r\n    ATON._rcHandlers.push( ATON._handleQueryUI );\r\n};\r\n\r\nATON._handleQueries = ()=>{\r\n    if (ATON._bPauseQuery) return;\r\n    if (ATON._numReqLoad > 0) return;\r\n    if (ATON.Nav.isTransitioning()) return; // do not query during POV transitions\r\n    //if (ATON.device.isMobile || !ATON.XR.isPresenting()) return; \r\n\r\n    // round-robin\r\n    //ATON._rcRR = (ATON._rcRR+1) % 2;\r\n    //ATON._rcHandlers[ATON._rcRR]();\r\n\r\n    ATON._handleQueryScene();\r\n    ATON._handleQuerySemantics();\r\n    ATON._handleQueryUI();\r\n};\r\n\r\n// Ray casting visible scenegraph\r\nATON._handleQueryScene = ()=>{\r\n    if (ATON.XR.isPresenting()){\r\n        ATON._rcScene.set( ATON.XR.getControllerWorldLocation(0), ATON.XR.getControllerWorldDirection(0) );\r\n    }\r\n    else \r\n        ATON._rcScene.setFromCamera( ATON._screenPointerCoords, ATON.Nav._camera );\r\n\r\n    ATON._hitsScene = [];\r\n    //ATON._rcScene.intersectObjects( ATON._rootVisible.children, true, ATON._hitsScene );\r\n    ATON._rcScene.intersectObjects( ATON._mainRoot.children, true, ATON._hitsScene );\r\n\r\n    //ATON._hitsOperator(ATON._hits);\r\n\r\n    // Process hits\r\n    let hitsnum = ATON._hitsScene.length;\r\n    if (hitsnum <= 0){\r\n        ATON._queryDataScene = undefined;\r\n        return;\r\n    }\r\n\r\n    let h = ATON._hitsScene[0];\r\n\r\n    ATON._queryDataScene = {};\r\n    ATON._queryDataScene.p = h.point;\r\n    ATON._queryDataScene.d = h.distance;\r\n    ATON._queryDataScene.o = h.object;\r\n    \r\n    //console.log(ATON._queryDataScene.o);\r\n\r\n    // Normals\r\n    if (!ATON._bQueryNormals) return;\r\n    if (h.face === null) return;\r\n    if (h.face.normal === undefined) return;\r\n\r\n    ATON._queryDataScene.matrixWorld = new THREE.Matrix3().getNormalMatrix( h.object.matrixWorld );\r\n    ATON._queryDataScene.n = h.face.normal.clone().applyMatrix3( ATON._queryDataScene.matrixWorld ).normalize();\r\n};\r\n\r\n/**\r\nGet location of current queried point (if any) on visible scene.\r\nIf no point is queried, return undefined\r\n@returns {THREE.Vector3}\r\n@example\r\nlet p = ATON.getSceneQueriedPoint()\r\n*/\r\nATON.getSceneQueriedPoint = ()=>{\r\n    if (ATON._queryDataScene === undefined) return undefined;\r\n    return ATON._queryDataScene.p;\r\n};\r\n\r\n/**\r\nGet distance to queried location (if any) on visible scene.\r\nIf no point is queried, return undefined\r\n@returns {number}\r\n@example\r\nlet d = ATON.getSceneQueriedDistance()\r\n*/\r\nATON.getSceneQueriedDistance = ()=>{\r\n    if (ATON._queryDataScene === undefined) return undefined;\r\n    return ATON._queryDataScene.d;\r\n};\r\n\r\n/**\r\nGet queried location normal (if any) on visible scene.\r\nIf no point is queried, return undefined\r\n@returns {THREE.Vector3}\r\n@example\r\nlet n = ATON.getSceneQueriedNormal()\r\n*/\r\nATON.getSceneQueriedNormal = ()=>{\r\n    if (ATON._queryDataScene === undefined) return undefined;\r\n    return ATON._queryDataScene.n;\r\n};\r\n\r\n\r\n// Ray casting semantic-graph\r\nATON._handleQuerySemantics = ()=>{\r\n    if (ATON.XR.isPresenting()){\r\n        ATON._rcSemantics.set( ATON.XR.getControllerWorldLocation(0), ATON.XR.getControllerWorldDirection(0) );\r\n    }\r\n    else \r\n        ATON._rcSemantics.setFromCamera( ATON._screenPointerCoords, ATON.Nav._camera );\r\n\r\n    ATON._hitsSem = [];\r\n    ATON._rcSemantics.intersectObjects( ATON._mainRoot.children, true, ATON._hitsSem );\r\n\r\n    // Process hits\r\n    let hitsnum = ATON._hitsSem.length;\r\n    if (hitsnum <= 0){\r\n        ATON._queryDataSem = undefined;\r\n\r\n        if (ATON._hoveredSemNode){\r\n            ATON.fireEvent(\"SemanticNodeLeave\", ATON._hoveredSemNode);\r\n            let S = ATON.getSemanticNode(ATON._hoveredSemNode);\r\n            if (S && S.onLeave) S.onLeave();\r\n        }\r\n        \r\n        ATON._hoveredSemNode = undefined;\r\n        return;\r\n    }\r\n\r\n    let h = ATON._hitsSem[0];\r\n\r\n    // Occlusion\r\n    if (ATON._bQuerySemOcclusion && ATON._queryDataScene){\r\n        if (ATON._queryDataScene.d < h.distance){\r\n\r\n            ATON._queryDataSem = undefined;\r\n\r\n            if (ATON._hoveredSemNode){\r\n                ATON.fireEvent(\"SemanticNodeLeave\", ATON._hoveredSemNode);\r\n                let S = ATON.getSemanticNode(ATON._hoveredSemNode);\r\n                if (S && S.onLeave) S.onLeave();\r\n            }\r\n\r\n            ATON._hoveredSemNode = undefined;\r\n            return;\r\n        }\r\n    }\r\n\r\n    ATON._queryDataSem = {};\r\n    ATON._queryDataSem.p = h.point;\r\n    ATON._queryDataSem.d = h.distance;\r\n    ATON._queryDataSem.o = h.object;\r\n    ATON._queryDataSem.list = []; // holds sem-nodes parental list\r\n\r\n    // traverse parents\r\n    let L = ATON._queryDataSem.list;\r\n    let sp = h.object.parent;\r\n    while (sp){\r\n        if (sp.nid && sp.nid !== ATON.ROOT_NID) L.push(sp.nid);\r\n        sp = sp.parent;\r\n    }\r\n\r\n    let hsn = L[0];\r\n    if (hsn){\r\n        if (ATON._hoveredSemNode !== hsn){\r\n            if (ATON._hoveredSemNode){\r\n                ATON.fireEvent(\"SemanticNodeLeave\", ATON._hoveredSemNode);\r\n                let S = ATON.getSemanticNode(ATON._hoveredSemNode);\r\n                if (S && S.onLeave) S.onLeave();\r\n            }\r\n\r\n            ATON._hoveredSemNode = hsn;\r\n            ATON.fireEvent(\"SemanticNodeHover\", hsn);\r\n            let S = ATON.getSemanticNode(hsn);\r\n            if (S && S.onHover) S.onHover();\r\n        }\r\n    }\r\n\r\n    //console.log(L);\r\n};\r\n\r\nATON._handleQueryUI = ()=>{\r\n    if (ATON.XR.isPresenting() && ATON.XR.controller0){\r\n        ATON._rcUI.set( ATON.XR.getControllerWorldLocation(0), ATON.XR.getControllerWorldDirection(0) );\r\n    }\r\n    else \r\n        ATON._rcUI.setFromCamera( ATON._screenPointerCoords, ATON.Nav._camera );\r\n\r\n    ATON._hitsUI = [];\r\n    ATON._rcUI.intersectObjects( ATON._mainRoot.children, true, ATON._hitsUI );\r\n\r\n    // Process hits\r\n    let hitsnum = ATON._hitsUI.length;\r\n    if (hitsnum <= 0){\r\n        ATON._queryDataUI = undefined;\r\n\r\n        if (ATON._hoveredUI){\r\n            ATON.fireEvent(\"UINodeLeave\", ATON._hoveredUI);\r\n            let S = ATON.getUINode(ATON._hoveredUI);\r\n            if (S && S.onLeave) S.onLeave();\r\n        }\r\n        \r\n        ATON._hoveredUI = undefined;\r\n        return;\r\n    }\r\n\r\n    let h = ATON._hitsUI[0];\r\n\r\n    // Occlusion\r\n    if (ATON._queryDataScene){\r\n        if (ATON._queryDataScene.d < h.distance){\r\n\r\n            ATON._queryDataUI = undefined;\r\n\r\n            if (ATON._hoveredUI){\r\n                ATON.fireEvent(\"SemanticNodeLeave\", ATON._hoveredUI);\r\n                let S = ATON.getUINode(ATON._hoveredUI);\r\n                if (S && S.onLeave) S.onLeave();\r\n            }\r\n\r\n            ATON._hoveredUI = undefined;\r\n            return;\r\n        }\r\n    }\r\n\r\n    ATON._queryDataUI = {};\r\n    ATON._queryDataUI.p = h.point;\r\n    ATON._queryDataUI.d = h.distance;\r\n    ATON._queryDataUI.o = h.object;\r\n    ATON._queryDataUI.list = []; // holds ui-nodes parental list\r\n\r\n    // traverse parents\r\n    let L = ATON._queryDataUI.list;\r\n    let sp = h.object.parent;\r\n    while (sp){\r\n        if (sp.nid && sp.nid !== ATON.ROOT_NID) L.push(sp.nid);\r\n        sp = sp.parent;\r\n    }\r\n\r\n    let hui = L[0];\r\n    if (hui){\r\n        if (ATON._hoveredUI !== hui){\r\n            if (ATON._hoveredUI){\r\n                ATON.fireEvent(\"UINodeLeave\", ATON._hoveredUI);\r\n                let S = ATON.getUINode(ATON._hoveredUI);\r\n                if (S && S.onLeave) S.onLeave();\r\n            }\r\n\r\n            ATON._hoveredUI = hui;\r\n            ATON.fireEvent(\"UINodeHover\", hui);\r\n            let S = ATON.getUINode(hui);\r\n            if (S && S.onHover) S.onHover();\r\n        }\r\n    }\r\n};\r\n\r\n\r\nexport default ATON;\r\n\r\n\r\n"]}