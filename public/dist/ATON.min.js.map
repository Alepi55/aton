{"version":3,"sources":["ATON.node.js","ATON.pov.js","ATON.lightprobe.js","ATON.eventhub.js","ATON.mathub.js","ATON.utils.js","ATON.scenehub.js","ATON.nav.js","ATON.xr.js","ATON.sui.button.js","ATON.sui.js","ATON.avatar.js","ATON.vroadcast.js","ATON.semfactory.js","ATON.fe.js","ATON.js"],"names":["Node","THREE","Group","id","type","traverse","o","isMesh","geometry","LP","userData","undefined","update","material","envMap","getEnvTex","ATON","NTYPES","SCENE","bPickable","_rootG","_rootVisible","_nodes","snodes","SEM","_rootSem","semnodes","UI","_rootUI","uinodes","as","kwords","_bCloneOnLoadHit","castShadow","receiveShadow","onHover","onLeave","onSelect","ROOT_NID","nid","name","b","kw","push","visible","layers","disable","enable","hide","show","M","cMat","matSTD","matHL","setMaterial","f","opacity","envtex","Utils","assignLightProbeToMesh","_lps","length","c","Vector3","cLP","Box3","setFromObject","getCenter","mdist","i","d","distanceToSquared","pos","C","clone","p","parent","removeChild","dispose","remove","num","children","node","N","add","bb","bs","Sphere","getBoundingSphere","x","y","z","position","copy","set","sx","sy","sz","scale","rx","ry","rz","rotation","quaternion","Nav","_qOri","url","onComplete","_assetsManager","then","console","log","_assetReqNew","P","Promise","resolve","reject","_aLoader","load","data","model","scene","modelVisitor","_assetReqComplete","err","filename","exportNode","h","POV","povlist","target","up","STD_UPVECTOR","fov","STD_FOV","nextPOV","prevPOV","kwarray","pov","LightProbe","res","near","far","_res","_near","_far","STD_FAR","_envtex","_prevCCtarget","_pmremGenerator","PMREMGenerator","_renderer","CCtarget","WebGLCubeRenderTarget","format","RGBEFormat","generateMipmaps","minFilter","LinearMipmapLinearFilter","encoding","sRGBEncoding","CC","CubeCamera","_rootVisibleGlobal","texture","EventHub","evLocal","evNetwork","on","fireEvent","clearEventHandlers","evtname","ehList","handler","handlerLocal","handlerNetwork","evhLocal","VRoadcast","bReplicate","executeHandlers","MatHub","materials","colors","addDefaults","_loader","MaterialLoader","white","Color","black","green","yellow","red","blue","orange","sem","darksem","fullyTransparent","MeshBasicMaterial","transparent","depthWrite","selector","color","flatShading","controllerRay","semanticShape","semanticShapeHL","semanticShapeEdit","mat","jsonfile","addMaterial","device","geomUnitSphere","SphereBufferGeometry","exporter","GLTFExporter","_dlink","document","createElement","style","display","body","appendChild","textureLoader","TextureLoader","window","isSecureContext","isMobile","test","navigator","userAgent","substr","isXRsupported","xr","isSessionSupported","filepath","lastIndexOf","toLowerCase","index","substring","object","updateMatrixWorld","g","applyMatrix4","matrixWorld","toNonIndexed","mergedGeometries","BufferGeometryUtils","mergeBufferGeometries","mergedGeometry","mergeVertices","center","group","mesh","Mesh","parentNode","computeBoundsTree","map","anisotropy","_maxAnisotropy","magFilter","LinearFilter","v","prec","parseFloat","toPrecision","blob","href","URL","createObjectURL","download","click","str","downloadBlob","Blob","jsonobj","downloadText","JSON","stringify","buffer","ext","getFileExtension","bBin","opts","binary","parse","output","ArrayBuffer","downloadArrayBuffer","downloadJSONobj","noLP","BoxBufferGeometry","MeshStandardMaterial","PATH_RES","tex","createSceneNode","enablePicking","metalness","metalnessMap","roughnessMap","normalMap","dx","dz","PlaneBufferGeometry","rotateX","Math","PI","SceneHub","currID","currData","_bEdit","_bLoading","initBaseParsers","reqpath","sid","oncomplete","$","getJSON","parseScene","sobj","k","_jsonParsers","getSemanticNode","getSceneNode","child","nodes","edges","n","semid","S","SL","s","sphere","CL","semesh","_convexPoints","environment","env","pano","mainpano","setMainPanorama","PATH_COLLECTION","setMainPanoramaRotation","L","mainlight","direction","setMainLightDirection","_dMainL","intensity","shadows","toggleShadows","lps","lightprobes","auto","_bAutoLP","viewpoints","povs","setHomePOV","setPosition","setTarget","setFOV","setKeywords","keywords","scenegraph","sg","G","getOrCreateSceneNode","removeChildren","urls","Array","isArray","forEach","u","attachTo","shadowcast","setShadowCast","shadowreceive","toYup","setYup","transform","setRotation","setScale","parid","childid","semanticgraph","getOrCreateSemanticNode","createSemanticNode","spheres","SemFactory","createSphere","convexshapes","points","createConvexShape","parser","patch","mode","MODE_ADD","O","MODE_DEL","jstr","ajax","PATH_RESTAPI","contentType","dataType","success","r","COSINOIDAL_DIST","cos","POVtransitionDuration","STD_POV_TRANS_DURATION","init","_mode","setOrbitControl","_currPOV","_fromPOV","_reqPOV","homePOV","_tPOVcall","_tPOVprogress","_vDir","Quaternion","_motionAmt","_motionDir","getCurrentEyeLocation","isTransitioning","isOrbit","MODE_ORBIT","isFirstPerson","MODE_FP","isDevOri","MODE_DEVORI","XR","isPresenting","_cOrbit","_camOrbit","PerspectiveCamera","innerWidth","innerHeight","STD_NEAR","enableAll","OrbitControls","domElement","rotateSpeed","STD_ROT_SPEED_ORBIT","enablePan","enableDamping","dampingFactor","screenSpacePanning","enableZoom","minDistance","maxDistance","addEventListener","_bControlChange","_controls","_camera","syncCurrCamera","setFirstPersonControl","_cFirstPerson","_camFP","STD_ROT_SPEED_FP","setDeviceOrientationControl","_screenPointerCoords","_cDevOri","_camDevOri","DeviceOrientationControls","alphaOffset","setMotionAmount","setMotionDirection","stop","cam","updateProjectionMatrix","getFOV","syncCurrPOV","getCamera","getWorldPosition","getWorldQuaternion","getWorldDirection","ctrl","handlePOV","handleXRtransition","handlePOVtransition","handleMotion","controller0","negate","fv","multiplyScalar","_dt","_clock","elapsedTime","lerpVectors","MathUtils","lerp","_currPos","_fromPos","_reqPos","tgt","subVectors","normalize","FP_EPS","requestPOV","duration","requestPOVbyBound","T","E","radius","requestPOVbyNode","getBound","requestRetarget","point","normal","distanceTo","computeDefaultHome","dv","sceneBS","getRootScene","eye","computeAndRequestDefaultHome","requestHome","scope","reorder","enabled","deviceOrientation","screenOrientation","absolute","alphaOffsetDevice","alphaOffsetScreen","onDeviceOrientationChangeEvent","zee","euler","q0","q1","event","onDeviceOrientationAbsoluteChangeEvent","onScreenOrientationChangeEvent","orientation","setObjectQuaternion","Euler","sqrt","alpha","beta","gamma","orient","setFromEuler","multiply","setFromAxisAngle","connect","disconnect","removeEventListener","getDirection","degToRad","iOSOrientationPermission","DeviceOrientationEvent","requestPermission","permissionState","catch","error","webkitCompassHeading","getDirectionMap","_bPresenting","setReferenceSpaceType","setFramebufferScaleFactor","currSession","rig","gControllers","controller0pos","controller1pos","controller0dir","controller1dir","defaultSelectHandler","_queryDataScene","userHeight","STD_TELEP_DURATION","_hoveredUI","H","getUINode","session","onSessionEnded","setSession","getController","controller1","e","gamepad","gp","pose","hasPosition","_handleUISelection","setRefSpaceLocation","setupControllersUI","requestSession","optionalFeatures","onSessionStarted","end","CylinderBufferGeometry","translate","createUINode","disablePicking","getControllerGrip","Button","uiid","baseColor","switchColor","_bSwitched","container","ThreeMeshUI","Block","width","height","padding","borderRadius","backgroundColor","backgroundOpacity","fontFamily","fontTexture","justifyContent","alignContent","uiText","Text","content","fontSize","fontColor","_trigger","PlaneGeometry","SUI","STD_BTN_SIZE","text","mainSelector","getMaterial","setSelectorRadius","gPoints","buildInfoNode","bShowInfo","_labelScale","_labelScaleVR","infoNodeText","getSelectorRadius","infoNode","attachToRoot","infoContainer","getInfoNode","createToolbar","buttonlist","cont","m","button","_queryDataSem","orientToCamera","Avatar","uid","userid","username","message","bTalking","_tStateCall","_tStateDur","_tProgress","_currState","_tgtState","realize","avaMats","avatars","SphereGeometry","usermaterial","getAvatarMaterialByUID","smesh","usermeshnode","setCloneOnLoadHit","userlabelnode","labelcontainer","ucolorsdark","usernametext","usermessagetext","A","msg","D","cs","ts","slerp","handleStateTransition","address","location","origin","initMaterials","socket","_connected","avatarList","avaGroup","setInterval","sendState","USER_STATE_FREQ","_lastStateSent","ucolors","MM","sock","emit","REPLICATED_EVT","evhNetwork","isConnected","requestSceneEnter","sceneid","protocol","path","secure","rejectUnauthorized","io","connected","_registerSocketHandlers","_onConnected","setUsername","_username","touchAvatar","decodeState","requestStateTransition","uname","encodeState","Float32Array","binData","Int8Array","w","a8","a","cpov","lastPos","lastOri","dPos","dOri","angleTo","THRES_STATE_POS","THRES_STATE_ORI","getAvatar","loadRepresentation","clearAllAvatars","bConvexBuilding","convexPoints","convexNode","currConvexMesh","currSemNode","currMaterial","_numShapes","numPoints","geom","ConvexBufferGeometry","currSemesh","setVectorPrecision","setDefaultAndHighlightMaterials","offset","addConvexPoint","Object3D","FE","PATH_RES_ICONS","_bPopup","bPopupBlurBG","urlParams","URLSearchParams","search","_uiSetupBase","reqstr","PATH_RESTAPI_SCENE","uiAddButton","toggleFullScreen","isConnectionSecure","toggle","popupClose","html","idcontainer","iconid","onPress","htmlcode","append","addClass","removeClass","uiSwitchButton","popupQR","screenfull","isFullscreen","inputid","value","val","regReplace","RegExp","replace","auLib","switch","Audio","loop","htmlcontent","stopPropagation","fadeIn","setPixelRatio","render","_mainRoot","_bPauseQuery","resetPixelDensity","fadeOut","focusOn3DView","popupShow","QRCode","getElementById","RAD2DEG","DEG2RAD","PATH_MODS","PATH_THREE","PATH_DRACO_LIB","PATH_BASIS_LIB","PATH_MODELS","PATH_SCENES","SHADOWS_NEAR","SHADOWS_FAR","SHADOWS_SIZE","SHADOWS_RES","setPathCollection","setPathScenes","_setupBaseListeners","el","_onResize","_updateScreenMove","_onMouseWheel","Hammer","srcEvent","_handleQueries","defaultDoubleTapFromScreenCoords","_kModShift","_kModCtrl","key","max","restoreDefaultMaterial","highlight","aspect","setSize","preventDefault","deltaY","focus","_handleQueryScene","bFPtrans","currDir","feye","ftgt","hsn","_hoveredSemNode","profileDevice","Clock","WebGLRenderer","antialias","_stdpxd","outputEncoding","setAnimationLoop","_onFrame","capabilities","Cache","GLTFLoader","_dracoLoader","DRACOLoader","setDecoderPath","setDRACOLoader","_numReqLoad","initGraphs","_queryDataUI","_bQuerySemOcclusion","_bQueryNormals","Vector2","_rcScene","Raycaster","_rcSemantics","_rcUI","_registerRCS","renderPause","renderResume","_setupLoadManager","_loadManager","LoadingManager","onStart","itemsLoaded","itemsTotal","onLoad","onProgress","onError","setDefaultPixelDensity","getRootSemantics","getRootUI","shadowMap","addLightProbe","setNear","assignLightProbesByProximity","setTimeout","_mMainPano","updateLightProbes","Scene","background","setAsRoot","ambLight","AmbientLight","setBackgroundColor","bg","_indLP","LightProbeGenerator","fromCubeRenderTarget","tpano","_matMainPano","_gMainPano","fog","depthTest","frustumCulled","setMainPanoramaRadius","onAfterRender","DirectionalLight","_dMainLtgt","_dMainLdir","PCFSoftShadowMap","shadow","mapSize","camera","left","right","bottom","top","updateDirShadows","dt","getDelta","_fps","clientX","clientY","_rcRR","_rcHandlers","_handleQuerySemantics","_handleQueryUI","hitsnum","getControllerWorldLocation","getControllerWorldDirection","setFromCamera","_hitsScene","intersectObjects","distance","face","Matrix3","getNormalMatrix","applyMatrix3","getSceneQueriedPoint","getSceneQueriedDistance","getSceneQueriedNormal","_hitsSem","list","sp","_hitsUI","hui"],"mappings":"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","file":"ATON.min.js","sourceRoot":"..\\src","sourcesContent":["/*\r\n    ATON Node Class\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n//import Period from \"./ATON.period.js\";\r\n\r\n\r\n/**\r\nClass representing an ATON node\r\nConstructor allows to create different types (Scene nodes, semantic nodes and UI nodes)\r\n@class Node\r\n@example \r\nnew ATON.Node(\"someID\")\r\n*/\r\nclass Node extends THREE.Group {\r\n\r\nconstructor(id, type){\r\n    super();\r\n\r\n    this.type = type? type : ATON.NTYPES.SCENE;\r\n    \r\n    this.bPickable = true;\r\n\r\n    if (this.type === ATON.NTYPES.SCENE){\r\n        this._rootG = ATON._rootVisible;\r\n        this._nodes = ATON.snodes;\r\n        //this.period = undefined; // TODO: assign period object (read-only, centralized) - NOT USED FOR NOW\r\n    }\r\n    if (this.type === ATON.NTYPES.SEM){\r\n        this._rootG = ATON._rootSem;\r\n        this._nodes = ATON.semnodes;\r\n        //this.period = undefined;\r\n    }\r\n\r\n    if (this.type === ATON.NTYPES.UI){\r\n        this._rootG = ATON._rootUI;\r\n        this._nodes = ATON.uinodes;\r\n    }\r\n\r\n    // Register\r\n    this.as(id);\r\n\r\n    this.kwords = undefined;\r\n\r\n    this._bCloneOnLoadHit = true;\r\n\r\n    // Shadows\r\n    this.castShadow    = false;\r\n    this.receiveShadow = false;\r\n\r\n    // Local handlers\r\n    this.onHover  = undefined;\r\n    this.onLeave  = undefined;\r\n    this.onSelect = undefined;\r\n}\r\n\r\n/**\r\n(Re)assign node ID\r\n@param {string} id - the new ID\r\n@example\r\nmyNode.as(\"newID\")\r\n*/\r\nas(id){\r\n    if (id === undefined) return;\r\n    if (id === ATON.ROOT_NID) return;\r\n\r\n    this._nodes[id] = this;\r\n    this.nid  = id;\r\n    this.name = id;\r\n\r\n    return this;\r\n}\r\n\r\nsetAsRoot(){\r\n    this._nodes[ATON.ROOT_NID] = this;\r\n    this.nid = ATON.ROOT_NID;\r\n\r\n    return this;\r\n}\r\n\r\nsetCloneOnLoadHit(b){\r\n    this._bCloneOnLoadHit = b;\r\n    return this;\r\n}\r\n\r\n/**\r\nAdds a keyword to this node\r\n@param {string} kw - the keyword\r\n@example\r\nmyNode.addKeyword(\"heritage\").addKeyword(\"reconstruction\")\r\n*/\r\naddKeyword(kw){\r\n    if (this.kwords === undefined) this.kwords = [];\r\n    this.kwords.push(kw);\r\n\r\n    return this;\r\n}\r\n\r\n/**\r\nHide this node (and sub-graph), also invisible to queries (ray casting, picking)\r\n@example\r\nmyNode.hide()\r\n*/\r\nhide(){ \r\n    this.visible = false;\r\n    this.traverse((o) => { o.layers.disable(this.type); });\r\n}\r\n\r\n/**\r\nShow this node (and sub-graph). If pickable, becomes sensible to queries (ray casting)\r\n@example\r\nmyNode.show()\r\n*/\r\nshow(){ \r\n    this.visible = true;\r\n    if (this.bPickable) this.traverse((o) => { o.layers.enable(this.type); });\r\n    return this;\r\n}\r\n\r\n/**\r\nToggle node visibility. If visible, becomes invisible, and viceversa.\r\n@example\r\nmyNode.toggle()\r\n*/\r\ntoggle(b){\r\n    if (b === undefined){\r\n        if (this.visible) return this.hide();\r\n        else return this.show();\r\n    }\r\n\r\n    if (b) return this.show();\r\n    else return this.hide();\r\n}\r\n\r\n/**\r\nDisable this node for runtime queries (ray casters). Useful for instance on vegetation, etc...\r\n@example\r\nmyNode.load(\"somevegetation.gltf\").disablePicking()\r\n*/\r\ndisablePicking(){\r\n    this.bPickable = false;\r\n    this.traverse((o) => { o.layers.disable(this.type); });\r\n    return this;  \r\n}\r\n\r\n/**\r\nEnable this node for runtime queries (ray casters)\r\n@example\r\nmyNode.enablePicking()\r\n*/\r\nenablePicking(){\r\n    this.bPickable = true;\r\n    this.traverse((o) => { o.layers.enable(this.type); });\r\n    return this;\r\n}\r\n\r\n/**\r\nSet cascading material. Note this applies to this node and all children (even all those still loading)\r\n@param {THREE.Material} M - the Material\r\n@example\r\nmyNode.setMaterial( new THREE.MeshBasicMaterial({ transparent: true, opacity: 0.2, wireframe: true }) )\r\n*/\r\nsetMaterial(M){\r\n    this.userData.cMat = M;\r\n\r\n    this.traverse((o) => {\r\n        if (o.isMesh){\r\n            this.userData.cMat = M;\r\n            o.material = M;\r\n            //o.material.needsUpdate = true;\r\n            }\r\n    });\r\n\r\n    return this;\r\n}\r\ngetMaterial(){\r\n    return this.userData.cMat;\r\n}\r\n\r\n// Set default and highlight materials\r\nsetDefaultAndHighlightMaterials(matSTD, matHL){\r\n    this.userData.matSTD = matSTD;\r\n    this.userData.matHL  = matHL;\r\n\r\n    return this;\r\n}\r\nhighlight(){\r\n    if (this.userData.matHL) this.setMaterial(this.userData.matHL);\r\n    return this;\r\n}\r\nrestoreDefaultMaterial(){\r\n    if (this.userData.matSTD) this.setMaterial(this.userData.matSTD);\r\n    return this;\r\n}\r\n\r\n// Set cascading opacity\r\nsetOpacity(f){\r\n    this.traverse((o) => {\r\n        if (o.isMesh){\r\n            o.material.opacity = f;\r\n            //o.material.needsUpdate = true;\r\n        }\r\n    });\r\n\r\n    return this;\r\n}\r\n\r\n// FIXME: not working\r\nsetShadowCast(b){\r\n    this.castShadow = b;\r\n\r\n    this.traverse((o) => {\r\n        if (o.isMesh){\r\n            o.castShadow = b;\r\n        }\r\n    });\r\n\r\n    return this;\r\n};\r\nsetShadowReceive(b){\r\n    this.receiveShadow = b;\r\n\r\n    this.traverse((o) => {\r\n        if (o.isMesh){\r\n            o.receiveShadow = b;\r\n        }\r\n    });\r\n\r\n    return this;\r\n};\r\n\r\nsetEnvMap(envtex){\r\n    this.traverse((o) => {\r\n        if (o.isMesh){\r\n\t\t\to.material.envMap  = envtex;\r\n\t\t\t//o.material.combine = THREE.MultiplyOperation;\r\n            //o.material.needsUpdate = true;\r\n        }\r\n    });\r\n\r\n    return this;\r\n}\r\n\r\nassignLightProbe(LP){\r\n    this.traverse((o) => {\r\n        if (o.isMesh && o.geometry) ATON.Utils.assignLightProbeToMesh(LP, o);\r\n    });\r\n\r\n    return this;\r\n}\r\n\r\n// (re)assign LPs for each mesh depending on proximity\r\nassignLightProbesByProximity(){\r\n    if (ATON._lps.length === 0) return this;\r\n\r\n    this.traverse((o) => {\r\n        if (o.isMesh && o.geometry){\r\n            let c = new THREE.Vector3();\r\n            let bbox = new THREE.Box3().setFromObject(o).getCenter(c);\r\n\r\n            let cLP   = undefined;\r\n            let mdist = undefined;\r\n\r\n            for (let i in ATON._lps){\r\n                let LP = ATON._lps[i];\r\n                let d = c.distanceToSquared(LP.pos);\r\n\r\n                if (cLP === undefined || d < mdist){\r\n                    mdist = d;\r\n                    cLP = LP;\r\n                }\r\n            }\r\n\r\n            if (cLP) ATON.Utils.assignLightProbeToMesh(cLP, o);\r\n        }\r\n    });\r\n\r\n    return this;\r\n};\r\n\r\n// Find & update all LPs under this subgraph\r\n// FIXME: not working\r\nupdateLightProbes = ()=>{\r\n    this.traverse((o) => {\r\n        if (o.isMesh && o.geometry){\r\n            let LP = o.userData.LP;\r\n\r\n            if (LP !== undefined){\r\n                LP.update();\r\n                o.material.envMap = LP.getEnvTex();\r\n                //o.material.envMapIntensity = 5.0;\r\n                //console.log(\"x\");\r\n            }\r\n        }\r\n    });\r\n\r\n    return this;\r\n};\r\n\r\n// Deep clone\r\nduplicate(){\r\n    let C = this.clone();\r\n\r\n    C.traverse((o)=>{\r\n        if (o.isMesh){\r\n            o.material = o.material.clone();\r\n        }\r\n    });\r\n\r\n    return C;\r\n}\r\n\r\n\r\n// FIXME: xxx\r\ndelete(){\r\n    let p = this.parent;\r\n\r\n    if (p !== undefined && p.nid !== undefined) p.removeChild( this );\r\n}\r\n\r\nremoveChild(c){\r\n    if (c === undefined) return;\r\n\r\n    let nid = c.nid;\r\n    if (c.nid !== undefined) this._nodes[c.nid] = undefined;\r\n\r\n    c.parent = undefined;\r\n\r\n    c.traverse((o) => {\r\n        if (o.geometry) o.geometry.dispose();\r\n        if (o.material) o.material.dispose();\r\n    });\r\n\r\n    this.remove(c);\r\n\r\n    return this;\r\n}\r\n\r\nremoveChildren(){\r\n    let num = this.children.length;\r\n    for (let i=(num-1); i>=0; i--) this.removeChild(this.children[i]);\r\n\r\n    return this;\r\n}\r\n\r\n// Attach this node to parent by ID or object\r\n\r\n\r\n/**\r\nAttach this node to parent by proding ID (string) or node object\r\n@param {string} node - the parent node ID\r\n@example\r\nmyNode.attachTo(\"someGroupID\")\r\nmyNode.attachTo(myParentGroup)\r\n*/\r\nattachTo(node){\r\n    let N = (typeof node === 'string')? this._nodes[node] : node;\r\n    if (N){\r\n        N.add(this);\r\n        if (N.userData.cMat) this.userData.cMat = N.userData.cMat;\r\n        }\r\n    return N;\r\n}\r\n\r\n/**\r\nAttach this node to main root. This is usually mandatory in order to visualize the node and all its descendants.\r\nDepending on node type this will be the scene root (visible scene-graph), the semantic-graph root or UI root\r\n@example\r\nmyNode.attachToRoot()\r\n*/\r\nattachToRoot(){\r\n    this._rootG.add(this);\r\n    if (this._rootG.userData.cMat) this.userData.cMat = this._rootG.userData.cMat;\r\n    return this._rootG;\r\n}\r\n\r\n/**\r\nReturn bound of this node\r\n@example\r\nmyNode.getBound()\r\n*/\r\ngetBound(){\r\n    let bb = new THREE.Box3().setFromObject( this );\r\n    let bs = new THREE.Sphere();\r\n    bb.getBoundingSphere(bs);\r\n\r\n    return bs;\r\n}\r\n\r\nsetPosition(x,y,z){\r\n    if (x instanceof THREE.Vector3) this.position.copy(x);\r\n    else this.position.set(x,y,z);\r\n\r\n    return this;\r\n}\r\n\r\nsetScale(sx,sy,sz){\r\n    if (sx instanceof THREE.Vector3) this.scale.copy(sx);\r\n    else {\r\n        if (sy === undefined){ sy = sx; sz = sx; }\r\n        this.scale.set(sx,sy,sz);\r\n        }\r\n    \r\n    return this;\r\n}\r\n\r\nsetRotation(rx,ry,rz){\r\n    if (rx instanceof THREE.Vector3) this.rotation.copy(rx);\r\n    else this.rotation.set(rx,ry,rz);\r\n    \r\n    return this;\r\n}\r\n\r\norientToCamera(){\r\n    this.quaternion.copy( ATON.Nav._qOri );\r\n    return this;\r\n}\r\n\r\nsetYup(){\r\n    this.rotation.set(-1.57079632679,0.0,0.0);\r\n    return this;  \r\n}\r\n\r\n/**\r\nLoad a 3D model under this node, with optional onComplete handler.\r\nNote the system will take care of loading the resources in background, and will manage duplicate requests to same resources avoiding to waste bandwidth\r\n@param {string} url - the url of the 3D model\r\n@param {function} onComplete - the optional handler to be fired on completion\r\n@example\r\nmyNode.load(\"mymodel.gltf\", ()=>{ console.log(\"completed!\") })\r\n*/\r\nload(url, onComplete){\r\n    if (url === undefined) return this;\r\n\r\n    let N = this;\r\n\r\n    // Fire new request\r\n    //if (N.type === ATON.NTYPES.SCENE) ATON._assetReqNew(url);\r\n\r\n    // [C] Promise already requested\r\n    if ( N._bCloneOnLoadHit && ATON._assetsManager[url] !== undefined ){\r\n        ATON._assetsManager[url].then(( o ) => {\r\n            N.add( o.clone() );\r\n\r\n            //if (N.type === ATON.NTYPES.SCENE) ATON._assetReqComplete(url);\r\n            if (onComplete) onComplete();\r\n        });\r\n\r\n        console.log(\"HIT!\");\r\n        return N;\r\n    }\r\n\r\n    // Fire request\r\n    if (N.type === ATON.NTYPES.SCENE) ATON._assetReqNew(url);\r\n\r\n    let P = new Promise( ( resolve, reject ) => {\r\n        ATON._aLoader.load( url, (data)=>{\r\n            let model = data.scene || data.scene[0];\r\n\r\n            // Visit loaded model\r\n            ATON.Utils.modelVisitor(N, model);\r\n\r\n            N.add( model );\r\n\r\n            resolve(model);\r\n            console.log(\"Model \"+url+\" loaded\");\r\n            \r\n            if (N.type === ATON.NTYPES.SCENE) ATON._assetReqComplete(url);\r\n\r\n            if (onComplete) onComplete();\r\n        },\r\n        undefined,\r\n        (err)=>{\r\n            console.log(err);\r\n            //reject(model);\r\n\r\n            if (N.type === ATON.NTYPES.SCENE) ATON._assetReqComplete(url);\r\n            if (onComplete) onComplete();\r\n        });\r\n\r\n/*\r\n        ATON._aLoader.load( url+\"__LOD2-d.gltf\", (data)=>{\r\n            let model = data.scene || data.scene[0];\r\n            ATON._modelVisitor(model);\r\n\r\n            let C = new THREE.Vector3();\r\n            let bb = new THREE.Box3().setFromObject( model ).getCenter(C);\r\n            model.position.set(-C.x,-C.y,-C.z);\r\n\r\n            let lod = new THREE.LOD();\r\n            lod.position.set(C.x,C.y,C.z);\r\n            lod.matrixAutoUpdate = true;\r\n            lod.addLevel(model, 40.0);\r\n            N.add(lod);\r\n\r\n            //N.add( model );\r\n\r\n            resolve(model);\r\n            console.log(\"ATON model \"+url+\" loaded\");\r\n\r\n            ATON._aLoader.load( url+\"__LOD1-d.gltf\", (data2)=>{\r\n                let model2 = data2.scene || data2.scene[0];\r\n                ATON._modelVisitor(model2);\r\n\r\n                model2.position.set(-C.x,-C.y,-C.z);\r\n                \r\n                lod.addLevel(model2, 0.0);\r\n            });\r\n            \r\n            ATON._assetReqComplete(url);\r\n        });\r\n*/\r\n    });\r\n\r\n    // Register\r\n    if (N._bCloneOnLoadHit) ATON._assetsManager[url] = P;\r\n\r\n    return this;\r\n}\r\n\r\nexportAs( filename ){\r\n    ATON.Utils.exportNode(this, filename);\r\n\r\n    return this;\r\n}\r\n\r\nsetOnHover( h ){\r\n    this.onHover = f;\r\n    return this;\r\n}\r\nsetOnLeave( h ){\r\n    this.onLeave = f;\r\n    return this;\r\n}\r\nsetOnSelect( h ){\r\n    this.onSelect = f;\r\n    return this;\r\n}\r\n\r\n// Assign a period to this node\r\n// TODO: \r\n/*\r\nsetPeriod(p){\r\n    if (this.type === ATON.NTYPES.UI) return this; // not on UI nodes\r\n\r\n    let P = (typeof p === 'string')? ATON.periods[p] : p;\r\n    if (P === undefined) return this;\r\n\r\n    this.period = P;\r\n    return this;\r\n}\r\n\r\nfilterByPeriodID(id){\r\n    if (this.period === undefined) return this;\r\n\r\n    if (this.period.id !== id){\r\n        this.hide();\r\n        return this;\r\n        }\r\n    else {\r\n        this.show();\r\n        return this;\r\n    }\r\n\r\n    this.traverse((o) => {\r\n        if (o.period){\r\n            if (o.period.id === id) this.show();\r\n            else this.hide();\r\n        }\r\n    });\r\n\r\n    return this;\r\n}\r\n*/\r\n\r\n}\r\n\r\nexport default Node;","/*\r\n    ATON Viewpoint Class\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\n/**\r\nClass representing a Viewpoint (POV) in the 3D space, abstracting from device used (mobile, desktop or immersive XR).\r\nConstructor allows to assign the POV a unique ID (`string`)\r\n@class POV\r\n@example \r\nnew ATON.POV(\"myView\")\r\n*/\r\nclass POV {\r\n\r\nconstructor(id){\r\n    // Register\r\n    if (id !== undefined){\r\n        ATON.Nav.povlist[id] = this;\r\n        this.id = id;\r\n    }\r\n\r\n    this.pos    = new THREE.Vector3(1,0,0);\r\n    this.target = new THREE.Vector3(0,0,0);\r\n    this.up     = ATON.STD_UPVECTOR;\r\n    this.fov    = ATON.Nav.STD_FOV;\r\n\r\n    this.kwords = undefined;\r\n\r\n    this.nextPOV = undefined;\r\n    this.prevPOV = undefined;\r\n}\r\n\r\n/**\r\nSet eye position\r\n@example\r\nnew ATON.POV(\"myView\").setPosition(2.0,6.0,1.5)\r\n@example\r\nmypov.setPosition( new THREE.Vector3(2.0,6.0,1.5) )\r\n*/\r\nsetPosition(x,y,z){\r\n    if (x instanceof THREE.Vector3) this.pos.copy(x);\r\n    else this.pos.set(x,y,z);\r\n\r\n    return this;\r\n}\r\n\r\n/**\r\nSet target position\r\n@example\r\nnew ATON.POV(\"myView\").setTarget(8.0,6.0,1.5)\r\n@example\r\nmypov.setTarget( new THREE.Vector3(8.0,6.0,1.5) ).setPosition(2.0,6.0,1.5)\r\n*/\r\nsetTarget(x,y,z){\r\n    if (x instanceof THREE.Vector3) this.target.copy(x);\r\n    else this.target.set(x,y,z);\r\n\r\n    return this;\r\n}\r\n\r\n/**\r\nSet field of view (FOV) in degrees\r\n@param {number} f\r\n@example\r\nnew ATON.POV(\"myView\").setFOV(70.0)\r\n*/\r\nsetFOV(f){\r\n    this.fov = f;\r\n\r\n    return this;\r\n}\r\n\r\n/**\r\nAdd a keyword to this viewpoint\r\n@param {string} kw - the keyword\r\n@example\r\nnew ATON.POV(\"myView\").addKeyword(\"heritage\")\r\n*/\r\naddKeyword(kw){\r\n    if (this.kwords === undefined) this.kwords = [];\r\n    this.kwords.push(kw);\r\n\r\n    return this;\r\n}\r\n\r\nsetKeywords(kwarray){\r\n    this.kwords = kwarray;\r\n}\r\n\r\n/**\r\nSet an optional next POV\r\n@param {POV} pov - the next POV\r\n*/\r\nsetNextPOV(pov){\r\n    if (!pov) return;\r\n    this.nextPOV = pov;\r\n\r\n    return this;\r\n}\r\n\r\n/**\r\nSet an optional previous POV\r\n@param {POV} pov - the previous POV\r\n*/\r\nsetPrevPOV(pov){\r\n    if (!pov) return;\r\n    this.prevPOV = pov;\r\n\r\n    return this;\r\n}\r\n\r\n}\r\n\r\nexport default POV;","/*\r\n    ATON Light Probe Class\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\n/**\r\nClass representing a light probe (LP), can be static or updated at runtime\r\n@class LightProbe\r\n@param {number} res - Resolution in pixel of lightprobe (default 64)\r\n@param {number} near - Capture near (default 1m)\r\n@param {number} far - Capture far (default 1Km)\r\n@example \r\nnew ATON.LightProbe()\r\n*/\r\nclass LightProbe {\r\n\r\nconstructor(res, near, far){\r\n    this.pos = new THREE.Vector3(0,0,0);\r\n\r\n    this._res  = (res !== undefined)?  res  : 64;\r\n    this._near = (near !== undefined)? near : 1.0;\r\n    this._far  = (far !== undefined)?  far  : ATON.Nav.STD_FAR;\r\n/*\r\n    this._LPtarget0 = undefined;\r\n    this._LPtarget1 = undefined;\r\n\r\n    this._LP0 = undefined;\r\n    this._LP1 = undefined;\r\n\r\n    this._flipLP = false;\r\n*/\r\n    this._envtex = undefined;\r\n    this._prevCCtarget = undefined;\r\n\r\n    this._pmremGenerator = new THREE.PMREMGenerator(ATON._renderer);\r\n\r\n    //this.realize();\r\n}\r\n\r\n/*\r\nrealize(){\r\n    this._LPtarget0 = new THREE.WebGLCubeRenderTarget( this._res, {\r\n        format: THREE.RGBFormat,\r\n        generateMipmaps: true,\r\n        minFilter: THREE.LinearMipmapLinearFilter,\r\n        encoding: THREE.sRGBEncoding // prevent the material's shader from recompiling every frame\r\n    });\r\n\r\n    this._LPtarget1 = new THREE.WebGLCubeRenderTarget( this._res, {\r\n        format: THREE.RGBFormat,\r\n        generateMipmaps: true,\r\n        minFilter: THREE.LinearMipmapLinearFilter,\r\n        encoding: THREE.sRGBEncoding\r\n    });\r\n\r\n    this._LP0 = new THREE.CubeCamera( this._near, this._far, this._LPtarget0 );\r\n    this._LP1 = new THREE.CubeCamera( this._near, this._far, this._LPtarget1 );\r\n\r\n    return this;\r\n}\r\n*/\r\n\r\n/**\r\nSet LP position\r\n@example\r\nLP.setPosition(2.0,6.0,1.5)\r\n@example\r\nLP.setPosition( new THREE.Vector3(2.0,6.0,1.5) )\r\n*/\r\nsetPosition(x,y,z){\r\n    if (x instanceof THREE.Vector3) this.pos.copy(x);\r\n    else this.pos.set(x,y,z);\r\n\r\n    //if (this._LP0) this._LP0.position.copy(this.pos);\r\n    //if (this._LP1) this._LP1.position.copy(this.pos);\r\n\r\n    return this;\r\n}\r\n\r\nsetNear(near){\r\n    this._near = near;\r\n    return this;\r\n}\r\nsetFar(far){ \r\n    this._far = far;\r\n    return this;\r\n}\r\n\r\n/**\r\nUpdate LP capture. Typically called when all 3D models are loaded and arranged into the scene.\r\nCan be called at runtime or whenever there is some change in the 3D scene\r\n@example\r\nLP.update()\r\n*/\r\nupdate(){\r\n    if (this._envtex) this._envtex.dispose();\r\n    if (this._prevCCtarget) this._prevCCtarget.dispose();\r\n\r\n    let CCtarget = new THREE.WebGLCubeRenderTarget( this._res, {\r\n        format: THREE.RGBEFormat,\r\n        generateMipmaps: true,\r\n        minFilter: THREE.LinearMipmapLinearFilter,\r\n        encoding: THREE.sRGBEncoding // prevent the material's shader from recompiling every frame\r\n    });\r\n\r\n    let CC = new THREE.CubeCamera( this._near, this._far, CCtarget );\r\n    CC.position.copy(this.pos);\r\n\r\n    CC.update( ATON._renderer, ATON._rootVisibleGlobal );\r\n\r\n    this._envtex = CCtarget.texture;\r\n    \r\n/*\r\n    console.log(CC);\r\n    console.log(CCtarget);\r\n\r\n    let CCtargetX = new THREE.WebGLCubeRenderTarget( this._res, {\r\n        format: THREE.RGBFormat,\r\n        //generateMipmaps: true,\r\n        minFilter: THREE.LinearMipmapLinearFilter,\r\n        encoding: THREE.sRGBEncoding\r\n    });\r\n\r\n    let CCX = new THREE.CubeCamera( this._near, this._far, CCtargetX );\r\n    CCX.position.copy(this.pos);\r\n\r\n    CCX.update( ATON._renderer, ATON._rootVisible );\r\n    this._envtex = this._pmremGenerator.fromCubemap(CCtargetX.texture).texture;\r\n*/\r\n\r\n    this._prevCCtarget = CCtarget;\r\n\r\n\r\n/*\r\n    if (this._LP0 === undefined || this._LP1 === undefined) return this;\r\n\r\n    this._flipLP = !this._flipLP;\r\n    //ATON._flipLP = !ATON._flipLP;\r\n\r\n    if (this._flipLP){\r\n        this._LP0.update( ATON._renderer, ATON._mainRoot );\r\n        this._envtex = this._LPtarget0.texture;\r\n    }\r\n    else {\r\n        this._LP1.update( ATON._renderer, ATON._mainRoot );\r\n        this._envtex = this._LPtarget1.texture;\r\n    }\r\n*/\r\n    return this;\r\n}\r\n\r\n\r\ngetEnvTex(){\r\n    return this._envtex;\r\n}\r\n\r\nassignToNode(N){\r\n    if (N === undefined) return;\r\n    //TODO:\r\n}\r\n\r\n}\r\n\r\nexport default LightProbe;","/*\r\n    ATON Event Hub\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\n/**\r\nATON Event Hub\r\n@namespace EventHub\r\n*/\r\nlet EventHub = {};\r\n\r\n/**\r\nInitializes the component\r\n*/\r\nEventHub.init = ()=>{\r\n\r\n    EventHub.evLocal   = {};\r\n    EventHub.evNetwork = {};\r\n\r\n    // Expose\r\n    ATON.on                 = EventHub.on;\r\n    ATON.fireEvent          = EventHub.fireEvent;\r\n    ATON.clearEventHandlers = EventHub.clearEventHandlers\r\n};\r\n\r\n/**\r\nClear all event handlers for a given event\r\n@param {string} evtname - event name\r\n*/\r\nEventHub.clearEventHandlers = (evtname)=>{\r\n    //let evHandlers = (bNetwork)? EventHub.evNetwork : EventHub.evLocal;\r\n\r\n    EventHub.evLocal[evtname]   = [];\r\n    EventHub.evNetwork[evtname] = [];\r\n};\r\n\r\n// Execute all handlers from list with given data\r\nEventHub.executeHandlers = (ehList, data)=>{\r\n    if (!ehList) return;\r\n\r\n    for (let h = 0; h < ehList.length; h++) {\r\n        let handler = ehList[h];\r\n        if (handler) handler(data);\r\n    }\r\n};\r\n\r\n/**\r\nSubscribe to a given event, with local handler and optional network handler\r\n@param {string} evtname - event name\r\n@param {function} handlerLocal - local event handler\r\n@param {function} handlerNetwork - optional network (see VRoadcast) event handler\r\n@example\r\nATON.EventHub.on(\"myEvent\", function(data){ console.log(\"received local event\"); })\r\n*/\r\nEventHub.on = (evtname, handlerLocal, handlerNetwork)=>{\r\n    // Local event (default)\r\n    if (handlerLocal !== undefined){\r\n        let evhLocal = EventHub.evLocal;\r\n\r\n        if (evhLocal[evtname] === undefined) evhLocal[evtname] = []; // First time (event not registered)\r\n        evhLocal[evtname].push(handlerLocal);\r\n    }\r\n\r\n    // Received event (network)\r\n    if (handlerNetwork !== undefined){\r\n        ATON.VRoadcast.on(evtname, handlerNetwork);\r\n    }\r\n\r\n};\r\n\r\n/**\r\nFire a local (and optionally network) event, with data\r\n@param {string} evtname - event name\r\n@param {object} data - object containing data to be transmitted with this event\r\n@param {bool} bReplicate - if true, it will replicate (broadcast) the event to other connected peers in the same scene (see VRoadcast)\r\n@example\r\nATON.EventHub.on(\"myEvent\", function(data){ console.log(\"received local event\"); })\r\n*/\r\nEventHub.fireEvent = (evtname, data, bReplicate)=>{\r\n    let ehList = EventHub.evLocal[evtname];\r\n    EventHub.executeHandlers(ehList, data);\r\n\r\n    if (!bReplicate) return;\r\n    ATON.VRoadcast.fireEvent(evtname, data);\r\n};\r\n\r\nexport default EventHub;","/*\r\n    ATON Materials Hub\r\n    Centralized material manager\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\n/**\r\nATON Material Hub\r\n@namespace MatHub\r\n*/\r\nlet MatHub = {};\r\n\r\nMatHub.init = ()=>{\r\n    MatHub.materials = {};\r\n    MatHub.colors    = {};\r\n\r\n    MatHub.addDefaults();\r\n\r\n    MatHub._loader = new THREE.MaterialLoader();\r\n};\r\n\r\nMatHub.addDefaults = ()=>{\r\n\r\n    // Colors\r\n    MatHub.colors.white  = new THREE.Color(1,1,1);\r\n    MatHub.colors.black  = new THREE.Color(0,0,0);\r\n    MatHub.colors.green  = new THREE.Color(0,1,0);\r\n    MatHub.colors.yellow = new THREE.Color(1,1,0);\r\n    MatHub.colors.red    = new THREE.Color(1,0,0);\r\n    MatHub.colors.blue   = new THREE.Color(0,0,1);\r\n    MatHub.colors.orange = new THREE.Color(1,0.5,0);\r\n    \r\n    MatHub.colors.sem     = new THREE.Color(0,0,1);\r\n    MatHub.colors.darksem = new THREE.Color(0,0,0.1);\r\n\r\n    // Materials\r\n    MatHub.materials.fullyTransparent = new THREE.MeshBasicMaterial({ \r\n        transparent: true, \r\n        depthWrite: false, \r\n        opacity: 0.0\r\n    });\r\n    \r\n    // Selector\r\n    MatHub.materials.selector = new THREE.MeshBasicMaterial({\r\n        color: MatHub.colors.green,\r\n        transparent: true, \r\n        opacity: 0.2, \r\n        flatShading: true\r\n    });\r\n\r\n    // XR/VR ray\r\n    MatHub.materials.controllerRay = new THREE.MeshBasicMaterial({ \r\n        color: MatHub.colors.white, \r\n        transparent: true, \r\n        opacity: 0.2,\r\n        flatShading: true\r\n    });\r\n\r\n    // Semantic shapes\r\n    MatHub.materials.semanticShape = new THREE.MeshBasicMaterial({ \r\n        color: MatHub.colors.sem, \r\n        transparent: true,\r\n        depthWrite: false, \r\n        opacity: 0.1,\r\n        flatShading: true\r\n    });\r\n    MatHub.materials.semanticShapeHL = new THREE.MeshBasicMaterial({ \r\n        color: MatHub.colors.sem, \r\n        transparent: true,\r\n        depthWrite: false, \r\n        opacity: 0.3,\r\n        flatShading: true\r\n    });\r\n    MatHub.materials.semanticShapeEdit = new THREE.MeshBasicMaterial({ \r\n        color: MatHub.colors.orange, \r\n        transparent: true,\r\n        depthWrite: false, \r\n        opacity: 0.2,\r\n        flatShading: true\r\n    });\r\n};\r\n\r\nMatHub.addMaterial = (id, mat)=>{\r\n    if (MatHub.materials[id]){\r\n        console.log(\"MatHub: material \"+id+\" already registered\");\r\n        return;\r\n    }\r\n\r\n    MatHub.materials[id] = mat;\r\n};\r\n\r\nMatHub.loadMaterial = (id, jsonfile)=>{\r\n    MatHub._loader.load(jsonfile, (mat)=>{\r\n        MatHub.addMaterial(id, mat);\r\n    },\r\n    undefined,\r\n    (err)=>{\r\n        console.log(err);\r\n    });\r\n};\r\n\r\nMatHub.getMaterial = (id)=>{\r\n    return MatHub.materials[id];\r\n};\r\n\r\nexport default MatHub;","/*\r\n    ATON Utils\r\n    various utilities for device profiling, graph visiting, etc.\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\nlet Utils = {};\r\n\r\n\r\nUtils.init = ()=>{\r\n    // read-only object to inspect device capabilities\r\n    ATON.device = {};\r\n\r\n    Utils.geomUnitSphere = new THREE.SphereBufferGeometry( 1.0, 16, 16 );\r\n\r\n    // Export/Download utils\r\n    Utils.exporter = new THREE.GLTFExporter();\r\n    Utils._dlink = document.createElement('a');\r\n    Utils._dlink.style.display = 'none';\r\n    document.body.appendChild( Utils._dlink ); // Firefox workaround, see #6594\r\n\r\n    Utils.textureLoader = new THREE.TextureLoader();\r\n};\r\n\r\nUtils.isConnectionSecure = ()=>{\r\n    return window.isSecureContext;\r\n}\r\n\r\nUtils.isMobile = ()=>{\r\n    return ATON.device.isMobile;\r\n}\r\n\r\n// Profile device capabilities\r\nUtils.profileDevice = ()=>{\r\n\r\n    // Detect mobile\r\n    ATON.device.isMobile = false;\r\n    let detectMobile = ()=>{\r\n        if(/(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|ipad|iris|kindle|Android|Silk|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(navigator.userAgent)\r\n        || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(navigator.userAgent.substr(0,4))){\r\n            return true;\r\n            }\r\n\r\n        return false;\r\n    };\r\n\r\n    ATON.device.isMobile = detectMobile();\r\n\r\n    // XR\r\n    ATON.device.isXRsupported = false;\r\n    if ( 'xr' in navigator ){\r\n\t    navigator.xr.isSessionSupported( 'immersive-vr' ).then( function ( b ){\r\n            if (b){\r\n                ATON.device.isXRsupported = true;\r\n                console.log(\"WebXR supported\");\r\n                }\r\n            else {\r\n                ATON.device.isXRsupported = false;\r\n                console.log(\"WebXR NOT supported\");\r\n                }\r\n\t\t});\r\n    }\r\n};\r\n\r\n// Path utils\r\nUtils.getFileExtension = ( filepath )=>{\r\n\treturn filepath.substr(filepath.lastIndexOf('.')+1).toLowerCase();\r\n};\r\n\r\nUtils.getBaseFolder = ( filepath )=>{\r\n    var index  = filepath.lastIndexOf( '/' );\r\n    if ( index !== -1 ) return filepath.substring( 0, index + 1 );\r\n    \r\n    return '';\r\n};\r\n\r\nUtils.mergeObject = ( object )=>{\r\n    object.updateMatrixWorld( true );\r\n\r\n    const geometry = [];\r\n    object.traverse( c => {\r\n        if ( c.isMesh ){\r\n            const g = c.geometry;\r\n            g.applyMatrix4( c.matrixWorld );\r\n            geometry.push( g.toNonIndexed() );\r\n        }\r\n\r\n    });\r\n\r\n    const mergedGeometries = THREE.BufferGeometryUtils.mergeBufferGeometries( geometry, false );\r\n    const mergedGeometry   = THREE.BufferGeometryUtils.mergeVertices( mergedGeometries ).center();\r\n\r\n    const group = new THREE.Group();\r\n    const mesh = new THREE.Mesh( mergedGeometry );\r\n    group.add( mesh );\r\n    return group;\r\n};\r\n\r\n// Helper visitor routine\r\nUtils.modelVisitor = (parentNode, model)=>{\r\n    if (!model) return this;\r\n\r\n    //model = Utils.mergeObject(model);\r\n    \r\n    let N = parentNode;\r\n    let type = N.type; // Differentiate visit depending on node type\r\n\r\n    model.traverse( ( o ) => {\r\n\r\n        if (N.bPickable !== undefined){\r\n            if (N.bPickable) o.layers.enable(type);\r\n            else o.layers.disable(type);\r\n        }\r\n\r\n        if (o.isMesh){\r\n            //let numVertices = o.geometry.attributes.position.count;\r\n            //console.log(numVertices);\r\n\r\n            if (type === ATON.NTYPES.SCENE){\r\n                // TODO: \r\n                o.castShadow    = true; //N.castShadow;\r\n                o.receiveShadow = true; //N.receiveShadow;\r\n\r\n                // Build accelerated ray casting\r\n                if (o.geometry){\r\n                    o.geometry.computeBoundsTree();\r\n                    console.log(\"Computed BVH\");\r\n                }\r\n\r\n                // Ensure mipmapping is correct\r\n                if ( o.material.map !== null){\r\n                    //console.log(object.material.map);\r\n                    \r\n                    // Why do I have to do this?\r\n                    //o.material.map.generateMipmaps = false;\r\n                    o.material.map.anisotropy = ATON._maxAnisotropy;\r\n                    o.material.map.minFilter  = THREE.LinearMipmapLinearFilter;\r\n                    o.material.map.magFilter  = THREE.LinearFilter;\r\n                    //o.material.map.needsUpdate = true;\r\n                }\r\n            }\r\n\r\n            if (type === ATON.NTYPES.SEM){\r\n                o.material = ATON.MatHub.materials.semanticShape;\r\n            }\r\n\r\n            // Cascading material\r\n            if (N.userData.cMat){\r\n                o.material = N.userData.cMat;\r\n                //o.material.needsUpdate = true;\r\n            }\r\n        }\r\n    });\r\n};\r\n\r\nUtils.setVectorPrecision = (v, prec)=>{\r\n    v.x = parseFloat( v.x.toPrecision(prec) );\r\n    v.y = parseFloat( v.y.toPrecision(prec) );\r\n    v.z = parseFloat( v.z.toPrecision(prec) );\r\n    \r\n    return v;\r\n};\r\n\r\n// Export routines\r\nUtils.downloadBlob = (blob, filename)=>{\r\n    if (filename === undefined) return;\r\n\r\n    Utils._dlink.href = URL.createObjectURL( blob );\r\n    Utils._dlink.download = filename;\r\n    Utils._dlink.click();\r\n};\r\n\r\n// Download text ASCII data\r\nUtils.downloadText = ( str, filename )=>{\r\n    Utils.downloadBlob( new Blob( [ str ], { type: 'text/plain' } ), filename );\r\n};\r\n\r\n// Download json object\r\nUtils.downloadJSONobj = (jsonobj, filename)=>{\r\n    Utils.downloadText( JSON.stringify(jsonobj), filename );\r\n};\r\n\r\nUtils.downloadArrayBuffer = ( buffer, filename )=>{\r\n    Utils.downloadBlob( new Blob( [ buffer ], { type: 'application/octet-stream' } ), filename );\r\n};\r\n\r\n// Export ATON node (gltf or glb)\r\nUtils.exportNode = (node, filename)=>{\r\n    let ext = Utils.getFileExtension(filename);\r\n    if (ext.length < 1) return;\r\n\r\n    let bBin = (ext === \"glb\")? true : false;\r\n\r\n    let opts = {\r\n        //trs: true, // Export position, rotation and scale instead of matrix per node. Default is false\r\n        binary: bBin, // Export in binary (.glb) format, returning an ArrayBuffer. Default is false\r\n        //onlyVisible: false,\r\n        //truncateDrawRange: true\r\n    };\r\n\r\n    Utils.exporter.parse( node, ( output )=>{\r\n        if ( output instanceof ArrayBuffer ){\r\n            Utils.downloadArrayBuffer( output, filename);\r\n        }\r\n        else {\r\n            console.log( output );\r\n            Utils.downloadJSONobj(output, filename);\r\n        }\r\n    }, opts);\r\n};\r\n\r\nUtils.assignLightProbeToMesh = (LP, mesh)=>{\r\n    if (LP === undefined || mesh === undefined) return;\r\n\r\n    if (mesh.noLP) return;\r\n\r\n    mesh.userData.LP = LP;\r\n    //LP.update();\r\n    //mesh.material.envMap = LP.getEnvTex();\r\n    \r\n    //mesh.material.combine = THREE.MultiplyOperation;\r\n    //mesh.material.needsUpdate = true;\r\n\r\n    //console.log(mesh.userData);\r\n};\r\n\r\nUtils.createATONCube = (id)=>{\r\n    let g = new THREE.BoxBufferGeometry( 1,1,1 );\r\n\r\n    let mat = new THREE.MeshStandardMaterial();\r\n\r\n    Utils.textureLoader.load((ATON.PATH_RES+\"models/aton-cube.jpg\"), (tex)=>{\r\n        tex.encoding = THREE.sRGBEncoding;\r\n        mat.map = tex;\r\n    });\r\n\r\n    let N = ATON.createSceneNode(id);\r\n    N.add( new THREE.Mesh(g) );\r\n    N.setMaterial(mat);\r\n\r\n    N.enablePicking();\r\n    return N;\r\n};\r\n\r\n\r\nUtils.createATONCubePBR = (id)=>{\r\n    let g = new THREE.BoxBufferGeometry( 1,1,1 );\r\n\r\n    let mat = new THREE.MeshStandardMaterial();\r\n    mat.metalness = 1.0;\r\n\r\n    Utils.textureLoader.load((ATON.PATH_RES+\"models/aton-cube.jpg\"), (tex)=>{\r\n        tex.encoding = THREE.sRGBEncoding;\r\n        mat.map = tex;\r\n    });\r\n\r\n    Utils.textureLoader.load((ATON.PATH_RES+\"models/aton-cube-pbr.jpg\"), (tex)=>{\r\n        tex.encoding = THREE.sRGBEncoding;\r\n        mat.metalnessMap = tex;\r\n        mat.roughnessMap = tex;\r\n    });\r\n\r\n    Utils.textureLoader.load((ATON.PATH_RES+\"models/aton-cube-nrm.png\"), (tex)=>{\r\n        tex.encoding = THREE.sRGBEncoding;\r\n        mat.normalMap = tex;\r\n\r\n        //mat.bumpMap.anisotropy = ATON._maxAnisotropy;\r\n        //mat.bumpMap.minFilter  = THREE.LinearMipmapLinearFilter;\r\n        //mat.bumpMap.magFilter  = THREE.LinearFilter;\r\n    });\r\n\r\n    let N = ATON.createSceneNode(id);\r\n    N.add( new THREE.Mesh(g) );\r\n    N.setMaterial(mat);\r\n\r\n    N.enablePicking();\r\n    return N;\r\n};\r\n\r\n\r\nUtils.createGround = (texture, dx,dz)=>{\r\n    if (dx === undefined) dx = 1.0;\r\n    if (dz === undefined) dz = 1.0;\r\n\r\n    let g = new THREE.PlaneBufferGeometry( dx, dz );\r\n\r\n    let mat = new THREE.MeshStandardMaterial();\r\n    if (texture !== undefined) Utils.textureLoader.load(texture, (tex)=>{\r\n        tex.encoding = THREE.sRGBEncoding;\r\n        mat.map = tex;\r\n    });\r\n\r\n    let N = ATON.createSceneNode().rotateX(-Math.PI * 0.5);\r\n    N.add( new THREE.Mesh(g, mat) );\r\n    N.enablePicking();\r\n\r\n    return N;\r\n};\r\n\r\n\r\nexport default Utils;","/*\r\n    ATON Scene Hub\r\n    scene JSON routines\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\n/**\r\nATON Scene Hub\r\n@namespace SceneHub\r\n*/\r\nlet SceneHub = {};\r\n\r\nSceneHub.MODE_ADD = 0;\r\nSceneHub.MODE_DEL = 1;\r\n\r\n/**\r\nInitializes the component\r\n*/\r\nSceneHub.init = ()=>{\r\n    SceneHub.currID   = undefined; // Scene ID (sid)\r\n    SceneHub.currData = undefined; // holds compact object describing our ATON scene\r\n    SceneHub._bEdit   = false;     // edit mode (client can modify json on the server)\r\n\r\n    SceneHub._bLoading = false;\r\n\r\n    SceneHub.initBaseParsers();\r\n};\r\n\r\n/**\r\nThis enables/disables edit mode - i.e. changes to the scene are sent to server and become persistent\r\n@param {bool} b - true or false\r\n@example\r\nATON.SceneHub.setEditMode(true)\r\n*/\r\nSceneHub.setEditMode = (b)=>{\r\n    SceneHub._bEdit = b;\r\n    console.log(\"Edit mode:\"+b);\r\n};\r\n\r\n\r\n/**\r\n    Loads a scene by providing JSON path\r\n    @param {string} reqpath - JSON url\r\n    @param {string} sid - Scene ID\r\n    @param {function} oncomplete - Function to be called on complete\r\n    @example\r\n        ATON.SceneHub.load(\"http://path/to/scene.json\", \"sample\", ()=>{ console.log(\"Done!\"); });\r\n*/\r\nSceneHub.load = (reqpath, sid, oncomplete)=>{\r\n    //let args = reqpath.split(',');\r\n\r\n    SceneHub._bLoading = true;\r\n    console.log(\"Loading Scene: \"+sid);\r\n\r\n    return $.getJSON( reqpath, ( data )=>{\r\n        SceneHub.currData  = data;\r\n        SceneHub.currID    = sid; //scenejson.substring(scenejson.lastIndexOf('/')+1);\r\n        SceneHub._bLoading = false;\r\n\r\n        //console.log(ATON.currScene);\r\n\r\n        SceneHub.parseScene(data);\r\n\r\n        if (oncomplete) oncomplete();\r\n        ATON.fireEvent(\"SceneJSONLoaded\", sid);\r\n    });\r\n};\r\n\r\nSceneHub.parseScene = (sobj)=>{\r\n    sobj = (sobj === undefined)? SceneHub.currData : sobj;\r\n    if (sobj === undefined) return;\r\n\r\n    for (let k in sobj)\r\n        if (SceneHub._jsonParsers[k]) SceneHub._jsonParsers[k]( sobj[k] );\r\n};\r\n\r\nSceneHub.getJSONchildren = (nid, type)=>{\r\n    if (type === undefined) type = ATON.NTYPES.SCENE;\r\n\r\n    let P = undefined;\r\n    let children = [];\r\n\r\n    if (type === ATON.NTYPES.SEM)   P = ATON.getSemanticNode(nid);\r\n    if (type === ATON.NTYPES.SCENE) P = ATON.getSceneNode(nid);\r\n\r\n    if (P === undefined) return undefined;\r\n\r\n    for (let c in P.children){\r\n        let child = P.children[c];\r\n\r\n        if (child.nid !== undefined) children.push( child.nid );\r\n        }\r\n\r\n    return children;\r\n};\r\n\r\nSceneHub.getJSONgraphEdges = (type)=>{\r\n    if (type === undefined) type = ATON.NTYPES.SCENE;\r\n    let nodes = ATON.snodes;\r\n    \r\n    if (type === ATON.NTYPES.SEM) nodes = ATON.semnodes;\r\n    if (type === ATON.NTYPES.UI)  nodes = ATON.uinodes;\r\n\r\n    let edges = {};\r\n\r\n    for (let n in nodes){\r\n        let N = nodes[n];\r\n\r\n        //if (N && N.children) edges[n] = SceneHub.getJSONchildren(n, type);\r\n\r\n        let E = {};\r\n        if (N.parent && N.parent.nid){\r\n            //edges.push([N.parent.nid, N.nid]);\r\n            if (edges[N.parent.nid] === undefined) edges[N.parent.nid] = [];\r\n            edges[N.parent.nid].push(N.nid);\r\n            //edges[N.parent.nid].filter((v,i) => edges[N.parent.nid].indexOf(v) === i);\r\n        }\r\n    }\r\n\r\n    //console.log(edges);\r\n    return edges;\r\n};\r\n\r\nSceneHub.getJSONsemanticSpheresList = (semid)=>{\r\n    let S = ATON.getSemanticNode(semid);\r\n    if (S === undefined) return undefined;\r\n\r\n    let SL = [];\r\n\r\n    for (let s in S.children){\r\n        let sphere = S.children[s];\r\n        if (sphere.type){\r\n            SL.push([\r\n                parseFloat(sphere.position.x.toPrecision(3)), \r\n                parseFloat(sphere.position.y.toPrecision(3)), \r\n                parseFloat(sphere.position.z.toPrecision(3)), \r\n                parseFloat(sphere.scale.x.toPrecision(3))\r\n            ]);\r\n        }\r\n    }\r\n\r\n    return SL;\r\n};\r\n\r\nSceneHub.getJSONsemanticConvexShapes = (semid)=>{\r\n    let S = ATON.getSemanticNode(semid);\r\n    if (S === undefined) return undefined;\r\n\r\n    let CL = [];\r\n\r\n    for (let s in S.children){\r\n        let semesh = S.children[s];\r\n        if (semesh.userData._convexPoints){\r\n            CL.push(semesh.userData._convexPoints);\r\n        }\r\n    }\r\n\r\n    //console.log(CL);\r\n    \r\n    return CL;\r\n};\r\n\r\n// Top-level scene-JSON parsers\r\nSceneHub.initBaseParsers = ()=>{\r\n    SceneHub._jsonParsers = {};\r\n\r\n    // Environment\r\n    SceneHub._jsonParsers.environment = (env)=>{\r\n\r\n        let pano = env.mainpano;\r\n        if (env.mainpano){\r\n            if (pano.url) ATON.setMainPanorama(ATON.PATH_COLLECTION+pano.url);\r\n            if (pano.rotation) ATON.setMainPanoramaRotation(pano.rotation);\r\n        }\r\n\r\n        let L = env.mainlight;\r\n        if (L){\r\n            if (L.direction) ATON.setMainLightDirection( new THREE.Vector3(L.direction[0],L.direction[1],L.direction[2]) );\r\n\r\n            if (ATON._dMainL){\r\n                if (L.color)     ATON._dMainL.color = new THREE.Color(L.color[0],L.color[1],L.color[2]);\r\n                if (L.intensity) ATON._dMainL.intensity = L.intensity;\r\n\r\n                if (L.shadows) ATON.toggleShadows(L.shadows);\r\n            }\r\n        }\r\n\r\n        let lps = env.lightprobes;\r\n        if (lps){\r\n            if (lps.auto) ATON._bAutoLP = true;\r\n        }\r\n\r\n    };\r\n\r\n    // Viewpoints\r\n    SceneHub._jsonParsers.viewpoints = (povs)=>{\r\n        if (povs === undefined) return;\r\n\r\n        for (let p in povs){\r\n            let pov = povs[p];\r\n            \r\n            if (p === \"home\"){\r\n                ATON.Nav.setHomePOV( \r\n                    new ATON.POV()\r\n                    .setPosition(pov.position)\r\n                    .setTarget(pov.target)\r\n                    .setFOV(pov.fov)\r\n                    .setKeywords(pov.keywords)\r\n                );\r\n            }\r\n            else {\r\n                new ATON.POV(p)\r\n                .setPosition(pov.position)\r\n                .setTarget(pov.target)\r\n                .setFOV(pov.fov)\r\n                .setKeywords(pov.keywords);\r\n            }\r\n        }\r\n    };\r\n\r\n    // Visible scene-graph\r\n    SceneHub._jsonParsers.scenegraph = (sg)=>{\r\n        if (sg === undefined) return;\r\n\r\n        let nodes = sg.nodes;\r\n        let edges = sg.edges;\r\n\r\n        // nodes\r\n        for (let nid in nodes){\r\n            let N = nodes[nid]; // JSON node\r\n\r\n            //let G = ATON.createSceneNode(nid); // ATON node\r\n            let G = ATON.getOrCreateSceneNode(nid).removeChildren();\r\n            \r\n            // load models by urls list\r\n            let urls = N.urls;\r\n            if (urls){\r\n                if (Array.isArray(urls)){\r\n                    urls.forEach(u => {\r\n                        ATON.createSceneNode().load(ATON.PATH_COLLECTION+u).attachTo(G);\r\n                    });\r\n                }\r\n                else {\r\n                    G.load(ATON.PATH_COLLECTION+urls);\r\n                }\r\n            }\r\n\r\n            // FIXME: not working\r\n            if (N.shadowcast)    G.setShadowCast(N.shadowcast);\r\n            if (N.shadowreceive) G.setShadowCast(N.shadowreceive);\r\n\r\n            if (N.toYup) G.setYup();\r\n\r\n            // Transform node\r\n            let transform = N.transform;\r\n            if (transform){\r\n                if (transform.position) G.setPosition(transform.position[0],transform.position[1],transform.position[2]);\r\n                if (transform.rotation) G.setRotation(transform.rotation[0],transform.rotation[1],transform.rotation[2]);\r\n                if (transform.scale)    G.setScale(transform.scale[0],transform.scale[1],transform.scale[2]);\r\n            }\r\n        }\r\n\r\n        // Build graph through relationships\r\n        for (let parid in edges){\r\n            let children = edges[parid];\r\n\r\n            let P = ATON.getSceneNode(parid);\r\n\r\n            if (P !== undefined){\r\n                for (let c in children){\r\n                    let childid = children[c];\r\n                    let C = ATON.getSceneNode(childid);\r\n                    if (C !== undefined) C.attachTo(P);\r\n                }\r\n            }\r\n        }\r\n/*\r\n        for (let e = 0; e < edges.length; e++){\r\n            let E = edges[e];\r\n\r\n            let from = E[0];\r\n            let to   = E[1];\r\n\r\n            if (from && to){\r\n                let child = ATON.getSceneNode(to);\r\n                if (child) child.attachTo(from);\r\n            }\r\n        }\r\n*/\r\n    };\r\n\r\n    // Semantic scene-graph\r\n    SceneHub._jsonParsers.semanticgraph = (sg)=>{\r\n        if (sg === undefined) return;\r\n\r\n        let nodes = sg.nodes;\r\n        let edges = sg.edges;\r\n\r\n        // nodes\r\n        for (let nid in nodes){\r\n            let N = nodes[nid]; // JSON node\r\n\r\n            //let G = ATON.createSemanticNode(nid);\r\n            let G = ATON.getOrCreateSemanticNode(nid).removeChildren();\r\n            \r\n            // load shapes by urls list\r\n            let urls = N.urls;\r\n            if (urls){\r\n                if (Array.isArray(urls)){\r\n                    urls.forEach(u => {\r\n                        ATON.createSemanticNode().load(ATON.PATH_COLLECTION+u).attachTo(G);\r\n                    });\r\n                }\r\n                else {\r\n                    G.load(ATON.PATH_COLLECTION+urls);\r\n                }\r\n            }\r\n\r\n            if (N.toYup) G.setYup();\r\n\r\n            // Sphere [x,y,z, r]\r\n            let spheres = N.spheres;\r\n            if (Array.isArray(spheres)){\r\n                for (let s in spheres){\r\n                    let S = spheres[s];\r\n                    ATON.SemFactory.createSphere(nid, new THREE.Vector3(S[0],S[1],S[2]), S[3]);\r\n                }\r\n            }\r\n\r\n            let convexshapes = N.convexshapes;\r\n            if (Array.isArray(convexshapes)){\r\n                for (let s in convexshapes){\r\n                    let S = convexshapes[s];\r\n\r\n                    let points = [];\r\n                    for (let i=0; i<S.length; i+=3){\r\n                        let p = new THREE.Vector3(S[i],S[i+1],S[i+2]);\r\n                        points.push(p);\r\n                    }\r\n\r\n                    ATON.SemFactory.createConvexShape(nid, points);\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        // Build relationships\r\n        for (let parid in edges){\r\n            let children = edges[parid];\r\n\r\n            let P = ATON.getSemanticNode(parid);\r\n\r\n            if (P !== undefined){\r\n                for (let c in children){\r\n                    let childid = children[c];\r\n                    let C = ATON.getSemanticNode(childid);\r\n                    if (C !== undefined) C.attachTo(P);\r\n                }\r\n            }\r\n        }\r\n/*\r\n        for (let e = 0; e < edges.length; e++){\r\n            let E = edges[e];\r\n\r\n            let from = E[0];\r\n            let to   = E[1];\r\n\r\n            if (from && to){\r\n                let child = ATON.getSemanticNode(to);\r\n                if (child) child.attachTo(from);\r\n            }\r\n        }\r\n*/\r\n    };\r\n\r\n};\r\n\r\n// Adds custom scene parser to extend JSON scene\r\n// parser(k){ ... }\r\nSceneHub.addSceneParser = (k, parser)=>{\r\n    SceneHub._jsonParsers[k] = parser;\r\n};\r\n\r\n// [C] Sends JSON edit to server node\r\n// previously used: https://tools.ietf.org/html/rfc6902\r\nSceneHub.sendEdit = (patch, mode, onComplete)=>{\r\n    if (SceneHub._bLoading || !SceneHub._bEdit) return;\r\n    if (patch === undefined) return;\r\n    if (mode === undefined) mode = SceneHub.MODE_ADD;\r\n\r\n    let sid = SceneHub.currID;\r\n\r\n    let O = {};\r\n    O.sid  = sid;\r\n    O.data = patch;\r\n    O.mode = (mode === SceneHub.MODE_DEL)? \"DEL\" : \"ADD\";\r\n\r\n    let jstr = JSON.stringify(O);\r\n    //console.log(jstr);\r\n\r\n    $.ajax({\r\n        url: ATON.PATH_RESTAPI+\"edit/scene\",\r\n        type:\"POST\",\r\n        data: jstr,\r\n        contentType:\"application/json; charset=utf-8\",\r\n        dataType:\"json\",\r\n\r\n        // Update local scene JSON\r\n        // TODO: improve traffic by applying patch to local json, and NOT by receiving entire JSON \r\n        success: (r)=>{\r\n            if (r === undefined) return;\r\n            //console.log(r);\r\n            SceneHub.currData = r;\r\n            //console.log(ATON.currSceneHub.data);\r\n\r\n            if (onComplete) onComplete();\r\n        }\r\n    });\r\n};\r\n\r\n\r\nexport default SceneHub;","/*\r\n    ATON Navigation system\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\nconst COSINOIDAL_DIST = function(x){ return (1.0 - Math.cos(x * Math.PI)) / 2.0; };\r\n\r\n/**\r\nATON Navigation system\r\n@namespace Nav\r\n*/\r\nlet Nav = {};\r\n\r\n// Consts\r\nNav.STD_FOV  = 50.0;\r\nNav.STD_NEAR = 0.05;\r\nNav.STD_FAR  = 1000.0;\r\n\r\nNav.FP_EPS = 0.01;\r\nNav.STD_ROT_SPEED_ORBIT = 0.4;\r\nNav.STD_ROT_SPEED_FP    = -0.3;\r\nNav.STD_POV_TRANS_DURATION = 2.0;\r\n\r\n// Non-immersive navigation controls\r\nNav.MODE_ORBIT  = 0;\r\nNav.MODE_FP     = 1;\r\nNav.MODE_DEVORI = 2;\r\n\r\n\r\nNav.POVtransitionDuration = Nav.STD_POV_TRANS_DURATION;\r\n\r\n\r\n\r\n// Initialize nav system\r\nNav.init = ()=>{\r\n    Nav._mode = undefined;\r\n\r\n    // Setup controls\r\n    //Nav._camera = new THREE.PerspectiveCamera( Nav.STD_FOV, window.innerWidth / window.innerHeight, Nav.STD_NEAR, Nav.STD_FAR );\r\n    //Nav._camera.layers.enableAll();\r\n    //Nav._controls = new THREE.OrbitControls( Nav._camera, ATON._renderer.domElement);\r\n    Nav.setOrbitControl();\r\n\r\n    // POV data\r\n    Nav._currPOV = new ATON.POV(); // holds current viewpoint data (eye, target, etc...)\r\n    Nav._fromPOV = new ATON.POV(); // initial POV when requesting a transition\r\n    Nav._reqPOV  = new ATON.POV(); // requested POV for transition\r\n\r\n    Nav.homePOV = undefined; //new ATON.POV();\r\n\r\n    Nav._tPOVcall = -1.0;\r\n    Nav._tPOVprogress = 0.0;\r\n\r\n    Nav.povlist = {}; // This will handle registered POVs\r\n\r\n    // World direction and orientation (quat)\r\n    // consistent within standard and immersive XR\r\n    Nav._vDir = new THREE.Vector3(1,0,0);\r\n    Nav._qOri = new THREE.Quaternion();\r\n\r\n    // Motion\r\n    Nav._motionAmt = 0.0;\r\n    Nav._motionDir = new THREE.Vector3(0,1,0);\r\n};\r\n\r\n// Returns current eye location (consistent within standard and immersive XR sessions)\r\nNav.getCurrentEyeLocation = ()=>{\r\n    return Nav._currPOV.pos;\r\n};\r\n\r\n\r\nNav.isTransitioning = ()=>{\r\n    if (Nav._tPOVcall >= 0.0) return true;\r\n    return false;\r\n};\r\n\r\nNav.isOrbit = ()=>{ return (Nav._mode === Nav.MODE_ORBIT); };\r\nNav.isFirstPerson = ()=>{ return (Nav._mode === Nav.MODE_FP); };\r\nNav.isDevOri = ()=>{ return (Nav._mode === Nav.MODE_DEVORI); };\r\n\r\n// Set Orbit controls (default)\r\nNav.setOrbitControl = ()=>{\r\n    if (ATON.XR.isPresenting()) return;\r\n\r\n    Nav._mode = Nav.MODE_ORBIT;\r\n\r\n    // One-time setup\r\n    if (Nav._cOrbit === undefined){\r\n        Nav._camOrbit = new THREE.PerspectiveCamera( Nav.STD_FOV, window.innerWidth / window.innerHeight, Nav.STD_NEAR, Nav.STD_FAR );\r\n        Nav._camOrbit.layers.enableAll();\r\n\r\n        Nav._cOrbit = new THREE.OrbitControls( Nav._camOrbit, ATON._renderer.domElement);\r\n\r\n        let C = Nav._cOrbit;\r\n\r\n        C.rotateSpeed   = Nav.STD_ROT_SPEED_ORBIT;\r\n        C.enablePan     = true;\r\n        C.enableDamping = true;\r\n        C.dampingFactor = 0.1;\r\n        C.screenSpacePanning = true;\r\n        \r\n        C.enableZoom  = true;\r\n        C.minDistance = 0.03;\r\n        C.maxDistance = 1000.0;\r\n\r\n        C.addEventListener(\"change\", () => { Nav._bControlChange = true; });\r\n    }\r\n\r\n    Nav._controls = Nav._cOrbit;\r\n    //Nav._controls.target.copy(Nav._camera.position);\r\n    Nav._camera = Nav._camOrbit;\r\n    \r\n    Nav._controls.update();\r\n    if (Nav._currPOV) Nav.syncCurrCamera();\r\n};\r\n\r\n// Set FP controls\r\nNav.setFirstPersonControl = ()=>{\r\n    if (ATON.XR.isPresenting()) return;\r\n\r\n    Nav._mode = Nav.MODE_FP;\r\n\r\n    // One-time setup\r\n    if (Nav._cFirstPerson === undefined){\r\n        Nav._camFP = new THREE.PerspectiveCamera( Nav.STD_FOV, window.innerWidth / window.innerHeight, Nav.STD_NEAR, Nav.STD_FAR );\r\n        Nav._camFP.layers.enableAll();\r\n\r\n        Nav._cFirstPerson = new THREE.OrbitControls( Nav._camFP, ATON._renderer.domElement);\r\n\r\n        let C = Nav._cFirstPerson;\r\n\r\n        C.enableZoom  = false;\r\n        C.enablePan   = false;\r\n        C.rotateSpeed = Nav.STD_ROT_SPEED_FP;\r\n        \r\n        C.enableDamping = true;\r\n        C.dampingFactor = 0.1;\r\n        //C.screenSpacePanning = true;\r\n\r\n        C.target.copy(Nav._camera.position);\r\n\r\n        C.minDistance = 0.05;\r\n        C.maxDistance = 0.05;\r\n    }\r\n\r\n    Nav._controls = Nav._cFirstPerson;\r\n    //Nav._controls.target.copy(Nav._camera.position);\r\n    Nav._camera = Nav._camFP;\r\n\r\n    Nav._controls.update();\r\n    if (Nav._currPOV) Nav.syncCurrCamera();\r\n/*\r\n    if (Nav._controls) ATON._controls.dispose();\r\n    ATON._controls = new THREE.FirstPersonControls( ATON._camera, ATON._renderer.domElement);\r\n    ATON._controls.lookSpeed = 0.1;\r\n    ATON._controls.movementSpeed = 10;\r\n    ATON._controls.noFly = true;\r\n    ATON._controls.lookVertical = false;\r\n\r\n    //ATON._camera.position.set( 20.0, 5.0, 0 );\r\n    ATON._controls.lookAt(0,4,0);\r\n\r\n    ATON._controls.update();\r\n    console.log(ATON._controls);\r\n*/\r\n};\r\n\r\n// Set DevOri controls\r\nNav.setDeviceOrientationControl = ()=>{\r\n    if (!ATON.Utils.isMobile()) return;\r\n\r\n    Nav._mode = Nav.MODE_DEVORI;\r\n    ATON._screenPointerCoords.set(0.0,0.0);\r\n\r\n    // One-time setup\r\n    if (Nav._cDevOri === undefined){\r\n        Nav._camDevOri = new THREE.PerspectiveCamera( Nav.STD_FOV, window.innerWidth / window.innerHeight, Nav.STD_NEAR, Nav.STD_FAR );\r\n        Nav._camDevOri.layers.enableAll();\r\n\r\n        Nav._cDevOri = new THREE.DeviceOrientationControls(Nav._camDevOri, ATON._renderer.domElement);\r\n        //Nav._cDevOri = new Nav.DeviceOrientationControls(Nav._camDevOri, ATON._renderer.domElement);\r\n\r\n        Nav._cDevOri.alphaOffset = 0.0; //The alpha offset in radians\r\n    }\r\n\r\n    Nav._controls = Nav._cDevOri;\r\n    Nav._camera   = Nav._camDevOri;\r\n\r\n    Nav._controls.update();\r\n    if (Nav._currPOV) Nav.syncCurrCamera();\r\n};\r\n\r\n\r\nNav.setMotionAmount = (f)=>{\r\n    Nav._motionAmt = f;\r\n};\r\n\r\nNav.setMotionDirection = (v)=>{\r\n    Nav._motionDir.copy(v);\r\n}\r\n\r\nNav.stop = ()=>{\r\n    Nav._motionAmt = 0.0;\r\n};\r\n\r\n// FoV\r\nNav.setFOV = (f)=>{\r\n    if (ATON.XR.isPresenting()) return; // skip for immersive sessions\r\n\r\n    Nav._currPOV.fov = f;\r\n\r\n    let cam = Nav._camera;\r\n    cam.fov = f;\r\n    cam.updateProjectionMatrix();\r\n};\r\n\r\nNav.getFOV = ()=>{\r\n    return Nav._currPOV.fov;\r\n};\r\n\r\n\r\n// Retrieve currPOV from camera and controls\r\nNav.syncCurrPOV = ()=>{\r\n    if (ATON.XR.isPresenting()){\r\n        \r\n        let C = ATON._renderer.xr.getCamera(Nav._camera);\r\n        C.getWorldPosition( Nav._currPOV.pos );\r\n        C.getWorldQuaternion( Nav._qOri );\r\n        C.getWorldDirection( Nav._vDir );\r\n        //console.log(Nav._hmdPos);\r\n\r\n        //ATON.XR.hmdPos.copy(Nav._currPOV.pos);\r\n        //ATON.XR.hmdDir.copy(Nav._vDir);\r\n        \r\n        //ATON._renderer.xr.getCamera(Nav._camera);\r\n        //ATON._renderer.xr.getCamera(Nav._camera).getWorldDirection(Nav._vDir);\r\n        //Nav._camera.getWorldDirection(Nav._vDir);\r\n        \r\n        //Nav._currPOV.pos.copy(Nav._camera.position);\r\n        return;\r\n    }\r\n\r\n    let ctrl  = Nav._controls;\r\n    let cam   = Nav._camera;\r\n\r\n    cam.getWorldDirection(Nav._vDir);\r\n    cam.getWorldQuaternion(Nav._qOri);\r\n\r\n    if (Nav._mode === Nav.MODE_DEVORI){\r\n        Nav._currPOV.pos.copy(cam.position);\r\n        return;\r\n    }\r\n\r\n    if (Nav._mode === Nav.MODE_FP){\r\n        Nav._currPOV.pos.copy(ctrl.target);\r\n\r\n        Nav._currPOV.target.x = Nav._currPOV.pos.x + Nav._vDir.x; //ctrl.target.x - cam.position.x;\r\n        Nav._currPOV.target.y = Nav._currPOV.pos.y + Nav._vDir.y; //ctrl.target.y - cam.position.y;\r\n        Nav._currPOV.target.z = Nav._currPOV.pos.z + Nav._vDir.z; //ctrl.target.z - cam.position.z;\r\n        return;\r\n    }\r\n    \r\n    Nav._currPOV.pos.copy(cam.position);\r\n    Nav._currPOV.target.copy(ctrl.target);\r\n};\r\n\r\n// After syncCurrPOV and before updateCamera, we maniuplate currPOV\r\n//==================================================================================\r\nNav.handlePOV = ()=>{\r\n    //console.log(Nav._currPOV.pos);\r\n\r\n    if (ATON.XR.isPresenting()) Nav.handleXRtransition();\r\n    else Nav.handlePOVtransition();\r\n\r\n    Nav.handleMotion();\r\n\r\n    //if (ATON.XR.isPresenting()) console.log(ATON._renderer.xr);\r\n\r\n    // Handle constraints\r\n\r\n};\r\n\r\nNav.handleMotion = ()=>{\r\n    if (Nav.isTransitioning()) return;\r\n\r\n    if (Nav._motionAmt != 0.0){\r\n\r\n        //if ()\r\n\r\n\r\n        if (ATON.XR.controller0 && ATON.XR.controller0.visible){\r\n            ATON.XR.controller0.getWorldDirection(Nav._motionDir);\r\n            Nav._motionDir.negate();\r\n            }\r\n        else Nav._motionDir.copy(Nav._vDir);\r\n\r\n        let fv = Nav._motionDir.clone();\r\n        fv.multiplyScalar(Nav._motionAmt * ATON._dt);\r\n\r\n        Nav._currPOV.pos.add(fv);\r\n        Nav._currPOV.target.add(fv); // check if needed\r\n    }\r\n};\r\n\r\nNav.handlePOVtransition = ()=>{\r\n    if (Nav._tPOVcall < 0.0) return;\r\n\r\n    if (Nav.POVtransitionDuration <= 0.0) Nav._tPOVprogress = 1.0;\r\n    else Nav._tPOVprogress = (ATON._clock.elapsedTime - Nav._tPOVcall) / Nav.POVtransitionDuration;\r\n\r\n    // End\r\n    if (Nav._tPOVprogress >= 1.0){\r\n\r\n        Nav._tPOVcall = -1.0;\r\n        //Nav._controls.enabled = true;\r\n\r\n        Nav._currPOV.pos.copy(Nav._reqPOV.pos);\r\n        Nav._currPOV.target.copy(Nav._reqPOV.target);\r\n        Nav._currPOV.fov = Nav._reqPOV.fov;\r\n\r\n        ATON.fireEvent(\"POVTransitionCompleted\", Nav._reqPOV.id);\r\n        return;\r\n    }\r\n\r\n    Nav._tPOVprogress = COSINOIDAL_DIST(Nav._tPOVprogress);\r\n\r\n    Nav._currPOV.pos.lerpVectors(Nav._fromPOV.pos, Nav._reqPOV.pos, Nav._tPOVprogress);\r\n    Nav._currPOV.target.lerpVectors(Nav._fromPOV.target, Nav._reqPOV.target, Nav._tPOVprogress);\r\n\r\n    if (!Nav._fromPOV.fov || !Nav._reqPOV.fov) return;\r\n    Nav._currPOV.fov = THREE.MathUtils.lerp(Nav._fromPOV.fov, Nav._reqPOV.fov, Nav._tPOVprogress);\r\n\r\n    //console.log(Nav._camera);\r\n\r\n    Nav._camera.fov = Nav._currPOV.fov;\r\n    Nav._camera.updateProjectionMatrix();\r\n};\r\n\r\n// Immersive XR transitions\r\nNav.handleXRtransition = ()=>{\r\n    if (Nav._tPOVcall < 0.0) return;\r\n\r\n    if (Nav.POVtransitionDuration <= 0.0) Nav._tPOVprogress = 1.0;\r\n    else Nav._tPOVprogress = (ATON._clock.elapsedTime - Nav._tPOVcall) / Nav.POVtransitionDuration;\r\n\r\n    // End\r\n    if (Nav._tPOVprogress >= 1.0){\r\n\r\n        Nav._tPOVcall = -1.0;\r\n        //Nav._controls.enabled = true;\r\n\r\n        //ATON.XR.setRefSpaceLocation(Nav._reqXRpos);\r\n\r\n        console.log(\"XR height\"+ATON.XR._currPos.y);\r\n        console.log(\"HMD height\"+Nav._currPOV.pos.y);\r\n\r\n        ATON.fireEvent(\"POVTransitionCompleted\", Nav._reqPOV.id);\r\n        return;\r\n    }\r\n\r\n    ATON.XR._currPos.lerpVectors(ATON.XR._fromPos, ATON.XR._reqPos, Nav._tPOVprogress);\r\n    //ATON.XR._currPos.lerpVectors(Nav._fromPOV.pos, Nav._reqPOV.pos, Nav._tPOVprogress);\r\n\r\n};\r\n\r\n\r\n\r\n\r\n// Update internal camera from currPOV \r\nNav.syncCurrCamera = ()=>{\r\n    let ctrl  = Nav._controls;\r\n    let cam   = Nav._camera;\r\n    \r\n    let pos = Nav._currPOV.pos;\r\n    let tgt = Nav._currPOV.target;\r\n\r\n    // We are in VR\r\n    if (ATON.XR.isPresenting()){\r\n        ///let vrcam = ATON.XR.rig;\r\n        ///vrcam.position.copy(pos);\r\n        \r\n        ///ATON.XR.setRefSpaceLocation(pos);\r\n\r\n        //let C = ATON._renderer.xr.getCamera(cam);\r\n        //C.getWorldDirection(Nav._vDir);\r\n        return;\r\n    }\r\n\r\n    if (Nav._mode === Nav.MODE_DEVORI){\r\n        cam.position.copy(pos);\r\n        return;\r\n    }\r\n\r\n    // Common controls\r\n    //let d = new THREE.Vector3();\r\n    Nav._vDir.subVectors(tgt, pos);\r\n    Nav._vDir.normalize();\r\n\r\n    if (Nav._mode === Nav.MODE_FP){\r\n        ctrl.target.copy(pos);\r\n\r\n        cam.position.x = ctrl.target.x - (Nav._vDir.x * Nav.FP_EPS);\r\n        cam.position.y = ctrl.target.y - (Nav._vDir.y * Nav.FP_EPS);\r\n        cam.position.z = ctrl.target.z - (Nav._vDir.z * Nav.FP_EPS);\r\n    }\r\n    else {\r\n        cam.position.copy(pos);\r\n        ctrl.target.copy(tgt);\r\n    }\r\n};\r\n\r\n// Main update routine\r\nNav.update = ()=>{\r\n\r\n    //Nav._bXR = ATON.XR.isPresenting();\r\n\r\n    Nav.syncCurrPOV();\r\n    Nav.handlePOV();\r\n    Nav.syncCurrCamera();\r\n};\r\n\r\n\r\n// Request transition to viewpoint (POV)\r\nNav.requestPOV = (pov, duration)=>{\r\n    if (ATON._tPOVcall >= 0.0) return; // already requested\r\n\r\n    ATON.fireEvent(\"POVTransitionRequested\", pov.id);\r\n\r\n    if (duration !== undefined) Nav.POVtransitionDuration = duration;\r\n    \r\n    //Nav._controls.enabled = false;\r\n\r\n    Nav._tPOVcall = ATON._clock.elapsedTime;\r\n    \r\n    if (ATON.XR.isPresenting()){\r\n        Nav._reqPOV.pos.copy(pov.pos? pov.pos : Nav._currPOV.pos);\r\n        Nav._fromPOV.pos.copy(Nav._currPOV.pos);\r\n\r\n        ATON.XR._reqPos.copy(pov.pos? pov.pos : Nav._currPOV.pos);\r\n        ATON.XR._fromPos.copy(ATON.XR._currPos);\r\n    }\r\n    else {\r\n        Nav._reqPOV.pos.copy(pov.pos? pov.pos : Nav._currPOV.pos);\r\n        Nav._reqPOV.target.copy( pov.target? pov.target : Nav._currPOV.target);\r\n        Nav._reqPOV.fov = pov.fov? pov.fov : Nav._currPOV.fov;\r\n\r\n        Nav._fromPOV.pos.copy(Nav._currPOV.pos);\r\n        Nav._fromPOV.target.copy(Nav._currPOV.target);\r\n        Nav._fromPOV.fov = Nav._currPOV.fov;\r\n    }\r\n};\r\n\r\nNav.requestPOVbyBound = (bs, duration)=>{\r\n    if (bs === undefined) return;\r\n\r\n    let T = new THREE.Vector3();\r\n    let E = new THREE.Vector3();\r\n\r\n    T.copy(bs.center);\r\n    \r\n    let r = bs.radius * 2.5;\r\n    E.x = T.x - (r * Nav._vDir.x);\r\n    E.y = T.y - (r * Nav._vDir.y);\r\n    E.z = T.z - (r * Nav._vDir.z);\r\n\r\n    let pov = new ATON.POV().setPosition(E).setTarget(T);    \r\n    Nav.requestPOV(pov, duration);\r\n};\r\n\r\nNav.requestPOVbyNode = (n, duration)=>{\r\n    if (n === undefined) return;\r\n    \r\n    let bs = n.getBound();\r\n\r\n    Nav.requestPOVbyBound(bs,duration);\r\n};\r\n\r\nNav.requestRetarget = (point, normal, duration)=>{\r\n    let M = new THREE.Vector3();\r\n    if (normal === undefined){\r\n        M.lerpVectors(point, Nav._currPOV.pos, 0.8);\r\n    }\r\n    else {\r\n        let d = point.distanceTo(Nav._currPOV.pos);\r\n        d *= 0.5;\r\n        M.x = point.x + (normal.x * d);\r\n        M.y = point.y + (normal.y * d);\r\n        M.z = point.z + (normal.z * d);\r\n    }\r\n\r\n    let pov = new ATON.POV().setPosition(M).setTarget(point).setFOV(Nav._currPOV.fov);\r\n    console.log(pov);\r\n    \r\n    Nav.requestPOV(pov, duration);\r\n};\r\n\r\n// Typically after all assets are loaded\r\nNav.computeDefaultHome = (dv)=>{\r\n    if (dv === undefined) dv = new THREE.Vector3(1,0.7,1);\r\n\r\n    let sceneBS = ATON.getRootScene().getBound();\r\n\r\n    let eye = new THREE.Vector3(\r\n        sceneBS.center.x + (sceneBS.radius * dv.x * 1.5), \r\n        sceneBS.center.y + (sceneBS.radius * dv.y * 1.5), \r\n        sceneBS.center.z + (sceneBS.radius * dv.z * 1.5)\r\n    );\r\n\r\n    Nav.homePOV = new ATON.POV().setPosition(eye).setTarget(sceneBS.center);\r\n};\r\n\r\nNav.setHomePOV = (pov)=>{\r\n    Nav.homePOV = pov;\r\n};\r\n\r\nNav.computeAndRequestDefaultHome = (duration, dv)=>{\r\n    Nav.computeDefaultHome(dv);\r\n    Nav.requestPOV(Nav.homePOV, duration);\r\n};\r\n\r\nNav.requestHome = (duration)=>{\r\n    Nav.requestPOV(Nav.homePOV, duration);\r\n};\r\n\r\n\r\n\r\n// Mobile devori (modified for absolute compass - UNSTABLE)\r\n/**\r\n * @author richt / http://richt.me\r\n * @author WestLangley / http://github.com/WestLangley\r\n *\r\n * W3C Device Orientation control (http://w3c.github.io/deviceorientation/spec-source-orientation.html)\r\n */\r\nNav.DeviceOrientationControls = function ( object ) {\r\n    let scope = this;\r\n\r\n    this.object = object;\r\n    this.object.rotation.reorder( 'YXZ' );\r\n    this.enabled = true;\r\n\r\n    this.deviceOrientation = {};\r\n    this.screenOrientation = 0;\r\n\r\n    this.alphaOffset = 0; // radians\r\n    this.absolute = false;\r\n    this.alphaOffsetDevice = undefined;\r\n    this.alphaOffsetScreen = undefined;\r\n\r\n    let onDeviceOrientationChangeEvent = function ( event ) {\r\n        if(scope.absolute) return;\r\n        scope.deviceOrientation = event;\r\n    };\r\n\r\n    let onDeviceOrientationAbsoluteChangeEvent = function ( event ) {\r\n        scope.deviceOrientation = event;\r\n        scope.absolute = true;\r\n    };\r\n\r\n    let onScreenOrientationChangeEvent = function () {\r\n        scope.screenOrientation = window.orientation || 0;\r\n    };\r\n\r\n    // The angles alpha, beta and gamma form a set of intrinsic Tait-Bryan angles of type Z-X'-Y''\r\n    let setObjectQuaternion = function () {\r\n        let zee = new THREE.Vector3( 0, 0, 1 );\r\n        let euler = new THREE.Euler();\r\n\r\n        let q0 = new THREE.Quaternion();\r\n        let q1 = new THREE.Quaternion( - Math.sqrt( 0.5 ), 0, 0, Math.sqrt( 0.5 ) ); // - PI/2 around the x-axis\r\n\r\n        return function ( quaternion, alpha, beta, gamma, orient ) {\r\n            euler.set( beta, alpha, - gamma, 'YXZ' ); // 'ZXY' for the device, but 'YXZ' for us\r\n            quaternion.setFromEuler( euler ); // orient the device\r\n            quaternion.multiply( q1 ); // camera looks out the back of the device, not the top\r\n            quaternion.multiply( q0.setFromAxisAngle( zee, - orient ) ); // adjust for screen orientation\r\n        };\r\n\r\n    }();\r\n\r\n    this.connect = function () {\r\n        onScreenOrientationChangeEvent(); // run once on load\r\n\r\n        window.addEventListener( 'orientationchange', onScreenOrientationChangeEvent, false );\r\n        window.addEventListener( 'deviceorientation', onDeviceOrientationChangeEvent, false );\r\n        window.addEventListener( 'deviceorientationabsolute', onDeviceOrientationAbsoluteChangeEvent, false );\r\n\r\n        scope.enabled = true;\r\n    };\r\n\r\n    this.disconnect = function () {\r\n        window.removeEventListener( 'orientationchange', onScreenOrientationChangeEvent, false );\r\n        window.removeEventListener( 'deviceorientation', onDeviceOrientationChangeEvent, false );\r\n        window.removeEventListener( 'deviceorientationabsolute', onDeviceOrientationAbsoluteChangeEvent, false );\r\n\r\n        scope.enabled = false;\r\n    };\r\n\r\n    this.update = function () {\r\n        if ( scope.enabled === false ) return;\r\n\r\n        let device;\r\n        device = scope.deviceOrientation;\r\n\r\n        if ( device ) {\r\n            let alpha = this.getDirection() ? THREE.Math.degToRad( this.getDirection() ) + scope.alphaOffset : 0; // Z\r\n            let beta = device.beta ? THREE.Math.degToRad( device.beta ) : 0; // X'\r\n\r\n            let gamma = device.gamma ? THREE.Math.degToRad( device.gamma ) : 0; // Y''\r\n            let orient = scope.screenOrientation ? THREE.Math.degToRad( scope.screenOrientation ) : 0; // O\r\n\r\n            setObjectQuaternion( scope.object.quaternion, alpha, beta, gamma, orient );\r\n        }\r\n\r\n    };\r\n\r\n    this.dispose = ()=>{\r\n        scope.disconnect();\r\n    };\r\n\r\n    this.iOSOrientationPermission = ()=>{\r\n        if (typeof DeviceOrientationEvent.requestPermission === 'function') {\r\n            DeviceOrientationEvent.requestPermission().then(permissionState => {\r\n                if (permissionState === 'granted') {\r\n\r\n                }\r\n\r\n                console.log(permissionState);\r\n            }).catch(console.error);\r\n        }\r\n    }\r\n\r\n    this.getDirection = ()=>{\r\n        return (typeof scope.deviceOrientation.webkitCompassHeading != \"undefined\") ? scope.deviceOrientation.webkitCompassHeading : scope.deviceOrientation.alpha;\r\n    }\r\n\r\n    this.getDirectionMap = ()=>{\r\n        return (typeof scope.deviceOrientation.webkitCompassHeading != \"undefined\") ? (360 - scope.deviceOrientation.webkitCompassHeading) : scope.deviceOrientation.alpha;\r\n    }\r\n\r\n    this.connect();\r\n};\r\n\r\n\r\nexport default Nav;","/*\r\n    ATON immersive XR module\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\n/**\r\nATON Immersive XR\r\n@namespace XR\r\n*/\r\nlet XR = {};\r\n\r\nXR.STD_TELEP_DURATION = 0.03;\r\n\r\n\r\nXR.isPresenting = ()=>{\r\n    return XR._bPresenting;\r\n};\r\n\r\n/**\r\nInitializes XR component\r\n@function\r\n*/\r\nXR.init = ()=>{\r\n    ATON._renderer.xr.enabled = true;\r\n    ATON._renderer.xr.setReferenceSpaceType( 'local' );\r\n    \r\n    if (ATON.device.isMobile) ATON._renderer.xr.setFramebufferScaleFactor(0.5); // WebXR density\r\n\r\n    XR._bPresenting = false;\r\n    XR.currSession = null;\r\n\r\n    XR.rig = new THREE.Group();\r\n    //XR.rig.position.set(0,0,0);\r\n    XR.rig.add( ATON.Nav._camera );\r\n    ATON._rootUI.add(XR.rig);\r\n\r\n    //XR.hmdOri = new THREE.Quaternion();\r\n    //XR.hmdPos = new THREE.Vector3();\r\n\r\n    XR._currPos = XR.rig.position; //new THREE.Vector3();\r\n    XR._fromPos = new THREE.Vector3();\r\n    XR._reqPos  = new THREE.Vector3();\r\n\r\n    XR.gControllers = undefined;\r\n\r\n    XR.controller0pos = new THREE.Vector3();\r\n    XR.controller1pos = new THREE.Vector3();\r\n    XR.controller0dir = new THREE.Vector3();\r\n    XR.controller1dir = new THREE.Vector3();\r\n\r\n    // test\r\n    ATON.on(\"XRselectStart\", (c)=>{\r\n        XR.defaultSelectHandler(c);\r\n    });\r\n    ATON.on(\"XRselectEnd\", (c)=>{\r\n        //ATON.Nav.stop();\r\n        //console.log(\"Sel end \"+c);\r\n    });\r\n};\r\n\r\nXR.defaultSelectHandler = (c)=>{\r\n\r\n    if (ATON._queryDataScene){\r\n        let P = ATON._queryDataScene.p;\r\n        let N = ATON._queryDataScene.n;\r\n\r\n        //P.y += 0.8; // with 'local': half user height\r\n\r\n        // FIXME: height offset needed for \"local\", fill this automatically\r\n        if (N.y > 0.7) ATON.Nav.requestPOV( new ATON.POV().setPosition(P.x, P.y + ATON.userHeight, P.z), XR.STD_TELEP_DURATION );\r\n    }\r\n    \r\n    //ATON.Nav.setMotionAmount(3.0);\r\n};\r\n\r\nXR._handleUISelection = ()=>{\r\n    if (ATON._hoveredUI === undefined) return false;\r\n\r\n    let H = ATON.getUINode(ATON._hoveredUI);\r\n    if (H && H.onSelect) H.onSelect();\r\n    \r\n    return true;\r\n}\r\n\r\n\r\n// Set reference-space location (not the actual HMD camera location)\r\n// this can be used to move around the user, given a proper locomotion technique\r\nXR.setRefSpaceLocation = (p)=>{\r\n    XR.rig.position.copy(p);\r\n};\r\n\r\n// On XR session started\r\nXR.onSessionStarted = ( session )=>{\r\n\tsession.addEventListener( 'end', XR.onSessionEnded );\r\n\r\n\tATON._renderer.xr.setSession( session );\r\n\tXR.currSession = session;\r\n\r\n    XR.controller0 = ATON._renderer.xr.getController(0);\r\n    XR.controller1 = ATON._renderer.xr.getController(1);\r\n\r\n    //console.log(XR.controller0);\r\n\r\n    // Controller 0\r\n    if (XR.controller0){\r\n        XR.controller0.visible = false;\r\n\r\n        XR.controller0.addEventListener( 'connected', (e) => {\r\n            XR.controller0.gamepad = e.data.gamepad;\r\n            //console.log(XR.controller0.gamepad);\r\n\r\n            let gp = XR.controller0.gamepad;\r\n            if (gp.pose && gp.pose.hasPosition) XR.controller0.visible = true;\r\n        });\r\n\r\n        XR.controller0.addEventListener( 'selectstart', ()=>{\r\n            if (XR._handleUISelection()) return;\r\n\r\n            ATON.fireEvent(\"XRselectStart\", 0);\r\n        });\r\n        XR.controller0.addEventListener( 'selectend', ()=>{ \r\n            ATON.fireEvent(\"XRselectEnd\", 0);\r\n        });\r\n    }\r\n\r\n    // Controller 1\r\n    if (XR.controller1){\r\n        XR.controller1.visible = false;\r\n\r\n        XR.controller1.addEventListener( 'connected', (e) => {\r\n            //XR.controller1.visible = true;\r\n            XR.controller1.gamepad = e.data.gamepad;\r\n            \r\n            let gp = XR.controller1.gamepad;\r\n            if (gp.pose && gp.pose.hasPosition) XR.controller1.visible = true;\r\n        });\r\n\r\n        XR.controller1.addEventListener( 'selectstart',  ()=>{\r\n            //if (XR._handleUISelection()) return;\r\n        \r\n            ATON.fireEvent(\"XRselectStart\", 1);\r\n        });\r\n        XR.controller1.addEventListener( 'selectend',  ()=>{ \r\n            ATON.fireEvent(\"XRselectEnd\", 1);\r\n        });\r\n    }\r\n\r\n    XR.setRefSpaceLocation(ATON.Nav._currPOV.pos);\r\n\r\n    XR._bPresenting = true;\r\n    console.log(\"XR now presenting\");\r\n\r\n    XR.setupControllersUI();\r\n\r\n    ATON.fireEvent(\"XRmode\", true);\r\n\r\n    //console.log(session);\r\n};\r\n\r\n// On XR session terminated\r\nXR.onSessionEnded = ( /*event*/ )=>{\r\n    XR.currSession.removeEventListener( 'end', XR.onSessionEnded );\r\n    XR.currSession = null;\r\n\r\n    XR._bPresenting = false;\r\n    //XR.rig.position.set(0.0,0.0,0.0);\r\n    XR.setRefSpaceLocation( new THREE.Vector3(0,0,0) );\r\n\r\n    ATON.fireEvent(\"XRmode\", false);\r\n\r\n    console.log(\"Quit XR\");\r\n};\r\n\r\nXR.toggle = ()=>{\r\n    if (!ATON.device.isXRsupported) return;\r\n\r\n    // Enter XR\r\n    if (XR.currSession === null){\r\n        let sessionInit = { \r\n            optionalFeatures: [\r\n                \"local\",\r\n                //\"local-floor\" \r\n                ///\"bounded-floor\"\r\n            ]\r\n        };\r\n        navigator.xr.requestSession( 'immersive-vr', sessionInit ).then( XR.onSessionStarted );\r\n        //console.log(navigator.xr);\r\n    }\r\n    // Exit XR\r\n    else {\r\n        XR.currSession.end();\r\n    }\r\n};\r\n\r\nXR.setupControllersUI = ()=>{\r\n    if (XR.gControllers) return; // already set\r\n\r\n    var geometry = new THREE.CylinderBufferGeometry( 0.003,0.003, 10.0, 5 );\r\n    geometry.rotateX( -Math.PI / 2 );\r\n    geometry.translate(0,0,-5);\r\n\r\n    var mesh = new THREE.Mesh( geometry, ATON.MatHub.materials.controllerRay );\r\n\r\n    XR.controller0.add( mesh.clone() );\r\n    //XR.controller1.add( mesh.clone() );\r\n\r\n    XR.gControllers = ATON.createUINode();\r\n    XR.gControllers.add( XR.controller0 );\r\n    XR.gControllers.add( XR.controller1 );\r\n\r\n    XR.controller0.visible = false;\r\n    XR.controller1.visible = false;\r\n\r\n    XR.gControllers.disablePicking();\r\n\r\n    XR.rig.add(XR.gControllers);\r\n};\r\n\r\n// Not working\r\nXR.getControllerSpace = (i)=>{\r\n   if (i === 1) XR.getControllerGrip(1);\r\n   else XR.getControllerGrip(0);\r\n};\r\n\r\nXR.getControllerWorldLocation = (i)=>{\r\n    if (i === 1) return XR.controller1pos;\r\n    else return XR.controller0pos;\r\n};\r\n\r\nXR.getControllerWorldDirection = (i)=>{\r\n    if (i === 1) return XR.controller1dir;\r\n    else return XR.controller0dir;\r\n};\r\n\r\nXR.update = ()=>{\r\n    if (XR.controller0.visible){\r\n        XR.controller0.getWorldPosition(XR.controller0pos);\r\n        XR.controller0.getWorldDirection(XR.controller0dir);\r\n        XR.controller0dir.negate();\r\n    }\r\n    if (XR.controller1.visible){\r\n        XR.controller1.getWorldPosition(XR.controller1pos);\r\n        XR.controller1.getWorldDirection(XR.controller1dir);\r\n        XR.controller1dir.negate(); \r\n    }\r\n};\r\n\r\n\r\nexport default XR;","/*\r\n    ATON spatial UI Button class\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\nimport Node from \"./ATON.node.js\";\r\n\r\nexport default class Button extends Node {\r\n    constructor(uiid){\r\n        super(uiid, ATON.NTYPES.UI);\r\n\r\n        this.baseColor   = ATON.MatHub.colors.black;\r\n        this.switchColor = ATON.MatHub.colors.green;\r\n\r\n        this._bSwitched = false;\r\n\r\n        this.container = new ThreeMeshUI.Block({\r\n            width: 0.1,\r\n            height: 0.1,\r\n            padding: 0.01,\r\n            borderRadius: 0.02,\r\n            backgroundColor: this.baseColor,\r\n            backgroundOpacity: 0.5,\r\n\r\n            fontFamily: ATON.PATH_RES+\"fonts/custom-msdf.json\",\r\n            fontTexture: ATON.PATH_RES+\"fonts/custom.png\",\r\n\r\n            justifyContent: 'center',\r\n            alignContent: 'center'\r\n        });\r\n        this.add(this.container);\r\n\r\n        this.uiText = new ThreeMeshUI.Text({ \r\n            content: \"button\",\r\n            fontSize: 0.02,\r\n            fontColor: ATON.MatHub.colors.white\r\n        });\r\n        this.container.add(this.uiText);\r\n\r\n        this._trigger = new THREE.Mesh( \r\n            new THREE.PlaneGeometry( ATON.SUI.STD_BTN_SIZE*0.9, ATON.SUI.STD_BTN_SIZE*0.9, 2 ), \r\n            ATON.MatHub.materials.fullyTransparent\r\n        );\r\n        this._trigger.position.set(0,0,0.002);\r\n\r\n        this.add( this._trigger );\r\n\r\n        this.onHover = ()=>{\r\n            this.container.set({ \r\n                backgroundOpacity: 0.8\r\n            });\r\n        };\r\n        this.onLeave = ()=>{\r\n            this.container.set({ \r\n                backgroundOpacity: 0.5 \r\n            });\r\n        };\r\n\r\n        this.enablePicking();\r\n    }\r\n\r\n    setBaseColor(c){\r\n        this.baseColor = c;\r\n        if (!this._bSwitched) this.container.set({ backgroundColor: this.baseColor });\r\n        return this;\r\n    }\r\n    setSwitchColor(c){\r\n        this.switchColor = c;\r\n        if (this._bSwitched) this.container.set({ backgroundColor: this.switchColor });\r\n        return this;\r\n    }\r\n\r\n    setText(text){\r\n        this.uiText.set({ content: text });\r\n        return this;\r\n    }\r\n\r\n    switch(b){\r\n        this._bSwitched = b;\r\n        if (b) this.container.set({ backgroundColor: this.switchColor });\r\n        else this.container.set({ backgroundColor: this.baseColor });\r\n        \r\n        return this;\r\n    }\r\n\r\n    setIcon(url){\r\n        ATON.Utils.textureLoader.load(url, (texture) => {\r\n\r\n            this._trigger.material = new THREE.MeshStandardMaterial({\r\n                map: texture,\r\n                transparent: true,\r\n                depthWrite: false\r\n            });\r\n/*\r\n            this.container.set({ \r\n                backgroundTexture: texture,\r\n                backgroundOpacity: 1.0,\r\n                backgroundColor: undefined \r\n            });\r\n*/\r\n            this.uiText.position.set(0,-0.035,0);\r\n        });\r\n\r\n        return this;\r\n    }\r\n\r\n}","/*\r\n    ATON spatial UI\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\nimport Button from \"./ATON.sui.button.js\";\r\n\r\n\r\n/**\r\nATON Spatial UI\r\n@namespace SUI\r\n*/\r\nlet SUI = {};\r\n\r\nSUI.STD_BTN_SIZE = 0.1;\r\n\r\nSUI.Button = Button;\r\n\r\n\r\n/**\r\nInitializes Spatial UI module\r\n*/\r\nSUI.init = ()=>{\r\n    SUI.mainSelector   = ATON.createUINode();\r\n    //SUI.secondSelector = ATON.createUINode();\r\n\r\n    //SUI._uiSelGeom = new THREE.SphereGeometry( 0.1, 16, 16 );\r\n    SUI.mainSelector.add( new THREE.Mesh( ATON.Utils.geomUnitSphere, ATON.MatHub.getMaterial(\"selector\") ));\r\n    SUI.mainSelector.disablePicking();\r\n\r\n    SUI.setSelectorRadius(0.05);\r\n    SUI.mainSelector.visible = false;\r\n\r\n    ATON._rootUI.add(SUI.mainSelector);\r\n\r\n    SUI.gPoints = ATON.createUINode();\r\n    ATON._rootUI.add(SUI.gPoints);\r\n\r\n    SUI.buildInfoNode();\r\n    SUI.bShowInfo = true;\r\n\r\n    SUI._labelScale   = ATON.Utils.isMobile()? 1.2 : 1.0;\r\n    SUI._labelScaleVR = 2.0;\r\n\r\n    ATON.on( \"SemanticNodeHover\", (semid)=>{\r\n        if (!SUI.bShowInfo) return;\r\n        SUI.infoNodeText.set({ content: semid });\r\n    });\r\n/*\r\n    ATON.on(\"UINodeHover\", (uiid)=>{\r\n        console.log(\"Hover UI node: \"+uiid);\r\n    });\r\n    ATON.on(\"UINodeLeave\", (uiid)=>{\r\n        console.log(\"Leave UI node: \"+uiid);\r\n    });\r\n*/\r\n};\r\n\r\nSUI.setSelectorRadius = (r)=>{\r\n    SUI.mainSelector.scale.set(r,r,r);\r\n};\r\nSUI.getSelectorRadius = ()=>{\r\n    return SUI.mainSelector.scale.x;\r\n};\r\n\r\nSUI.buildInfoNode = ()=>{\r\n    SUI.infoNode = ATON.createUINode();\r\n    SUI.infoNode.attachToRoot();\r\n\r\n    SUI.infoContainer = new ThreeMeshUI.Block({\r\n        width: 0.15,\r\n        height: 0.05, //0.07,\r\n        padding: 0.01,\r\n        borderRadius: 0.02,\r\n        //backgroundColor: ATON.MatHub.colors.darksem,\r\n        //backgroundOpacity: 0.2,\r\n\r\n        fontFamily: ATON.PATH_RES+\"fonts/custom-msdf.json\", //ATON.PATH_MODS+'three-mesh-ui/examples/assets/Roboto-msdf.json',\r\n        fontTexture: ATON.PATH_RES+\"fonts/custom.png\", //ATON.PATH_MODS+'three-mesh-ui/examples/assets/Roboto-msdf.png',\r\n\r\n        alignContent: 'center', // could be 'center' or 'left'\r\n        justifyContent: 'center', // could be 'center' or 'start'\r\n    });\r\n    SUI.infoNode.add(SUI.infoContainer);\r\n\r\n    SUI.infoNodeText = new ThreeMeshUI.Text({ \r\n        content: \"Info\",\r\n        fontSize: 0.02,\r\n        fontColor: ATON.MatHub.colors.white\r\n    });\r\n    SUI.infoContainer.add(SUI.infoNodeText);\r\n    //SUI.infoNode.scale.set(0.07,0.07,0.07);\r\n};\r\n\r\nSUI.getInfoNode = ()=>{\r\n    return SUI.infoNode;\r\n};\r\n\r\nSUI.createToolbar = (buttonlist, color)=>{\r\n    let T = ATON.createUINode();\r\n\r\n    let num = buttonlist.length;\r\n    let padding = SUI.STD_BTN_SIZE * 0.3;\r\n\r\n    let cont = new ThreeMeshUI.Block({\r\n        width: (SUI.STD_BTN_SIZE * num) + padding,\r\n        height: SUI.STD_BTN_SIZE + padding,\r\n        padding: 0.01,\r\n        borderRadius: 0.02,\r\n        backgroundColor: color? color : ATON.MatHub.colors.black,\r\n        backgroundOpacity: 0.3,\r\n\r\n        fontFamily: ATON.PATH_RES+\"fonts/custom-msdf.json\", //ATON.PATH_MODS+'three-mesh-ui/examples/assets/Roboto-msdf.json',\r\n        fontTexture: ATON.PATH_RES+\"fonts/custom.png\", //ATON.PATH_MODS+'three-mesh-ui/examples/assets/Roboto-msdf.png',\r\n\r\n        alignContent: 'center', // could be 'center' or 'left'\r\n        justifyContent: 'center', // could be 'center' or 'start'\r\n    });\r\n    //cont.position.set(0,0,0);\r\n\r\n    let m = (num*0.5) * SUI.STD_BTN_SIZE;\r\n    m -= (SUI.STD_BTN_SIZE*0.5);\r\n\r\n    for (let i=0; i<num; i++){\r\n        let button = buttonlist[i];\r\n        button.position.set((i*SUI.STD_BTN_SIZE)-m, 0.0, 0.01);\r\n        cont.add(button);\r\n    }\r\n\r\n    T.add(cont);\r\n    return T;\r\n};\r\n\r\n// Main update routine\r\nSUI.update = ()=>{\r\n    if (ATON.Nav.isTransitioning()){\r\n        SUI.infoNode.visible = false;\r\n        return;\r\n    }\r\n\r\n    ThreeMeshUI.update();\r\n\r\n    if (ATON._queryDataScene){\r\n        SUI.mainSelector.visible = true;\r\n        SUI.mainSelector.position.copy(ATON._queryDataScene.p);    \r\n    }\r\n    else {\r\n        SUI.mainSelector.visible = false;\r\n    }\r\n\r\n    // InfoNode (semantics)\r\n    if (ATON._queryDataSem){\r\n\r\n        if (ATON.XR._bPresenting){\r\n            SUI.infoNode.position.copy(ATON.XR.controller0pos); //.lerpVectors(ATON._queryDataSem.p, ATON.XR.controller0pos, 0.8);\r\n            SUI.infoNode.setScale(SUI._labelScaleVR);\r\n        }\r\n        else {\r\n            SUI.infoNode.position.lerpVectors(ATON._queryDataSem.p, ATON.Nav._currPOV.pos, 0.2);\r\n            SUI.infoNode.setScale(ATON._queryDataSem.d * SUI._labelScale);\r\n        }\r\n        SUI.infoNode.orientToCamera();\r\n\r\n        if (SUI.bShowInfo) SUI.infoNode.visible = true;\r\n        SUI.mainSelector.visible = false;\r\n    }\r\n    else {\r\n        SUI.infoNode.visible = false;\r\n    }\r\n\r\n};\r\n\r\nexport default SUI;","/*\r\n    ATON Avatar Class\r\n    used in VRoadcast system\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\nimport Node from \"./ATON.node.js\";\r\n\r\nexport default class Avatar extends Node {\r\n\r\nconstructor(uid){\r\n    super(undefined /*uid*/, ATON.NTYPES.UI);\r\n\r\n    this.userid   = uid;\r\n    this.username = \"anonymous\";\r\n    this.message  = \"...\";\r\n    this.bTalking = false;\r\n\r\n    this._tStateCall = -1.0;\r\n    this._tStateDur  = 0.1;\r\n    this._tProgress  = 0.0;\r\n\r\n    this._currState  = {};\r\n    this._currState.position   = new THREE.Vector3();\r\n    this._currState.quaternion = new THREE.Quaternion();\r\n\r\n    this._tgtState = undefined;\r\n\r\n    //console.log(this);\r\n\r\n    this.realize();\r\n}\r\n\r\ngetAvatarMaterialByUID(uid){\r\n    //if (uid === undefined) return 0;\r\n\r\n    let avaMats = ATON.MatHub.materials.avatars;\r\n    let mi = (uid % avaMats.length); //uid? (uid % avaMats.length) : 0;\r\n    \r\n    return avaMats[mi];\r\n}\r\n\r\nrealize(){\r\n    // build minimal representation\r\n    let g = new THREE.SphereGeometry( 0.2, 16, 16 );\r\n\r\n    this.usermaterial = this.getAvatarMaterialByUID(this.userid);\r\n\r\n    let smesh = new THREE.Mesh( g, this.usermaterial );\r\n\r\n    this.usermeshnode = ATON.createUINode();\r\n    this.usermeshnode.add(smesh);\r\n    this.usermeshnode.setMaterial(this.usermaterial);\r\n\r\n    // CHECK / FIXME: this is to avoid cloning of the same mesh when using same representation for all avatars\r\n    this.usermeshnode.setCloneOnLoadHit(false);\r\n\r\n    // Build Label\r\n    this.userlabelnode = ATON.createUINode();\r\n    this.labelcontainer = new ThreeMeshUI.Block({\r\n        width: 0.7,\r\n        height: 0.25,\r\n        padding: 0.03,\r\n        borderRadius: 0.05,\r\n        backgroundColor: ATON.VRoadcast.ucolorsdark[this.userid % ATON.VRoadcast.ucolorsdark.length],\r\n\r\n        fontFamily: ATON.PATH_RES+\"fonts/custom-msdf.json\", //ATON.PATH_MODS+'three-mesh-ui/examples/assets/Roboto-msdf.json',\r\n        fontTexture: ATON.PATH_RES+\"fonts/custom.png\" //ATON.PATH_MODS+'three-mesh-ui/examples/assets/Roboto-msdf.png',\r\n\r\n        //alignContent: 'right', // could be 'center' or 'left'\r\n        //justifyContent: 'end', // could be 'center' or 'start'\r\n    });\r\n\r\n    this.userlabelnode.position.y = 0.4;\r\n    this.userlabelnode.add(this.labelcontainer);\r\n\r\n    // username text\r\n    this.usernametext = new ThreeMeshUI.Text({ \r\n        content: \"User #\"+this.userid,\r\n        fontSize: 0.09,\r\n        fontColor: ATON.MatHub.colors.white //ATON.VRoadcast.ucolors[this.userid % ATON.VRoadcast.ucolors.length]\r\n    });\r\n    this.usernametext.position.y = 0.0;\r\n\r\n    // message text\r\n    this.usermessagetext = new ThreeMeshUI.Text({ \r\n        content: \"\\nHello World!\",\r\n        fontSize: 0.03,\r\n        fontColor: ATON.MatHub.colors.white\r\n    });\r\n    this.usermessagetext.position.y = -0.03;\r\n\r\n    this.labelcontainer.add(this.usernametext);\r\n    this.labelcontainer.add(this.usermessagetext);\r\n    \r\n    this.add(this.usermeshnode);\r\n    this.add(this.userlabelnode);\r\n};\r\n\r\n// Loads custom avatar representation (3D model)\r\nloadRepresentation(url){\r\n    let A = this;\r\n\r\n    if (A.usermeshnode.children[0] !== undefined){\r\n        A.usermeshnode.remove(A.usermeshnode.children[0]);\r\n    }\r\n\r\n    A.usermeshnode.load(url); //.setMaterial(A.usermaterial);\r\n\r\n    return this;\r\n}\r\n\r\nsetUsername(username){\r\n    this.username = username;\r\n\r\n    this.usernametext.set({ \r\n        content: username\r\n    });\r\n\r\n    return this;\r\n}\r\n\r\nsetMessage(msg){\r\n    this.message = msg;\r\n\r\n    // TODO: check for text length\r\n    this.usermessagetext.set({ \r\n        content: \"\\n\"+msg\r\n    });\r\n\r\n    return this;\r\n}\r\n\r\nrequestStateTransition(S){\r\n    if (this._tStateCall >= 0.0) return; // already requested\r\n\r\n    this._tStateCall = ATON._clock.elapsedTime;\r\n\r\n    this._currState.position.copy(this.position);\r\n    this._currState.quaternion.copy(this.quaternion);\r\n\r\n    this._tgtState = S;\r\n    \r\n    //this._sDistance = this.position.distanceTo(S.position);\r\n}\r\n\r\nhandleStateTransition(){\r\n    if (this._tStateCall < 0.0) return;\r\n\r\n    let D = this._tStateDur; //(this._sDistance * this._tStateDur);\r\n\r\n    if (D <= 0.0) this._tProgress = 1.0;\r\n    else this._tProgress = (ATON._clock.elapsedTime - this._tStateCall) / D;\r\n\r\n    let cs = this._currState;\r\n    let ts = this._tgtState;\r\n\r\n    // End\r\n    if (this._tProgress >= 1.0){\r\n        this._tStateCall = -1.0;\r\n\r\n        this.position.copy(ts.position);\r\n        //this.quaternion.copy(ts.quaternion);\r\n        this.usermeshnode.quaternion.copy(ts.quaternion);\r\n\r\n        return;\r\n    }\r\n\r\n    this.position.lerpVectors(cs.position, ts.position, this._tProgress);\r\n    this.usermeshnode.quaternion.slerp(ts.quaternion, this._tProgress);\r\n    //THREE.Quaternion.slerp( cs.quaternion, ts.quaternion, this.usermeshnode.quaternion, this._tProgress);\r\n}\r\n\r\nupdate(){\r\n    this.handleStateTransition();\r\n\r\n    let cam  = ATON.Nav._camera;\r\n    let eye = ATON.Nav._currPOV.pos;\r\n    if (cam === undefined || eye === undefined) return;\r\n\r\n    //this.userlabelnode.lookAt( eye );\r\n\r\n    //this.userlabelnode.setRotationFromMatrix(cam.matrix); // quaternion.setFromRotationMatrix( cam.matrix );\r\n    //this.userlabelnode.rotation.copy(cam.rotation);\r\n\r\n    this.userlabelnode.orientToCamera(); //quaternion.copy( ATON.Nav._qOri );\r\n\r\n/*\r\n    this.userlabelnode.rotation.y = Math.atan2(\r\n        ( cam.position.x - this.userlabelnode.position.x ),\r\n        ( cam.position.z - this.userlabelnode.position.z )\r\n    );\r\n*/\r\n    //this.userlabelnode.matrix.copy( cam.matrix );\r\n}\r\n\r\n\r\n};","/*\r\n    ATON VRoadcast\r\n    real-time collaborative networking\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\nimport Avatar from \"./ATON.avatar.js\";\r\n\r\n\r\nlet VRoadcast = {};\r\n\r\nVRoadcast.USER_STATE_FREQ = 0.25; // sec\r\nVRoadcast.REPLICATED_EVT = \"EREP\";\r\n\r\n// Thresholds state sending\r\nVRoadcast.THRES_STATE_POS = 0.01;\r\nVRoadcast.THRES_STATE_ORI = 0.08; // radians\r\n\r\nVRoadcast.Avatar = Avatar;\r\n\r\n\r\n// Init routine\r\nVRoadcast.init = ()=>{\r\n    VRoadcast.address = window.location.origin;\r\n\r\n    VRoadcast.initMaterials();\r\n\r\n    VRoadcast.socket = undefined;\r\n    VRoadcast._connected = false;\r\n\r\n    //VRoadcast.sid = \"_SHARED_\";\r\n    VRoadcast.uid = undefined; // my userID (0,1,....)\r\n\r\n    VRoadcast.avatarList = [];\r\n\r\n    VRoadcast.avaGroup = ATON.createUINode(\"avatars\"); // holds all avatars representations\r\n    VRoadcast.avaGroup.attachToRoot();\r\n\r\n    // send own state with given freq\r\n    window.setInterval( VRoadcast.sendState, VRoadcast.USER_STATE_FREQ*1000.0 );\r\n    VRoadcast._lastStateSent = undefined;\r\n\r\n    console.log(\"VRoadcast initialized\");\r\n};\r\n\r\n// Register materials (avatars/users)\r\nVRoadcast.initMaterials = ()=>{\r\n\r\n    VRoadcast.ucolors = [];\r\n    VRoadcast.ucolors.push( new THREE.Color(1,0,0) );\r\n    VRoadcast.ucolors.push( new THREE.Color(1,1,0) );\r\n    VRoadcast.ucolors.push( new THREE.Color(0,1,0) );\r\n    VRoadcast.ucolors.push( new THREE.Color(0,1,1) );\r\n    VRoadcast.ucolors.push( new THREE.Color(0,0,1) );\r\n    VRoadcast.ucolors.push( new THREE.Color(1,0,1) );\r\n\r\n    VRoadcast.ucolorsdark = [];\r\n    VRoadcast.ucolorsdark.push( new THREE.Color(0.2,0.0,0.0) );\r\n    VRoadcast.ucolorsdark.push( new THREE.Color(0.2,0.2,0.0) );\r\n    VRoadcast.ucolorsdark.push( new THREE.Color(0.0,0.2,0.0) );\r\n    VRoadcast.ucolorsdark.push( new THREE.Color(0.0,0.2,0.2) );\r\n    VRoadcast.ucolorsdark.push( new THREE.Color(0.0,0.0,0.2) );\r\n    VRoadcast.ucolorsdark.push( new THREE.Color(0.2,0.0,0.2) );\r\n\r\n    let MM = ATON.MatHub.materials;\r\n    MM.avatars = [];\r\n\r\n    let mat = new THREE.MeshBasicMaterial({\r\n        color: VRoadcast.ucolors[0], \r\n        transparent: true, \r\n        opacity: 0.4, \r\n        depthWrite: false,\r\n        flatShading: true\r\n    });\r\n\r\n    MM.avatars.push(mat);\r\n\r\n    for (let c=1; c<VRoadcast.ucolors.length; c++){\r\n        let M = mat.clone();\r\n        M.color = VRoadcast.ucolors[c];\r\n\r\n        MM.avatars.push(M);\r\n    }\r\n};\r\n\r\n// Fire replicated event (network)\r\nVRoadcast.fireEvent = (evtname, data)=>{\r\n    if (!VRoadcast._connected) return;\r\n    let sock = VRoadcast.socket;\r\n\r\n    if (sock) sock.emit(VRoadcast.REPLICATED_EVT, {e: evtname, d: data});\r\n    //else ATON.on(\"VRC_Connected\", ()=>{ sock.on(evtname, onReceive); });\r\n};\r\n\r\n// Receive network event\r\nVRoadcast.on = (evtname, handler)=>{\r\n    if (handler === undefined) return;\r\n\r\n    let evhNetwork = ATON.EventHub.evNetwork;\r\n\r\n    if (evhNetwork[evtname] === undefined) evhNetwork[evtname] = []; // First time (event not registered)\r\n    evhNetwork[evtname].push(handler);\r\n};\r\n\r\n\r\nVRoadcast.isConnected = ()=>{\r\n    return VRoadcast._connected;\r\n};\r\n\r\n// Request enter in scene (room) by sid\r\nVRoadcast.requestSceneEnter = (sceneid)=>{\r\n    if (!VRoadcast.socket) return;\r\n    if (sceneid === undefined) sceneid = ATON.SceneHub.currID;\r\n\r\n    if (sceneid === undefined){\r\n        console.log(\"VRC ERROR: current scene ID is undefined\");\r\n        return;\r\n    }\r\n\r\n    VRoadcast.socket.emit(\"SENTER\", sceneid );\r\n};\r\n\r\nVRoadcast.connect = (address)=>{\r\n    if (address) VRoadcast.address = address;\r\n\r\n    let opts = {};\r\n\r\n    // Secure connection\r\n    if (window.location.protocol === \"https:\"){\r\n        opts.path = '/svrc/socket.io';\r\n        opts.secure = true;\r\n        opts.rejectUnauthorized = false;\r\n        //opts.transports = ['websocket'], \r\n        //opts.upgrade = false \r\n    }\r\n    else {\r\n        opts.path = '/vrc/socket.io';\r\n    }\r\n\r\n    VRoadcast.socket = io.connect(VRoadcast.address, opts); //, { 'force new connection': true });\r\n\r\n    if (VRoadcast.socket === undefined) return;\r\n    VRoadcast._connected = VRoadcast.socket.connected;\r\n\r\n    VRoadcast._registerSocketHandlers();\r\n};\r\n\r\n\r\nVRoadcast._onConnected = ()=>{\r\n    //\r\n};\r\n\r\nVRoadcast.setUsername = (username)=>{\r\n    VRoadcast._username = username;\r\n    if (VRoadcast.socket === undefined) return;\r\n\r\n    VRoadcast.socket.emit(\"UNAME\", username);\r\n};\r\n\r\n// Handle incoming server msgs\r\nVRoadcast._registerSocketHandlers = ()=>{\r\n\r\n    // We connected to server\r\n    VRoadcast.socket.on('connect', ()=>{\r\n        VRoadcast._connected = true;\r\n\r\n        // Request enter in scene node (room)\r\n        if (ATON.SceneHub.currID !== undefined) VRoadcast.requestSceneEnter();\r\n        \r\n        console.log(\"VRC connected, entering scene: \"+ATON.SceneHub.currID);\r\n        ATON.fireEvent(\"VRC_Connected\");\r\n\r\n        VRoadcast._onConnected();\r\n    });\r\n\r\n    VRoadcast.socket.on('disconnect', ()=>{\r\n        VRoadcast._connected = false;\r\n        VRoadcast.uid = undefined;\r\n\r\n        VRoadcast.avaGroup.hide();\r\n\r\n        console.log(\"VRC disconnected!\");\r\n        ATON.fireEvent(\"VRC_Disconnected\");\r\n    });\r\n\r\n    // Incoming replicated event\r\n    VRoadcast.socket.on(VRoadcast.REPLICATED_EVT, (data)=>{\r\n        let evtname = data.e;\r\n        let d = data.d;\r\n\r\n        let ehList = ATON.EventHub.evNetwork[evtname];\r\n        ATON.EventHub.executeHandlers(ehList, d);\r\n    });\r\n\r\n    VRoadcast.socket.on('ID', (data)=>{\r\n        console.log(\"Your ID is \" + data);\r\n        VRoadcast.uid = data;\r\n\r\n        //if (ATON.vroadcast.onIDassigned) ATON.vroadcast.onIDassigned();\r\n        ATON.fireEvent(\"VRC_IDassigned\", data.id);\r\n    });\r\n\r\n    VRoadcast.socket.on('UENTER', (data)=>{\r\n        let uid = data;\r\n        //if (uid === VRoadcast.uid) return; // myself\r\n\r\n        console.log(\"User #\" +uid+\" entered the scene\");\r\n\r\n        VRoadcast.touchAvatar(uid);\r\n    });\r\n\r\n    VRoadcast.socket.on('ULEAVE', (data)=>{\r\n        let uid = data;\r\n        \r\n        let A = VRoadcast.avatarList[uid];\r\n        if (A) A.hide();\r\n\r\n        console.log(\"User #\" +uid+\" left the scene\");\r\n    });\r\n\r\n    VRoadcast.socket.on('USTATE', (data)=>{\r\n        let S = VRoadcast.decodeState(data);\r\n\r\n        let uid = S.userid;\r\n        let A = VRoadcast.touchAvatar(uid);\r\n\r\n        //A.position.copy(S.position);\r\n        //A.quaternion.copy(S.quaternion);\r\n        A.requestStateTransition(S);\r\n    });\r\n\r\n    VRoadcast.socket.on('UNAME', (data)=>{\r\n        let uid   = data.uid;\r\n        let uname = data.name;\r\n\r\n        let A = VRoadcast.touchAvatar(uid);\r\n        A.setUsername(uname);\r\n        console.log(\"User #\" +uid+\" changed username to: \"+uname);\r\n    });\r\n};\r\n\r\n// Encode state\r\nVRoadcast.encodeState = (S)=>{\r\n    if (!S) return;\r\n\r\n    let A = new Float32Array(6); // make sufficient room\r\n    A[0] = S.position.x;\r\n    A[1] = S.position.y;\r\n    A[2] = S.position.z;\r\n\r\n    // Convert to byte array, we use last float storage (4 bytes)\r\n    var binData = new Int8Array(A.buffer);\r\n\r\n    binData[16] = (S.quaternion.x * 128.0);\r\n    binData[17] = (S.quaternion.y * 128.0);\r\n    binData[18] = (S.quaternion.z * 128.0);\r\n    binData[19] = (S.quaternion.w * 128.0);\r\n\r\n    binData[20] = S.userid;\r\n\r\n    //binData[21] = parseInt(S.rank);\r\n\r\n    return binData;\r\n}\r\n\r\n// Decode state\r\nVRoadcast.decodeState = (binData)=>{\r\n    let S = {};\r\n    S.userid = binData[20];\r\n\r\n    // First decode quat\r\n    S.quaternion = new THREE.Quaternion(\r\n        binData[16] / 128.0,\r\n        binData[17] / 128.0,\r\n        binData[18] / 128.0,\r\n        binData[19] / 128.0\r\n    );\r\n\r\n    // Now decode floats\r\n    let a8 = new Int8Array(16);\r\n    for (var i=0; i<16; i++) a8[i] = binData[i];\r\n    let A = new Float32Array(a8.buffer);\r\n\r\n    S.position = new THREE.Vector3(A[0],A[1],A[2]);\r\n\r\n    //S.scale = A[3];\r\n\r\n    return S;\r\n}\r\n\r\n\r\n// Update\r\nVRoadcast.update = ()=>{\r\n\r\n    // State interpolation\r\n    for (let a=0; a<VRoadcast.avatarList.length; a++){\r\n        let A = VRoadcast.avatarList[a];\r\n        if (A && A.visible){\r\n            A._tStateDur = VRoadcast.USER_STATE_FREQ;\r\n            A.update();\r\n        }\r\n    }\r\n};\r\n\r\nVRoadcast.sendState = ()=>{\r\n    if (VRoadcast.uid === undefined) return;\r\n    if (!VRoadcast.socket || !VRoadcast._connected) return;\r\n    \r\n    let cpov = ATON.Nav._currPOV;\r\n    if (!cpov) return;\r\n\r\n    //console.log(cpov);\r\n\r\n    let S = {};\r\n    S.position = new THREE.Vector3();\r\n    S.quaternion = new THREE.Quaternion();\r\n\r\n    S.position.copy(cpov.pos);\r\n    S.quaternion.copy(ATON.Nav._qOri);\r\n    S.userid = VRoadcast.uid;\r\n\r\n    // Save bandwidth\r\n    if (VRoadcast._lastStateSent !== undefined){\r\n        let lastPos = VRoadcast._lastStateSent.position;\r\n        let lastOri = VRoadcast._lastStateSent.quaternion;\r\n\r\n        let dPos = lastPos.distanceToSquared(cpov.pos);\r\n        let dOri = lastOri.angleTo(ATON.Nav._qOri);\r\n\r\n        if ( dPos < VRoadcast.THRES_STATE_POS && dOri < VRoadcast.THRES_STATE_ORI) return;\r\n    }\r\n\r\n    // Encode and send\r\n    let binData = VRoadcast.encodeState(S);\r\n    VRoadcast.socket.emit(\"USTATE\", binData/*.buffer*/ );\r\n    VRoadcast._lastStateSent = S;\r\n\r\n    //console.log(\"State sent\");\r\n};\r\n\r\n\r\n// Avatars\r\nVRoadcast.getAvatar = (uid)=>{\r\n    return VRoadcast.avatarList[uid];\r\n};\r\n\r\nVRoadcast.touchAvatar = (uid)=>{\r\n\r\n    // First time\r\n    if (VRoadcast.avatarList[uid] === undefined){\r\n        let A = new VRoadcast.Avatar(uid);\r\n        A.attachTo(VRoadcast.avaGroup);\r\n        \r\n        A.loadRepresentation(ATON.PATH_RES+\"models/vrc/head.gltf\");\r\n        //console.log(VRoadcast.avaGroup);\r\n\r\n        VRoadcast.avatarList[uid] = A;\r\n\r\n        //console.log(VRoadcast.avatarList);\r\n        //console.log(ATON.MatHub.materials.avatars);\r\n        //console.log(A);\r\n    }\r\n\r\n    let A = VRoadcast.avatarList[uid];\r\n    A.show();\r\n\r\n    return A;\r\n}\r\n\r\nVRoadcast.clearAllAvatars = ()=>{\r\n    for (let i in VRoadcast.avatarList){\r\n        let A = VRoadcast.avatarList[i];\r\n        A.hide();\r\n        //A.dispose();\r\n    }\r\n};\r\n\r\nexport default VRoadcast;","/*\r\n    ATON Semantic shapes factory\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\n/**\r\nATON Semantic Factory\r\n@namespace SemFactory\r\n*/\r\nlet SemFactory = {};\r\n\r\nSemFactory.init = ()=>{\r\n    SemFactory.bConvexBuilding = false;\r\n    SemFactory.convexPoints = [];\r\n    //SemFactory.convexMeshes = [];\r\n    SemFactory.convexNode   = undefined; // keeps track of current convex semnode\r\n    SemFactory.currConvexMesh = undefined;\r\n    \r\n    // Temp sem node to hold developing convex mesh\r\n    SemFactory.currSemNode = ATON.createSemanticNode();\r\n    SemFactory.currSemNode.disablePicking();\r\n    SemFactory.currSemNode.attachToRoot();\r\n\r\n    SemFactory.currMaterial = ATON.MatHub.getMaterial(\"semanticShape\"); // current sem material we are using\r\n\r\n    SemFactory._numShapes = 0; // counter of shapes produced\r\n};\r\n\r\n\r\n// Current material\r\nSemFactory.resetMaterial = ()=>{\r\n    SemFactory.currMaterial = ATON.MatHub.getMaterial(\"semanticShape\");\r\n};\r\n\r\nSemFactory.setMaterial = (m)=>{\r\n    if (m === undefined) return;\r\n    SemFactory.currMaterial = m;\r\n};\r\n\r\n\r\n// Convex shapes\r\n// NOTE: if semid exists, add mesh under the same id\r\nSemFactory.addConvexPoint = (/*semid,*/ p)=>{\r\n\r\n    SemFactory.convexPoints.push(p);\r\n    let numPoints = SemFactory.convexPoints.length;\r\n\r\n    // Spatial UI\r\n    let M = new THREE.Mesh( ATON.Utils.geomUnitSphere, ATON.MatHub.getMaterial(\"semanticShapeEdit\"));\r\n    M.position.copy(p);\r\n    M.scale.set(0.01,0.01,0.01);\r\n    ATON.SUI.gPoints.add( M );\r\n\r\n    if (numPoints < 4) return false;\r\n\r\n    // lets build convex shape\r\n    let geom   = new THREE.ConvexBufferGeometry( SemFactory.convexPoints );\r\n    let semesh = new THREE.Mesh( geom, ATON.MatHub.getMaterial(\"semanticShapeEdit\") );\r\n\r\n    //let numMeshes = SemFactory.convexMeshes.length;\r\n\r\n    // First time: create semnode and add it to current sem group\r\n    if (!SemFactory.bConvexBuilding){\r\n        //if (semid === undefined) semid = \"sem\"+SemFactory._numShapes;\r\n\r\n        //SemFactory.convexNode = ATON.getSemanticNode(semid) || ATON.createSemanticNode(semid);\r\n        //SemFactory.convexNode = ATON.createSemanticNode();\r\n        //SemFactory.convexNode.add(semesh);\r\n        SemFactory.currSemNode.add(semesh);\r\n        \r\n        // Store\r\n        semesh.userData._convexPoints = [];\r\n        for (let i=0; i<numPoints; i++){\r\n            //semesh.userData._convexPoints.push( ATON.Utils.setVectorPrecision(SemFactory.convexPoints[i],3) );\r\n\r\n            ATON.Utils.setVectorPrecision(SemFactory.convexPoints[i],4);\r\n            semesh.userData._convexPoints.push(SemFactory.convexPoints[i].x);\r\n            semesh.userData._convexPoints.push(SemFactory.convexPoints[i].y);\r\n            semesh.userData._convexPoints.push(SemFactory.convexPoints[i].z);\r\n        }\r\n\r\n        SemFactory.currConvexMesh = semesh;\r\n        SemFactory.bConvexBuilding = true;\r\n    }\r\n\r\n    // keep updating current semantic geometry\r\n    else {\r\n        let currSemesh = SemFactory.currConvexMesh;\r\n        currSemesh.geometry.dispose();\r\n        currSemesh.geometry = geom;\r\n\r\n        //currSemesh.userData._convexPoints.push( ATON.Utils.setVectorPrecision(p,3) );\r\n\r\n        ATON.Utils.setVectorPrecision(p,4);\r\n        currSemesh.userData._convexPoints.push( p.x );\r\n        currSemesh.userData._convexPoints.push( p.y );\r\n        currSemesh.userData._convexPoints.push( p.z );\r\n    }\r\n\r\n    return true;\r\n};\r\n\r\nSemFactory.stopCurrentConvex = ()=>{\r\n    SemFactory.convexPoints = [];\r\n    SemFactory.bConvexBuilding = false;\r\n\r\n    SemFactory.currSemNode.removeChildren();\r\n    ATON.SUI.gPoints.removeChildren();\r\n};\r\n\r\nSemFactory.getCurrentConvexShape = ()=>{\r\n    return SemFactory.currSemNode\r\n};\r\n\r\nSemFactory.completeConvexShape = (semid)=>{\r\n    SemFactory.convexPoints = [];\r\n    SemFactory.bConvexBuilding = false;\r\n\r\n    //if (SemFactory.convexNode === undefined) return undefined;\r\n    //if (SemFactory.currConvexMesh === undefined) return undefined;\r\n    if (SemFactory.currSemNode === undefined) return;\r\n\r\n    if (semid === undefined) semid = \"sem\"+SemFactory._numShapes;\r\n\r\n    let S = ATON.getSemanticNode(semid) || ATON.createSemanticNode(semid);\r\n    \r\n    S.add(SemFactory.currSemNode.children[0]);\r\n    S.setMaterial( SemFactory.currMaterial );\r\n    S.setDefaultAndHighlightMaterials(SemFactory.currMaterial, ATON.MatHub.materials.semanticShapeHL);\r\n    S.enablePicking();\r\n\r\n    SemFactory.currSemNode.removeChildren();\r\n\r\n/*\r\n    SemFactory.convexNode = ATON.getSemanticNode(semid) || ATON.createSemanticNode(semid);\r\n    SemFactory.convexNode.add(SemFactory.currConvexMesh);\r\n\r\n    SemFactory.convexNode.setMaterial( SemFactory.currMaterial );\r\n    SemFactory.convexNode.setDefaultMaterial(SemFactory.currMaterial);\r\n    SemFactory.convexNode.enablePicking();\r\n*/\r\n    SemFactory._numShapes++;\r\n\r\n    //console.log(SemFactory.convexNode);\r\n    //console.log(SemFactory.convexNode.userData._convexPoints);\r\n\r\n    //return SemFactory.convexNode;\r\n\r\n    // Spatial UI\r\n    ATON.SUI.gPoints.removeChildren();\r\n\r\n    return S;\r\n};\r\n\r\nSemFactory.createConvexShape = (semid, points)=>{\r\n    let geom   = new THREE.ConvexBufferGeometry( points );\r\n    let semesh = new THREE.Mesh( geom, SemFactory.currMaterial );\r\n\r\n    semesh.userData._convexPoints = [];\r\n    for (let i=0; i<points.length; i++){\r\n        let p = points[i];\r\n        ATON.Utils.setVectorPrecision(p,4);\r\n\r\n        semesh.userData._convexPoints.push( p.x );\r\n        semesh.userData._convexPoints.push( p.y );\r\n        semesh.userData._convexPoints.push( p.z );\r\n        }\r\n\r\n    let S = ATON.getOrCreateSemanticNode(semid);\r\n    S.add(semesh);\r\n    S.setDefaultAndHighlightMaterials(SemFactory.currMaterial, ATON.MatHub.materials.semanticShapeHL);\r\n\r\n    S.enablePicking();\r\n\r\n    return S;\r\n};\r\n\r\nSemFactory.addSurfaceConvexPoint = (/*semid,*/ offset)=>{\r\n    if (!ATON._queryDataScene) return false;\r\n\r\n    if (offset === undefined) offset = 0.02;\r\n\r\n    let p = ATON._queryDataScene.p;\r\n    let n = ATON._queryDataScene.n;\r\n    p.x += (n.x * offset);\r\n    p.y += (n.y * offset);\r\n    p.z += (n.z * offset);\r\n\r\n    SemFactory.addConvexPoint(p);\r\n    return p;\r\n};\r\n\r\n\r\n// Spherical semantic shapes\r\n// NOTE: if semid exists, add mesh under the same id\r\nSemFactory.createSphere = (semid, location, radius)=>{\r\n    if (location === undefined) return undefined;\r\n    if (radius === undefined) return undefined;\r\n\r\n/*\r\n    if (ATON.getSemanticNode(semid)){\r\n        console.log(\"ERROR SemFactory: semantic node \"+semid+\" already exists.\");\r\n        return false;\r\n    }\r\n*/\r\n    if (semid === undefined) semid = \"sem\"+SemFactory._numShapes;\r\n\r\n    let S = ATON.getOrCreateSemanticNode(semid);\r\n\r\n    //let g = new THREE.SphereGeometry( 1.0, 16, 16 );\r\n    let M = new THREE.Mesh( ATON.Utils.geomUnitSphere, SemFactory.currMaterial );\r\n    \r\n    // Note: we add multiple spheres to the same <semid> node\r\n    let sphere = new THREE.Object3D();\r\n    sphere.position.copy(location);\r\n    sphere.scale.set(radius, radius, radius);\r\n    sphere.add(M);\r\n\r\n    S.add( sphere );\r\n    S.enablePicking();\r\n    S.setDefaultAndHighlightMaterials(SemFactory.currMaterial, ATON.MatHub.materials.semanticShapeHL);\r\n\r\n    //SemFactory.currParent.add( S );\r\n\r\n    SemFactory._numShapes++;\r\n\r\n    return S;\r\n};\r\n\r\nSemFactory.createSurfaceSphere = (semid)=>{\r\n    if (!ATON._queryDataScene) return undefined;\r\n\r\n    let p = ATON._queryDataScene.p;\r\n    let r = ATON.SUI.getSelectorRadius();\r\n\r\n    return SemFactory.createSphere(semid, p,r);\r\n};\r\n\r\nexport default SemFactory;","/*\r\n    ATON Front-end blueprint\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\n/**\r\nATON Front-end routines\r\n@namespace FE\r\n*/\r\nlet FE = {};\r\n\r\n\r\nFE.realize = ()=>{\r\n    FE.PATH_RES_ICONS = ATON.PATH_RES+\"icons/\";\r\n\r\n    FE._bPopup = false; // showing popup\r\n    FE.bPopupBlurBG = 0.25; // blur 3D content on popup show, 0.0 to disable\r\n\r\n    FE.urlParams = new URLSearchParams(window.location.search);\r\n\r\n    FE._uiSetupBase();\r\n\r\n    ATON.realize();\r\n};\r\n\r\n// Add basic spinning loader\r\nFE.addBasicLoaderEvents = ()=>{\r\n    ATON.on(\"NodeRequestFired\", ()=>{ $(\"#idLoader\").show(); });\r\n    ATON.on(\"AllNodeRequestsCompleted\", ()=>{ \r\n        $(\"#idLoader\").hide();\r\n        \r\n        if (ATON.Nav.homePOV === undefined) ATON.Nav.computeAndRequestDefaultHome(0.5);\r\n    });\r\n};\r\n\r\nFE.loadSceneID = (sid)=>{\r\n    if (sid === undefined) return;\r\n\r\n    let reqstr = ATON.PATH_RESTAPI_SCENE + sid;\r\n    if (ATON.SceneHub._bEdit) reqstr += \",edit\";\r\n\r\n    ATON.SceneHub.load(reqstr, sid);\r\n    console.log(reqstr);\r\n};\r\n\r\n\r\n\r\n// HTML UI\r\n//=======================================\r\n// Sample basic UI setup\r\nFE.uiBasicSetup = ()=>{\r\n    FE.uiAddButton(\"idTopToolbar\",\"fullscreen\", ATON.toggleFullScreen );\r\n    if (ATON.Utils.isConnectionSecure()) FE.uiAddButton(\"idTopToolbar\",\"vr\", ATON.XR.toggle );\r\n\r\n    FE.uiAddButton(\"idBottomToolbar\",\"home\", ()=>{ ATON.Nav.requestHome(0.1); });\r\n};\r\n\r\nFE._uiSetupBase = ()=>{\r\n    $(\"#idPopup\").click( FE.popupClose );\r\n    $(\"#idLoader\").html(\"<img src='\"+ATON.PATH_RES+\"loader.png'>\");\r\n};\r\n\r\n// Add Generic button to a specific div container\r\nFE.uiAddButton = (idcontainer, iconid, onPress)=>{\r\n    let htmlcode = \"<button id='btn-\"+iconid+\"' type='button' class='atonBTN'><img src='\"+FE.PATH_RES_ICONS+iconid+\".png'></button>\";\r\n    $(\"#\"+idcontainer).append(htmlcode);\r\n\r\n    if (onPress) $(\"#btn-\"+iconid).click( onPress );\r\n};\r\n\r\nFE.uiSwitchButton = (iconid, b)=>{\r\n    if (b) $(\"#btn-\"+iconid).addClass(\"switchedON\");\r\n    else $(\"#btn-\"+iconid).removeClass(\"switchedON\");\r\n};\r\n\r\nFE.uiAddButtonHome = (idcontainer)=>{\r\n    FE.uiAddButton(idcontainer, \"home\", ()=>{ \r\n        ATON.Nav.requestHome(0.3);\r\n    });\r\n};\r\n\r\nFE.uiAddButtonFirstPerson = (idcontainer)=>{\r\n    FE.uiAddButton(idcontainer, \"fp\", ()=>{\r\n        if (ATON.Nav.isFirstPerson()){\r\n            ATON.Nav.setOrbitControl();\r\n            FE.uiSwitchButton(\"fp\",false);\r\n        }\r\n        else {\r\n            ATON.Nav.setFirstPersonControl();\r\n            FE.uiSwitchButton(\"fp\",true);\r\n        }\r\n    });\r\n};\r\nFE.uiAddButtonVR = (idcontainer)=>{\r\n    if (!ATON.Utils.isConnectionSecure()) return;\r\n    FE.uiAddButton(idcontainer, \"vr\", ATON.XR.toggle );\r\n};\r\nFE.uiAddButtonDeviceOrientation = (idcontainer)=>{\r\n    if (!ATON.Utils.isConnectionSecure()) return;\r\n    if (!ATON.Utils.isMobile()) return;\r\n\r\n    FE.uiAddButton(idcontainer,\"devori\", ()=>{\r\n        if (ATON.Nav.isDevOri()){\r\n            ATON.Nav.setOrbitControl();\r\n            FE.uiSwitchButton(\"devori\",false);\r\n        }\r\n        else {\r\n            ATON.Nav.setDeviceOrientationControl();\r\n            FE.uiSwitchButton(\"devori\",true);\r\n        }\r\n    });\r\n};\r\n\r\nFE.uiAddButtonQR = (idcontainer)=>{\r\n    FE.uiAddButton(idcontainer,\"qr\", FE.popupQR );\r\n};\r\n\r\nFE.uiAddButtonFullScreen = (idcontainer)=>{\r\n    FE.uiAddButton(idcontainer, \"fullscreen\", ()=>{\r\n        ATON.toggleFullScreen();\r\n        screenfull.isFullscreen? FE.uiSwitchButton(\"fullscreen\",false) : FE.uiSwitchButton(\"fullscreen\",true);\r\n    });\r\n};\r\n\r\nFE.uiAddButtonVRC = (idcontainer)=>{\r\n    FE.uiAddButton(idcontainer, \"vrc\", ()=>{\r\n        //TODO:\r\n    });\r\n};\r\n\r\n// Attach ID validator to given input field\r\nFE.uiAttachInputFilterID = (inputid)=>{\r\n    $(\"#\"+inputid).on('keyup change input', ()=>{\r\n        let value = $(\"#\"+inputid).val();\r\n        let regReplace = new RegExp('[^A-Za-z-_]', 'ig');\r\n        $(\"#\"+inputid).val( value.replace(regReplace, '') );\r\n\r\n    });\r\n};\r\n\r\nFE.setupBasicUISounds = ()=>{\r\n    FE.auLib = {};\r\n\r\n    FE.auLib.switch = new Audio(ATON.PATH_RES+\"audio/switch.wav\");\r\n    FE.auLib.switch.loop = false;\r\n};\r\n\r\n\r\n// Popups\r\n//===================================================================\r\nFE.popupShow = (htmlcontent)=>{\r\n    if (FE._bPopup) return false;\r\n\r\n    $('#idPopup').html(\"<div class='atonPopup' id='idPopupContent'>\"+htmlcontent+\"</div>\");\r\n    $('#idPopupContent').click((e)=>{ e.stopPropagation(); });\r\n    $('#idPopup').fadeIn();\r\n\r\n    FE._bPopup = true;\r\n\r\n    if (FE.bPopupBlurBG > 0.0){\r\n        ATON._renderer.setPixelRatio( FE.bPopupBlurBG );\r\n        ATON._renderer.render( ATON._mainRoot, ATON.Nav._camera );\r\n    }\r\n\r\n    ATON._bPauseQuery = true;\r\n    //ATON.renderPause();\r\n    return true;\r\n};\r\n\r\nFE.popupClose = ()=>{\r\n    FE._bPopup = false;\r\n\r\n    //ATON.renderResume();\r\n    if (FE.bPopupBlurBG > 0.0) ATON.resetPixelDensity();\r\n\r\n    $(\"#idPopup\").fadeOut();\r\n    //$(\"#idPopup\").empty();\r\n\r\n    ATON._bPauseQuery = false;\r\n    ATON.focusOn3DView();\r\n};\r\n\r\nFE.popupQR = ()=>{\r\n    let htmlcontent = \"<h1>Share</h1>\";\r\n    htmlcontent += \"<div class='atonQRcontainer' id='idQRcode'></div><br><br>\";\r\n\r\n    if ( !ATON.FE.popupShow(htmlcontent) ) return;\r\n\r\n    let url = window.location.href;\r\n    new QRCode(document.getElementById(\"idQRcode\"), url);\r\n};\r\n\r\n\r\n\r\nexport default FE;","/*!\r\n    @preserve\r\n\r\n \tATON\r\n\r\n \t@author Bruno Fanini\r\n\tVHLab, CNR ISPC\r\n\r\n==================================================================================*/\r\n\r\n'use strict';\r\n\r\n/**\r\n@namespace ATON\r\n*/\r\nlet ATON = {};\r\nwindow.ATON = ATON;\r\n\r\n// Import\r\nimport Node from \"./ATON.node.js\";\r\nimport POV from \"./ATON.pov.js\";\r\n//import Period from \"./ATON.period.js\";\r\nimport LightProbe from \"./ATON.lightprobe.js\";\r\n\r\nimport EventHub from \"./ATON.eventhub.js\";\r\nimport MatHub from \"./ATON.mathub.js\";\r\nimport Utils from \"./ATON.utils.js\";\r\nimport SceneHub from \"./ATON.scenehub.js\";\r\nimport Nav from \"./ATON.nav.js\";\r\nimport XR from \"./ATON.xr.js\";\r\nimport SUI from \"./ATON.sui.js\";\r\nimport VRoadcast from \"./ATON.vroadcast.js\";\r\nimport SemFactory from \"./ATON.semfactory.js\";\r\nimport FE from \"./ATON.fe.js\";\r\n\r\n// Classes\r\nATON.Node       = Node;\r\nATON.POV        = POV;\r\nATON.LightProbe = LightProbe;\r\n//ATON.Period = Period;\r\n\r\n// NS\r\nATON.EventHub   = EventHub;\r\nATON.Utils      = Utils;\r\nATON.SceneHub   = SceneHub;\r\nATON.MatHub     = MatHub;\r\nATON.Nav        = Nav;\r\nATON.XR         = XR;\r\nATON.SUI        = SUI;\r\nATON.VRoadcast  = VRoadcast;\r\nATON.SemFactory = SemFactory;\r\nATON.FE         = FE;\r\n\r\n//==============================================================\r\n// Consts\r\n//==============================================================\r\nATON.STD_UPVECTOR = new THREE.Vector3(0,1,0);\r\nATON.ROOT_NID = \".\"; // reserved node ID for graph-roots\r\n\r\nATON.RAD2DEG = (180.0 / Math.PI);\r\nATON.DEG2RAD = (Math.PI / 180.0);\r\n\r\n// Node types\r\nATON.NTYPES = {};\r\n// 1 and 2 are reserved\r\nATON.NTYPES.SCENE  = 3;\r\nATON.NTYPES.SEM    = 4;\r\nATON.NTYPES.UI     = 5;\r\n\r\n// Folders\r\nATON.PATH_RESTAPI       = window.location.origin + \"/api/\";\r\nATON.PATH_RESTAPI_SCENE = ATON.PATH_RESTAPI + \"scene/\";\r\nATON.PATH_MODS          = window.location.origin + \"/mods/\";\r\nATON.PATH_THREE         = ATON.PATH_MODS + \"three/\";\r\nATON.PATH_DRACO_LIB     = ATON.PATH_THREE+\"examples/js/libs/draco/\";\r\nATON.PATH_BASIS_LIB     = ATON.PATH_THREE+\"examples/js/libs/basis/\";\r\n\r\nATON.PATH_COLLECTION = window.location.origin + \"/collection/\";\r\nATON.PATH_MODELS     = ATON.PATH_COLLECTION + \"models/\";\r\nATON.PATH_SCENES     = window.location.origin + \"/scenes/\";\r\nATON.PATH_RES        = window.location.origin + \"/res/\";\r\n\r\nATON.SHADOWS_NEAR = 0.1;\r\nATON.SHADOWS_FAR  = 50.0;\r\nATON.SHADOWS_SIZE = 15.0;\r\nATON.SHADOWS_RES  = 512; // 512\r\n\r\n/**\r\nSet path collection (3D models, audio, panoramas, ...)\r\n@param {string} path - path\r\n*/\r\nATON.setPathCollection = (path)=>{\r\n    ATON.PATH_COLLECTION = window.location.origin + path;\r\n    ATON.PATH_MODELS     = ATON.PATH_COLLECTION+\"models/\";\r\n};\r\n\r\n/**\r\nSet path scenes\r\n@param {string} path - path\r\n*/\r\nATON.setPathScenes = (path)=>{\r\n    ATON.PATH_SCENES = window.location.origin + path;\r\n};\r\n\r\n\r\nATON._setupBaseListeners = ()=>{\r\n    let el = ATON._renderer.domElement;\r\n\r\n    window.addEventListener( 'resize', ATON._onResize, false );\r\n    el.addEventListener( 'mousemove', ATON._updateScreenMove, false );\r\n    ///el.addEventListener('dblclick', ATON._doubleTap, false);\r\n\r\n    el.addEventListener( 'wheel', ATON._onMouseWheel, false );\r\n\r\n\r\n    // Touch events\r\n    Hammer(el).on(\"doubletap\", (e)=>{\r\n        ATON.fireEvent(\"DoubleTap\", e.srcEvent);\r\n        //console.log(e.srcEvent);\r\n    });\r\n\r\n    Hammer(el).on(\"tap\", (e)=>{\r\n        ATON._updateScreenMove(e.srcEvent);\r\n        ATON._handleQueries();\r\n\r\n        ATON.fireEvent(\"Tap\", e.srcEvent);\r\n        //console.log(e.srcEvent);\r\n\r\n        // UI selection\r\n        if (ATON._hoveredUI === undefined) return;\r\n        let H = ATON.getUINode(ATON._hoveredUI);\r\n        if (H && H.onSelect) H.onSelect();\r\n    });\r\n\r\n    ATON.on(\"DoubleTap\", (e)=>{\r\n        //console.log(e);\r\n        ATON.defaultDoubleTapFromScreenCoords(e);\r\n    });\r\n\r\n    //ATON.on(\"Tap\", (e)=>{\r\n        //console.log(e);\r\n    //});\r\n\r\n\r\n    // Keyboard\r\n    ATON._kModShift = false;\r\n    ATON._kModCtrl  = false;\r\n\r\n    el.addEventListener(\"keydown\", (e)=>{\r\n        if (e.key === \"Shift\")   ATON._kModShift = true;\r\n        if (e.key === \"Control\") ATON._kModCtrl  = true;\r\n        \r\n        ATON.fireEvent(\"KeyPress\", e.key);\r\n        //ATON.fireEvent(\"KeyPress/\"+e.key);\r\n    }, false);\r\n\r\n    el.addEventListener(\"keyup\", (e)=>{\r\n        if (e.key === \"Shift\")   ATON._kModShift = false;\r\n        if (e.key === \"Control\") ATON._kModCtrl  = false;\r\n\r\n        ATON.fireEvent(\"KeyUp\", e.key);\r\n        //ATON.fireEvent(\"KeyUp/\"+e.key);\r\n    }, false);\r\n\r\n    // Defaults\r\n    ATON.on(\"KeyPress\", (k)=>{\r\n\r\n        if (k==='+'){\r\n            let f = ATON.Nav.getFOV() + 1.0;\r\n            ATON.Nav.setFOV(f);\r\n        }\r\n        if (k==='-'){\r\n            let f = ATON.Nav.getFOV() - 1.0;\r\n            ATON.Nav.setFOV(f);\r\n        }\r\n\r\n        if (k==='PageUp'){\r\n            let r = ATON.SUI.mainSelector.scale.x + 0.02;\r\n            ATON.SUI.setSelectorRadius(r);\r\n        }\r\n        if (k==='PageDown'){\r\n            let r = ATON.SUI.mainSelector.scale.x - 0.02;\r\n            r = Math.max(r, 0.01);\r\n            ATON.SUI.setSelectorRadius(r); \r\n        }\r\n    });\r\n\r\n    // Default semantic highlight\r\n    ATON.on(\"SemanticNodeLeave\", (semid)=>{\r\n        let S = ATON.getSemanticNode(semid);\r\n        if (S) S.restoreDefaultMaterial();\r\n    });\r\n    ATON.on(\"SemanticNodeHover\", (semid)=>{\r\n        let S = ATON.getSemanticNode(semid);\r\n        if (S) S.highlight();\r\n    });\r\n            \r\n};\r\n\r\nATON._onResize = ()=>{\r\n    ATON.Nav._camera.aspect = window.innerWidth / window.innerHeight;\r\n    ATON.Nav._camera.updateProjectionMatrix();\r\n\r\n    ATON._renderer.setSize( window.innerWidth, window.innerHeight );\r\n    console.log(\"onResize\");\r\n};\r\n\r\nATON._onMouseWheel = (e)=>{\r\n    e.preventDefault();\r\n\r\n    ATON.fireEvent(\"MouseWheel\", e.deltaY);\r\n};\r\n\r\nATON.focusOn3DView = ()=>{\r\n    ATON._renderer.domElement.focus();\r\n};\r\n\r\n// Default retarget from screen coordinates (eg.: on double tap)\r\nATON.defaultDoubleTapFromScreenCoords = (e)=>{\r\n    ATON._updateScreenMove(e);\r\n    ATON._handleQueryScene();\r\n\r\n    let bFPtrans = ATON.Nav.isFirstPerson() || ATON.Nav.isDevOri();\r\n\r\n    // When first-person mode, teleport (non immersive)\r\n    if (ATON._queryDataScene && bFPtrans){\r\n        let P = ATON._queryDataScene.p;\r\n        let N = ATON._queryDataScene.n;\r\n        \r\n        if (N.y > 0.7){\r\n            let currDir = ATON.Nav._vDir;\r\n            let feye = new THREE.Vector3(P.x, P.y+ATON.userHeight, P.z);\r\n            let ftgt = new THREE.Vector3(\r\n                feye.x + currDir.x,\r\n                feye.y + currDir.y,\r\n                feye.z + currDir.z,\r\n            );\r\n\r\n            let POV = new ATON.POV().setPosition(feye).setTarget(ftgt);\r\n\r\n            ATON.Nav.requestPOV(POV, 0.5);\r\n        }\r\n        return;\r\n    }\r\n\r\n    // In orbit mode, focus on selected SemNode...\r\n    let hsn = ATON.getSemanticNode(ATON._hoveredSemNode);\r\n    if (ATON._queryDataSem && hsn){\r\n        ATON.Nav.requestPOVbyNode( hsn, 0.3);\r\n        return;\r\n    }\r\n    // ...or perform standard retarget on picket surface point\r\n    if (ATON._queryDataScene){\r\n        ATON.Nav.requestRetarget(ATON._queryDataScene.p, /*ATON._queryDataScene.n*/undefined, 0.3);\r\n    }\r\n\r\n    // TODO: go POV in sight if any (panorama only mode)\r\n}\r\n\r\nATON.toggleFullScreen = ()=>{\r\n    screenfull.toggle();\r\n/*\r\n    if (b === undefined){\r\n        screenfull.toggle();\r\n        return;\r\n    }\r\n\r\n    if (b) screenfull.request();\r\n*/\r\n};\r\n\r\n\r\n//============================================================================\r\n// ATON init routines\r\n//============================================================================\r\n/**\r\nMain ATON initialization, it will take care of all sub-components initialization, device profiling and much more\r\n@example\r\nATON.realize()\r\n*/\r\nATON.realize = ()=>{\r\n    console.log(\"realize\");\r\n\r\n    ATON.Utils.init();\r\n    ATON.Utils.profileDevice();\r\n    \r\n    //THREE.Object3D.DefaultUp = new THREE.Vector3(0,0,1); // mismatches WebXR y-up\r\n\r\n    // Timing\r\n    ATON._clock = new THREE.Clock(true);\r\n\r\n    let wglopts = {\r\n        //canvas: document.getElementById(\"idView\"),\r\n        antialias: true, //ATON.device.isMobile? false : true,\r\n        alpha: true,\r\n        //pecision: \"lowp\"\r\n    };\r\n\r\n    ATON._renderer = new THREE.WebGLRenderer(wglopts);\r\n    ATON._renderer.setSize( window.innerWidth, window.innerHeight );\r\n\r\n    ATON._stdpxd = 1.0;\r\n    //ATON._renderer.setPixelRatio( window.devicePixelRatio? window.devicePixelRatio : 1.0 );\r\n    ATON._renderer.setPixelRatio( ATON._stdpxd );\r\n    \r\n    ATON._renderer.outputEncoding = THREE.sRGBEncoding;\r\n    //console.log(ATON._renderer.getPixelRatio());\r\n\r\n    ATON._renderer.setAnimationLoop( ATON._onFrame );\r\n    //ATON._bDirtyLP = false;\r\n\r\n    ATON._maxAnisotropy = 4; //ATON._renderer.capabilities.getMaxAnisotropy();\r\n    console.log(ATON._renderer.capabilities);\r\n\r\n    THREE.Cache.enabled = true;\r\n\r\n    ATON.userHeight = 1.7;\r\n \r\n    document.body.appendChild( ATON._renderer.domElement );\r\n    //console.log(ATON._renderer);\r\n\r\n    ATON.EventHub.init();\r\n    ATON.MatHub.init();\r\n\r\n    //ATON._setupLoadManager();\r\n    ATON._assetsManager = {};\r\n    ATON._aLoader = new THREE.GLTFLoader(/*ATON._loadManager*/);\r\n    ATON._dracoLoader = new THREE.DRACOLoader();\r\n    ATON._dracoLoader.setDecoderPath( ATON.PATH_DRACO_LIB );\r\n    ATON._aLoader.setDRACOLoader( ATON._dracoLoader );\r\n    ATON._numReqLoad = 0;\r\n\r\n    // Periods (TODO:)\r\n    //ATON.periods = [];\r\n\r\n    ATON._lps = []; // lightprobes\r\n    ATON._bAutoLP = false;\r\n    //ATON._dirtyLPs = true;\r\n\r\n    ATON.initGraphs();\r\n    ATON.SceneHub.init();\r\n\r\n    // Init nav system\r\n    ATON.Nav.init();\r\n\r\n    // XR\r\n    ATON.XR.init();\r\n\r\n    // Spatial UI\r\n    ATON.SUI.init();\r\n\r\n    // VRoadcast\r\n    ATON.VRoadcast.init();\r\n\r\n    // Semantic Factory\r\n    ATON.SemFactory.init();\r\n\r\n    // Query / picked data\r\n    ATON._queryDataScene = undefined;\r\n    ATON._queryDataSem   = undefined;\r\n    ATON._queryDataUI    = undefined;\r\n\r\n    ATON._hoveredSemNode = undefined;\r\n    ATON._hoveredUI      = undefined;\r\n\r\n    ATON._bQuerySemOcclusion = true; // TODO: implement\r\n    ATON._bQueryNormals  = true;\r\n    ATON._bPauseQuery    = false;\r\n\r\n    // Basis (future support)\r\n/*\r\n    ATON._basisLoader = new BasisTextureLoader();\r\n    ATON._basisLoader.setTranscoderPath( ATON.PATH_BASIS_LIB );\r\n    ATON._basisLoader.detectSupport( ATON._renderer );\r\n    \r\n    // Register BasisTextureLoader for .basis extension.\r\n    THREE.DefaultLoadingManager.addHandler( /\\.basis$/, ATON._basisLoader );\r\n*/\r\n\r\n\r\n    // Mouse/Touch screen coords\r\n    ATON._screenPointerCoords = new THREE.Vector2(0.0,0.0);\r\n\r\n    // Ray casters\r\n    ATON._rcScene = new THREE.Raycaster();\r\n    ATON._rcScene.layers.set(ATON.NTYPES.SCENE);\r\n    ATON._rcSemantics = new THREE.Raycaster();\r\n    ATON._rcSemantics.layers.set(ATON.NTYPES.SEM);\r\n    ATON._rcUI = new THREE.Raycaster();\r\n    ATON._rcUI.layers.set(ATON.NTYPES.UI);\r\n\r\n    ATON._registerRCS();\r\n\r\n    ATON._setupBaseListeners();\r\n\r\n    ATON.focusOn3DView();\r\n};\r\n\r\nATON.renderPause = ()=>{\r\n    ATON._renderer.setAnimationLoop( undefined );\r\n};\r\nATON.renderResume = ()=>{\r\n    ATON._renderer.setAnimationLoop( ATON._onFrame );\r\n};\r\n\r\nATON._setupLoadManager = ()=>{\r\n    ATON._loadManager = new THREE.LoadingManager();\r\n    ATON._loadManager.onStart = ( url, itemsLoaded, itemsTotal )=>{\r\n\t    console.log( 'Started loading file: ' + url + '.\\nLoaded ' + itemsLoaded + ' of ' + itemsTotal + ' files.' );\r\n        ATON.fireEvent(\"NodeRequestFired\", url);\r\n    };\r\n\r\n    ATON._loadManager.onLoad = ()=>{\r\n\t    console.log( 'Loading complete!');\r\n        ATON.fireEvent(\"AllNodeRequestsCompleted\");\r\n    };\r\n\r\n    ATON._loadManager.onProgress = ( url, itemsLoaded, itemsTotal )=>{\r\n\t    //console.log( 'Loading file: ' + url + '.\\nLoaded ' + itemsLoaded + ' of ' + itemsTotal + ' files.' );\r\n    };\r\n\r\n    ATON._loadManager.onError = ( url )=>{\r\n\t    console.log( 'There was an error loading ' + url );\r\n    };\r\n};\r\n\r\n/**\r\nSet the default pixel density (standard is 1.0)\r\n@example\r\nATON.setDefaultPixelDensity(0.5)\r\n*/\r\nATON.setDefaultPixelDensity = (d)=>{\r\n    ATON._stdpxd = d;\r\n    ATON._renderer.setPixelRatio( d );\r\n};\r\n\r\n/**\r\nReset pixel density to default\r\n*/\r\nATON.resetPixelDensity = ()=>{\r\n    ATON._renderer.setPixelRatio( ATON._stdpxd );\r\n};\r\n\r\n\r\n//============================================================================\r\n// Scene-graphs\r\n//============================================================================\r\nATON.snodes   = {}; // Visible scene-graph\r\nATON.semnodes = {}; // Semantics graph\r\nATON.uinodes  = {}; // UI graph\r\n\r\n// Visible scene-graph\r\nATON.createSceneNode = (id)=>{\r\n    return new ATON.Node(id, ATON.NTYPES.SCENE);\r\n};\r\nATON.getSceneNode = (id)=>{ \r\n    if (id === undefined) return undefined;    \r\n    return ATON.snodes[id];\r\n};\r\nATON.getOrCreateSceneNode = (id)=>{\r\n    let N = ATON.getSceneNode(id);\r\n    if (N !== undefined) return N;\r\n    return ATON.createSceneNode(id);\r\n};\r\n\r\nATON.getRootScene = ()=>{\r\n    return ATON._rootVisible;\r\n};\r\n\r\n// Semantics, shape descriptors\r\nATON.createSemanticNode = (id)=>{\r\n    return new ATON.Node(id, ATON.NTYPES.SEM);\r\n};\r\nATON.getSemanticNode = (id)=>{\r\n    if (id === undefined) return undefined; \r\n    return ATON.semnodes[id];\r\n};\r\nATON.getOrCreateSemanticNode = (id)=>{\r\n    let S = ATON.getSemanticNode(id);\r\n    if (S !== undefined) return S;\r\n    return ATON.createSemanticNode(id);\r\n};\r\n\r\nATON.getRootSemantics = ()=>{\r\n    return ATON._rootSem;\r\n};\r\n\r\n// UI graph\r\nATON.createUINode = (id)=>{\r\n    return new ATON.Node(id, ATON.NTYPES.UI);\r\n};\r\nATON.getUINode = (id)=>{\r\n    if (id === undefined) return undefined; \r\n    return ATON.uinodes[id];\r\n};\r\nATON.getRootUI = ()=>{\r\n    return ATON._rootUI;\r\n};\r\n\r\n// Asset loading routines\r\nATON._assetReqNew = (url)=>{\r\n    ATON._numReqLoad++;\r\n    ATON.fireEvent(\"NodeRequestFired\", url);\r\n};\r\nATON._assetReqComplete = (url)=>{\r\n    ATON.fireEvent(\"NodeRequestCompleted\", url);\r\n    ATON._numReqLoad--;\r\n\r\n    if (ATON._numReqLoad <= 0){\r\n        ATON.fireEvent(\"AllNodeRequestsCompleted\");\r\n\r\n        // Bounds\r\n        let c = ATON._rootVisible.getBound().center;\r\n        let r = ATON._rootVisible.getBound().radius;\r\n\r\n        if (ATON._renderer.shadowMap.enabled){\r\n            ATON._rootVisible.traverse((o) => {\r\n                if (o.isMesh){\r\n                    o.castShadow = true;\r\n                    o.receiveShadow = true;\r\n                }\r\n            });\r\n        }\r\n\r\n        if (ATON._bAutoLP){\r\n            if (ATON._lps[0] === undefined) ATON.addLightProbe( new ATON.LightProbe().setPosition(c).setNear(r) );\r\n            else {\r\n                ATON._lps[0].setPosition(c.x, c.y, c.z).setNear(r);\r\n            }\r\n            console.log(\"Auto LP\");\r\n        }\r\n\r\n        ATON.getRootScene().assignLightProbesByProximity();\r\n\r\n        //ATON._bDirtyLP = true;\r\n\r\n        // FIXME: dirty\r\n        setTimeout( ()=>{\r\n            if (c && ATON._mMainPano) ATON._mMainPano.position.copy(c);\r\n            ATON.updateLightProbes();\r\n        }, 1000);\r\n\r\n    }\r\n};\r\n\r\n\r\nATON.initGraphs = ()=>{\r\n    // Global root\r\n    ATON._mainRoot = new THREE.Scene();\r\n    ATON._mainRoot.background = new THREE.Color( 0.7,0.7,0.7 );\r\n\r\n    // visible scene-graph\r\n    ATON._rootVisibleGlobal = new THREE.Group();\r\n    ATON._mainRoot.add(ATON._rootVisibleGlobal);\r\n\r\n    ATON._rootVisible = ATON.createSceneNode().setAsRoot();\r\n    ATON._rootVisibleGlobal.add(ATON._rootVisible);\r\n\r\n\r\n    // semantics graph\r\n    ATON._rootSem = ATON.createSemanticNode().setAsRoot();\r\n    ATON._mainRoot.add(ATON._rootSem);\r\n\r\n    // UI graph\r\n    ATON._rootUI = ATON.createUINode().setAsRoot();\r\n    ATON._mainRoot.add(ATON._rootUI);\r\n\r\n    // Uniform lighting\r\n    ATON.ambLight = new THREE.AmbientLight( new THREE.Color(1,1,1) /*ATON._mainRoot.background*/ );\r\n    ATON._rootVisibleGlobal.add(ATON.ambLight);\r\n};\r\n\r\nATON.setBackgroundColor = (bg)=>{\r\n    ATON._mainRoot.background = bg;\r\n};\r\n\r\n//==============================================================\r\n// LightProbes\r\n//==============================================================\r\nATON.addLightProbe = (LP)=>{\r\n    ATON._lps.push(LP);\r\n};\r\n\r\n// Update ALL lightprobes\r\nATON.updateLightProbes = ()=>{\r\n    if (ATON._lps.length === 0) return;\r\n\r\n    for (let i in ATON._lps) ATON._lps[i].update();\r\n\r\n    // FIXME: indirect LP based on first LP (for now)\r\n    if (ATON._lps[0]){\r\n        if (ATON._indLP) ATON._mainRoot.remove(ATON._indLP);\r\n\r\n        ATON._indLP = THREE.LightProbeGenerator.fromCubeRenderTarget( ATON._renderer, ATON._lps[0]._prevCCtarget );\r\n        ATON._mainRoot.add( ATON._indLP );\r\n    }\r\n\r\n    //for (let i in ATON._lps) ATON._lps[i].update();\r\n\r\n    ATON._rootVisible.traverse((o) => {\r\n        let LP = o.userData.LP;\r\n        if (LP !== undefined && LP instanceof ATON.LightProbe){\r\n            o.material.envMap = LP.getEnvTex();\r\n            //o.material.combine = THREE.AddOperation;\r\n            //o.material.envMapIntensity = 5.0;\r\n        }\r\n    });\r\n\r\n    console.log(\"LPs updated.\");\r\n};\r\n\r\n//==============================================================\r\n// Environment\r\n//==============================================================\r\nATON.setMainPanorama = (path)=>{\r\n\r\n    let tpano = new THREE.TextureLoader().load(path);\r\n    tpano.encoding = THREE.sRGBEncoding;\r\n\r\n    if (ATON._matMainPano !== undefined){\r\n        ATON._matMainPano.map = tpano;\r\n        //ATON._matMainPano.emissive = tpano;\r\n        return;\r\n    }\r\n\r\n    // First time: create it\r\n    ATON._gMainPano = new THREE.SphereBufferGeometry( 1.0, 30,30 );\r\n\r\n    ATON._matMainPano = new THREE.MeshBasicMaterial({ \r\n        map: tpano, \r\n        //emissive: tpano,\r\n        //castShadow: false,\r\n        //receiveShadow: false,\r\n        fog: false,\r\n        depthTest: false,\r\n        depthWrite: false,\r\n        //depthFunc: THREE.AlwaysDepth,\r\n        //side: THREE.DoubleSide\r\n    });\r\n\r\n    ATON._mMainPano = new THREE.Mesh(ATON._gMainPano, ATON._matMainPano);\r\n    ATON._mMainPano.frustumCulled = false;\r\n    ATON.setMainPanoramaRadius(ATON.Nav.STD_FAR * 0.9);\r\n\r\n    ATON._mMainPano.onAfterRender = ()=>{\r\n        //if (ATON._numReqLoad > 0) return;\r\n        ATON._mMainPano.position.copy(ATON.Nav._currPOV.pos);\r\n    };\r\n\r\n    ATON._rootVisibleGlobal.add(ATON._mMainPano);\r\n};\r\n\r\nATON.setMainPanoramaRadius = (r)=>{\r\n    if (ATON._gMainPano === undefined) return;\r\n    ATON._gMainPano.scale( -r,r,r );\r\n};\r\n\r\nATON.setMainPanoramaRotation = (r)=>{\r\n    if (ATON._mMainPano === undefined) return;\r\n    ATON._mMainPano.rotation.set( 0,r,0 );\r\n};\r\n\r\n\r\nATON.setMainLightDirection = (d)=>{\r\n\r\n    d.x *= ATON.SHADOWS_FAR * 0.5;\r\n    d.y *= ATON.SHADOWS_FAR * 0.5;\r\n    d.z *= ATON.SHADOWS_FAR * 0.5;\r\n\r\n    if (ATON._dMainL === undefined){\r\n        ATON._dMainL = new THREE.DirectionalLight( new THREE.Color(1,1,1), 1.0 );\r\n        ATON._dMainL.castShadow = true;\r\n\r\n        ATON._dMainLtgt = new THREE.Object3D();\r\n        ATON._rootVisibleGlobal.add(ATON._dMainLtgt);\r\n        ATON._dMainL.target = ATON._dMainLtgt;\r\n\r\n        ATON._dMainLdir = d;\r\n\r\n        let a = 0.1; // Check\r\n        ATON.ambLight.color = new THREE.Color( a,a,a );\r\n\r\n        ATON._rootVisibleGlobal.add(ATON._dMainL);\r\n    }\r\n\r\n    ATON._dMainL.position.set(-d.x,-d.y,-d.z);\r\n};\r\n\r\nATON.toggleShadows = (b)=>{\r\n    if (ATON._dMainL === undefined) return;\r\n\r\n    if (b){\r\n        ATON._renderer.shadowMap.enabled = true;\r\n\r\n        //ATON._renderer.shadowMap.type    = THREE.BasicShadowMap;\r\n        //ATON._renderer.shadowMap.type    = THREE.PCFShadowMap;\r\n        ATON._renderer.shadowMap.type    = THREE.PCFSoftShadowMap; // bleeding\r\n        //ATON._renderer.shadowMap.type    = THREE.VSMShadowMap;\r\n\r\n        ATON._dMainL.shadow.mapSize.width  = ATON.SHADOWS_RES;\r\n        ATON._dMainL.shadow.mapSize.height = ATON.SHADOWS_RES;\r\n        ATON._dMainL.shadow.camera.near    = ATON.SHADOWS_NEAR;\r\n        ATON._dMainL.shadow.camera.far     = ATON.SHADOWS_FAR;\r\n        //ATON._dMainL.shadow.bias = 0.0001;\r\n\r\n        ATON._dMainL.shadow.camera.left   = -ATON.SHADOWS_SIZE;\r\n        ATON._dMainL.shadow.camera.right  = ATON.SHADOWS_SIZE;\r\n        ATON._dMainL.shadow.camera.bottom = -ATON.SHADOWS_SIZE;\r\n        ATON._dMainL.shadow.camera.top    = ATON.SHADOWS_SIZE;\r\n    }\r\n    else {\r\n        ATON._renderer.shadowMap.enabled = false;\r\n    }\r\n};\r\n\r\nATON.updateDirShadows = ()=>{\r\n    if (ATON._dMainLdir === undefined) return;\r\n\r\n    let p = ATON.Nav.getCurrentEyeLocation();\r\n\r\n    ATON._dMainL.position.set(p.x-ATON._dMainLdir.x, p.y-ATON._dMainLdir.y, p.z-ATON._dMainLdir.z);\r\n    ATON._dMainLtgt.position.copy(p);\r\n};\r\n\r\n//==============================================================\r\n// Update routines\r\n//==============================================================\r\nATON._onFrame = ()=>{\r\n    // TODO: add pause render\r\n\r\n    let dt = ATON._clock.getDelta();\r\n\r\n    ATON._fps = 1.0 / dt;\r\n    ATON._dt  = dt;\r\n    //console.log(ATON._fps);\r\n    \r\n    ATON.Nav._bControlChange = false;\r\n    ATON.Nav._controls.update(dt);\r\n\r\n    ATON._renderer.render( ATON._mainRoot, ATON.Nav._camera );\r\n\r\n/*\r\n    if (ATON.Nav._bControlChange){\r\n        }\r\n    else {\r\n        //ATON._handleScreenPick();\r\n        }\r\n*/\r\n\r\n    if (ATON.XR.isPresenting()){\r\n        ATON.XR.update();\r\n    }\r\n\r\n    //if (!ATON.device.isMobile || !ATON.XR.isPresenting()) \r\n    if (!ATON._bPauseQuery) ATON._handleQueries();\r\n\r\n    // Navigation system\r\n    ATON.Nav.update();\r\n\r\n    // VRoadcast\r\n    ATON.VRoadcast.update();\r\n\r\n    //console.log(ATON._clock.elapsedTime);\r\n\r\n    // UI\r\n    ATON.SUI.update();\r\n\r\n    // Environment/lighting\r\n    if (ATON._renderer.shadowMap.enabled) ATON.updateDirShadows();\r\n\r\n    ATON.fireEvent(\"frame\");\r\n};\r\n\r\nATON._updateScreenMove = (e)=>{\r\n    e.preventDefault();\r\n\r\n    if (ATON.Nav._mode === ATON.Nav.MODE_DEVORI){\r\n        ATON._screenPointerCoords.x = 0.0;\r\n        ATON._screenPointerCoords.y = 0.0;\r\n        return;\r\n    }\r\n\r\n\tATON._screenPointerCoords.x = ( e.clientX / window.innerWidth ) * 2 - 1;\r\n\tATON._screenPointerCoords.y = -( e.clientY / window.innerHeight ) * 2 + 1;\r\n\r\n    //console.log(ATON._screenPointerCoords);\r\n};\r\n\r\n//==============================================================\r\n// Query rountines\r\n//==============================================================\r\nATON._registerRCS = ()=>{\r\n    ATON._rcRR = 0;\r\n    ATON._rcHandlers = [];\r\n\r\n    ATON._rcHandlers.push( ATON._handleQueryScene );\r\n    ATON._rcHandlers.push( ATON._handleQuerySemantics );\r\n    ATON._rcHandlers.push( ATON._handleQueryUI );\r\n};\r\n\r\nATON._handleQueries = ()=>{\r\n    if (ATON.Nav.isTransitioning()) return; // do not query during POV transitions\r\n\r\n    // round-robin\r\n    //ATON._rcRR = (ATON._rcRR+1) % 2;\r\n    //ATON._rcHandlers[ATON._rcRR]();\r\n\r\n    ATON._handleQueryScene();\r\n    ATON._handleQuerySemantics();\r\n    ATON._handleQueryUI();\r\n};\r\n\r\n// Ray casting visible scenegraph\r\nATON._handleQueryScene = ()=>{\r\n    if (ATON.XR.isPresenting()){\r\n        ATON._rcScene.set( ATON.XR.getControllerWorldLocation(0), ATON.XR.getControllerWorldDirection(0) );\r\n    }\r\n    else \r\n        ATON._rcScene.setFromCamera( ATON._screenPointerCoords, ATON.Nav._camera );\r\n\r\n    ATON._hitsScene = [];\r\n    //ATON._rcScene.intersectObjects( ATON._rootVisible.children, true, ATON._hitsScene );\r\n    ATON._rcScene.intersectObjects( ATON._mainRoot.children, true, ATON._hitsScene );\r\n\r\n    //ATON._hitsOperator(ATON._hits);\r\n\r\n    // Process hits\r\n    let hitsnum = ATON._hitsScene.length;\r\n    if (hitsnum <= 0){\r\n        ATON._queryDataScene = undefined;\r\n        return;\r\n    }\r\n\r\n    let h = ATON._hitsScene[0];\r\n\r\n    ATON._queryDataScene = {};\r\n    ATON._queryDataScene.p = h.point;\r\n    ATON._queryDataScene.d = h.distance;\r\n    ATON._queryDataScene.o = h.object;\r\n    \r\n    //console.log(ATON._queryDataScene.o);\r\n\r\n    // Normals\r\n    if (!ATON._bQueryNormals) return;\r\n    if (h.face === null) return;\r\n    if (h.face.normal === undefined) return;\r\n\r\n    ATON._queryDataScene.matrixWorld = new THREE.Matrix3().getNormalMatrix( h.object.matrixWorld );\r\n    ATON._queryDataScene.n = h.face.normal.clone().applyMatrix3( ATON._queryDataScene.matrixWorld ).normalize();\r\n};\r\n\r\nATON.getSceneQueriedPoint = ()=>{\r\n    if (ATON._queryDataScene === undefined) return undefined;\r\n    return ATON._queryDataScene.p;\r\n};\r\nATON.getSceneQueriedDistance = ()=>{\r\n    if (ATON._queryDataScene === undefined) return undefined;\r\n    return ATON._queryDataScene.d;\r\n};\r\nATON.getSceneQueriedNormal = ()=>{\r\n    if (ATON._queryDataScene === undefined) return undefined;\r\n    return ATON._queryDataScene.n;\r\n};\r\n\r\n\r\n// Ray casting semantic-graph\r\nATON._handleQuerySemantics = ()=>{\r\n    if (ATON.XR.isPresenting()){\r\n        ATON._rcSemantics.set( ATON.XR.getControllerWorldLocation(0), ATON.XR.getControllerWorldDirection(0) );\r\n    }\r\n    else \r\n        ATON._rcSemantics.setFromCamera( ATON._screenPointerCoords, ATON.Nav._camera );\r\n\r\n    ATON._hitsSem = [];\r\n    ATON._rcSemantics.intersectObjects( ATON._mainRoot.children, true, ATON._hitsSem );\r\n\r\n    // Process hits\r\n    let hitsnum = ATON._hitsSem.length;\r\n    if (hitsnum <= 0){\r\n        ATON._queryDataSem = undefined;\r\n\r\n        if (ATON._hoveredSemNode){\r\n            ATON.fireEvent(\"SemanticNodeLeave\", ATON._hoveredSemNode);\r\n            let S = ATON.getSemanticNode(ATON._hoveredSemNode);\r\n            if (S && S.onLeave) S.onLeave();\r\n        }\r\n        \r\n        ATON._hoveredSemNode = undefined;\r\n        return;\r\n    }\r\n\r\n    let h = ATON._hitsSem[0];\r\n\r\n    // Occlusion\r\n    if (ATON._bQuerySemOcclusion && ATON._queryDataScene){\r\n        if (ATON._queryDataScene.d < h.distance){\r\n\r\n            ATON._queryDataSem = undefined;\r\n\r\n            if (ATON._hoveredSemNode){\r\n                ATON.fireEvent(\"SemanticNodeLeave\", ATON._hoveredSemNode);\r\n                let S = ATON.getSemanticNode(ATON._hoveredSemNode);\r\n                if (S && S.onLeave) S.onLeave();\r\n            }\r\n\r\n            ATON._hoveredSemNode = undefined;\r\n            return;\r\n        }\r\n    }\r\n\r\n    ATON._queryDataSem = {};\r\n    ATON._queryDataSem.p = h.point;\r\n    ATON._queryDataSem.d = h.distance;\r\n    ATON._queryDataSem.o = h.object;\r\n    ATON._queryDataSem.list = []; // holds sem-nodes parental list\r\n\r\n    // traverse parents\r\n    let L = ATON._queryDataSem.list;\r\n    let sp = h.object.parent;\r\n    while (sp){\r\n        if (sp.nid && sp.nid !== ATON.ROOT_NID) L.push(sp.nid);\r\n        sp = sp.parent;\r\n    }\r\n\r\n    let hsn = L[0];\r\n    if (hsn){\r\n        if (ATON._hoveredSemNode !== hsn){\r\n            if (ATON._hoveredSemNode){\r\n                ATON.fireEvent(\"SemanticNodeLeave\", ATON._hoveredSemNode);\r\n                let S = ATON.getSemanticNode(ATON._hoveredSemNode);\r\n                if (S && S.onLeave) S.onLeave();\r\n            }\r\n\r\n            ATON._hoveredSemNode = hsn;\r\n            ATON.fireEvent(\"SemanticNodeHover\", hsn);\r\n            let S = ATON.getSemanticNode(hsn);\r\n            if (S && S.onHover) S.onHover();\r\n        }\r\n    }\r\n\r\n    //console.log(L);\r\n};\r\n\r\nATON._handleQueryUI = ()=>{\r\n    if (ATON.XR.isPresenting()){\r\n        ATON._rcUI.set( ATON.XR.getControllerWorldLocation(0), ATON.XR.getControllerWorldDirection(0) );\r\n    }\r\n    else \r\n        ATON._rcUI.setFromCamera( ATON._screenPointerCoords, ATON.Nav._camera );\r\n\r\n    ATON._hitsUI = [];\r\n    ATON._rcUI.intersectObjects( ATON._mainRoot.children, true, ATON._hitsUI );\r\n\r\n    // Process hits\r\n    let hitsnum = ATON._hitsUI.length;\r\n    if (hitsnum <= 0){\r\n        ATON._queryDataUI = undefined;\r\n\r\n        if (ATON._hoveredUI){\r\n            ATON.fireEvent(\"UINodeLeave\", ATON._hoveredUI);\r\n            let S = ATON.getUINode(ATON._hoveredUI);\r\n            if (S && S.onLeave) S.onLeave();\r\n        }\r\n        \r\n        ATON._hoveredUI = undefined;\r\n        return;\r\n    }\r\n\r\n    let h = ATON._hitsUI[0];\r\n\r\n    // Occlusion\r\n    if (ATON._queryDataScene){\r\n        if (ATON._queryDataScene.d < h.distance){\r\n\r\n            ATON._queryDataUI = undefined;\r\n\r\n            if (ATON._hoveredUI){\r\n                ATON.fireEvent(\"SemanticNodeLeave\", ATON._hoveredUI);\r\n                let S = ATON.getUINode(ATON._hoveredUI);\r\n                if (S && S.onLeave) S.onLeave();\r\n            }\r\n\r\n            ATON._hoveredUI = undefined;\r\n            return;\r\n        }\r\n    }\r\n\r\n    ATON._queryDataUI = {};\r\n    ATON._queryDataUI.p = h.point;\r\n    ATON._queryDataUI.d = h.distance;\r\n    ATON._queryDataUI.o = h.object;\r\n    ATON._queryDataUI.list = []; // holds ui-nodes parental list\r\n\r\n    // traverse parents\r\n    let L = ATON._queryDataUI.list;\r\n    let sp = h.object.parent;\r\n    while (sp){\r\n        if (sp.nid && sp.nid !== ATON.ROOT_NID) L.push(sp.nid);\r\n        sp = sp.parent;\r\n    }\r\n\r\n    let hui = L[0];\r\n    if (hui){\r\n        if (ATON._hoveredUI !== hui){\r\n            if (ATON._hoveredUI){\r\n                ATON.fireEvent(\"UINodeLeave\", ATON._hoveredUI);\r\n                let S = ATON.getUINode(ATON._hoveredUI);\r\n                if (S && S.onLeave) S.onLeave();\r\n            }\r\n\r\n            ATON._hoveredUI = hui;\r\n            ATON.fireEvent(\"UINodeHover\", hui);\r\n            let S = ATON.getUINode(hui);\r\n            if (S && S.onHover) S.onHover();\r\n        }\r\n    }\r\n};\r\n\r\n\r\nexport default ATON;\r\n\r\n\r\n"]}