{"version":3,"sources":["ATON.node.js","ATON.pov.js","ATON.lightprobe.js","ATON.eventhub.js","ATON.mathub.js","ATON.utils.js","ATON.scenehub.js","ATON.nav.js","ATON.xr.js","ATON.sui.button.js","ATON.sui.js","ATON.avatar.js","ATON.vroadcast.js","ATON.semfactory.js","ATON.fe.js","ATON.js"],"names":["Node","THREE","Group","id","type","traverse","o","isMesh","geometry","LP","userData","undefined","update","material","envMap","getEnvTex","ATON","NTYPES","SCENE","bPickable","_rootG","_rootVisible","_nodes","snodes","SEM","_rootSem","semnodes","UI","_rootUI","uinodes","as","kwords","_bCloneOnLoadHit","castShadow","receiveShadow","onHover","onLeave","onSelect","ROOT_NID","nid","name","b","kw","K","split","k","c","children","C","addKeywords","s","description","visible","layers","disable","enable","hide","show","enablePicking","disablePicking","M","cMat","matSTD","matHL","setMaterial","f","opacity","envtex","Utils","assignLightProbeToMesh","_lps","length","Vector3","cLP","Box3","setFromObject","getCenter","mdist","i","d","distanceToSquared","pos","clone","p","parent","removeChild","dispose","remove","num","node","N","add","bb","bs","Sphere","getBoundingSphere","x","y","z","position","copy","set","sx","sy","sz","scale","rx","ry","rz","rotation","quaternion","Nav","_qOri","url","onComplete","_assetsManager","then","modelVisitor","console","log","_assetReqNew","P","Promise","resolve","reject","_aLoader","load","data","model","scene","_assetReqComplete","err","filename","exportNode","h","POV","target","up","STD_UPVECTOR","fov","STD_FOV","nextPOV","prevPOV","povlist","push","kwarray","pov","LightProbe","res","near","far","_res","_near","_far","STD_FAR","_envtex","_prevCCtarget","_pmremGenerator","PMREMGenerator","_renderer","CCtarget","WebGLCubeRenderTarget","format","RGBEFormat","generateMipmaps","minFilter","LinearMipmapLinearFilter","encoding","sRGBEncoding","CC","CubeCamera","_rootVisibleGlobal","texture","EventHub","evLocal","evNetwork","on","fireEvent","clearEventHandlers","evtname","ehList","handler","handlerLocal","handlerNetwork","evhLocal","VRoadcast","bReplicate","executeHandlers","MatHub","materials","colors","addDefaults","_loader","MaterialLoader","white","Color","black","green","yellow","red","blue","orange","sem","darksem","fullyTransparent","MeshBasicMaterial","transparent","depthWrite","selector","color","flatShading","controllerRay","semanticShape","semanticShapeHL","semanticShapeEdit","mat","jsonfile","addMaterial","device","geomUnitSphere","SphereBufferGeometry","exporterGLTF","exporterOBJ","_dlink","document","createElement","style","display","body","appendChild","textureLoader","TextureLoader","window","isSecureContext","isMobile","test","navigator","userAgent","substr","isXRsupported","xr","isSessionSupported","filepath","lastIndexOf","toLowerCase","index","substring","startsWith","endpoint","obj","onReceive","onFail","$","ajax","xhrFields","withCredentials","JSON","stringify","contentType","dataType","success","fail","object","updateMatrixWorld","g","applyMatrix4","matrixWorld","toNonIndexed","mergedGeometries","BufferGeometryUtils","mergeBufferGeometries","mergedGeometry","mergeVertices","center","group","mesh","Mesh","parentNode","computeBoundsTree","map","anisotropy","_maxAnisotropy","magFilter","LinearFilter","v","prec","parseFloat","toPrecision","blob","href","URL","createObjectURL","download","click","str","downloadBlob","Blob","jsonobj","downloadText","buffer","ext","getFileExtension","bBin","opts","binary","GLTFExporter","parse","output","ArrayBuffer","downloadArrayBuffer","downloadJSONobj","OBJExporter","size","img","Image","_camera","aspect","updateProjectionMatrix","setSize","render","_mainRoot","b64img","domElement","toDataURL","src","replace","_onResize","noLP","BoxBufferGeometry","MeshStandardMaterial","PATH_RES","tex","createSceneNode","metalness","metalnessMap","roughnessMap","normalMap","dx","dz","PlaneBufferGeometry","rotateX","Math","PI","SceneHub","currID","currData","_bEdit","_bLoading","initBaseParsers","reqpath","sid","oncomplete","getJSON","parseScene","sobj","_jsonParsers","getSemanticNode","getSceneNode","child","nodes","edges","n","semid","S","SL","sphere","CL","semesh","_convexPoints","environment","env","pano","mainpano","setMainPanorama","PATH_COLLECTION","setMainPanoramaRotation","L","mainlight","direction","setMainLightDirection","_dMainL","intensity","shadows","toggleShadows","lps","lightprobes","auto","setAutoLP","navmode","setNavMode","viewpoints","povs","setHomePOV","setPosition","setTarget","setFOV","setKeywords","keywords","scenegraph","sg","G","getOrCreateSceneNode","removeChildren","urls","Array","isArray","forEach","u","attachTo","shadowcast","setShadowCast","shadowreceive","toYup","setYup","transform","setRotation","setScale","parid","childid","semanticgraph","getOrCreateSemanticNode","createSemanticNode","setDescription","spheres","SemFactory","createSphere","convexshapes","points","createConvexShape","parser","patch","mode","MODE_ADD","O","MODE_DEL","jstr","PATH_RESTAPI","r","COSINOIDAL_DIST","cos","POVtransitionDuration","STD_POV_TRANS_DURATION","init","_mode","_rotSpeedOrbit","_rotSpeedFP","_inertia","setOrbitControl","_currPOV","_fromPOV","_reqPOV","homePOV","_tPOVcall","_tPOVprogress","_vDir","Quaternion","_motionAmt","_motionDir","getCurrentEyeLocation","getCurrentDirection","copyCurrentPOV","isTransitioning","isOrbit","MODE_ORBIT","isFirstPerson","MODE_FP","isDevOri","MODE_DEVORI","setFirstPersonControl","setDeviceOrientationControl","XR","isPresenting","_cOrbit","_camOrbit","PerspectiveCamera","innerWidth","innerHeight","STD_NEAR","enableAll","OrbitControls","rotateSpeed","enablePan","enableDamping","dampingFactor","screenSpacePanning","enableZoom","minDistance","maxDistance","addEventListener","_bControlChange","_controls","syncCurrCamera","_cFirstPerson","_camFP","_screenPointerCoords","_cDevOri","_camDevOri","DeviceOrientationControls","alphaOffset","setMotionAmount","setMotionDirection","stop","cam","getFOV","syncCurrPOV","getCamera","getWorldPosition","getWorldQuaternion","getWorldDirection","ctrl","handlePOV","handleXRtransition","handlePOVtransition","handleMotion","controller0","negate","fv","multiplyScalar","_dt","_clock","elapsedTime","lerpVectors","MathUtils","lerp","_currPos","_fromPos","_reqPos","tgt","subVectors","normalize","FP_EPS","requestPOV","duration","requestPOVbyBound","T","E","radius","requestPOVbyNode","getBound","requestRetarget","point","normal","distanceTo","computeDefaultHome","dv","sceneBS","getRootScene","eye","computeAndRequestDefaultHome","requestHome","scope","reorder","enabled","deviceOrientation","screenOrientation","absolute","alphaOffsetDevice","alphaOffsetScreen","onDeviceOrientationChangeEvent","zee","euler","q0","q1","event","onDeviceOrientationAbsoluteChangeEvent","onScreenOrientationChangeEvent","orientation","setObjectQuaternion","Euler","sqrt","alpha","beta","gamma","orient","setFromEuler","multiply","setFromAxisAngle","connect","disconnect","removeEventListener","getDirection","degToRad","iOSOrientationPermission","DeviceOrientationEvent","requestPermission","permissionState","catch","error","webkitCompassHeading","getDirectionMap","setReferenceSpaceType","setFramebufferScaleFactor","_bPresenting","currSession","rig","gControllers","controller0pos","controller1pos","controller0dir","controller1dir","defaultSelectHandler","_queryDataScene","userHeight","STD_TELEP_DURATION","_hoveredUI","H","getUINode","session","onSessionEnded","setSession","getController","controller1","e","gamepad","gp","pose","hasPosition","_handleUISelection","setRefSpaceLocation","setupControllersUI","requestSession","optionalFeatures","onSessionStarted","end","raytick","CylinderBufferGeometry","translate","raylen","createUINode","getControllerGrip","Button","uiid","baseColor","switchColor","_bSwitched","container","ThreeMeshUI","Block","width","height","padding","borderRadius","backgroundColor","backgroundOpacity","fontFamily","fontTexture","justifyContent","alignContent","uiText","Text","content","fontSize","fontColor","_trigger","PlaneGeometry","SUI","STD_BTN_SIZE","text","mainSelector","getMaterial","setSelectorRadius","gPoints","buildInfoNode","bShowInfo","_labelScale","_labelScaleVR","infoNodeText","getSelectorRadius","setSelectorModel","path","bUseStdMat","infoNode","attachToRoot","infoContainer","getInfoNode","createToolbar","buttonlist","cont","m","button","_bPauseQuery","_queryDataSem","orientToCamera","Avatar","uid","userid","username","message","bTalking","_tStateCall","_tStateDur","_tProgress","_currState","_tgtState","realize","avaMats","avatars","SphereGeometry","usermaterial","getAvatarMaterialByUID","smesh","usermeshnode","setCloneOnLoadHit","userlabelnode","labelcontainer","ucolorsdark","usernametext","usermessagetext","A","msg","D","cs","ts","slerp","handleStateTransition","address","location","origin","initMaterials","socket","_connected","_username","_numUsers","avatarList","avaGroup","setInterval","sendState","USER_STATE_FREQ","_lastStateSent","enableChatLog","_elChat","getNumUsers","ucolors","ucolorhex","MM","sock","emit","REPLICATED_EVT","evhNetwork","isConnected","requestSceneEnter","sceneid","protocol","secure","rejectUnauthorized","io","connected","_registerSocketHandlers","_onConnected","setUsername","append","setMessage","_msg","scrollTop","scrollHeight","touchAvatar","decodeState","requestStateTransition","uname","getUsername","encodeState","Float32Array","binData","Int8Array","w","a8","a","cpov","lastPos","lastOri","dPos","dOri","angleTo","THRES_STATE_POS","THRES_STATE_ORI","getAvatar","loadRepresentation","clearAllAvatars","bConvexBuilding","convexPoints","convexNode","currConvexMesh","currSemNode","currMaterial","_numShapes","numPoints","geom","ConvexBufferGeometry","currSemesh","setVectorPrecision","setDefaultAndHighlightMaterials","offset","addConvexPoint","Object3D","FE","PATH_RES_ICONS","_bPopup","bPopupBlurBG","_userAuth","_bReqHome","urlParams","URLSearchParams","search","_uiSetupBase","ddens","get","setDefaultPixelDensity","_kModShift","reqstr","PATH_RESTAPI_SCENE","uiAddButton","toggleFullScreen","isConnectionSecure","toggle","popupClose","html","idcontainer","icon","onPress","iconurl","iconid","endsWith","slice","htmlcode","addClass","removeClass","uiSwitchButton","popupQR","screenfull","isFullscreen","popupVRC","checkAuth","attr","popupUser","inputid","value","val","regReplace","RegExp","auLib","switch","Audio","loop","htmlcontent","cssClasses","clstr","htcont","stopPropagation","fadeIn","setPixelRatio","resetPixelDensity","fadeOut","focusOn3DView","popupShow","QRCode","getElementById","cover","takeScreenshot","parseInt","postJSON","keypress","keycode","keyCode","which","setEditMode","password","RAD2DEG","DEG2RAD","PATH_MODS","PATH_THREE","PATH_DRACO_LIB","PATH_BASIS_LIB","PATH_MODELS","PATH_SCENES","SHADOWS_NEAR","SHADOWS_FAR","SHADOWS_SIZE","SHADOWS_RES","setPathCollection","setPathScenes","_setupBaseListeners","el","_updateScreenMove","_onMouseWheel","Hammer","srcEvent","_handleQueries","defaultDoubleTapFromScreenCoords","_kModCtrl","key","max","preventDefault","deltaY","focus","_handleQueryScene","bFPtrans","currDir","feye","ftgt","hsn","_hoveredSemNode","profileDevice","Clock","WebGLRenderer","antialias","preserveDrawingBuffer","_stdpxd","outputEncoding","setAnimationLoop","_onFrame","capabilities","getMaxAnisotropy","Cache","GLTFLoader","_dracoLoader","DRACOLoader","setDecoderPath","setDRACOLoader","_numReqLoad","_bAutoLP","_bShadowsFixedBound","initGraphs","_queryDataUI","_bQuerySemOcclusion","_bQueryNormals","Vector2","_rcScene","Raycaster","_rcSemantics","_rcUI","renderPause","renderResume","_setupLoadManager","_loadManager","LoadingManager","onStart","itemsLoaded","itemsTotal","onLoad","onProgress","onError","getRootSemantics","getRootUI","shadowMap","shadow","camera","left","right","bottom","top","updateDirShadows","addLightProbe","setNear","assignLightProbesByProximity","setTimeout","_mMainPano","updateLightProbes","Scene","background","setAsRoot","ambLight","AmbientLight","setBackgroundColor","bg","setNeutralAmbientLight","_indLP","LightProbeGenerator","fromCubeRenderTarget","tpano","_matMainPano","_gMainPano","fog","depthTest","frustumCulled","setMainPanoramaRadius","onAfterRender","DirectionalLight","_dMainLtgt","_dMainLpos","_dMainLdir","PCFSoftShadowMap","mapSize","_updateEnvironment","dt","getDelta","_fps","clientX","clientY","_registerRCS","_rcRR","_rcHandlers","_handleQuerySemantics","_handleQueryUI","hitsnum","getControllerWorldLocation","getControllerWorldDirection","setFromCamera","_hitsScene","intersectObjects","distance","face","Matrix3","getNormalMatrix","applyMatrix3","getSceneQueriedPoint","getSceneQueriedDistance","getSceneQueriedNormal","_hitsSem","list","sp","_hitsUI","hui"],"mappings":"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","file":"ATON.min.js","sourceRoot":"..\\src","sourcesContent":["/*\r\n    ATON Node Class\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n//import Period from \"./ATON.period.js\";\r\n\r\n\r\n/**\r\nClass representing an ATON node.\r\nConstructor allows to create different types (scene nodes, semantic nodes and UI nodes)\r\n@class Node\r\n@example \r\nlet myNode = new ATON.Node(\"someID\")\r\n*/\r\nclass Node extends THREE.Group {\r\n\r\nconstructor(id, type){\r\n    super();\r\n\r\n    this.type = type? type : ATON.NTYPES.SCENE;\r\n    \r\n    this.bPickable = true;\r\n\r\n    if (this.type === ATON.NTYPES.SCENE){\r\n        this._rootG = ATON._rootVisible;\r\n        this._nodes = ATON.snodes;\r\n        //this.period = undefined; // TODO: assign period object (read-only, centralized) - NOT USED FOR NOW\r\n    }\r\n    if (this.type === ATON.NTYPES.SEM){\r\n        this._rootG = ATON._rootSem;\r\n        this._nodes = ATON.semnodes;\r\n        //this.period = undefined;\r\n    }\r\n\r\n    if (this.type === ATON.NTYPES.UI){\r\n        this._rootG = ATON._rootUI;\r\n        this._nodes = ATON.uinodes;\r\n    }\r\n\r\n    // Register\r\n    this.as(id);\r\n\r\n    this.kwords = undefined;\r\n\r\n    this._bCloneOnLoadHit = true;\r\n\r\n    // Shadows\r\n    this.castShadow    = false;\r\n    this.receiveShadow = false;\r\n\r\n    // Local handlers\r\n    this.onHover  = undefined;\r\n    this.onLeave  = undefined;\r\n    this.onSelect = undefined;\r\n}\r\n\r\n/**\r\n(Re)assign node ID\r\n@param {string} id - the new ID\r\n@example\r\nmyNode.as(\"newID\")\r\n*/\r\nas(id){\r\n    if (id === undefined) return;\r\n    if (id === ATON.ROOT_NID) return;\r\n\r\n    this._nodes[id] = this;\r\n    this.nid  = id;\r\n    this.name = id;\r\n\r\n    return this;\r\n}\r\n\r\nsetAsRoot(){\r\n    this._nodes[ATON.ROOT_NID] = this;\r\n    this.nid = ATON.ROOT_NID;\r\n\r\n    return this;\r\n}\r\n\r\nsetCloneOnLoadHit(b){\r\n    this._bCloneOnLoadHit = b;\r\n    return this;\r\n}\r\n\r\n/**\r\nAdd keyword(s) to this node. Keywords are also recursively added into the sub-graph\r\n@param {string} kw - the keyword or comma-separated list of keywords\r\n@example\r\nmyNode.addKeywords(\"heritage,reconstruction\");\r\n*/\r\naddKeywords(kw){\r\n    let K = kw.split(\",\");\r\n\r\n    if (this.kwords === undefined) this.kwords = {};\r\n    for (let k in K) this.kwords[ K[k] ] = true;\r\n\r\n    // recurse into ATON nodes\r\n    for (let c in this.children){\r\n        let C = this.children[c];\r\n        if (C.type !== undefined) C.addKeywords(kw);\r\n    }\r\n\r\n    return this;\r\n}\r\n\r\n/**\r\nReturns true if this node has specific keyword\r\n@param {string} kw - the keyword\r\n@returns {boolean}\r\n@example\r\nif (myNode.hasKeyword(\"heritage\")){ ... }\r\n*/\r\nhasKeyword(kw){\r\n    if (this.kwords === undefined) return;\r\n    return (this.kwords[kw] !== undefined);\r\n}\r\n\r\n/**\r\nSet custom description (string) to the node\r\n@param {string} s - content\r\n@example\r\nmyNode.setDescription(\"This is a small description\");\r\n*/\r\nsetDescription(s){\r\n    this.userData.description = s;\r\n    return this;\r\n}\r\n\r\n/**\r\nGet node description (string) if any\r\n@returns {string}\r\n@example\r\nlet desc = myNode.getDescription();\r\n*/\r\ngetDescription(){\r\n    return this.userData.description;\r\n}\r\n\r\n/**\r\nHide this node (and sub-graph), also invisible to queries (ray casting, picking)\r\n@example\r\nmyNode.hide()\r\n*/\r\nhide(){ \r\n    this.visible = false;\r\n    this.traverse((o) => { o.layers.disable(this.type); });\r\n}\r\n\r\n/**\r\nShow this node (and sub-graph). If pickable, becomes sensible to queries (ray casting)\r\n@example\r\nmyNode.show()\r\n*/\r\nshow(){ \r\n    this.visible = true;\r\n    if (this.bPickable) this.traverse((o) => { o.layers.enable(this.type); });\r\n    return this;\r\n}\r\n\r\n/**\r\nToggle node visibility. If visible, becomes invisible, and viceversa.\r\n@example\r\nmyNode.toggle()\r\n*/\r\ntoggle(b){\r\n    if (b === undefined){\r\n        if (this.visible) return this.hide();\r\n        else return this.show();\r\n    }\r\n\r\n    if (b) return this.show();\r\n    else return this.hide();\r\n}\r\n\r\n/**\r\nDisable this node for runtime queries (ray casters). Useful for instance on vegetation, etc...\r\n@example\r\nmyNode.load(\"somevegetation.gltf\").disablePicking()\r\n*/\r\ndisablePicking(){\r\n    this.bPickable = false;\r\n    this.traverse((o) => { o.layers.disable(this.type); });\r\n    return this;  \r\n}\r\n\r\n/**\r\nEnable this node for runtime queries (ray casters)\r\n@example\r\nmyNode.enablePicking()\r\n*/\r\nenablePicking(){\r\n    this.bPickable = true;\r\n    this.traverse((o) => { o.layers.enable(this.type); });\r\n    return this;\r\n}\r\n\r\nsetPickable(b){\r\n    if (b) this.enablePicking();\r\n    else this.disablePicking();\r\n\r\n    return this;\r\n}\r\n\r\n/**\r\nSet cascading material. Note this applies to this node and all children (even all those still loading)\r\n@param {THREE.Material} M - the Material\r\n@example\r\nmyNode.setMaterial( new THREE.MeshBasicMaterial({ transparent: true, opacity: 0.2, wireframe: true }) )\r\n*/\r\nsetMaterial(M){\r\n    this.userData.cMat = M;\r\n\r\n    this.traverse((o) => {\r\n        if (o.isMesh){\r\n            this.userData.cMat = M;\r\n            o.material = M;\r\n            //o.material.needsUpdate = true;\r\n            }\r\n    });\r\n\r\n    return this;\r\n}\r\n\r\n/** \r\nGet cascading material\r\n@returns {THREE.Material}\r\n*/\r\ngetMaterial(){\r\n    return this.userData.cMat;\r\n}\r\n\r\n// Set default and highlight materials\r\nsetDefaultAndHighlightMaterials(matSTD, matHL){\r\n    this.userData.matSTD = matSTD;\r\n    this.userData.matHL  = matHL;\r\n\r\n    return this;\r\n}\r\nhighlight(){\r\n    if (this.userData.matHL) this.setMaterial(this.userData.matHL);\r\n    return this;\r\n}\r\nrestoreDefaultMaterial(){\r\n    if (this.userData.matSTD) this.setMaterial(this.userData.matSTD);\r\n    return this;\r\n}\r\n\r\n// Set cascading opacity\r\nsetOpacity(f){\r\n    this.traverse((o) => {\r\n        if (o.isMesh){\r\n            o.material.opacity = f;\r\n            //o.material.needsUpdate = true;\r\n        }\r\n    });\r\n\r\n    return this;\r\n}\r\n\r\n// FIXME: not working\r\nsetShadowCast(b){\r\n    this.castShadow = b;\r\n\r\n    this.traverse((o) => {\r\n        if (o.isMesh){\r\n            o.castShadow = b;\r\n        }\r\n    });\r\n\r\n    return this;\r\n};\r\nsetShadowReceive(b){\r\n    this.receiveShadow = b;\r\n\r\n    this.traverse((o) => {\r\n        if (o.isMesh){\r\n            o.receiveShadow = b;\r\n        }\r\n    });\r\n\r\n    return this;\r\n};\r\n\r\nsetEnvMap(envtex){\r\n    this.traverse((o) => {\r\n        if (o.isMesh){\r\n\t\t\to.material.envMap  = envtex;\r\n\t\t\t//o.material.combine = THREE.MultiplyOperation;\r\n            //o.material.needsUpdate = true;\r\n        }\r\n    });\r\n\r\n    return this;\r\n}\r\n\r\nassignLightProbe(LP){\r\n    this.traverse((o) => {\r\n        if (o.isMesh && o.geometry) ATON.Utils.assignLightProbeToMesh(LP, o);\r\n    });\r\n\r\n    return this;\r\n}\r\n\r\n// (re)assign LPs for each mesh depending on proximity\r\nassignLightProbesByProximity(){\r\n    if (ATON._lps.length === 0) return this;\r\n\r\n    this.traverse((o) => {\r\n        if (o.isMesh && o.geometry){\r\n            let c = new THREE.Vector3();\r\n            let bbox = new THREE.Box3().setFromObject(o).getCenter(c);\r\n\r\n            let cLP   = undefined;\r\n            let mdist = undefined;\r\n\r\n            for (let i in ATON._lps){\r\n                let LP = ATON._lps[i];\r\n                let d = c.distanceToSquared(LP.pos);\r\n\r\n                if (cLP === undefined || d < mdist){\r\n                    mdist = d;\r\n                    cLP = LP;\r\n                }\r\n            }\r\n\r\n            if (cLP) ATON.Utils.assignLightProbeToMesh(cLP, o);\r\n        }\r\n    });\r\n\r\n    return this;\r\n};\r\n\r\n// Find & update all LPs under this subgraph\r\n// FIXME: not working\r\nupdateLightProbes = ()=>{\r\n    this.traverse((o) => {\r\n        if (o.isMesh && o.geometry){\r\n            let LP = o.userData.LP;\r\n\r\n            if (LP !== undefined){\r\n                LP.update();\r\n                o.material.envMap = LP.getEnvTex();\r\n                //o.material.envMapIntensity = 5.0;\r\n                //console.log(\"x\");\r\n            }\r\n        }\r\n    });\r\n\r\n    return this;\r\n};\r\n\r\n// Deep clone\r\nduplicate(){\r\n    let C = this.clone();\r\n\r\n    C.traverse((o)=>{\r\n        if (o.isMesh){\r\n            o.material = o.material.clone();\r\n        }\r\n    });\r\n\r\n    return C;\r\n}\r\n\r\n\r\n// FIXME: xxx\r\ndelete(){\r\n    let p = this.parent;\r\n\r\n    if (p !== undefined && p.nid !== undefined) p.removeChild( this );\r\n}\r\n\r\nremoveChild(c){\r\n    if (c === undefined) return;\r\n\r\n    let nid = c.nid;\r\n    if (c.nid !== undefined) this._nodes[c.nid] = undefined;\r\n\r\n    c.parent = undefined;\r\n\r\n    c.traverse((o) => {\r\n        if (o.geometry) o.geometry.dispose();\r\n        if (o.material) o.material.dispose();\r\n    });\r\n\r\n    this.remove(c);\r\n\r\n    return this;\r\n}\r\n/**\r\nDelete all children of this node\r\n*/\r\nremoveChildren(){\r\n    let num = this.children.length;\r\n    for (let i=(num-1); i>=0; i--) this.removeChild(this.children[i]);\r\n\r\n    return this;\r\n}\r\n\r\n\r\n/**\r\nAttach this node to parent by providing ID (string) or node object\r\n@param {string|Node} node - the parent node\r\n@example\r\nmyNode.attachTo(\"someGroupID\")\r\n@example\r\nmyNode.attachTo(myParentGroup)\r\n*/\r\nattachTo(node){\r\n    let N = (typeof node === 'string')? this._nodes[node] : node;\r\n    if (N){\r\n        N.add(this);\r\n        if (N.userData.cMat) this.userData.cMat = N.userData.cMat;\r\n        }\r\n    return N;\r\n}\r\n\r\n/**\r\nAttach this node to main root. This is usually mandatory in order to visualize the node and all its descendants.\r\nDepending on node type this will be the scene root (visible scene-graph), the semantic-graph root or UI root\r\n@example\r\nmyNode.attachToRoot()\r\n*/\r\nattachToRoot(){\r\n    this._rootG.add(this);\r\n    if (this._rootG.userData.cMat) this.userData.cMat = this._rootG.userData.cMat;\r\n    return this._rootG;\r\n}\r\n\r\n/**\r\nReturn bounding sphere of this node\r\n@returns {THREE.Sphere}\r\n@example\r\nlet bs = myNode.getBound()\r\n*/\r\ngetBound(){\r\n    let bb = new THREE.Box3().setFromObject( this );\r\n    let bs = new THREE.Sphere();\r\n    bb.getBoundingSphere(bs);\r\n\r\n    return bs;\r\n}\r\n\r\n/**\r\nSet location (translation) of this node\r\n@example\r\nmyNode.setPosition(1.0,3.0,0.0)\r\n@example\r\nmyNode.setPosition( new THREE.Vector3(1.0,3.0,0.0) )\r\n*/\r\nsetPosition(x,y,z){\r\n    if (x instanceof THREE.Vector3) this.position.copy(x);\r\n    else this.position.set(x,y,z);\r\n\r\n    return this;\r\n}\r\n\r\n/**\r\nSet scale of this node\r\n@example\r\nmyNode.setScale(3.0,2.0,1.0)\r\n@example\r\nmyNode.setScale(2.0)\r\n@example\r\nmyNode.setScale( new THREE.Vector3(3.0,2.0,1.0) )\r\n*/\r\nsetScale(sx,sy,sz){\r\n    if (sx instanceof THREE.Vector3) this.scale.copy(sx);\r\n    else {\r\n        if (sy === undefined){ sy = sx; sz = sx; }\r\n        this.scale.set(sx,sy,sz);\r\n        }\r\n    \r\n    return this;\r\n}\r\n\r\n/**\r\nSet rotation of this node (Euler rx,ry,rz) in radians\r\n@example\r\nmyNode.setRotation(3.0,2.0,1.0)\r\n@example\r\nmyNode.setRotation( new THREE.Vector3(3.0,2.0,1.0) )\r\n*/\r\nsetRotation(rx,ry,rz){\r\n    if (rx instanceof THREE.Vector3) this.rotation.copy(rx);\r\n    else this.rotation.set(rx,ry,rz);\r\n    \r\n    return this;\r\n}\r\n/**\r\nOrient this node to current camera\r\n*/\r\norientToCamera(){\r\n    this.quaternion.copy( ATON.Nav._qOri );\r\n    return this;\r\n}\r\n\r\nsetYup(){\r\n    this.rotation.set(-1.57079632679,0.0,0.0);\r\n    return this;  \r\n}\r\n\r\n/**\r\nLoad a 3D model under this node, with optional onComplete handler.\r\nNote the system will take care of loading the resources in background, and will manage duplicate requests to same resources avoiding waste of bandwidth\r\n@param {string} url - the url of the 3D model\r\n@param {function} onComplete - the optional handler to be fired on completion\r\n@example\r\nmyNode.load(\"mymodel.gltf\", ()=>{ console.log(\"completed!\") })\r\n*/\r\nload(url, onComplete){\r\n    if (url === undefined) return this;\r\n\r\n    let N = this;\r\n\r\n    // [C] Promise already requested\r\n    if ( N._bCloneOnLoadHit && ATON._assetsManager[url] !== undefined ){\r\n        ATON._assetsManager[url].then(( o ) =>{\r\n            let C = o.clone();\r\n\r\n            ATON.Utils.modelVisitor(N, C); // check\r\n            N.add( C );\r\n\r\n            if (onComplete) onComplete();\r\n        });\r\n\r\n        console.log(\"HIT!\");\r\n        return N;\r\n    }\r\n\r\n    // Fire request\r\n    if (N.type === ATON.NTYPES.SCENE) ATON._assetReqNew(url);\r\n\r\n    let P = new Promise( ( resolve, reject ) => {\r\n        ATON._aLoader.load( url, (data)=>{\r\n            let model = data.scene || data.scene[0];\r\n\r\n            // Visit loaded model\r\n            ATON.Utils.modelVisitor(N, model);\r\n\r\n            N.add( model );\r\n\r\n            resolve(model);\r\n            console.log(\"Model \"+url+\" loaded\");\r\n            \r\n            if (N.type === ATON.NTYPES.SCENE) ATON._assetReqComplete(url);\r\n\r\n            if (onComplete) onComplete();\r\n        },\r\n        undefined,\r\n        (err)=>{\r\n            console.log(err);\r\n            //reject(model);\r\n\r\n            if (N.type === ATON.NTYPES.SCENE) ATON._assetReqComplete(url);\r\n            if (onComplete) onComplete();\r\n        });\r\n\r\n/*\r\n        ATON._aLoader.load( url+\"__LOD2-d.gltf\", (data)=>{\r\n            let model = data.scene || data.scene[0];\r\n            ATON._modelVisitor(model);\r\n\r\n            let C = new THREE.Vector3();\r\n            let bb = new THREE.Box3().setFromObject( model ).getCenter(C);\r\n            model.position.set(-C.x,-C.y,-C.z);\r\n\r\n            let lod = new THREE.LOD();\r\n            lod.position.set(C.x,C.y,C.z);\r\n            lod.matrixAutoUpdate = true;\r\n            lod.addLevel(model, 40.0);\r\n            N.add(lod);\r\n\r\n            //N.add( model );\r\n\r\n            resolve(model);\r\n            console.log(\"ATON model \"+url+\" loaded\");\r\n\r\n            ATON._aLoader.load( url+\"__LOD1-d.gltf\", (data2)=>{\r\n                let model2 = data2.scene || data2.scene[0];\r\n                ATON._modelVisitor(model2);\r\n\r\n                model2.position.set(-C.x,-C.y,-C.z);\r\n                \r\n                lod.addLevel(model2, 0.0);\r\n            });\r\n            \r\n            ATON._assetReqComplete(url);\r\n        });\r\n*/\r\n    });\r\n\r\n    // Register\r\n    if (N._bCloneOnLoadHit) ATON._assetsManager[url] = P;\r\n\r\n    return this;\r\n}\r\n\r\nexportAs( filename ){\r\n    ATON.Utils.exportNode(this, filename);\r\n\r\n    return this;\r\n}\r\n\r\nsetOnHover( h ){\r\n    this.onHover = f;\r\n    return this;\r\n}\r\nsetOnLeave( h ){\r\n    this.onLeave = f;\r\n    return this;\r\n}\r\nsetOnSelect( h ){\r\n    this.onSelect = f;\r\n    return this;\r\n}\r\n\r\n// Assign a period to this node\r\n// TODO: \r\n/*\r\nsetPeriod(p){\r\n    if (this.type === ATON.NTYPES.UI) return this; // not on UI nodes\r\n\r\n    let P = (typeof p === 'string')? ATON.periods[p] : p;\r\n    if (P === undefined) return this;\r\n\r\n    this.period = P;\r\n    return this;\r\n}\r\n\r\nfilterByPeriodID(id){\r\n    if (this.period === undefined) return this;\r\n\r\n    if (this.period.id !== id){\r\n        this.hide();\r\n        return this;\r\n        }\r\n    else {\r\n        this.show();\r\n        return this;\r\n    }\r\n\r\n    this.traverse((o) => {\r\n        if (o.period){\r\n            if (o.period.id === id) this.show();\r\n            else this.hide();\r\n        }\r\n    });\r\n\r\n    return this;\r\n}\r\n*/\r\n\r\n}\r\n\r\nexport default Node;","/*\r\n    ATON Viewpoint Class\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\n/**\r\nClass representing a Viewpoint (POV) in the 3D space, abstracting from device used (mobile, desktop or immersive XR).\r\nConstructor allows to assign the POV a unique ID (`string`)\r\n@class POV\r\n@example \r\nnew ATON.POV(\"myView\")\r\n*/\r\nclass POV {\r\n\r\nconstructor(id){\r\n    this.pos    = new THREE.Vector3(1,0,0);\r\n    this.target = new THREE.Vector3(0,0,0);\r\n    this.up     = ATON.STD_UPVECTOR;\r\n    this.fov    = ATON.Nav.STD_FOV;\r\n\r\n    this.kwords = undefined;\r\n\r\n    this.nextPOV = undefined;\r\n    this.prevPOV = undefined;\r\n\r\n    // Register\r\n    this.as(id);\r\n}\r\n\r\nas(id){\r\n    if (id === undefined) return;\r\n\r\n    ATON.Nav.povlist[id] = this;\r\n    this.id = id;\r\n\r\n    return this;\r\n}\r\n\r\n/**\r\nSet eye position\r\n@example\r\nnew ATON.POV(\"myView\").setPosition(2.0,6.0,1.5)\r\n@example\r\nmypov.setPosition( new THREE.Vector3(2.0,6.0,1.5) )\r\n*/\r\nsetPosition(x,y,z){\r\n    if (x instanceof THREE.Vector3) this.pos.copy(x);\r\n    else this.pos.set(x,y,z);\r\n\r\n    return this;\r\n}\r\n\r\n/**\r\nSet target position\r\n@example\r\nnew ATON.POV(\"myView\").setTarget(8.0,6.0,1.5)\r\n@example\r\nmypov.setTarget( new THREE.Vector3(8.0,6.0,1.5) ).setPosition(2.0,6.0,1.5)\r\n*/\r\nsetTarget(x,y,z){\r\n    if (x instanceof THREE.Vector3) this.target.copy(x);\r\n    else this.target.set(x,y,z);\r\n\r\n    return this;\r\n}\r\n\r\n/**\r\nSet field of view (FOV) in degrees\r\n@param {number} f\r\n@example\r\nnew ATON.POV(\"myView\").setFOV(70.0)\r\n*/\r\nsetFOV(f){\r\n    this.fov = f;\r\n\r\n    return this;\r\n}\r\n\r\n/**\r\nAdd a keyword to this viewpoint\r\n@param {string} kw - the keyword\r\n@example\r\nnew ATON.POV(\"myView\").addKeyword(\"heritage\")\r\n*/\r\naddKeyword(kw){\r\n    if (this.kwords === undefined) this.kwords = [];\r\n    this.kwords.push(kw);\r\n\r\n    return this;\r\n}\r\n\r\nsetKeywords(kwarray){\r\n    this.kwords = kwarray;\r\n    return this;\r\n}\r\n\r\n/**\r\nSet an optional next POV\r\n@param {POV} pov - the next POV\r\n*/\r\nsetNextPOV(pov){\r\n    if (!pov) return;\r\n    this.nextPOV = pov;\r\n\r\n    return this;\r\n}\r\n\r\n/**\r\nSet an optional previous POV\r\n@param {POV} pov - the previous POV\r\n*/\r\nsetPrevPOV(pov){\r\n    if (!pov) return;\r\n    this.prevPOV = pov;\r\n\r\n    return this;\r\n}\r\n\r\n}\r\n\r\nexport default POV;","/*\r\n    ATON Light Probe Class\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\n/**\r\nClass representing a light probe (LP), can be static or updated at runtime\r\n@class LightProbe\r\n@param {number} res - Resolution in pixel of lightprobe (default 64)\r\n@param {number} near - Capture near (default 1m)\r\n@param {number} far - Capture far (default 1Km)\r\n@example \r\nlet LP = new ATON.LightProbe()\r\n*/\r\nclass LightProbe {\r\n\r\nconstructor(res, near, far){\r\n    this.pos = new THREE.Vector3(0,0,0);\r\n\r\n    this._res  = (res !== undefined)?  res  : 64;\r\n    this._near = (near !== undefined)? near : 1.0;\r\n    this._far  = (far !== undefined)?  far  : ATON.Nav.STD_FAR;\r\n/*\r\n    this._LPtarget0 = undefined;\r\n    this._LPtarget1 = undefined;\r\n\r\n    this._LP0 = undefined;\r\n    this._LP1 = undefined;\r\n\r\n    this._flipLP = false;\r\n*/\r\n    this._envtex = undefined;\r\n    this._prevCCtarget = undefined;\r\n\r\n    this._pmremGenerator = new THREE.PMREMGenerator(ATON._renderer);\r\n\r\n    //this.realize();\r\n}\r\n\r\n/*\r\nrealize(){\r\n    this._LPtarget0 = new THREE.WebGLCubeRenderTarget( this._res, {\r\n        format: THREE.RGBFormat,\r\n        generateMipmaps: true,\r\n        minFilter: THREE.LinearMipmapLinearFilter,\r\n        encoding: THREE.sRGBEncoding // prevent the material's shader from recompiling every frame\r\n    });\r\n\r\n    this._LPtarget1 = new THREE.WebGLCubeRenderTarget( this._res, {\r\n        format: THREE.RGBFormat,\r\n        generateMipmaps: true,\r\n        minFilter: THREE.LinearMipmapLinearFilter,\r\n        encoding: THREE.sRGBEncoding\r\n    });\r\n\r\n    this._LP0 = new THREE.CubeCamera( this._near, this._far, this._LPtarget0 );\r\n    this._LP1 = new THREE.CubeCamera( this._near, this._far, this._LPtarget1 );\r\n\r\n    return this;\r\n}\r\n*/\r\n\r\n/**\r\nSet LP position\r\n@example\r\nLP.setPosition(2.0,6.0,1.5)\r\n@example\r\nLP.setPosition( new THREE.Vector3(2.0,6.0,1.5) )\r\n*/\r\nsetPosition(x,y,z){\r\n    if (x instanceof THREE.Vector3) this.pos.copy(x);\r\n    else this.pos.set(x,y,z);\r\n\r\n    //if (this._LP0) this._LP0.position.copy(this.pos);\r\n    //if (this._LP1) this._LP1.position.copy(this.pos);\r\n\r\n    return this;\r\n}\r\n\r\nsetNear(near){\r\n    this._near = near;\r\n    return this;\r\n}\r\nsetFar(far){ \r\n    this._far = far;\r\n    return this;\r\n}\r\n\r\n/**\r\nUpdate LP capture. Typically called when all 3D models are loaded and arranged into the scene.\r\nCan be called at runtime or whenever there is some change in the 3D scene\r\n@example\r\nLP.update()\r\n*/\r\nupdate(){\r\n    if (this._envtex) this._envtex.dispose();\r\n    if (this._prevCCtarget) this._prevCCtarget.dispose();\r\n\r\n    let CCtarget = new THREE.WebGLCubeRenderTarget( this._res, {\r\n        format: THREE.RGBEFormat,\r\n        generateMipmaps: true,\r\n        minFilter: THREE.LinearMipmapLinearFilter,\r\n        encoding: THREE.sRGBEncoding // prevent the material's shader from recompiling every frame\r\n    });\r\n\r\n    let CC = new THREE.CubeCamera( this._near, this._far, CCtarget );\r\n    CC.position.copy(this.pos);\r\n\r\n    CC.update( ATON._renderer, ATON._rootVisibleGlobal );\r\n\r\n    this._envtex = CCtarget.texture;\r\n    \r\n/*\r\n    console.log(CC);\r\n    console.log(CCtarget);\r\n\r\n    let CCtargetX = new THREE.WebGLCubeRenderTarget( this._res, {\r\n        format: THREE.RGBFormat,\r\n        //generateMipmaps: true,\r\n        minFilter: THREE.LinearMipmapLinearFilter,\r\n        encoding: THREE.sRGBEncoding\r\n    });\r\n\r\n    let CCX = new THREE.CubeCamera( this._near, this._far, CCtargetX );\r\n    CCX.position.copy(this.pos);\r\n\r\n    CCX.update( ATON._renderer, ATON._rootVisible );\r\n    this._envtex = this._pmremGenerator.fromCubemap(CCtargetX.texture).texture;\r\n*/\r\n\r\n    this._prevCCtarget = CCtarget;\r\n\r\n\r\n/*\r\n    if (this._LP0 === undefined || this._LP1 === undefined) return this;\r\n\r\n    this._flipLP = !this._flipLP;\r\n    //ATON._flipLP = !ATON._flipLP;\r\n\r\n    if (this._flipLP){\r\n        this._LP0.update( ATON._renderer, ATON._mainRoot );\r\n        this._envtex = this._LPtarget0.texture;\r\n    }\r\n    else {\r\n        this._LP1.update( ATON._renderer, ATON._mainRoot );\r\n        this._envtex = this._LPtarget1.texture;\r\n    }\r\n*/\r\n    return this;\r\n}\r\n\r\n\r\ngetEnvTex(){\r\n    return this._envtex;\r\n}\r\n\r\nassignToNode(N){\r\n    if (N === undefined) return;\r\n    //TODO:\r\n}\r\n\r\n}\r\n\r\nexport default LightProbe;","/*\r\n    ATON Event Hub\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\n/**\r\nATON Event Hub\r\n@namespace EventHub\r\n*/\r\nlet EventHub = {};\r\n\r\n//Initializes the component\r\nEventHub.init = ()=>{\r\n\r\n    EventHub.evLocal   = {};\r\n    EventHub.evNetwork = {};\r\n\r\n    // Expose\r\n    ATON.on                 = EventHub.on;\r\n    ATON.fireEvent          = EventHub.fireEvent;\r\n    ATON.clearEventHandlers = EventHub.clearEventHandlers\r\n};\r\n\r\n/**\r\nClear all event handlers for a given event\r\n@param {string} evtname - event name\r\n*/\r\nEventHub.clearEventHandlers = (evtname)=>{\r\n    EventHub.evLocal[evtname]   = [];\r\n    EventHub.evNetwork[evtname] = [];\r\n};\r\n\r\n// Execute all handlers from list with given data\r\nEventHub.executeHandlers = (ehList, data)=>{\r\n    if (!ehList) return;\r\n\r\n    for (let h = 0; h < ehList.length; h++) {\r\n        let handler = ehList[h];\r\n        if (handler) handler(data);\r\n    }\r\n};\r\n\r\n/**\r\nSubscribe to a given event, with local handler and optional network handler.\r\nThis is also accessible as ATON.on()\r\n@param {string} evtname - event name\r\n@param {function} handlerLocal - local event handler\r\n@param {function} handlerNetwork - optional network (see VRoadcast) event handler\r\n@example\r\nATON.EventHub.on(\"myEvent\", function(data){ console.log(\"received local event\"); })\r\n@example\r\nATON.on(\"myEvent\", function(data){ console.log(\"received local event\"); })\r\n*/\r\nEventHub.on = (evtname, handlerLocal, handlerNetwork)=>{\r\n    // Local event (default)\r\n    if (handlerLocal !== undefined){\r\n        let evhLocal = EventHub.evLocal;\r\n\r\n        if (evhLocal[evtname] === undefined) evhLocal[evtname] = []; // First time (event not registered)\r\n        evhLocal[evtname].push(handlerLocal);\r\n    }\r\n\r\n    // Received event (network)\r\n    if (handlerNetwork !== undefined){\r\n        ATON.VRoadcast.on(evtname, handlerNetwork);\r\n    }\r\n\r\n};\r\n\r\n/**\r\nFire a local (and optionally network) event, with data.\r\nThis is also accessible as ATON.fireEvent()\r\n@param {string} evtname - event name\r\n@param {object} data - object containing data to be transmitted with this event\r\n@param {bool} bReplicate - if true, it will replicate (broadcast) the event to other connected peers in the same scene (see VRoadcast)\r\n@example\r\nATON.EventHub.fireEvent(\"myEvent\", data)\r\n@example\r\nATON.fireEvent(\"myEvent\", data)\r\n*/\r\nEventHub.fireEvent = (evtname, data, bReplicate)=>{\r\n    let ehList = EventHub.evLocal[evtname];\r\n    EventHub.executeHandlers(ehList, data);\r\n\r\n    if (!bReplicate) return;\r\n    ATON.VRoadcast.fireEvent(evtname, data);\r\n};\r\n\r\nexport default EventHub;","/*\r\n    ATON Materials Hub\r\n    Centralized material manager\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\n/**\r\nATON Material Hub\r\n@namespace MatHub\r\n*/\r\nlet MatHub = {};\r\n\r\nMatHub.init = ()=>{\r\n    MatHub.materials = {};\r\n    MatHub.colors    = {};\r\n\r\n    MatHub.addDefaults();\r\n\r\n    MatHub._loader = new THREE.MaterialLoader();\r\n};\r\n\r\nMatHub.addDefaults = ()=>{\r\n\r\n    // Colors\r\n    MatHub.colors.white  = new THREE.Color(1,1,1);\r\n    MatHub.colors.black  = new THREE.Color(0,0,0);\r\n    MatHub.colors.green  = new THREE.Color(0,1,0);\r\n    MatHub.colors.yellow = new THREE.Color(1,1,0);\r\n    MatHub.colors.red    = new THREE.Color(1,0,0);\r\n    MatHub.colors.blue   = new THREE.Color(0,0,1);\r\n    MatHub.colors.orange = new THREE.Color(1,0.5,0);\r\n    \r\n    MatHub.colors.sem     = new THREE.Color(0,0,1);\r\n    MatHub.colors.darksem = new THREE.Color(0,0,0.1);\r\n\r\n    // Materials\r\n    MatHub.materials.fullyTransparent = new THREE.MeshBasicMaterial({ \r\n        transparent: true, \r\n        depthWrite: false, \r\n        opacity: 0.0\r\n    });\r\n    \r\n    // Selector\r\n    MatHub.materials.selector = new THREE.MeshBasicMaterial({\r\n        color: MatHub.colors.green,\r\n        transparent: true,\r\n        depthWrite: false,\r\n        opacity: 0.2, \r\n        flatShading: true\r\n    });\r\n\r\n    // XR/VR ray\r\n    MatHub.materials.controllerRay = new THREE.MeshBasicMaterial({ \r\n        color: MatHub.colors.white, \r\n        transparent: true, \r\n        opacity: 0.2,\r\n        depthWrite: false,\r\n        flatShading: true\r\n    });\r\n\r\n    // Semantic shapes\r\n    MatHub.materials.semanticShape = new THREE.MeshBasicMaterial({ \r\n        color: MatHub.colors.sem, \r\n        transparent: true,\r\n        depthWrite: false, \r\n        opacity: 0.1,\r\n        flatShading: true\r\n    });\r\n    MatHub.materials.semanticShapeHL = new THREE.MeshBasicMaterial({ \r\n        color: MatHub.colors.sem, \r\n        transparent: true,\r\n        depthWrite: false, \r\n        opacity: 0.3,\r\n        flatShading: true\r\n    });\r\n    MatHub.materials.semanticShapeEdit = new THREE.MeshBasicMaterial({ \r\n        color: MatHub.colors.orange, \r\n        transparent: true,\r\n        depthWrite: false, \r\n        opacity: 0.5,\r\n        flatShading: true\r\n    });\r\n};\r\n\r\nMatHub.addMaterial = (id, mat)=>{\r\n    if (MatHub.materials[id]){\r\n        console.log(\"MatHub: material \"+id+\" already registered\");\r\n        return;\r\n    }\r\n\r\n    MatHub.materials[id] = mat;\r\n};\r\n\r\nMatHub.loadMaterial = (id, jsonfile)=>{\r\n    MatHub._loader.load(jsonfile, (mat)=>{\r\n        MatHub.addMaterial(id, mat);\r\n    },\r\n    undefined,\r\n    (err)=>{\r\n        console.log(err);\r\n    });\r\n};\r\n\r\nMatHub.getMaterial = (id)=>{\r\n    return MatHub.materials[id];\r\n};\r\n\r\nexport default MatHub;","/*\r\n    ATON Utils\r\n    various utilities for device profiling, graph visiting, etc.\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\n/**\r\nATON Utils\r\n@namespace Utils\r\n*/\r\nlet Utils = {};\r\n\r\n\r\nUtils.init = ()=>{\r\n    // read-only object to inspect device capabilities\r\n    ATON.device = {};\r\n\r\n    Utils.geomUnitSphere = new THREE.SphereBufferGeometry( 1.0, 16, 16 );\r\n\r\n    // Export/Download utils\r\n    Utils.exporterGLTF = undefined;\r\n    Utils.exporterOBJ  = undefined;\r\n\r\n    Utils._dlink = document.createElement('a');\r\n    Utils._dlink.style.display = 'none';\r\n    document.body.appendChild( Utils._dlink ); // Firefox workaround, see #6594\r\n\r\n    Utils.textureLoader = new THREE.TextureLoader();\r\n};\r\n\r\n/**\r\nIf current connection is secure\r\n@returns {boolean}\r\n*/\r\nUtils.isConnectionSecure = ()=>{\r\n    return window.isSecureContext;\r\n}\r\n\r\n/**\r\nIf current device is mobile (e.g. smartphone, tablet, Oculus Quest)\r\n@returns {boolean}\r\n*/\r\nUtils.isMobile = ()=>{\r\n    return ATON.device.isMobile;\r\n}\r\n\r\n// Profile device capabilities\r\nUtils.profileDevice = ()=>{\r\n\r\n    // Detect mobile\r\n    ATON.device.isMobile = false;\r\n    let detectMobile = ()=>{\r\n        if(/(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|ipad|iris|kindle|Android|Silk|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(navigator.userAgent)\r\n        || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(navigator.userAgent.substr(0,4))){\r\n            return true;\r\n            }\r\n\r\n        return false;\r\n    };\r\n\r\n    ATON.device.isMobile = detectMobile();\r\n\r\n    // XR\r\n    ATON.device.isXRsupported = false;\r\n    if ( 'xr' in navigator ){\r\n\t    navigator.xr.isSessionSupported( 'immersive-vr' ).then( function ( b ){\r\n            if (b){\r\n                ATON.device.isXRsupported = true;\r\n                console.log(\"WebXR supported\");\r\n                }\r\n            else {\r\n                ATON.device.isXRsupported = false;\r\n                console.log(\"WebXR NOT supported\");\r\n                }\r\n\t\t});\r\n    }\r\n};\r\n\r\n// Path utils\r\nUtils.getFileExtension = ( filepath )=>{\r\n\treturn filepath.substr(filepath.lastIndexOf('.')+1).toLowerCase();\r\n};\r\n\r\nUtils.getBaseFolder = ( filepath )=>{\r\n    var index = filepath.lastIndexOf('/');\r\n    if (index !== -1) return filepath.substring( 0, index + 1 );\r\n    \r\n    return '';\r\n};\r\n\r\nUtils.isResourceURL = (s)=>{\r\n    if (s.startsWith(\"http://\"))  return true;\r\n    if (s.startsWith(\"https://\")) return true;\r\n    return false;\r\n};\r\n\r\nUtils.postJSON = (endpoint, obj, onReceive, onFail)=>{\r\n    $.ajax({\r\n        url: endpoint,\r\n        type:\"POST\",\r\n        xhrFields: { withCredentials: true },\r\n        data: JSON.stringify(obj),\r\n        contentType:\"application/json; charset=utf-8\",\r\n        dataType:\"json\",\r\n\r\n        success: (data)=>{\r\n            if (onReceive) onReceive(data);\r\n        }\r\n    }).fail((err)=>{\r\n        console.log(err);\r\n        if (onFail) onFail();\r\n    });\r\n};\r\n\r\n\r\nUtils.mergeObject = ( object )=>{\r\n    object.updateMatrixWorld( true );\r\n\r\n    const geometry = [];\r\n    object.traverse( c => {\r\n        if ( c.isMesh ){\r\n            const g = c.geometry;\r\n            g.applyMatrix4( c.matrixWorld );\r\n            geometry.push( g.toNonIndexed() );\r\n        }\r\n\r\n    });\r\n\r\n    const mergedGeometries = THREE.BufferGeometryUtils.mergeBufferGeometries( geometry, false );\r\n    const mergedGeometry   = THREE.BufferGeometryUtils.mergeVertices( mergedGeometries ).center();\r\n\r\n    const group = new THREE.Group();\r\n    const mesh = new THREE.Mesh( mergedGeometry );\r\n    group.add( mesh );\r\n    return group;\r\n};\r\n\r\n// Helper visitor routine\r\nUtils.modelVisitor = (parentNode, model)=>{\r\n    if (!model) return this;\r\n\r\n    //model = Utils.mergeObject(model);\r\n    \r\n    let N = parentNode;\r\n    let type = N.type; // Differentiate visit depending on node type\r\n\r\n    model.traverse( ( o ) => {\r\n\r\n        if (N.bPickable !== undefined){\r\n            if (N.bPickable) o.layers.enable(type);\r\n            else o.layers.disable(type);\r\n        }\r\n\r\n        if (o.isMesh){\r\n            //let numVertices = o.geometry.attributes.position.count;\r\n            //console.log(numVertices);\r\n\r\n            if (type === ATON.NTYPES.SCENE){\r\n                // TODO: \r\n                o.castShadow    = true; //N.castShadow;\r\n                o.receiveShadow = true; //N.receiveShadow;\r\n\r\n                // Build accelerated ray casting\r\n                if (o.geometry){\r\n                    o.geometry.computeBoundsTree();\r\n                    console.log(\"Computed BVH\");\r\n                }\r\n\r\n                // Ensure mipmapping is correct\r\n                if ( o.material.map !== null){\r\n                    //console.log(object.material.map);\r\n                    \r\n                    // Why do I have to do this?\r\n                    //o.material.map.generateMipmaps = false;\r\n                    o.material.map.anisotropy = ATON._maxAnisotropy;\r\n                    o.material.map.minFilter  = THREE.LinearMipmapLinearFilter;\r\n                    o.material.map.magFilter  = THREE.LinearFilter;\r\n                    //o.material.map.needsUpdate = true;\r\n                }\r\n            }\r\n\r\n            if (type === ATON.NTYPES.SEM){\r\n                o.material = ATON.MatHub.materials.semanticShape;\r\n            }\r\n\r\n            // Cascading material\r\n            if (N.userData.cMat){\r\n                o.material = N.userData.cMat;\r\n                //o.material.needsUpdate = true;\r\n            }\r\n        }\r\n    });\r\n};\r\n\r\nUtils.setVectorPrecision = (v, prec)=>{\r\n    v.x = parseFloat( v.x.toPrecision(prec) );\r\n    v.y = parseFloat( v.y.toPrecision(prec) );\r\n    v.z = parseFloat( v.z.toPrecision(prec) );\r\n    \r\n    return v;\r\n};\r\n\r\n// Export routines\r\nUtils.downloadBlob = (blob, filename)=>{\r\n    if (filename === undefined) return;\r\n\r\n    Utils._dlink.href = URL.createObjectURL( blob );\r\n    Utils._dlink.download = filename;\r\n    Utils._dlink.click();\r\n};\r\n\r\n// Download text ASCII data\r\nUtils.downloadText = ( str, filename )=>{\r\n    Utils.downloadBlob( new Blob( [ str ], { type: 'text/plain' } ), filename );\r\n};\r\n\r\n// Download json object\r\nUtils.downloadJSONobj = (jsonobj, filename)=>{\r\n    Utils.downloadText( JSON.stringify(jsonobj), filename );\r\n};\r\n\r\nUtils.downloadArrayBuffer = ( buffer, filename )=>{\r\n    Utils.downloadBlob( new Blob( [ buffer ], { type: 'application/octet-stream' } ), filename );\r\n};\r\n\r\n// Export ATON node\r\nUtils.exportNode = (node, filename)=>{\r\n    let ext = Utils.getFileExtension(filename);\r\n    if (ext.length < 1) return;\r\n\r\n    // GLTF\r\n    if (ext === \"glb\" || ext === \"gltf\"){\r\n        let bBin = (ext === \"glb\")? true : false;\r\n\r\n        let opts = {\r\n            //trs: true, // Export position, rotation and scale instead of matrix per node. Default is false\r\n            binary: bBin, // Export in binary (.glb) format, returning an ArrayBuffer. Default is false\r\n            //onlyVisible: false,\r\n            //truncateDrawRange: true\r\n        };\r\n\r\n        if (Utils.exporterGLTF === undefined) Utils.exporterGLTF = new THREE.GLTFExporter();\r\n\r\n        Utils.exporterGLTF.parse( node, ( output )=>{\r\n            if ( output instanceof ArrayBuffer ){\r\n                Utils.downloadArrayBuffer( output, filename);\r\n            }\r\n            else {\r\n                console.log( output );\r\n                Utils.downloadJSONobj(output, filename);\r\n            }\r\n        }, opts);\r\n    }\r\n\r\n    // OBJ format\r\n    if (ext === \"obj\"){\r\n        if (Utils.exporterOBJ === undefined) Utils.exporterOBJ = new THREE.OBJExporter();\r\n\r\n        let output = Utils.exporterOBJ.parse(node);\r\n        //console.log(output);\r\n        Utils.downloadText(output, filename);\r\n    }\r\n};\r\n\r\nUtils.takeScreenshot = (size, filename)=>{\r\n    let img = new Image();\r\n\r\n    console.log(\"Screenshot with size:\"+size);\r\n\r\n    ATON.Nav._camera.aspect = 1.0;\r\n    ATON.Nav._camera.updateProjectionMatrix();\r\n    \r\n    ATON._renderer.setSize(size,size);\r\n    ATON._renderer.render( ATON._mainRoot, ATON.Nav._camera );\r\n\r\n    let b64img = ATON._renderer.domElement.toDataURL();\r\n    img.src = b64img;\r\n\r\n    if (filename){\r\n        Utils._dlink.href = b64img.replace(\"image/png\", \"image/octet-stream\");\r\n        Utils._dlink.download = filename;\r\n        Utils._dlink.click();\r\n    }\r\n\r\n    ATON._onResize();\r\n    return img;\r\n};\r\n\r\nUtils.assignLightProbeToMesh = (LP, mesh)=>{\r\n    if (LP === undefined || mesh === undefined) return;\r\n\r\n    if (mesh.noLP) return;\r\n\r\n    mesh.userData.LP = LP;\r\n    //LP.update();\r\n    //mesh.material.envMap = LP.getEnvTex();\r\n    \r\n    //mesh.material.combine = THREE.MultiplyOperation;\r\n    //mesh.material.needsUpdate = true;\r\n\r\n    //console.log(mesh.userData);\r\n};\r\n\r\nUtils.createATONCube = (id)=>{\r\n    let g = new THREE.BoxBufferGeometry( 1,1,1 );\r\n\r\n    let mat = new THREE.MeshStandardMaterial();\r\n\r\n    Utils.textureLoader.load((ATON.PATH_RES+\"models/aton-cube.jpg\"), (tex)=>{\r\n        tex.encoding = THREE.sRGBEncoding;\r\n        mat.map = tex;\r\n    });\r\n\r\n    let N = ATON.createSceneNode(id);\r\n    N.add( new THREE.Mesh(g) );\r\n    N.setMaterial(mat);\r\n\r\n    N.enablePicking();\r\n    return N;\r\n};\r\n\r\n\r\nUtils.createATONCubePBR = (id)=>{\r\n    let g = new THREE.BoxBufferGeometry( 1,1,1 );\r\n\r\n    let mat = new THREE.MeshStandardMaterial();\r\n    mat.metalness = 1.0;\r\n\r\n    Utils.textureLoader.load((ATON.PATH_RES+\"models/aton-cube.jpg\"), (tex)=>{\r\n        tex.encoding = THREE.sRGBEncoding;\r\n        mat.map = tex;\r\n    });\r\n\r\n    Utils.textureLoader.load((ATON.PATH_RES+\"models/aton-cube-pbr.jpg\"), (tex)=>{\r\n        tex.encoding = THREE.sRGBEncoding;\r\n        mat.metalnessMap = tex;\r\n        mat.roughnessMap = tex;\r\n    });\r\n\r\n    Utils.textureLoader.load((ATON.PATH_RES+\"models/aton-cube-nrm.png\"), (tex)=>{\r\n        tex.encoding = THREE.sRGBEncoding;\r\n        mat.normalMap = tex;\r\n\r\n        //mat.bumpMap.anisotropy = ATON._maxAnisotropy;\r\n        //mat.bumpMap.minFilter  = THREE.LinearMipmapLinearFilter;\r\n        //mat.bumpMap.magFilter  = THREE.LinearFilter;\r\n    });\r\n\r\n    let N = ATON.createSceneNode(id);\r\n    N.add( new THREE.Mesh(g) );\r\n    N.setMaterial(mat);\r\n\r\n    N.enablePicking();\r\n    return N;\r\n};\r\n\r\n\r\nUtils.createGround = (texture, dx,dz)=>{\r\n    if (dx === undefined) dx = 1.0;\r\n    if (dz === undefined) dz = 1.0;\r\n\r\n    let g = new THREE.PlaneBufferGeometry( dx, dz );\r\n\r\n    let mat = new THREE.MeshStandardMaterial();\r\n    if (texture !== undefined) Utils.textureLoader.load(texture, (tex)=>{\r\n        tex.encoding = THREE.sRGBEncoding;\r\n        mat.map = tex;\r\n    });\r\n\r\n    let N = ATON.createSceneNode().rotateX(-Math.PI * 0.5);\r\n    N.add( new THREE.Mesh(g, mat) );\r\n    N.enablePicking();\r\n\r\n    return N;\r\n};\r\n\r\n\r\nexport default Utils;","/*\r\n    ATON Scene Hub\r\n    scene JSON routines\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\n/**\r\nATON Scene Hub\r\n@namespace SceneHub\r\n*/\r\nlet SceneHub = {};\r\n\r\nSceneHub.MODE_ADD = 0;\r\nSceneHub.MODE_DEL = 1;\r\n\r\n/**\r\nInitializes the component\r\n*/\r\nSceneHub.init = ()=>{\r\n    SceneHub.currID   = undefined; // Scene ID (sid)\r\n    SceneHub.currData = undefined; // holds compact object describing our ATON scene\r\n    SceneHub._bEdit   = false;     // edit mode (client can modify json on the server)\r\n\r\n    SceneHub._bLoading = false;\r\n\r\n    SceneHub.initBaseParsers();\r\n};\r\n\r\n/**\r\nThis enables/disables edit mode - i.e. changes to the scene are sent to server and become persistent\r\n@param {bool} b - true or false\r\n@example\r\nATON.SceneHub.setEditMode(true)\r\n*/\r\nSceneHub.setEditMode = (b)=>{\r\n    SceneHub._bEdit = b;\r\n    console.log(\"Edit mode:\"+b);\r\n};\r\n\r\n\r\n/**\r\n    Loads a scene by providing JSON path\r\n    @param {string} reqpath - JSON url\r\n    @param {string} sid - Scene ID\r\n    @param {function} oncomplete - Function to be called on complete\r\n    @example\r\n        ATON.SceneHub.load(\"http://path/to/scene.json\", \"sample\", ()=>{ console.log(\"Done!\"); });\r\n*/\r\nSceneHub.load = (reqpath, sid, oncomplete)=>{\r\n    //let args = reqpath.split(',');\r\n\r\n    SceneHub._bLoading = true;\r\n    console.log(\"Loading Scene: \"+sid);\r\n\r\n    return $.getJSON( reqpath, ( data )=>{\r\n        SceneHub.currData  = data;\r\n        SceneHub.currID    = sid; //scenejson.substring(scenejson.lastIndexOf('/')+1);\r\n        SceneHub._bLoading = false;\r\n\r\n        //console.log(ATON.currScene);\r\n\r\n        SceneHub.parseScene(data);\r\n\r\n        if (oncomplete) oncomplete();\r\n        ATON.fireEvent(\"SceneJSONLoaded\", sid);\r\n    });\r\n};\r\n\r\nSceneHub.parseScene = (sobj)=>{\r\n    sobj = (sobj === undefined)? SceneHub.currData : sobj;\r\n    if (sobj === undefined) return;\r\n\r\n    for (let k in sobj)\r\n        if (SceneHub._jsonParsers[k]) SceneHub._jsonParsers[k]( sobj[k] );\r\n};\r\n\r\nSceneHub.getJSONchildren = (nid, type)=>{\r\n    if (type === undefined) type = ATON.NTYPES.SCENE;\r\n\r\n    let P = undefined;\r\n    let children = [];\r\n\r\n    if (type === ATON.NTYPES.SEM)   P = ATON.getSemanticNode(nid);\r\n    if (type === ATON.NTYPES.SCENE) P = ATON.getSceneNode(nid);\r\n\r\n    if (P === undefined) return undefined;\r\n\r\n    for (let c in P.children){\r\n        let child = P.children[c];\r\n\r\n        if (child.nid !== undefined) children.push( child.nid );\r\n        }\r\n\r\n    return children;\r\n};\r\n\r\nSceneHub.getJSONgraphEdges = (type)=>{\r\n    if (type === undefined) type = ATON.NTYPES.SCENE;\r\n    let nodes = ATON.snodes;\r\n    \r\n    if (type === ATON.NTYPES.SEM) nodes = ATON.semnodes;\r\n    if (type === ATON.NTYPES.UI)  nodes = ATON.uinodes;\r\n\r\n    let edges = {};\r\n\r\n    for (let n in nodes){\r\n        let N = nodes[n];\r\n\r\n        //if (N && N.children) edges[n] = SceneHub.getJSONchildren(n, type);\r\n\r\n        let E = {};\r\n        if (N && N.parent && N.parent.nid){\r\n            //edges.push([N.parent.nid, N.nid]);\r\n            if (edges[N.parent.nid] === undefined) edges[N.parent.nid] = [];\r\n            edges[N.parent.nid].push(N.nid);\r\n            //edges[N.parent.nid].filter((v,i) => edges[N.parent.nid].indexOf(v) === i);\r\n        }\r\n    }\r\n\r\n    //console.log(edges);\r\n    return edges;\r\n};\r\n\r\nSceneHub.getJSONsemanticSpheresList = (semid)=>{\r\n    let S = ATON.getSemanticNode(semid);\r\n    if (S === undefined) return undefined;\r\n\r\n    let SL = [];\r\n\r\n    for (let s in S.children){\r\n        let sphere = S.children[s];\r\n        if (sphere.type){\r\n            SL.push([\r\n                parseFloat(sphere.position.x.toPrecision(3)), \r\n                parseFloat(sphere.position.y.toPrecision(3)), \r\n                parseFloat(sphere.position.z.toPrecision(3)), \r\n                parseFloat(sphere.scale.x.toPrecision(3))\r\n            ]);\r\n        }\r\n    }\r\n\r\n    return SL;\r\n};\r\n\r\nSceneHub.getJSONsemanticConvexShapes = (semid)=>{\r\n    let S = ATON.getSemanticNode(semid);\r\n    if (S === undefined) return undefined;\r\n\r\n    let CL = [];\r\n\r\n    for (let s in S.children){\r\n        let semesh = S.children[s];\r\n        if (semesh.userData._convexPoints){\r\n            CL.push(semesh.userData._convexPoints);\r\n        }\r\n    }\r\n\r\n    //console.log(CL);\r\n    \r\n    return CL;\r\n};\r\n\r\n// Top-level scene-JSON parsers\r\nSceneHub.initBaseParsers = ()=>{\r\n    SceneHub._jsonParsers = {};\r\n\r\n    // Environment\r\n    SceneHub._jsonParsers.environment = (env)=>{\r\n\r\n        let pano = env.mainpano;\r\n        if (env.mainpano){\r\n            if (pano.url) ATON.setMainPanorama(ATON.PATH_COLLECTION+pano.url);\r\n            if (pano.rotation) ATON.setMainPanoramaRotation(pano.rotation);\r\n        }\r\n\r\n        let L = env.mainlight;\r\n        if (L){\r\n            if (L.direction) ATON.setMainLightDirection( new THREE.Vector3(L.direction[0],L.direction[1],L.direction[2]) );\r\n\r\n            if (ATON._dMainL){\r\n                if (L.color)     ATON._dMainL.color = new THREE.Color(L.color[0],L.color[1],L.color[2]);\r\n                if (L.intensity) ATON._dMainL.intensity = L.intensity;\r\n\r\n                if (L.shadows) ATON.toggleShadows(L.shadows);\r\n            }\r\n        }\r\n\r\n        let lps = env.lightprobes;\r\n        if (lps){\r\n            if (lps.auto) ATON.setAutoLP(true);\r\n        }\r\n\r\n    };\r\n\r\n    // NavMode\r\n    SceneHub._jsonParsers.navmode = (navmode)=>{\r\n        if (navmode === undefined) return;\r\n\r\n        ATON.Nav.setNavMode(navmode);\r\n    };\r\n\r\n    // Viewpoints\r\n    SceneHub._jsonParsers.viewpoints = (povs)=>{\r\n        if (povs === undefined) return;\r\n\r\n        for (let p in povs){\r\n            let pov = povs[p];\r\n            \r\n            if (p === \"home\"){\r\n                ATON.Nav.setHomePOV( \r\n                    new ATON.POV()\r\n                    .setPosition(pov.position[0],pov.position[1],pov.position[2])\r\n                    .setTarget(pov.target[0],pov.target[1],pov.target[2])\r\n                    .setFOV(pov.fov)\r\n                    .setKeywords(pov.keywords)\r\n                );\r\n            }\r\n            else {\r\n                new ATON.POV(p)\r\n                .setPosition(pov.position)\r\n                .setTarget(pov.target)\r\n                .setFOV(pov.fov)\r\n                .setKeywords(pov.keywords);\r\n            }\r\n        }\r\n    };\r\n\r\n    // Visible scene-graph\r\n    SceneHub._jsonParsers.scenegraph = (sg)=>{\r\n        if (sg === undefined) return;\r\n\r\n        let nodes = sg.nodes;\r\n        let edges = sg.edges;\r\n\r\n        // nodes\r\n        for (let nid in nodes){\r\n            let N = nodes[nid]; // JSON node\r\n\r\n            //let G = ATON.createSceneNode(nid); // ATON node\r\n            let G = ATON.getOrCreateSceneNode(nid).removeChildren();\r\n            \r\n            // load models by urls list\r\n            let urls = N.urls;\r\n            if (urls){\r\n                if (Array.isArray(urls)){\r\n                    urls.forEach(u => {\r\n                        ATON.createSceneNode().load(ATON.PATH_COLLECTION+u).attachTo(G);\r\n                    });\r\n                }\r\n                else {\r\n                    G.load(ATON.PATH_COLLECTION+urls);\r\n                }\r\n            }\r\n\r\n            // FIXME: not working\r\n            if (N.shadowcast)    G.setShadowCast(N.shadowcast);\r\n            if (N.shadowreceive) G.setShadowCast(N.shadowreceive);\r\n\r\n            if (N.toYup) G.setYup();\r\n\r\n            // Keywords\r\n            if (N.keywords) G.kwords = N.keywords;\r\n\r\n            // Transform node\r\n            let transform = N.transform;\r\n            if (transform){\r\n                if (transform.position) G.setPosition(transform.position[0],transform.position[1],transform.position[2]);\r\n                if (transform.rotation) G.setRotation(transform.rotation[0],transform.rotation[1],transform.rotation[2]);\r\n                if (transform.scale)    G.setScale(transform.scale[0],transform.scale[1],transform.scale[2]);\r\n            }\r\n        }\r\n\r\n        // Build graph through relationships\r\n        for (let parid in edges){\r\n            let children = edges[parid];\r\n\r\n            let P = ATON.getSceneNode(parid);\r\n\r\n            if (P !== undefined){\r\n                for (let c in children){\r\n                    let childid = children[c];\r\n                    let C = ATON.getSceneNode(childid);\r\n                    if (C !== undefined) C.attachTo(P);\r\n                }\r\n            }\r\n        }\r\n/*\r\n        for (let e = 0; e < edges.length; e++){\r\n            let E = edges[e];\r\n\r\n            let from = E[0];\r\n            let to   = E[1];\r\n\r\n            if (from && to){\r\n                let child = ATON.getSceneNode(to);\r\n                if (child) child.attachTo(from);\r\n            }\r\n        }\r\n*/\r\n    };\r\n\r\n    // Semantic scene-graph\r\n    SceneHub._jsonParsers.semanticgraph = (sg)=>{\r\n        if (sg === undefined) return;\r\n\r\n        let nodes = sg.nodes;\r\n        let edges = sg.edges;\r\n\r\n        // nodes\r\n        for (let nid in nodes){\r\n            let N = nodes[nid]; // JSON node\r\n\r\n            //let G = ATON.createSemanticNode(nid);\r\n            let G = ATON.getOrCreateSemanticNode(nid).removeChildren();\r\n            \r\n            // load shapes by urls list\r\n            let urls = N.urls;\r\n            if (urls){\r\n                if (Array.isArray(urls)){\r\n                    urls.forEach(u => {\r\n                        ATON.createSemanticNode().load(ATON.PATH_COLLECTION+u).attachTo(G);\r\n                    });\r\n                }\r\n                else {\r\n                    G.load(ATON.PATH_COLLECTION+urls);\r\n                }\r\n            }\r\n\r\n            if (N.toYup) G.setYup();\r\n\r\n            if (N.description) G.setDescription(N.description);\r\n\r\n            // Keywords\r\n            if (N.keywords) G.kwords = N.keywords;\r\n\r\n            // Sphere [x,y,z, r]\r\n            let spheres = N.spheres;\r\n            if (Array.isArray(spheres)){\r\n                for (let s in spheres){\r\n                    let S = spheres[s];\r\n                    ATON.SemFactory.createSphere(nid, new THREE.Vector3(S[0],S[1],S[2]), S[3]);\r\n                }\r\n            }\r\n\r\n            let convexshapes = N.convexshapes;\r\n            if (Array.isArray(convexshapes)){\r\n                for (let s in convexshapes){\r\n                    let S = convexshapes[s];\r\n\r\n                    let points = [];\r\n                    for (let i=0; i<S.length; i+=3){\r\n                        let p = new THREE.Vector3(S[i],S[i+1],S[i+2]);\r\n                        points.push(p);\r\n                    }\r\n\r\n                    ATON.SemFactory.createConvexShape(nid, points);\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        // Build relationships\r\n        for (let parid in edges){\r\n            let children = edges[parid];\r\n\r\n            let P = ATON.getSemanticNode(parid);\r\n\r\n            if (P !== undefined){\r\n                for (let c in children){\r\n                    let childid = children[c];\r\n                    let C = ATON.getSemanticNode(childid);\r\n                    if (C !== undefined) C.attachTo(P);\r\n                }\r\n            }\r\n        }\r\n/*\r\n        for (let e = 0; e < edges.length; e++){\r\n            let E = edges[e];\r\n\r\n            let from = E[0];\r\n            let to   = E[1];\r\n\r\n            if (from && to){\r\n                let child = ATON.getSemanticNode(to);\r\n                if (child) child.attachTo(from);\r\n            }\r\n        }\r\n*/\r\n    };\r\n\r\n};\r\n\r\n// Adds custom scene parser to extend JSON scene\r\n// parser(k){ ... }\r\nSceneHub.addSceneParser = (k, parser)=>{\r\n    SceneHub._jsonParsers[k] = parser;\r\n};\r\n\r\n// [C] Sends JSON edit to server node\r\n// previously used: https://tools.ietf.org/html/rfc6902\r\nSceneHub.sendEdit = (patch, mode, onComplete)=>{\r\n    if (SceneHub._bLoading || !SceneHub._bEdit) return;\r\n    if (patch === undefined) return;\r\n    if (mode === undefined) mode = SceneHub.MODE_ADD;\r\n\r\n    let sid = SceneHub.currID;\r\n\r\n    let O = {};\r\n    O.sid  = sid;\r\n    O.data = patch;\r\n    O.mode = (mode === SceneHub.MODE_DEL)? \"DEL\" : \"ADD\";\r\n\r\n    let jstr = JSON.stringify(O);\r\n    //console.log(jstr);\r\n\r\n    $.ajax({\r\n        url: ATON.PATH_RESTAPI+\"edit/scene\",\r\n        type:\"POST\",\r\n        data: jstr,\r\n        contentType:\"application/json; charset=utf-8\",\r\n        dataType:\"json\",\r\n\r\n        // Update local scene JSON\r\n        // TODO: improve traffic by applying patch to local json, and NOT by receiving entire JSON \r\n        success: (r)=>{\r\n            if (r === undefined) return;\r\n            //console.log(r);\r\n            SceneHub.currData = r;\r\n            //console.log(ATON.currSceneHub.data);\r\n\r\n            if (onComplete) onComplete();\r\n        }\r\n    });\r\n};\r\n\r\n\r\nexport default SceneHub;","/*\r\n    ATON Navigation system\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\nconst COSINOIDAL_DIST = function(x){ return (1.0 - Math.cos(x * Math.PI)) / 2.0; };\r\n\r\n/**\r\nATON Navigation system\r\n@namespace Nav\r\n*/\r\nlet Nav = {};\r\n\r\n// Consts\r\nNav.STD_FOV  = 50.0;\r\nNav.STD_NEAR = 0.05;\r\nNav.STD_FAR  = 1000.0;\r\n\r\nNav.FP_EPS = 0.01;\r\nNav.STD_POV_TRANS_DURATION = 2.0;\r\n\r\n// Non-immersive navigation controls\r\nNav.MODE_ORBIT  = 0;\r\nNav.MODE_FP     = 1;\r\nNav.MODE_DEVORI = 2;\r\n\r\n\r\nNav.POVtransitionDuration = Nav.STD_POV_TRANS_DURATION;\r\n\r\n\r\n\r\n\r\n//Initialize nav system\r\nNav.init = ()=>{\r\n    Nav._mode = undefined;\r\n\r\n    Nav._rotSpeedOrbit = 0.4;\r\n    Nav._rotSpeedFP    = -0.2;\r\n    Nav._inertia       = 0.0; // 0.0 = disabled\r\n\r\n    // Setup controls\r\n    //Nav._camera = new THREE.PerspectiveCamera( Nav.STD_FOV, window.innerWidth / window.innerHeight, Nav.STD_NEAR, Nav.STD_FAR );\r\n    //Nav._camera.layers.enableAll();\r\n    //Nav._controls = new THREE.OrbitControls( Nav._camera, ATON._renderer.domElement);\r\n    Nav.setOrbitControl();\r\n\r\n    // POV data\r\n    Nav._currPOV = new ATON.POV(); // holds current viewpoint data (eye, target, etc...)\r\n    Nav._fromPOV = new ATON.POV(); // initial POV when requesting a transition\r\n    Nav._reqPOV  = new ATON.POV(); // requested POV for transition\r\n\r\n    Nav.homePOV = undefined; //new ATON.POV();\r\n\r\n    Nav._tPOVcall = -1.0;\r\n    Nav._tPOVprogress = 0.0;\r\n\r\n    Nav.povlist = {}; // This will handle registered POVs\r\n\r\n    // World direction and orientation (quat)\r\n    // consistent within standard and immersive XR\r\n    Nav._vDir = new THREE.Vector3(1,0,0);\r\n    Nav._qOri = new THREE.Quaternion();\r\n\r\n    // Motion\r\n    Nav._motionAmt = 0.0;\r\n    Nav._motionDir = new THREE.Vector3(0,1,0);\r\n};\r\n\r\n/**\r\nGet current eye location, consistent within standard and immersive XR sessions.\r\n@returns {THREE.Vector3}\r\n@example\r\nlet p = ATON.Nav.getCurrentEyeLocation();\r\n*/\r\nNav.getCurrentEyeLocation = ()=>{\r\n    return Nav._currPOV.pos;\r\n};\r\n\r\n/**\r\nGet current view direction (normalized). Consistent within standard and immersive XR sessions.\r\n@returns {THREE.Vector3}\r\n@example\r\nlet d = ATON.Nav.getCurrentDirection();\r\n*/\r\nNav.getCurrentDirection = ()=>{\r\n    return Nav._vDir;\r\n};\r\n\r\n/**\r\nGrab current POV and return a copy.\r\n@returns {POV}\r\n@example\r\nlet pov = ATON.Nav.copyCurrentPOV();\r\n*/\r\nNav.copyCurrentPOV = ()=>{\r\n    let pov = new ATON.POV();\r\n    pov.pos.copy(Nav._currPOV.pos);\r\n    pov.target.copy(Nav._currPOV.target);\r\n    pov.fov = Nav._currPOV.fov;\r\n\r\n    return pov;\r\n};\r\n\r\n/**\r\nReturn true if the navigation system is currently performing a transition\r\n@returns {boolean}\r\n*/\r\nNav.isTransitioning = ()=>{\r\n    if (Nav._tPOVcall >= 0.0) return true;\r\n    return false;\r\n};\r\n\r\n/**\r\nReturn true if the navigation system is in Orbit mode\r\n@returns {boolean}\r\n*/\r\nNav.isOrbit = ()=>{ return (Nav._mode === Nav.MODE_ORBIT); };\r\n\r\n/**\r\nReturn true if the navigation system is in First-person mode\r\n@returns {boolean}\r\n*/\r\nNav.isFirstPerson = ()=>{ return (Nav._mode === Nav.MODE_FP); };\r\n\r\n/**\r\nReturn true if the navigation system is in Device-orientation mode\r\n@returns {boolean}\r\n*/\r\nNav.isDevOri = ()=>{ return (Nav._mode === Nav.MODE_DEVORI); };\r\n\r\n/**\r\nSet Navigation mode\r\n@param {number} navmode - navigation mode (0: Orbit, 1: FirstPerson, 2: DeviceOrientation)\r\n*/\r\nNav.setNavMode = (navmode)=>{\r\n    if (navmode === undefined) return;\r\n\r\n    if (navmode === Nav.MODE_ORBIT)  Nav.setOrbitControl();\r\n    if (navmode === Nav.MODE_FP)     Nav.setFirstPersonControl();\r\n    if (navmode === Nav.MODE_DEVORI) Nav.setDeviceOrientationControl();\r\n};\r\n\r\n/**\r\nSet Orbit navigation mode (default)\r\n*/\r\nNav.setOrbitControl = ()=>{\r\n    if (ATON.XR.isPresenting()) return;\r\n\r\n    Nav._mode = Nav.MODE_ORBIT;\r\n\r\n    // One-time setup\r\n    if (Nav._cOrbit === undefined){\r\n        Nav._camOrbit = new THREE.PerspectiveCamera( Nav.STD_FOV, window.innerWidth / window.innerHeight, Nav.STD_NEAR, Nav.STD_FAR );\r\n        Nav._camOrbit.layers.enableAll();\r\n\r\n        Nav._cOrbit = new THREE.OrbitControls( Nav._camOrbit, ATON._renderer.domElement);\r\n\r\n        let C = Nav._cOrbit;\r\n\r\n        C.rotateSpeed   = Nav._rotSpeedOrbit;\r\n        C.enablePan     = true;\r\n        \r\n        if (Nav._inertia > 0.0){\r\n            C.enableDamping = true;\r\n            C.dampingFactor = 0.1;\r\n        }\r\n        \r\n        C.screenSpacePanning = true;\r\n        \r\n        C.enableZoom  = true;\r\n        C.minDistance = 0.03;\r\n        C.maxDistance = 1000.0;\r\n\r\n        C.addEventListener(\"change\", () => { Nav._bControlChange = true; });\r\n    }\r\n\r\n    Nav._controls = Nav._cOrbit;\r\n    //Nav._controls.target.copy(Nav._camera.position);\r\n    Nav._camera = Nav._camOrbit;\r\n    \r\n    Nav._controls.update();\r\n    if (Nav._currPOV) Nav.syncCurrCamera();\r\n};\r\n\r\n/**\r\nSet First-Person navigation mode\r\n*/\r\nNav.setFirstPersonControl = ()=>{\r\n    if (ATON.XR.isPresenting()) return;\r\n\r\n    Nav._mode = Nav.MODE_FP;\r\n\r\n    // One-time setup\r\n    if (Nav._cFirstPerson === undefined){\r\n        Nav._camFP = new THREE.PerspectiveCamera( Nav.STD_FOV, window.innerWidth / window.innerHeight, Nav.STD_NEAR, Nav.STD_FAR );\r\n        Nav._camFP.layers.enableAll();\r\n\r\n        Nav._cFirstPerson = new THREE.OrbitControls( Nav._camFP, ATON._renderer.domElement);\r\n\r\n        let C = Nav._cFirstPerson;\r\n\r\n        C.enableZoom  = false;\r\n        C.enablePan   = false;\r\n        C.rotateSpeed = Nav._rotSpeedFP;\r\n        \r\n        if (Nav._inertia > 0.0){\r\n            C.enableDamping = true;\r\n            C.dampingFactor = 0.1;\r\n        }\r\n        \r\n        //C.screenSpacePanning = true;\r\n\r\n        C.target.copy(Nav._camera.position);\r\n\r\n        C.minDistance = 0.05;\r\n        C.maxDistance = 0.05;\r\n    }\r\n\r\n    Nav._controls = Nav._cFirstPerson;\r\n    //Nav._controls.target.copy(Nav._camera.position);\r\n    Nav._camera = Nav._camFP;\r\n\r\n    Nav._controls.update();\r\n    if (Nav._currPOV) Nav.syncCurrCamera();\r\n/*\r\n    if (Nav._controls) ATON._controls.dispose();\r\n    ATON._controls = new THREE.FirstPersonControls( ATON._camera, ATON._renderer.domElement);\r\n    ATON._controls.lookSpeed = 0.1;\r\n    ATON._controls.movementSpeed = 10;\r\n    ATON._controls.noFly = true;\r\n    ATON._controls.lookVertical = false;\r\n\r\n    //ATON._camera.position.set( 20.0, 5.0, 0 );\r\n    ATON._controls.lookAt(0,4,0);\r\n\r\n    ATON._controls.update();\r\n    console.log(ATON._controls);\r\n*/\r\n};\r\n\r\n/**\r\nSet device-orientation navigation mode\r\n*/\r\nNav.setDeviceOrientationControl = ()=>{\r\n    if (!ATON.Utils.isMobile()) return;\r\n\r\n    Nav._mode = Nav.MODE_DEVORI;\r\n    ATON._screenPointerCoords.set(0.0,0.0);\r\n\r\n    // One-time setup\r\n    if (Nav._cDevOri === undefined){\r\n        Nav._camDevOri = new THREE.PerspectiveCamera( Nav.STD_FOV, window.innerWidth / window.innerHeight, Nav.STD_NEAR, Nav.STD_FAR );\r\n        Nav._camDevOri.layers.enableAll();\r\n\r\n        Nav._cDevOri = new THREE.DeviceOrientationControls(Nav._camDevOri, ATON._renderer.domElement);\r\n        //Nav._cDevOri = new Nav.DeviceOrientationControls(Nav._camDevOri, ATON._renderer.domElement);\r\n\r\n        Nav._cDevOri.alphaOffset = 0.0; //The alpha offset in radians\r\n    }\r\n\r\n    Nav._controls = Nav._cDevOri;\r\n    Nav._camera   = Nav._camDevOri;\r\n\r\n    Nav._controls.update();\r\n    if (Nav._currPOV) Nav.syncCurrCamera();\r\n};\r\n\r\n/**\r\nSet a motion amount\r\n@param {number} f - the motion amount\r\n@example\r\nATON.Nav.setMotionAmount(0.1);\r\n*/\r\nNav.setMotionAmount = (f)=>{\r\n    Nav._motionAmt = f;\r\n};\r\n\r\n/**\r\nSet a motion direction\r\n@param {THREE.Vector3} f - the motion direction\r\n@example\r\nATON.Nav.setMotionDirection( new THREE.Vector(1,0,0) );\r\n*/\r\nNav.setMotionDirection = (v)=>{\r\n    Nav._motionDir.copy(v);\r\n}\r\n\r\n/**\r\nStop current motion\r\n*/\r\nNav.stop = ()=>{\r\n    Nav._motionAmt = 0.0;\r\n    //TODO: stop any transition\r\n};\r\n\r\n/**\r\nSet field-of-view (FoV) in degrees\r\n@param {number} f\r\n@example\r\nATON.Nav.setFOV(30.0);\r\n*/\r\nNav.setFOV = (f)=>{\r\n    if (ATON.XR.isPresenting()) return; // skip for immersive sessions\r\n\r\n    Nav._currPOV.fov = f;\r\n\r\n    let cam = Nav._camera;\r\n    cam.fov = f;\r\n    cam.updateProjectionMatrix();\r\n};\r\n\r\n/**\r\nGet current field-of-view (FoV) in degrees\r\n@returns {number}\r\n*/\r\nNav.getFOV = ()=>{\r\n    return Nav._currPOV.fov;\r\n};\r\n\r\n\r\n// Retrieve currPOV from camera and controls\r\nNav.syncCurrPOV = ()=>{\r\n    if (ATON.XR.isPresenting()){\r\n        \r\n        let C = ATON._renderer.xr.getCamera(Nav._camera);\r\n        C.getWorldPosition( Nav._currPOV.pos );\r\n        C.getWorldQuaternion( Nav._qOri );\r\n        C.getWorldDirection( Nav._vDir );\r\n        //console.log(Nav._hmdPos);\r\n\r\n        //ATON.XR.hmdPos.copy(Nav._currPOV.pos);\r\n        //ATON.XR.hmdDir.copy(Nav._vDir);\r\n        \r\n        //ATON._renderer.xr.getCamera(Nav._camera);\r\n        //ATON._renderer.xr.getCamera(Nav._camera).getWorldDirection(Nav._vDir);\r\n        //Nav._camera.getWorldDirection(Nav._vDir);\r\n        \r\n        //Nav._currPOV.pos.copy(Nav._camera.position);\r\n        return;\r\n    }\r\n\r\n    let ctrl  = Nav._controls;\r\n    let cam   = Nav._camera;\r\n\r\n    cam.getWorldDirection(Nav._vDir);\r\n    cam.getWorldQuaternion(Nav._qOri);\r\n\r\n    if (Nav._mode === Nav.MODE_DEVORI){\r\n        Nav._currPOV.pos.copy(cam.position);\r\n        return;\r\n    }\r\n\r\n    if (Nav._mode === Nav.MODE_FP){\r\n        Nav._currPOV.pos.copy(ctrl.target);\r\n\r\n        Nav._currPOV.target.x = Nav._currPOV.pos.x + Nav._vDir.x; //ctrl.target.x - cam.position.x;\r\n        Nav._currPOV.target.y = Nav._currPOV.pos.y + Nav._vDir.y; //ctrl.target.y - cam.position.y;\r\n        Nav._currPOV.target.z = Nav._currPOV.pos.z + Nav._vDir.z; //ctrl.target.z - cam.position.z;\r\n        return;\r\n    }\r\n    \r\n    Nav._currPOV.pos.copy(cam.position);\r\n    Nav._currPOV.target.copy(ctrl.target);\r\n};\r\n\r\n// After syncCurrPOV and before updateCamera, we maniuplate currPOV\r\n//==================================================================================\r\nNav.handlePOV = ()=>{\r\n    //console.log(Nav._currPOV.pos);\r\n\r\n    if (ATON.XR.isPresenting()) Nav.handleXRtransition();\r\n    else Nav.handlePOVtransition();\r\n\r\n    Nav.handleMotion();\r\n\r\n    //if (ATON.XR.isPresenting()) console.log(ATON._renderer.xr);\r\n\r\n    // Handle constraints\r\n\r\n};\r\n\r\nNav.handleMotion = ()=>{\r\n    if (Nav.isTransitioning()) return;\r\n\r\n    if (Nav._motionAmt != 0.0){\r\n\r\n        //if ()\r\n\r\n\r\n        if (ATON.XR.controller0 && ATON.XR.controller0.visible){\r\n            ATON.XR.controller0.getWorldDirection(Nav._motionDir);\r\n            Nav._motionDir.negate();\r\n            }\r\n        else Nav._motionDir.copy(Nav._vDir);\r\n\r\n        let fv = Nav._motionDir.clone();\r\n        fv.multiplyScalar(Nav._motionAmt * ATON._dt);\r\n\r\n        Nav._currPOV.pos.add(fv);\r\n        Nav._currPOV.target.add(fv); // check if needed\r\n    }\r\n};\r\n\r\nNav.handlePOVtransition = ()=>{\r\n    if (Nav._tPOVcall < 0.0) return;\r\n\r\n    if (Nav.POVtransitionDuration <= 0.0) Nav._tPOVprogress = 1.0;\r\n    else Nav._tPOVprogress = (ATON._clock.elapsedTime - Nav._tPOVcall) / Nav.POVtransitionDuration;\r\n\r\n    // End\r\n    if (Nav._tPOVprogress >= 1.0){\r\n\r\n        Nav._tPOVcall = -1.0;\r\n        //Nav._controls.enabled = true;\r\n\r\n        Nav._currPOV.pos.copy(Nav._reqPOV.pos);\r\n        Nav._currPOV.target.copy(Nav._reqPOV.target);\r\n        Nav._currPOV.fov = Nav._reqPOV.fov;\r\n\r\n        ATON.fireEvent(\"POVTransitionCompleted\", Nav._reqPOV.id);\r\n        return;\r\n    }\r\n\r\n    Nav._tPOVprogress = COSINOIDAL_DIST(Nav._tPOVprogress);\r\n\r\n    Nav._currPOV.pos.lerpVectors(Nav._fromPOV.pos, Nav._reqPOV.pos, Nav._tPOVprogress);\r\n    Nav._currPOV.target.lerpVectors(Nav._fromPOV.target, Nav._reqPOV.target, Nav._tPOVprogress);\r\n\r\n    if (!Nav._fromPOV.fov || !Nav._reqPOV.fov) return;\r\n    Nav._currPOV.fov = THREE.MathUtils.lerp(Nav._fromPOV.fov, Nav._reqPOV.fov, Nav._tPOVprogress);\r\n\r\n    //console.log(Nav._camera);\r\n\r\n    Nav._camera.fov = Nav._currPOV.fov;\r\n    Nav._camera.updateProjectionMatrix();\r\n};\r\n\r\n// Immersive XR transitions\r\nNav.handleXRtransition = ()=>{\r\n    if (Nav._tPOVcall < 0.0) return;\r\n\r\n    if (Nav.POVtransitionDuration <= 0.0) Nav._tPOVprogress = 1.0;\r\n    else Nav._tPOVprogress = (ATON._clock.elapsedTime - Nav._tPOVcall) / Nav.POVtransitionDuration;\r\n\r\n    // End\r\n    if (Nav._tPOVprogress >= 1.0){\r\n\r\n        Nav._tPOVcall = -1.0;\r\n        //Nav._controls.enabled = true;\r\n\r\n        //ATON.XR.setRefSpaceLocation(Nav._reqXRpos);\r\n\r\n        console.log(\"XR height\"+ATON.XR._currPos.y);\r\n        console.log(\"HMD height\"+Nav._currPOV.pos.y);\r\n\r\n        ATON.fireEvent(\"POVTransitionCompleted\", Nav._reqPOV.id);\r\n        return;\r\n    }\r\n\r\n    ATON.XR._currPos.lerpVectors(ATON.XR._fromPos, ATON.XR._reqPos, Nav._tPOVprogress);\r\n    //ATON.XR._currPos.lerpVectors(Nav._fromPOV.pos, Nav._reqPOV.pos, Nav._tPOVprogress);\r\n\r\n};\r\n\r\n// Update internal camera from currPOV \r\nNav.syncCurrCamera = ()=>{\r\n    let ctrl  = Nav._controls;\r\n    let cam   = Nav._camera;\r\n    \r\n    let pos = Nav._currPOV.pos;\r\n    let tgt = Nav._currPOV.target;\r\n\r\n    // We are in VR\r\n    if (ATON.XR.isPresenting()){\r\n        ///let vrcam = ATON.XR.rig;\r\n        ///vrcam.position.copy(pos);\r\n        \r\n        ///ATON.XR.setRefSpaceLocation(pos);\r\n\r\n        //let C = ATON._renderer.xr.getCamera(cam);\r\n        //C.getWorldDirection(Nav._vDir);\r\n        return;\r\n    }\r\n\r\n    if (Nav._mode === Nav.MODE_DEVORI){\r\n        cam.position.copy(pos);\r\n        return;\r\n    }\r\n\r\n    // Common controls\r\n    //let d = new THREE.Vector3();\r\n    Nav._vDir.subVectors(tgt, pos);\r\n    Nav._vDir.normalize();\r\n\r\n    if (Nav._mode === Nav.MODE_FP){\r\n        ctrl.target.copy(pos);\r\n\r\n        cam.position.x = ctrl.target.x - (Nav._vDir.x * Nav.FP_EPS);\r\n        cam.position.y = ctrl.target.y - (Nav._vDir.y * Nav.FP_EPS);\r\n        cam.position.z = ctrl.target.z - (Nav._vDir.z * Nav.FP_EPS);\r\n    }\r\n    else {\r\n        cam.position.copy(pos);\r\n        ctrl.target.copy(tgt);\r\n    }\r\n};\r\n\r\n// Main update routine\r\nNav.update = ()=>{\r\n\r\n    //Nav._bXR = ATON.XR.isPresenting();\r\n\r\n    Nav.syncCurrPOV();\r\n    Nav.handlePOV();\r\n    Nav.syncCurrCamera();\r\n};\r\n\r\n\r\n/**\r\nRequest transition to viewpoint (POV)\r\n@param {POV} pov - the target POV\r\n@param {number} duration - duration of transition in seconds (optional), otherwise use standard duration\r\n@example\r\nATON.Nav.requestPOV( myTargetPOV );\r\n*/\r\nNav.requestPOV = (pov, duration)=>{\r\n    if (ATON._tPOVcall >= 0.0) return; // already requested\r\n\r\n    ATON.fireEvent(\"POVTransitionRequested\", pov.id);\r\n\r\n    if (duration !== undefined) Nav.POVtransitionDuration = duration;\r\n    \r\n    //Nav._controls.enabled = false;\r\n\r\n    Nav._tPOVcall = ATON._clock.elapsedTime;\r\n    \r\n    if (ATON.XR.isPresenting()){\r\n        Nav._reqPOV.pos.copy(pov.pos? pov.pos : Nav._currPOV.pos);\r\n        Nav._fromPOV.pos.copy(Nav._currPOV.pos);\r\n\r\n        ATON.XR._reqPos.copy(pov.pos? pov.pos : Nav._currPOV.pos);\r\n        ATON.XR._fromPos.copy(ATON.XR._currPos);\r\n    }\r\n    else {\r\n        Nav._reqPOV.pos.copy(pov.pos? pov.pos : Nav._currPOV.pos);\r\n        Nav._reqPOV.target.copy( pov.target? pov.target : Nav._currPOV.target);\r\n        Nav._reqPOV.fov = pov.fov? pov.fov : Nav._currPOV.fov;\r\n\r\n        Nav._fromPOV.pos.copy(Nav._currPOV.pos);\r\n        Nav._fromPOV.target.copy(Nav._currPOV.target);\r\n        Nav._fromPOV.fov = Nav._currPOV.fov;\r\n    }\r\n};\r\n\r\n\r\nNav.requestPOVbyBound = (bs, duration)=>{\r\n    if (bs === undefined) return;\r\n\r\n    let T = new THREE.Vector3();\r\n    let E = new THREE.Vector3();\r\n\r\n    T.copy(bs.center);\r\n    \r\n    let r = bs.radius * 2.5;\r\n    E.x = T.x - (r * Nav._vDir.x);\r\n    E.y = T.y - (r * Nav._vDir.y);\r\n    E.z = T.z - (r * Nav._vDir.z);\r\n\r\n    let pov = new ATON.POV().setPosition(E).setTarget(T);    \r\n    Nav.requestPOV(pov, duration);\r\n};\r\n\r\n/**\r\nRequest transition to specific ATON Node\r\n@param {Node} n - the target ATON Node\r\n@param {number} duration - duration of transition in seconds (optional), otherwise use standard duration\r\n@example\r\nATON.Nav.requestPOVbyNode( myNode );\r\n*/\r\nNav.requestPOVbyNode = (n, duration)=>{\r\n    if (n === undefined) return;\r\n    \r\n    let bs = n.getBound();\r\n\r\n    Nav.requestPOVbyBound(bs,duration);\r\n};\r\n\r\nNav.requestRetarget = (point, normal, duration)=>{\r\n    let M = new THREE.Vector3();\r\n    if (normal === undefined){\r\n        M.lerpVectors(point, Nav._currPOV.pos, 0.8);\r\n    }\r\n    else {\r\n        let d = point.distanceTo(Nav._currPOV.pos);\r\n        d *= 0.5;\r\n        M.x = point.x + (normal.x * d);\r\n        M.y = point.y + (normal.y * d);\r\n        M.z = point.z + (normal.z * d);\r\n    }\r\n\r\n    let pov = new ATON.POV().setPosition(M).setTarget(point).setFOV(Nav._currPOV.fov);\r\n    console.log(pov);\r\n    \r\n    Nav.requestPOV(pov, duration);\r\n};\r\n\r\n\r\n/**\r\nCompute a default home, depending on visibile bounding sphere. Typically called after all assets are loaded\r\n@param {THREE.Vector3} dv - the normalized offset direction (optional)\r\n@example\r\nATON.Nav.computeDefaultHome();\r\n*/\r\nNav.computeDefaultHome = (dv)=>{\r\n    if (dv === undefined) dv = new THREE.Vector3(1,0.7,1);\r\n\r\n    let sceneBS = ATON.getRootScene().getBound();\r\n\r\n    let eye = new THREE.Vector3(\r\n        sceneBS.center.x + (sceneBS.radius * dv.x * 1.5), \r\n        sceneBS.center.y + (sceneBS.radius * dv.y * 1.5), \r\n        sceneBS.center.z + (sceneBS.radius * dv.z * 1.5)\r\n    );\r\n\r\n    Nav.homePOV = new ATON.POV().setPosition(eye).setTarget(sceneBS.center);\r\n};\r\n\r\n/** \r\nSet the home viewpoint (POV)\r\n@param {POV} pov - the home POV\r\n*/\r\nNav.setHomePOV = (pov)=>{\r\n    Nav.homePOV = pov;\r\n};\r\n\r\nNav.computeAndRequestDefaultHome = (duration, dv)=>{\r\n    Nav.computeDefaultHome(dv);\r\n    Nav.requestPOV(Nav.homePOV, duration);\r\n};\r\n\r\n/** \r\nRequest home viewpoint\r\n@param {number} duration - transition duration\r\n*/\r\nNav.requestHome = (duration)=>{\r\n    Nav.requestPOV(Nav.homePOV, duration);\r\n};\r\n\r\n\r\n/*\r\nMobile devori (modified for absolute compass - UNSTABLE)\r\nauthor richt / http://richt.me\r\nauthor WestLangley / http://github.com/WestLangley\r\nW3C Device Orientation control (http://w3c.github.io/deviceorientation/spec-source-orientation.html)\r\n*/\r\nNav.DeviceOrientationControls = function ( object ) {\r\n    let scope = this;\r\n\r\n    this.object = object;\r\n    this.object.rotation.reorder( 'YXZ' );\r\n    this.enabled = true;\r\n\r\n    this.deviceOrientation = {};\r\n    this.screenOrientation = 0;\r\n\r\n    this.alphaOffset = 0; // radians\r\n    this.absolute = false;\r\n    this.alphaOffsetDevice = undefined;\r\n    this.alphaOffsetScreen = undefined;\r\n\r\n    let onDeviceOrientationChangeEvent = function ( event ) {\r\n        if(scope.absolute) return;\r\n        scope.deviceOrientation = event;\r\n    };\r\n\r\n    let onDeviceOrientationAbsoluteChangeEvent = function ( event ) {\r\n        scope.deviceOrientation = event;\r\n        scope.absolute = true;\r\n    };\r\n\r\n    let onScreenOrientationChangeEvent = function () {\r\n        scope.screenOrientation = window.orientation || 0;\r\n    };\r\n\r\n    // The angles alpha, beta and gamma form a set of intrinsic Tait-Bryan angles of type Z-X'-Y''\r\n    let setObjectQuaternion = function () {\r\n        let zee = new THREE.Vector3( 0, 0, 1 );\r\n        let euler = new THREE.Euler();\r\n\r\n        let q0 = new THREE.Quaternion();\r\n        let q1 = new THREE.Quaternion( - Math.sqrt( 0.5 ), 0, 0, Math.sqrt( 0.5 ) ); // - PI/2 around the x-axis\r\n\r\n        return function ( quaternion, alpha, beta, gamma, orient ) {\r\n            euler.set( beta, alpha, - gamma, 'YXZ' ); // 'ZXY' for the device, but 'YXZ' for us\r\n            quaternion.setFromEuler( euler ); // orient the device\r\n            quaternion.multiply( q1 ); // camera looks out the back of the device, not the top\r\n            quaternion.multiply( q0.setFromAxisAngle( zee, - orient ) ); // adjust for screen orientation\r\n        };\r\n\r\n    }();\r\n\r\n    this.connect = function () {\r\n        onScreenOrientationChangeEvent(); // run once on load\r\n\r\n        window.addEventListener( 'orientationchange', onScreenOrientationChangeEvent, false );\r\n        window.addEventListener( 'deviceorientation', onDeviceOrientationChangeEvent, false );\r\n        window.addEventListener( 'deviceorientationabsolute', onDeviceOrientationAbsoluteChangeEvent, false );\r\n\r\n        scope.enabled = true;\r\n    };\r\n\r\n    this.disconnect = function () {\r\n        window.removeEventListener( 'orientationchange', onScreenOrientationChangeEvent, false );\r\n        window.removeEventListener( 'deviceorientation', onDeviceOrientationChangeEvent, false );\r\n        window.removeEventListener( 'deviceorientationabsolute', onDeviceOrientationAbsoluteChangeEvent, false );\r\n\r\n        scope.enabled = false;\r\n    };\r\n\r\n    this.update = function () {\r\n        if ( scope.enabled === false ) return;\r\n\r\n        let device;\r\n        device = scope.deviceOrientation;\r\n\r\n        if ( device ) {\r\n            let alpha = this.getDirection() ? THREE.Math.degToRad( this.getDirection() ) + scope.alphaOffset : 0; // Z\r\n            let beta = device.beta ? THREE.Math.degToRad( device.beta ) : 0; // X'\r\n\r\n            let gamma = device.gamma ? THREE.Math.degToRad( device.gamma ) : 0; // Y''\r\n            let orient = scope.screenOrientation ? THREE.Math.degToRad( scope.screenOrientation ) : 0; // O\r\n\r\n            setObjectQuaternion( scope.object.quaternion, alpha, beta, gamma, orient );\r\n        }\r\n\r\n    };\r\n\r\n    this.dispose = ()=>{\r\n        scope.disconnect();\r\n    };\r\n\r\n    this.iOSOrientationPermission = ()=>{\r\n        if (typeof DeviceOrientationEvent.requestPermission === 'function') {\r\n            DeviceOrientationEvent.requestPermission().then(permissionState => {\r\n                if (permissionState === 'granted') {\r\n\r\n                }\r\n\r\n                console.log(permissionState);\r\n            }).catch(console.error);\r\n        }\r\n    }\r\n\r\n    this.getDirection = ()=>{\r\n        return (typeof scope.deviceOrientation.webkitCompassHeading != \"undefined\") ? scope.deviceOrientation.webkitCompassHeading : scope.deviceOrientation.alpha;\r\n    }\r\n\r\n    this.getDirectionMap = ()=>{\r\n        return (typeof scope.deviceOrientation.webkitCompassHeading != \"undefined\") ? (360 - scope.deviceOrientation.webkitCompassHeading) : scope.deviceOrientation.alpha;\r\n    }\r\n\r\n    this.connect();\r\n};\r\n\r\n\r\nexport default Nav;","/*\r\n    ATON immersive XR module\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\n/**\r\nATON Immersive XR\r\n@namespace XR\r\n*/\r\nlet XR = {};\r\n\r\nXR.STD_TELEP_DURATION = 0.03;\r\n\r\n\r\n//Initializes XR component\r\nXR.init = ()=>{\r\n    ATON._renderer.xr.enabled = true;\r\n    ATON._renderer.xr.setReferenceSpaceType( 'local' );\r\n    \r\n    if (ATON.device.isMobile) ATON._renderer.xr.setFramebufferScaleFactor(0.5); // WebXR density\r\n\r\n    XR._bPresenting = false;\r\n    XR.currSession = null;\r\n\r\n    XR.rig = new THREE.Group();\r\n    //XR.rig.position.set(0,0,0);\r\n    XR.rig.add( ATON.Nav._camera );\r\n    ATON._rootUI.add(XR.rig);\r\n\r\n    //XR.hmdOri = new THREE.Quaternion();\r\n    //XR.hmdPos = new THREE.Vector3();\r\n\r\n    XR._currPos = XR.rig.position; //new THREE.Vector3();\r\n    XR._fromPos = new THREE.Vector3();\r\n    XR._reqPos  = new THREE.Vector3();\r\n\r\n    XR.gControllers = undefined;\r\n\r\n    XR.controller0pos = new THREE.Vector3();\r\n    XR.controller1pos = new THREE.Vector3();\r\n    XR.controller0dir = new THREE.Vector3();\r\n    XR.controller1dir = new THREE.Vector3();\r\n\r\n    // test\r\n    ATON.on(\"XRselectStart\", (c)=>{\r\n        XR.defaultSelectHandler(c);\r\n    });\r\n    ATON.on(\"XRselectEnd\", (c)=>{\r\n        //ATON.Nav.stop();\r\n        //console.log(\"Sel end \"+c);\r\n    });\r\n};\r\n\r\n/**\r\nReturn true if we are presenting (immersive mode)\r\n@returns {boolean}\r\n*/\r\nXR.isPresenting = ()=>{\r\n    return XR._bPresenting;\r\n};\r\n\r\n\r\nXR.defaultSelectHandler = (c)=>{\r\n\r\n    if (ATON._queryDataScene){\r\n        let P = ATON._queryDataScene.p;\r\n        let N = ATON._queryDataScene.n;\r\n\r\n        //P.y += 0.8; // with 'local': half user height\r\n\r\n        // FIXME: height offset needed for \"local\", fill this automatically\r\n        if (N.y > 0.7) ATON.Nav.requestPOV( new ATON.POV().setPosition(P.x, P.y + ATON.userHeight, P.z), XR.STD_TELEP_DURATION );\r\n    }\r\n    \r\n    //ATON.Nav.setMotionAmount(3.0);\r\n};\r\n\r\nXR._handleUISelection = ()=>{\r\n    if (ATON._hoveredUI === undefined) return false;\r\n\r\n    let H = ATON.getUINode(ATON._hoveredUI);\r\n    if (H && H.onSelect) H.onSelect();\r\n    \r\n    return true;\r\n}\r\n\r\n\r\n/**\r\nSet reference-space location (not the actual HMD camera location).\r\nThis can be used to move around the user, given a proper locomotion technique\r\n@param {THREE.Vector3} p - the new location of reference space\r\n*/\r\nXR.setRefSpaceLocation = (p)=>{\r\n    XR.rig.position.copy(p);\r\n};\r\n\r\n// On XR session started\r\nXR.onSessionStarted = ( session )=>{\r\n\tsession.addEventListener( 'end', XR.onSessionEnded );\r\n\r\n\tATON._renderer.xr.setSession( session );\r\n\tXR.currSession = session;\r\n\r\n    XR.controller0 = ATON._renderer.xr.getController(0);\r\n    XR.controller1 = ATON._renderer.xr.getController(1);\r\n\r\n    //console.log(XR.controller0);\r\n\r\n    // Controller 0\r\n    if (XR.controller0){\r\n        XR.controller0.visible = false;\r\n\r\n        XR.controller0.addEventListener( 'connected', (e) => {\r\n            XR.controller0.gamepad = e.data.gamepad;\r\n            //console.log(XR.controller0.gamepad);\r\n\r\n            let gp = XR.controller0.gamepad;\r\n            if (gp.pose && gp.pose.hasPosition) XR.controller0.visible = true;\r\n        });\r\n\r\n        XR.controller0.addEventListener( 'selectstart', ()=>{\r\n            if (XR._handleUISelection()) return;\r\n\r\n            ATON.fireEvent(\"XRselectStart\", 0);\r\n        });\r\n        XR.controller0.addEventListener( 'selectend', ()=>{ \r\n            ATON.fireEvent(\"XRselectEnd\", 0);\r\n        });\r\n    }\r\n\r\n    // Controller 1\r\n    if (XR.controller1){\r\n        XR.controller1.visible = false;\r\n\r\n        XR.controller1.addEventListener( 'connected', (e) => {\r\n            //XR.controller1.visible = true;\r\n            XR.controller1.gamepad = e.data.gamepad;\r\n            \r\n            let gp = XR.controller1.gamepad;\r\n            if (gp.pose && gp.pose.hasPosition) XR.controller1.visible = true;\r\n        });\r\n\r\n        XR.controller1.addEventListener( 'selectstart',  ()=>{\r\n            //if (XR._handleUISelection()) return;\r\n        \r\n            ATON.fireEvent(\"XRselectStart\", 1);\r\n        });\r\n        XR.controller1.addEventListener( 'selectend',  ()=>{ \r\n            ATON.fireEvent(\"XRselectEnd\", 1);\r\n        });\r\n    }\r\n\r\n    XR.setRefSpaceLocation(ATON.Nav._currPOV.pos);\r\n\r\n    XR._bPresenting = true;\r\n    console.log(\"XR now presenting\");\r\n\r\n    XR.setupControllersUI();\r\n\r\n    ATON.fireEvent(\"XRmode\", true);\r\n\r\n    //console.log(session);\r\n};\r\n\r\n// On XR session terminated\r\nXR.onSessionEnded = ( /*event*/ )=>{\r\n    XR.currSession.removeEventListener( 'end', XR.onSessionEnded );\r\n    XR.currSession = null;\r\n\r\n    XR._bPresenting = false;\r\n    //XR.rig.position.set(0.0,0.0,0.0);\r\n    XR.setRefSpaceLocation( new THREE.Vector3(0,0,0) );\r\n\r\n    ATON.fireEvent(\"XRmode\", false);\r\n\r\n    console.log(\"Quit XR\");\r\n};\r\n\r\n/**\r\nToggle immersive mode\r\n*/\r\nXR.toggle = ()=>{\r\n    if (!ATON.device.isXRsupported) return;\r\n\r\n    // Enter XR\r\n    if (XR.currSession === null){\r\n        let sessionInit = { \r\n            optionalFeatures: [\r\n                \"local\",\r\n                //\"local-floor\" \r\n                ///\"bounded-floor\"\r\n            ]\r\n        };\r\n        navigator.xr.requestSession( 'immersive-vr', sessionInit ).then( XR.onSessionStarted );\r\n        //console.log(navigator.xr);\r\n    }\r\n    // Exit XR\r\n    else {\r\n        XR.currSession.end();\r\n    }\r\n};\r\n\r\nXR.setupControllersUI = ()=>{\r\n    if (XR.gControllers) return; // already set\r\n\r\n    let raytick = 0.003;\r\n    let raylen  = 5.0;\r\n    var geometry = new THREE.CylinderBufferGeometry( raytick,raytick, raylen, 4 );\r\n    geometry.rotateX( -Math.PI / 2 );\r\n    geometry.translate(0,0,-(raylen*0.5));\r\n\r\n    var mesh = new THREE.Mesh( geometry, ATON.MatHub.materials.controllerRay );\r\n\r\n    XR.controller0.add( mesh.clone() );\r\n    //XR.controller1.add( mesh.clone() );\r\n\r\n    XR.gControllers = ATON.createUINode();\r\n    XR.gControllers.add( XR.controller0 );\r\n    XR.gControllers.add( XR.controller1 );\r\n\r\n    XR.controller0.visible = false;\r\n    XR.controller1.visible = false;\r\n\r\n    XR.gControllers.disablePicking();\r\n\r\n    XR.rig.add(XR.gControllers);\r\n};\r\n\r\n// Not working\r\nXR.getControllerSpace = (i)=>{\r\n   if (i === 1) XR.getControllerGrip(1);\r\n   else XR.getControllerGrip(0);\r\n};\r\n\r\n/**\r\nGet controller world location\r\n@param {number} i - the controller ID (0 or 1)\r\n@returns {THREE.Vector3}\r\n*/\r\nXR.getControllerWorldLocation = (i)=>{\r\n    if (i === 1) return XR.controller1pos;\r\n    else return XR.controller0pos;\r\n};\r\n\r\n/**\r\nGet controller world direction\r\n@param {number} i - the controller ID (0 or 1)\r\n@returns {THREE.Vector3}\r\n*/\r\nXR.getControllerWorldDirection = (i)=>{\r\n    if (i === 1) return XR.controller1dir;\r\n    else return XR.controller0dir;\r\n};\r\n\r\nXR.update = ()=>{\r\n    if (XR.controller0.visible){\r\n        XR.controller0.getWorldPosition(XR.controller0pos);\r\n        XR.controller0.getWorldDirection(XR.controller0dir);\r\n        XR.controller0dir.negate();\r\n    }\r\n    if (XR.controller1.visible){\r\n        XR.controller1.getWorldPosition(XR.controller1pos);\r\n        XR.controller1.getWorldDirection(XR.controller1dir);\r\n        XR.controller1dir.negate(); \r\n    }\r\n};\r\n\r\n\r\nexport default XR;","/*\r\n    ATON spatial UI Button class\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\nimport Node from \"./ATON.node.js\";\r\n\r\n/**\r\nClass representing a SpatialUI Button.\r\nConstructor requires a uiid (UI Node ID)\r\n@class Button\r\n@example \r\nnew ATON.SUI.Button(\"myButton\")\r\n*/\r\nclass Button extends Node {\r\n\r\nconstructor(uiid){\r\n    super(uiid, ATON.NTYPES.UI);\r\n\r\n    this.baseColor   = ATON.MatHub.colors.black;\r\n    this.switchColor = ATON.MatHub.colors.green;\r\n\r\n    this._bSwitched = false;\r\n\r\n    this.container = new ThreeMeshUI.Block({\r\n        width: 0.1,\r\n        height: 0.1,\r\n        padding: 0.01,\r\n        borderRadius: 0.02,\r\n        backgroundColor: this.baseColor,\r\n        backgroundOpacity: 0.5,\r\n\r\n        fontFamily: ATON.PATH_RES+\"fonts/custom-msdf.json\",\r\n        fontTexture: ATON.PATH_RES+\"fonts/custom.png\",\r\n\r\n        justifyContent: 'center',\r\n        alignContent: 'center'\r\n    });\r\n    this.add(this.container);\r\n\r\n    this.uiText = new ThreeMeshUI.Text({ \r\n        content: \"button\",\r\n        fontSize: 0.02,\r\n        fontColor: ATON.MatHub.colors.white\r\n    });\r\n    this.container.add(this.uiText);\r\n\r\n    this._trigger = new THREE.Mesh( \r\n        new THREE.PlaneGeometry( ATON.SUI.STD_BTN_SIZE*0.9, ATON.SUI.STD_BTN_SIZE*0.9, 2 ), \r\n        ATON.MatHub.materials.fullyTransparent\r\n    );\r\n    this._trigger.position.set(0,0,0.002);\r\n\r\n    this.add( this._trigger );\r\n\r\n    this.onHover = ()=>{\r\n        this.container.set({ \r\n            backgroundOpacity: 0.8\r\n        });\r\n    };\r\n    this.onLeave = ()=>{\r\n        this.container.set({ \r\n            backgroundOpacity: 0.5 \r\n        });\r\n    };\r\n\r\n    this.enablePicking();\r\n}\r\n\r\n/**\r\nSet base color of the button\r\n@param {THREE.Color} c - the color\r\n*/\r\nsetBaseColor(c){\r\n    this.baseColor = c;\r\n    if (!this._bSwitched) this.container.set({ backgroundColor: this.baseColor });\r\n    return this;\r\n}\r\n\r\n/**\r\nSet button switch color (when activated)\r\n@param {THREE.Color} c - the color\r\n*/\r\nsetSwitchColor(c){\r\n    this.switchColor = c;\r\n    if (this._bSwitched) this.container.set({ backgroundColor: this.switchColor });\r\n    return this;\r\n}\r\n\r\n/**\r\nSet button text\r\n@param {string} text\r\n*/\r\nsetText(text){\r\n    this.uiText.set({ content: text });\r\n    return this;\r\n}\r\n\r\n/**\r\nSwitch the button (ON/OFF)\r\n@param {boolean} b\r\n*/\r\nswitch(b){\r\n    this._bSwitched = b;\r\n    if (b) this.container.set({ backgroundColor: this.switchColor });\r\n    else this.container.set({ backgroundColor: this.baseColor });\r\n    \r\n    return this;\r\n}\r\n\r\n/**\r\nSet button icon\r\n@param {string} url - the url to the icon (tipically a PNG file)\r\n*/\r\nsetIcon(url){\r\n    ATON.Utils.textureLoader.load(url, (texture) => {\r\n\r\n        this._trigger.material = new THREE.MeshStandardMaterial({\r\n            map: texture,\r\n            transparent: true,\r\n            depthWrite: false\r\n        });\r\n/*\r\n        this.container.set({ \r\n            backgroundTexture: texture,\r\n            backgroundOpacity: 1.0,\r\n            backgroundColor: undefined \r\n        });\r\n*/\r\n        this.uiText.position.set(0,-0.035,0);\r\n    });\r\n\r\n    return this;\r\n}\r\n\r\n}\r\n\r\nexport default Button;","/*\r\n    ATON spatial UI\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\nimport Button from \"./ATON.sui.button.js\";\r\n\r\n\r\n/**\r\nATON Spatial UI\r\n@namespace SUI\r\n*/\r\nlet SUI = {};\r\n\r\nSUI.STD_BTN_SIZE = 0.1;\r\n\r\nSUI.Button = Button;\r\n\r\n\r\n//Initializes Spatial UI module\r\nSUI.init = ()=>{\r\n    SUI.mainSelector   = ATON.createUINode();\r\n    //SUI.secondSelector = ATON.createUINode();\r\n\r\n    //SUI._uiSelGeom = new THREE.SphereGeometry( 0.1, 16, 16 );\r\n    SUI.mainSelector.add( new THREE.Mesh( ATON.Utils.geomUnitSphere, ATON.MatHub.getMaterial(\"selector\") ));\r\n    SUI.mainSelector.disablePicking();\r\n\r\n    SUI.setSelectorRadius(0.05);\r\n    SUI.mainSelector.visible = false;\r\n\r\n    ATON._rootUI.add(SUI.mainSelector);\r\n\r\n    SUI.gPoints = ATON.createUINode();\r\n    ATON._rootUI.add(SUI.gPoints);\r\n\r\n    SUI.buildInfoNode();\r\n    SUI.bShowInfo = true;\r\n\r\n    SUI._labelScale   = ATON.Utils.isMobile()? 1.2 : 1.0;\r\n    SUI._labelScaleVR = 2.0;\r\n\r\n    ATON.on( \"SemanticNodeHover\", (semid)=>{\r\n        if (!SUI.bShowInfo) return;\r\n        SUI.infoNodeText.set({ content: semid });\r\n    });\r\n/*\r\n    ATON.on(\"UINodeHover\", (uiid)=>{\r\n        console.log(\"Hover UI node: \"+uiid);\r\n    });\r\n    ATON.on(\"UINodeLeave\", (uiid)=>{\r\n        console.log(\"Leave UI node: \"+uiid);\r\n    });\r\n*/\r\n};\r\n\r\n/**\r\nSet selector radius\r\n@param {number} r - the radius\r\n*/\r\nSUI.setSelectorRadius = (r)=>{\r\n    SUI.mainSelector.scale.set(r,r,r);\r\n};\r\n\r\n/**\r\nGet selector current radius\r\n@returns {number}\r\n*/\r\nSUI.getSelectorRadius = ()=>{\r\n    return SUI.mainSelector.scale.x;\r\n};\r\n\r\n/**\r\nSet selector 3D model\r\n@param {string} path - the model path (usually gltf or glb)\r\n@param {boolean} bUseStdMat - (optional) overwrites 3D model materials with standard selector material \r\n*/\r\nSUI.setSelectorModel = (path, bUseStdMat)=>{\r\n    if (path === undefined) return;\r\n\r\n    SUI.mainSelector.removeChildren();\r\n\r\n    SUI.mainSelector.load(path).disablePicking();\r\n    if (bUseStdMat) SUI.mainSelector.setMaterial( ATON.MatHub.getMaterial(\"selector\") );\r\n};\r\n\r\nSUI.buildInfoNode = ()=>{\r\n    SUI.infoNode = ATON.createUINode();\r\n    SUI.infoNode.attachToRoot();\r\n\r\n    SUI.infoContainer = new ThreeMeshUI.Block({\r\n        width: 0.15,\r\n        height: 0.05, //0.07,\r\n        padding: 0.01,\r\n        borderRadius: 0.02,\r\n        //backgroundColor: ATON.MatHub.colors.darksem,\r\n        //backgroundOpacity: 0.2,\r\n\r\n        fontFamily: ATON.PATH_RES+\"fonts/custom-msdf.json\", //ATON.PATH_MODS+'three-mesh-ui/examples/assets/Roboto-msdf.json',\r\n        fontTexture: ATON.PATH_RES+\"fonts/custom.png\", //ATON.PATH_MODS+'three-mesh-ui/examples/assets/Roboto-msdf.png',\r\n\r\n        alignContent: 'center', // could be 'center' or 'left'\r\n        justifyContent: 'center', // could be 'center' or 'start'\r\n    });\r\n    SUI.infoNode.add(SUI.infoContainer);\r\n\r\n    SUI.infoNodeText = new ThreeMeshUI.Text({ \r\n        content: \"Info\",\r\n        fontSize: 0.02,\r\n        fontColor: ATON.MatHub.colors.white\r\n    });\r\n    SUI.infoContainer.add(SUI.infoNodeText);\r\n    //SUI.infoNode.scale.set(0.07,0.07,0.07);\r\n};\r\n\r\n/**\r\nGet main UI Info Node\r\n@returns {Node}\r\n*/\r\nSUI.getInfoNode = ()=>{\r\n    return SUI.infoNode;\r\n};\r\n\r\n/**\r\nCreate a SpatialUI toolbar from a list of SUI buttons\r\nThis can be arranged anywhere in the scene or attached to other UI nodes\r\n@param {string} buttonlist - a list (array) of SUI buttons\r\n@param {THREE.Color} color - (optional) base color for the toolbar\r\n@returns {Node}\r\n*/\r\nSUI.createToolbar = (buttonlist, color)=>{\r\n    let T = ATON.createUINode();\r\n\r\n    let num = buttonlist.length;\r\n    let padding = SUI.STD_BTN_SIZE * 0.3;\r\n\r\n    let cont = new ThreeMeshUI.Block({\r\n        width: (SUI.STD_BTN_SIZE * num) + padding,\r\n        height: SUI.STD_BTN_SIZE + padding,\r\n        padding: 0.01,\r\n        borderRadius: 0.02,\r\n        backgroundColor: color? color : ATON.MatHub.colors.black,\r\n        backgroundOpacity: 0.3,\r\n\r\n        fontFamily: ATON.PATH_RES+\"fonts/custom-msdf.json\",\r\n        fontTexture: ATON.PATH_RES+\"fonts/custom.png\",\r\n\r\n        alignContent: 'center', // could be 'center' or 'left'\r\n        justifyContent: 'center', // could be 'center' or 'start'\r\n    });\r\n    //cont.position.set(0,0,0);\r\n\r\n    let m = (num*0.5) * SUI.STD_BTN_SIZE;\r\n    m -= (SUI.STD_BTN_SIZE*0.5);\r\n\r\n    for (let i=0; i<num; i++){\r\n        let button = buttonlist[i];\r\n        button.position.set((i*SUI.STD_BTN_SIZE)-m, 0.0, 0.01);\r\n        cont.add(button);\r\n    }\r\n\r\n    T.add(cont);\r\n    return T;\r\n};\r\n\r\n// Main update routine\r\nSUI.update = ()=>{\r\n    if (ATON.Nav.isTransitioning() || ATON._bPauseQuery){\r\n        SUI.infoNode.visible = false;\r\n        return;\r\n    }\r\n\r\n    ThreeMeshUI.update();\r\n\r\n    if (ATON._queryDataScene){\r\n        SUI.mainSelector.visible = true;\r\n        SUI.mainSelector.position.copy(ATON._queryDataScene.p);    \r\n    }\r\n    else {\r\n        SUI.mainSelector.visible = false;\r\n    }\r\n\r\n    // InfoNode (semantics)\r\n    if (ATON._queryDataSem){\r\n\r\n        if (ATON.XR._bPresenting){\r\n            SUI.infoNode.position.copy(ATON.XR.controller0pos); //.lerpVectors(ATON._queryDataSem.p, ATON.XR.controller0pos, 0.8);\r\n            SUI.infoNode.setScale(SUI._labelScaleVR);\r\n        }\r\n        else {\r\n            SUI.infoNode.position.lerpVectors(ATON._queryDataSem.p, ATON.Nav._currPOV.pos, 0.2);\r\n            SUI.infoNode.setScale(ATON._queryDataSem.d * SUI._labelScale);\r\n        }\r\n        SUI.infoNode.orientToCamera();\r\n\r\n        if (SUI.bShowInfo) SUI.infoNode.visible = true;\r\n        SUI.mainSelector.visible = false;\r\n    }\r\n    else {\r\n        SUI.infoNode.visible = false;\r\n    }\r\n\r\n};\r\n\r\nexport default SUI;","/*\r\n    ATON Avatar Class\r\n    used in VRoadcast system\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\nimport Node from \"./ATON.node.js\";\r\n\r\nexport default class Avatar extends Node {\r\n\r\nconstructor(uid){\r\n    super(undefined /*uid*/, ATON.NTYPES.UI);\r\n\r\n    this.userid   = uid;\r\n    this.username = undefined; //\"User #\"+uid;\r\n    this.message  = \"...\";\r\n    this.bTalking = false;\r\n\r\n    this._tStateCall = -1.0;\r\n    this._tStateDur  = 0.1;\r\n    this._tProgress  = 0.0;\r\n\r\n    this._currState  = {};\r\n    this._currState.position   = new THREE.Vector3();\r\n    this._currState.quaternion = new THREE.Quaternion();\r\n\r\n    this._tgtState = undefined;\r\n\r\n    //console.log(this);\r\n\r\n    this.realize();\r\n}\r\n\r\ngetAvatarMaterialByUID(uid){\r\n    //if (uid === undefined) return 0;\r\n\r\n    let avaMats = ATON.MatHub.materials.avatars;\r\n    let mi = (uid % avaMats.length); //uid? (uid % avaMats.length) : 0;\r\n    \r\n    return avaMats[mi];\r\n}\r\n\r\nrealize(){\r\n    // build minimal representation\r\n    let g = new THREE.SphereGeometry( 0.2, 16, 16 );\r\n\r\n    this.usermaterial = this.getAvatarMaterialByUID(this.userid);\r\n\r\n    let smesh = new THREE.Mesh( g, this.usermaterial );\r\n\r\n    this.usermeshnode = ATON.createUINode();\r\n    this.usermeshnode.add(smesh);\r\n    this.usermeshnode.setMaterial(this.usermaterial);\r\n\r\n    // CHECK / FIXME: this is to avoid cloning of the same mesh when using same representation for all avatars\r\n    this.usermeshnode.setCloneOnLoadHit(false);\r\n\r\n    // Build Label\r\n    this.userlabelnode = ATON.createUINode();\r\n    this.labelcontainer = new ThreeMeshUI.Block({\r\n        width: 0.7,\r\n        height: 0.25,\r\n        padding: 0.03,\r\n        borderRadius: 0.05,\r\n        backgroundColor: ATON.VRoadcast.ucolorsdark[this.userid % ATON.VRoadcast.ucolorsdark.length],\r\n\r\n        fontFamily: ATON.PATH_RES+\"fonts/custom-msdf.json\", //ATON.PATH_MODS+'three-mesh-ui/examples/assets/Roboto-msdf.json',\r\n        fontTexture: ATON.PATH_RES+\"fonts/custom.png\" //ATON.PATH_MODS+'three-mesh-ui/examples/assets/Roboto-msdf.png',\r\n\r\n        //alignContent: 'right', // could be 'center' or 'left'\r\n        //justifyContent: 'end', // could be 'center' or 'start'\r\n    });\r\n\r\n    this.userlabelnode.position.y = 0.4;\r\n    this.userlabelnode.add(this.labelcontainer);\r\n\r\n    // username text\r\n    this.usernametext = new ThreeMeshUI.Text({ \r\n        content: \"User #\"+this.userid,\r\n        fontSize: 0.09,\r\n        fontColor: ATON.MatHub.colors.white //ATON.VRoadcast.ucolors[this.userid % ATON.VRoadcast.ucolors.length]\r\n    });\r\n    this.usernametext.position.y = 0.0;\r\n\r\n    // message text\r\n    this.usermessagetext = new ThreeMeshUI.Text({ \r\n        content: \"\\nHello World!\",\r\n        fontSize: 0.03,\r\n        fontColor: ATON.MatHub.colors.white\r\n    });\r\n    this.usermessagetext.position.y = -0.03;\r\n\r\n    this.labelcontainer.add(this.usernametext);\r\n    this.labelcontainer.add(this.usermessagetext);\r\n    \r\n    this.add(this.usermeshnode);\r\n    this.add(this.userlabelnode);\r\n};\r\n\r\n// Loads custom avatar representation (3D model)\r\nloadRepresentation(url){\r\n    let A = this;\r\n\r\n    if (A.usermeshnode.children[0] !== undefined){\r\n        A.usermeshnode.remove(A.usermeshnode.children[0]);\r\n    }\r\n\r\n    A.usermeshnode.load(url); //.setMaterial(A.usermaterial);\r\n\r\n    return this;\r\n}\r\n\r\nsetUsername(username){\r\n    this.username = username;\r\n\r\n    this.usernametext.set({ \r\n        content: username\r\n    });\r\n\r\n    return this;\r\n}\r\n\r\ngetUsername(){\r\n    if (this.userid === undefined) return undefined;\r\n    if (this.username === undefined) return \"User #\"+this.userid;\r\n    return this.username;\r\n};\r\n\r\nsetMessage(msg){\r\n    this.message = msg;\r\n\r\n    // TODO: check for text length\r\n    this.usermessagetext.set({ \r\n        content: \"\\n\"+msg\r\n    });\r\n\r\n    return this;\r\n}\r\n\r\nrequestStateTransition(S){\r\n    if (this._tStateCall >= 0.0) return; // already requested\r\n\r\n    this._tStateCall = ATON._clock.elapsedTime;\r\n\r\n    this._currState.position.copy(this.position);\r\n    this._currState.quaternion.copy(this.quaternion);\r\n\r\n    this._tgtState = S;\r\n    \r\n    //this._sDistance = this.position.distanceTo(S.position);\r\n}\r\n\r\nhandleStateTransition(){\r\n    if (this._tStateCall < 0.0) return;\r\n\r\n    let D = this._tStateDur; //(this._sDistance * this._tStateDur);\r\n\r\n    if (D <= 0.0) this._tProgress = 1.0;\r\n    else this._tProgress = (ATON._clock.elapsedTime - this._tStateCall) / D;\r\n\r\n    let cs = this._currState;\r\n    let ts = this._tgtState;\r\n\r\n    // End\r\n    if (this._tProgress >= 1.0){\r\n        this._tStateCall = -1.0;\r\n\r\n        this.position.copy(ts.position);\r\n        //this.quaternion.copy(ts.quaternion);\r\n        this.usermeshnode.quaternion.copy(ts.quaternion);\r\n\r\n        return;\r\n    }\r\n\r\n    this.position.lerpVectors(cs.position, ts.position, this._tProgress);\r\n    this.usermeshnode.quaternion.slerp(ts.quaternion, this._tProgress);\r\n    //THREE.Quaternion.slerp( cs.quaternion, ts.quaternion, this.usermeshnode.quaternion, this._tProgress);\r\n}\r\n\r\nupdate(){\r\n    this.handleStateTransition();\r\n\r\n    let cam  = ATON.Nav._camera;\r\n    let eye = ATON.Nav._currPOV.pos;\r\n    if (cam === undefined || eye === undefined) return;\r\n\r\n    //this.userlabelnode.lookAt( eye );\r\n\r\n    //this.userlabelnode.setRotationFromMatrix(cam.matrix); // quaternion.setFromRotationMatrix( cam.matrix );\r\n    //this.userlabelnode.rotation.copy(cam.rotation);\r\n\r\n    this.userlabelnode.orientToCamera(); //quaternion.copy( ATON.Nav._qOri );\r\n\r\n/*\r\n    this.userlabelnode.rotation.y = Math.atan2(\r\n        ( cam.position.x - this.userlabelnode.position.x ),\r\n        ( cam.position.z - this.userlabelnode.position.z )\r\n    );\r\n*/\r\n    //this.userlabelnode.matrix.copy( cam.matrix );\r\n}\r\n\r\n\r\n};","/*\r\n    ATON VRoadcast\r\n    real-time collaborative networking\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\nimport Avatar from \"./ATON.avatar.js\";\r\n\r\n/**\r\nATON VRoadcast component\r\n@namespace VRoadcast\r\n*/\r\nlet VRoadcast = {};\r\n\r\nVRoadcast.USER_STATE_FREQ = 0.25; // sec\r\nVRoadcast.REPLICATED_EVT = \"EREP\";\r\n\r\n// Thresholds state sending\r\nVRoadcast.THRES_STATE_POS = 0.01;\r\nVRoadcast.THRES_STATE_ORI = 0.08; // radians\r\n\r\nVRoadcast.Avatar = Avatar;\r\n\r\n\r\n/**\r\nInitialize the component\r\n*/\r\nVRoadcast.init = ()=>{\r\n    VRoadcast.address = window.location.origin;\r\n\r\n    VRoadcast.initMaterials();\r\n\r\n    VRoadcast.socket = undefined;\r\n    VRoadcast._connected = false;\r\n\r\n    VRoadcast._username = undefined;\r\n\r\n    VRoadcast.uid = undefined; // my userID (0,1,....)\r\n    VRoadcast._numUsers = 0;\r\n\r\n    VRoadcast.avatarList = [];\r\n\r\n    VRoadcast.avaGroup = ATON.createUINode(\"avatars\"); // holds all avatars representations\r\n    VRoadcast.avaGroup.attachToRoot();\r\n\r\n    // send own state with given freq\r\n    window.setInterval( VRoadcast.sendState, VRoadcast.USER_STATE_FREQ*1000.0 );\r\n    VRoadcast._lastStateSent = undefined;\r\n\r\n    console.log(\"VRoadcast initialized\");\r\n    VRoadcast.enableChatLog();\r\n};\r\n\r\nVRoadcast.enableChatLog = ()=>{\r\n    VRoadcast._elChat = $(\"<div></div>\").text(\"\");\r\n};\r\n\r\nVRoadcast.getNumUsers = ()=>{\r\n    return VRoadcast._numUsers;\r\n};\r\n\r\n// Register materials (avatars/users)\r\nVRoadcast.initMaterials = ()=>{\r\n\r\n    VRoadcast.ucolors = [];\r\n    VRoadcast.ucolors.push( new THREE.Color(1,0,0) );\r\n    VRoadcast.ucolors.push( new THREE.Color(1,1,0) );\r\n    VRoadcast.ucolors.push( new THREE.Color(0,1,0) );\r\n    VRoadcast.ucolors.push( new THREE.Color(0,1,1) );\r\n    VRoadcast.ucolors.push( new THREE.Color(0,0,1) );\r\n    VRoadcast.ucolors.push( new THREE.Color(1,0,1) );\r\n\r\n    VRoadcast.ucolorsdark = [];\r\n    VRoadcast.ucolorsdark.push( new THREE.Color(0.2,0.0,0.0) );\r\n    VRoadcast.ucolorsdark.push( new THREE.Color(0.2,0.2,0.0) );\r\n    VRoadcast.ucolorsdark.push( new THREE.Color(0.0,0.2,0.0) );\r\n    VRoadcast.ucolorsdark.push( new THREE.Color(0.0,0.2,0.2) );\r\n    VRoadcast.ucolorsdark.push( new THREE.Color(0.0,0.0,0.2) );\r\n    VRoadcast.ucolorsdark.push( new THREE.Color(0.2,0.0,0.2) );\r\n\r\n    VRoadcast.ucolorhex = [];\r\n    VRoadcast.ucolorhex.push(\"#F00\");\r\n    VRoadcast.ucolorhex.push(\"#FF0\");\r\n    VRoadcast.ucolorhex.push(\"#0F0\");\r\n    VRoadcast.ucolorhex.push(\"#0FF\");\r\n    VRoadcast.ucolorhex.push(\"#00F\");\r\n    VRoadcast.ucolorhex.push(\"#F0F\");\r\n\r\n    let MM = ATON.MatHub.materials;\r\n    MM.avatars = [];\r\n\r\n    let mat = new THREE.MeshBasicMaterial({\r\n        color: VRoadcast.ucolors[0], \r\n        transparent: true, \r\n        opacity: 0.4, \r\n        depthWrite: false,\r\n        flatShading: true\r\n    });\r\n\r\n    MM.avatars.push(mat);\r\n\r\n    for (let c=1; c<VRoadcast.ucolors.length; c++){\r\n        let M = mat.clone();\r\n        M.color = VRoadcast.ucolors[c];\r\n\r\n        MM.avatars.push(M);\r\n    }\r\n};\r\n\r\n/**\r\nFire a replicated event (network)\r\n@param {string} evtname - the event name\r\n@param {object} data - object containing data to be transmitted with this event\r\n\r\n@example\r\nATON.VRoadcast.fireEvent(\"test\", 42);\r\n*/\r\nVRoadcast.fireEvent = (evtname, data)=>{\r\n    if (!VRoadcast._connected) return;\r\n    let sock = VRoadcast.socket;\r\n\r\n    if (sock) sock.emit(VRoadcast.REPLICATED_EVT, {e: evtname, d: data});\r\n    //else ATON.on(\"VRC_Connected\", ()=>{ sock.on(evtname, onReceive); });\r\n};\r\n\r\n/**\r\nSubscribe to a given network event, through given handler\r\n@param {string} evtname - the event name\r\n@param {function} handler - network event handler (how we handle incoming event)\r\n\r\n@example\r\nATON.VRoadcast.on(\"test\", function(data){ console.log(\"Received: \"+data); });\r\n*/\r\nVRoadcast.on = (evtname, handler)=>{\r\n    if (handler === undefined) return;\r\n\r\n    let evhNetwork = ATON.EventHub.evNetwork;\r\n\r\n    if (evhNetwork[evtname] === undefined) evhNetwork[evtname] = []; // First time (event not registered)\r\n    evhNetwork[evtname].push(handler);\r\n};\r\n\r\n/**\r\nReturn true if VRoadcast is connected to the service\r\n@returns {boolean}\r\n*/\r\nVRoadcast.isConnected = ()=>{\r\n    return VRoadcast._connected;\r\n};\r\n\r\n/**\r\nRequest enter in a given scene\r\n@param {string} sceneid - the scene id (sid)\r\n@example\r\nATON.VRoadcast.requestSceneEnter(\"testscene\");\r\n*/\r\nVRoadcast.requestSceneEnter = (sceneid)=>{\r\n    if (!VRoadcast.socket) return;\r\n    if (sceneid === undefined) sceneid = ATON.SceneHub.currID;\r\n\r\n    if (sceneid === undefined){\r\n        console.log(\"VRC ERROR: current scene ID is undefined\");\r\n        return;\r\n    }\r\n\r\n    VRoadcast.socket.emit(\"SENTER\", sceneid );\r\n};\r\n\r\n/**\r\nConnect to VRoadcast service\r\n@param {string} address - the address of the service (optional). Default is same server where main service is running\r\n@example\r\nATON.VRoadcast.connect();\r\n*/\r\nVRoadcast.connect = (address)=>{\r\n    if (VRoadcast._connected) return;\r\n    if (address) VRoadcast.address = address;\r\n\r\n    let opts = {};\r\n\r\n    // Secure connection\r\n    if (window.location.protocol === \"https:\"){\r\n        opts.path = '/svrc/socket.io';\r\n        opts.secure = true;\r\n        opts.rejectUnauthorized = false;\r\n        //opts.transports = ['websocket'], \r\n        //opts.upgrade = false \r\n    }\r\n    else {\r\n        opts.path = '/vrc/socket.io';\r\n    }\r\n\r\n    VRoadcast.socket = io.connect(VRoadcast.address, opts); //, { 'force new connection': true });\r\n\r\n    if (VRoadcast.socket === undefined) return;\r\n    VRoadcast._connected = VRoadcast.socket.connected;\r\n\r\n    VRoadcast._registerSocketHandlers();\r\n};\r\n\r\nVRoadcast.disconnect = ()=>{\r\n    if (VRoadcast.socket === undefined) return;\r\n\r\n    VRoadcast.socket.disconnect();\r\n    VRoadcast._connected = false;\r\n};\r\n\r\n\r\nVRoadcast._onConnected = ()=>{\r\n    //\r\n};\r\n\r\nVRoadcast.setUsername = (username)=>{\r\n    VRoadcast._username = username;\r\n    if (VRoadcast.socket === undefined) return;\r\n    if (VRoadcast.uid === undefined) return;\r\n\r\n    if (VRoadcast._elChat) VRoadcast._elChat.append(\"<i>Your username is now: \"+username+\"</i><br>\");\r\n    VRoadcast.socket.emit(\"UNAME\", username);\r\n};\r\nVRoadcast.setMessage = (msg)=>{\r\n    VRoadcast._msg = msg;\r\n    if (VRoadcast.socket === undefined) return;\r\n    if (VRoadcast.uid === undefined) return;\r\n\r\n    if (VRoadcast._elChat){\r\n        VRoadcast._elChat.append(\"<span style='color:\"+VRoadcast.ucolorhex[VRoadcast.uid%6]+\"'><b>YOU</b>: \"+msg+\"</span><br>\");\r\n        VRoadcast._elChat.scrollTop(VRoadcast._elChat.scrollHeight);\r\n    }\r\n\r\n    VRoadcast.socket.emit(\"UMSG\", msg);\r\n};\r\n\r\n\r\n// Handle incoming server msgs\r\nVRoadcast._registerSocketHandlers = ()=>{\r\n\r\n    // We connected to server\r\n    VRoadcast.socket.on('connect', ()=>{\r\n        VRoadcast._connected = true;\r\n\r\n        // Request enter in scene node (room)\r\n        if (ATON.SceneHub.currID !== undefined) VRoadcast.requestSceneEnter();\r\n        \r\n        console.log(\"VRC connected, entering scene: \"+ATON.SceneHub.currID);\r\n        ATON.fireEvent(\"VRC_Connected\");\r\n\r\n        VRoadcast._onConnected();\r\n    });\r\n\r\n    VRoadcast.socket.on('disconnect', ()=>{\r\n        VRoadcast._connected = false;\r\n        VRoadcast.uid = undefined;\r\n\r\n        VRoadcast.avaGroup.hide();\r\n\r\n        if (VRoadcast._elChat) VRoadcast._elChat.append(\"<i>YOU disconnected from VRoadcast service</i><br>\");\r\n\r\n        console.log(\"VRC disconnected!\");\r\n        ATON.fireEvent(\"VRC_Disconnected\");\r\n    });\r\n\r\n    // Incoming replicated event\r\n    VRoadcast.socket.on(VRoadcast.REPLICATED_EVT, (data)=>{\r\n        let evtname = data.e;\r\n        let d = data.d;\r\n\r\n        let ehList = ATON.EventHub.evNetwork[evtname];\r\n        ATON.EventHub.executeHandlers(ehList, d);\r\n    });\r\n\r\n    VRoadcast.socket.on('ID', (data)=>{\r\n        console.log(\"Your ID is \" + data);\r\n        VRoadcast.uid = data;\r\n\r\n        if (VRoadcast._elChat) VRoadcast._elChat.append(\"<i>Your ID is #\"+data+\"</i><br>\");\r\n\r\n        ATON.fireEvent(\"VRC_IDassigned\", data);\r\n    });\r\n\r\n    VRoadcast.socket.on('UENTER', (data)=>{\r\n        let uid = data;\r\n        //if (uid === VRoadcast.uid) return; // myself\r\n\r\n        console.log(\"User #\" +uid+\" entered the scene\");\r\n        if (VRoadcast._elChat) VRoadcast._elChat.append(\"<i>User #\"+uid+\" entered the scene</i><br>\");\r\n\r\n        VRoadcast.touchAvatar(uid);\r\n    });\r\n\r\n    VRoadcast.socket.on('ULEAVE', (data)=>{\r\n        let uid = data;\r\n        if (uid === undefined) return;\r\n        \r\n        let A = VRoadcast.avatarList[uid];\r\n        if (A) A.hide();\r\n\r\n        console.log(\"User #\" +uid+\" left the scene\");\r\n        if (VRoadcast._elChat) VRoadcast._elChat.append(\"<i>User #\"+uid+\" left the scene</i><br>\");\r\n\r\n        if (VRoadcast._numUsers>0) VRoadcast._numUsers--;\r\n    });\r\n\r\n    VRoadcast.socket.on('USTATE', (data)=>{\r\n        let S = VRoadcast.decodeState(data);\r\n\r\n        let uid = S.userid;\r\n        let A = VRoadcast.touchAvatar(uid);\r\n\r\n        //A.position.copy(S.position);\r\n        //A.quaternion.copy(S.quaternion);\r\n        A.requestStateTransition(S);\r\n    });\r\n\r\n    VRoadcast.socket.on('UNAME', (data)=>{\r\n        let uid   = data.uid;\r\n        let uname = data.name;\r\n\r\n        if (uid === undefined) return;\r\n\r\n        let A = VRoadcast.touchAvatar(uid);\r\n        A.setUsername(uname);\r\n\r\n        console.log(\"User #\" +uid+\" changed username to: \"+uname);\r\n        if (VRoadcast._elChat) VRoadcast._elChat.append(\"<i>User #\"+uid+\" changed username to: \"+uname+\"</i><br>\");\r\n    });\r\n\r\n    VRoadcast.socket.on('UMSG', (data)=>{\r\n        let uid = data.uid;\r\n        let msg = data.msg;\r\n\r\n        if (uid === undefined) return;\r\n\r\n        let A = VRoadcast.touchAvatar(uid);\r\n        A.setMessage(msg);\r\n\r\n        console.log(\"User #\" +uid+\": \"+msg);\r\n        if (VRoadcast._elChat) VRoadcast._elChat.append(\"<span style='color:\"+VRoadcast.ucolorhex[uid%6]+\"'><b>\"+A.getUsername()+\"</b>: \"+msg+\"</span><br>\");\r\n    });\r\n};\r\n\r\n// Encode state\r\nVRoadcast.encodeState = (S)=>{\r\n    if (!S) return;\r\n\r\n    let A = new Float32Array(6); // make sufficient room\r\n    A[0] = S.position.x;\r\n    A[1] = S.position.y;\r\n    A[2] = S.position.z;\r\n\r\n    // Convert to byte array, we use last float storage (4 bytes)\r\n    var binData = new Int8Array(A.buffer);\r\n\r\n    binData[16] = (S.quaternion.x * 128.0);\r\n    binData[17] = (S.quaternion.y * 128.0);\r\n    binData[18] = (S.quaternion.z * 128.0);\r\n    binData[19] = (S.quaternion.w * 128.0);\r\n\r\n    binData[20] = S.userid;\r\n\r\n    //binData[21] = parseInt(S.rank);\r\n\r\n    return binData;\r\n}\r\n\r\n// Decode state\r\nVRoadcast.decodeState = (binData)=>{\r\n    let S = {};\r\n    S.userid = binData[20];\r\n\r\n    // First decode quat\r\n    S.quaternion = new THREE.Quaternion(\r\n        binData[16] / 128.0,\r\n        binData[17] / 128.0,\r\n        binData[18] / 128.0,\r\n        binData[19] / 128.0\r\n    );\r\n\r\n    // Now decode floats\r\n    let a8 = new Int8Array(16);\r\n    for (var i=0; i<16; i++) a8[i] = binData[i];\r\n    let A = new Float32Array(a8.buffer);\r\n\r\n    S.position = new THREE.Vector3(A[0],A[1],A[2]);\r\n\r\n    //S.scale = A[3];\r\n\r\n    return S;\r\n}\r\n\r\n\r\n// Update\r\nVRoadcast.update = ()=>{\r\n\r\n    // State interpolation\r\n    for (let a=0; a<VRoadcast.avatarList.length; a++){\r\n        let A = VRoadcast.avatarList[a];\r\n        if (A && A.visible){\r\n            A._tStateDur = VRoadcast.USER_STATE_FREQ;\r\n            A.update();\r\n        }\r\n    }\r\n};\r\n\r\nVRoadcast.sendState = ()=>{\r\n    if (VRoadcast.uid === undefined) return;\r\n    if (!VRoadcast.socket || !VRoadcast._connected) return;\r\n    \r\n    let cpov = ATON.Nav._currPOV;\r\n    if (!cpov) return;\r\n\r\n    //console.log(cpov);\r\n\r\n    let S = {};\r\n    S.position = new THREE.Vector3();\r\n    S.quaternion = new THREE.Quaternion();\r\n\r\n    S.position.copy(cpov.pos);\r\n    S.quaternion.copy(ATON.Nav._qOri);\r\n    S.userid = VRoadcast.uid;\r\n\r\n    // Save bandwidth\r\n    if (VRoadcast._lastStateSent !== undefined){\r\n        let lastPos = VRoadcast._lastStateSent.position;\r\n        let lastOri = VRoadcast._lastStateSent.quaternion;\r\n\r\n        let dPos = lastPos.distanceToSquared(cpov.pos);\r\n        let dOri = lastOri.angleTo(ATON.Nav._qOri);\r\n\r\n        if ( dPos < VRoadcast.THRES_STATE_POS && dOri < VRoadcast.THRES_STATE_ORI) return;\r\n    }\r\n\r\n    // Encode and send\r\n    let binData = VRoadcast.encodeState(S);\r\n    VRoadcast.socket.emit(\"USTATE\", binData/*.buffer*/ );\r\n    VRoadcast._lastStateSent = S;\r\n\r\n    //console.log(\"State sent\");\r\n};\r\n\r\n\r\n// Avatars\r\nVRoadcast.getAvatar = (uid)=>{\r\n    return VRoadcast.avatarList[uid];\r\n};\r\n\r\nVRoadcast.touchAvatar = (uid)=>{\r\n\r\n    // First time\r\n    if (VRoadcast.avatarList[uid] === undefined){\r\n        let A = new VRoadcast.Avatar(uid);\r\n        A.attachTo(VRoadcast.avaGroup);\r\n        \r\n        A.loadRepresentation(ATON.PATH_RES+\"models/vrc/head.gltf\");\r\n        //console.log(VRoadcast.avaGroup);\r\n\r\n        VRoadcast.avatarList[uid] = A;\r\n\r\n        //console.log(VRoadcast.avatarList);\r\n        //console.log(ATON.MatHub.materials.avatars);\r\n        //console.log(A);\r\n        VRoadcast._numUsers++;\r\n    }\r\n\r\n    let A = VRoadcast.avatarList[uid];\r\n    A.show();\r\n\r\n    return A;\r\n}\r\n\r\nVRoadcast.clearAllAvatars = ()=>{\r\n    for (let i in VRoadcast.avatarList){\r\n        let A = VRoadcast.avatarList[i];\r\n        A.hide();\r\n        //A.dispose();\r\n    }\r\n};\r\n\r\nexport default VRoadcast;","/*\r\n    ATON Semantic shapes factory\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\n/**\r\nATON Semantic Factory\r\n@namespace SemFactory\r\n*/\r\nlet SemFactory = {};\r\n\r\nSemFactory.init = ()=>{\r\n    SemFactory.bConvexBuilding = false;\r\n    SemFactory.convexPoints = [];\r\n    //SemFactory.convexMeshes = [];\r\n    SemFactory.convexNode   = undefined; // keeps track of current convex semnode\r\n    SemFactory.currConvexMesh = undefined;\r\n    \r\n    // Temp sem node to hold developing convex mesh\r\n    SemFactory.currSemNode = ATON.createSemanticNode();\r\n    SemFactory.currSemNode.disablePicking();\r\n    SemFactory.currSemNode.attachToRoot();\r\n\r\n    SemFactory.currMaterial = ATON.MatHub.getMaterial(\"semanticShape\"); // current sem material we are using\r\n\r\n    SemFactory._numShapes = 0; // counter of shapes produced\r\n};\r\n\r\n\r\n// Current material\r\nSemFactory.resetMaterial = ()=>{\r\n    SemFactory.currMaterial = ATON.MatHub.getMaterial(\"semanticShape\");\r\n};\r\n\r\nSemFactory.setMaterial = (m)=>{\r\n    if (m === undefined) return;\r\n    SemFactory.currMaterial = m;\r\n};\r\n\r\n\r\n// Convex shapes\r\n// NOTE: if semid exists, add mesh under the same id\r\nSemFactory.addConvexPoint = (/*semid,*/ p)=>{\r\n\r\n    SemFactory.convexPoints.push(p);\r\n    let numPoints = SemFactory.convexPoints.length;\r\n\r\n    // Spatial UI\r\n    let M = new THREE.Mesh( ATON.Utils.geomUnitSphere, ATON.MatHub.getMaterial(\"semanticShapeEdit\"));\r\n    M.position.copy(p);\r\n    M.scale.set(0.001,0.001,0.001);\r\n    ATON.SUI.gPoints.add( M );\r\n\r\n    if (numPoints < 4) return false;\r\n\r\n    // lets build convex shape\r\n    let geom   = new THREE.ConvexBufferGeometry( SemFactory.convexPoints );\r\n    let semesh = new THREE.Mesh( geom, ATON.MatHub.getMaterial(\"semanticShapeEdit\") );\r\n\r\n    //let numMeshes = SemFactory.convexMeshes.length;\r\n\r\n    // First time: create semnode and add it to current sem group\r\n    if (!SemFactory.bConvexBuilding){\r\n        //if (semid === undefined) semid = \"sem\"+SemFactory._numShapes;\r\n\r\n        //SemFactory.convexNode = ATON.getSemanticNode(semid) || ATON.createSemanticNode(semid);\r\n        //SemFactory.convexNode = ATON.createSemanticNode();\r\n        //SemFactory.convexNode.add(semesh);\r\n        SemFactory.currSemNode.add(semesh);\r\n        \r\n        // Store\r\n        semesh.userData._convexPoints = [];\r\n        for (let i=0; i<numPoints; i++){\r\n            //semesh.userData._convexPoints.push( ATON.Utils.setVectorPrecision(SemFactory.convexPoints[i],3) );\r\n\r\n            ATON.Utils.setVectorPrecision(SemFactory.convexPoints[i],4);\r\n            semesh.userData._convexPoints.push(SemFactory.convexPoints[i].x);\r\n            semesh.userData._convexPoints.push(SemFactory.convexPoints[i].y);\r\n            semesh.userData._convexPoints.push(SemFactory.convexPoints[i].z);\r\n        }\r\n\r\n        SemFactory.currConvexMesh = semesh;\r\n        SemFactory.bConvexBuilding = true;\r\n    }\r\n\r\n    // keep updating current semantic geometry\r\n    else {\r\n        let currSemesh = SemFactory.currConvexMesh;\r\n        currSemesh.geometry.dispose();\r\n        currSemesh.geometry = geom;\r\n\r\n        //currSemesh.userData._convexPoints.push( ATON.Utils.setVectorPrecision(p,3) );\r\n\r\n        ATON.Utils.setVectorPrecision(p,4);\r\n        currSemesh.userData._convexPoints.push( p.x );\r\n        currSemesh.userData._convexPoints.push( p.y );\r\n        currSemesh.userData._convexPoints.push( p.z );\r\n    }\r\n\r\n    return true;\r\n};\r\n\r\nSemFactory.stopCurrentConvex = ()=>{\r\n    SemFactory.convexPoints = [];\r\n    SemFactory.bConvexBuilding = false;\r\n\r\n    SemFactory.currSemNode.removeChildren();\r\n    ATON.SUI.gPoints.removeChildren();\r\n};\r\n\r\nSemFactory.getCurrentConvexShape = ()=>{\r\n    return SemFactory.currSemNode\r\n};\r\n\r\nSemFactory.completeConvexShape = (semid)=>{\r\n    SemFactory.convexPoints = [];\r\n    SemFactory.bConvexBuilding = false;\r\n\r\n    //if (SemFactory.convexNode === undefined) return undefined;\r\n    //if (SemFactory.currConvexMesh === undefined) return undefined;\r\n    if (SemFactory.currSemNode === undefined) return;\r\n\r\n    if (semid === undefined) semid = \"sem\"+SemFactory._numShapes;\r\n\r\n    let S = ATON.getSemanticNode(semid) || ATON.createSemanticNode(semid);\r\n    \r\n    S.add(SemFactory.currSemNode.children[0]);\r\n    S.setMaterial( SemFactory.currMaterial );\r\n    S.setDefaultAndHighlightMaterials(SemFactory.currMaterial, ATON.MatHub.materials.semanticShapeHL);\r\n    S.enablePicking();\r\n\r\n    SemFactory.currSemNode.removeChildren();\r\n\r\n/*\r\n    SemFactory.convexNode = ATON.getSemanticNode(semid) || ATON.createSemanticNode(semid);\r\n    SemFactory.convexNode.add(SemFactory.currConvexMesh);\r\n\r\n    SemFactory.convexNode.setMaterial( SemFactory.currMaterial );\r\n    SemFactory.convexNode.setDefaultMaterial(SemFactory.currMaterial);\r\n    SemFactory.convexNode.enablePicking();\r\n*/\r\n    SemFactory._numShapes++;\r\n\r\n    //console.log(SemFactory.convexNode);\r\n    //console.log(SemFactory.convexNode.userData._convexPoints);\r\n\r\n    //return SemFactory.convexNode;\r\n\r\n    // Spatial UI\r\n    ATON.SUI.gPoints.removeChildren();\r\n\r\n    return S;\r\n};\r\n\r\nSemFactory.createConvexShape = (semid, points)=>{\r\n    let geom   = new THREE.ConvexBufferGeometry( points );\r\n    let semesh = new THREE.Mesh( geom, SemFactory.currMaterial );\r\n\r\n    semesh.userData._convexPoints = [];\r\n    for (let i=0; i<points.length; i++){\r\n        let p = points[i];\r\n        ATON.Utils.setVectorPrecision(p,4);\r\n\r\n        semesh.userData._convexPoints.push( p.x );\r\n        semesh.userData._convexPoints.push( p.y );\r\n        semesh.userData._convexPoints.push( p.z );\r\n        }\r\n\r\n    let S = ATON.getOrCreateSemanticNode(semid);\r\n    S.add(semesh);\r\n    S.setDefaultAndHighlightMaterials(SemFactory.currMaterial, ATON.MatHub.materials.semanticShapeHL);\r\n\r\n    S.enablePicking();\r\n\r\n    return S;\r\n};\r\n\r\nSemFactory.addSurfaceConvexPoint = (/*semid,*/ offset)=>{\r\n    if (!ATON._queryDataScene) return false;\r\n\r\n    if (offset === undefined) offset = 0.02;\r\n\r\n    let p   = ATON._queryDataScene.p;\r\n    let eye = ATON.Nav.getCurrentEyeLocation();\r\n/*\r\n    let n = ATON._queryDataScene.n;\r\n    p.x += (n.x * offset);\r\n    p.y += (n.y * offset);\r\n    p.z += (n.z * offset);\r\n*/\r\n    p.lerpVectors(p, eye, offset);\r\n\r\n    SemFactory.addConvexPoint(p);\r\n    return p;\r\n};\r\n\r\n\r\n// Spherical semantic shapes\r\n// NOTE: if semid exists, add mesh under the same id\r\nSemFactory.createSphere = (semid, location, radius)=>{\r\n    if (location === undefined) return undefined;\r\n    if (radius === undefined) return undefined;\r\n\r\n/*\r\n    if (ATON.getSemanticNode(semid)){\r\n        console.log(\"ERROR SemFactory: semantic node \"+semid+\" already exists.\");\r\n        return false;\r\n    }\r\n*/\r\n    if (semid === undefined) semid = \"sem\"+SemFactory._numShapes;\r\n\r\n    let S = ATON.getOrCreateSemanticNode(semid);\r\n\r\n    //let g = new THREE.SphereGeometry( 1.0, 16, 16 );\r\n    let M = new THREE.Mesh( ATON.Utils.geomUnitSphere, SemFactory.currMaterial );\r\n    \r\n    // Note: we add multiple spheres to the same <semid> node\r\n    let sphere = new THREE.Object3D();\r\n    sphere.position.copy(location);\r\n    sphere.scale.set(radius, radius, radius);\r\n    sphere.add(M);\r\n\r\n    S.add( sphere );\r\n    S.enablePicking();\r\n    S.setDefaultAndHighlightMaterials(SemFactory.currMaterial, ATON.MatHub.materials.semanticShapeHL);\r\n\r\n    //SemFactory.currParent.add( S );\r\n\r\n    SemFactory._numShapes++;\r\n\r\n    return S;\r\n};\r\n\r\nSemFactory.createSurfaceSphere = (semid)=>{\r\n    if (!ATON._queryDataScene) return undefined;\r\n\r\n    let p = ATON._queryDataScene.p;\r\n    let r = ATON.SUI.getSelectorRadius();\r\n\r\n    return SemFactory.createSphere(semid, p,r);\r\n};\r\n\r\nexport default SemFactory;","/*\r\n    ATON Front-end blueprint\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\n/**\r\nATON Front-end routines\r\n@namespace FE\r\n*/\r\nlet FE = {};\r\n\r\n// Semantic-shapes types\r\nFE.SEMSHAPE_SPHERE = 0;\r\nFE.SEMSHAPE_CONVEX = 1;\r\n\r\n\r\nFE.realize = ()=>{\r\n    FE.PATH_RES_ICONS = ATON.PATH_RES+\"icons/\";\r\n\r\n    FE._bPopup = false;     // showing popup\r\n    FE.bPopupBlurBG = 0.25; // blur 3D content on popup show, 0.0 to disable\r\n    FE._userAuth = {};\r\n\r\n    FE._bReqHome = false;   // auto-compute home\r\n\r\n    FE.urlParams = new URLSearchParams(window.location.search);\r\n\r\n    FE._uiSetupBase();\r\n\r\n    ATON.realize();\r\n\r\n    // built-in base front-end parameters\r\n    let ddens = ATON.FE.urlParams.get('d');\r\n    if (ddens && ddens>0.0) ATON.setDefaultPixelDensity(ddens);\r\n};\r\n\r\n// Add basic front-end events\r\nFE.addBasicLoaderEvents = ()=>{\r\n    ATON.on(\"NodeRequestFired\", ()=>{ $(\"#idLoader\").show(); });\r\n    ATON.on(\"AllNodeRequestsCompleted\", ()=>{ \r\n        $(\"#idLoader\").hide();\r\n        \r\n        //console.log(ATON.Nav.homePOV);\r\n\r\n        if (FE._bReqHome) return;\r\n\r\n        if (ATON.Nav.homePOV === undefined){\r\n            ATON.Nav.computeAndRequestDefaultHome(0.5);\r\n        }\r\n        \r\n        FE._bReqHome = true;\r\n    });\r\n\r\n    ATON.on(\"SceneJSONLoaded\",()=>{\r\n        if (ATON.Nav.homePOV !== undefined) ATON.Nav.requestHome(0.5);\r\n    });\r\n\r\n};\r\n\r\nFE.useMouseWheelToScaleSelector = (f)=>{\r\n\r\n    if (f === undefined) f = 0.001;\r\n\r\n    ATON.on(\"MouseWheel\", (d)=>{\r\n        if (ATON.Nav._controls.enableZoom === undefined) return;\r\n\r\n        if (ATON._kModShift){\r\n            ATON.Nav._controls.enableZoom = false;\r\n\r\n            let r = ATON.SUI.mainSelector.scale.x;\r\n            r += (-d*f);\r\n            if (r > 0.0001) ATON.SUI.setSelectorRadius(r);\r\n        }\r\n        else {\r\n            ATON.Nav._controls.enableZoom = true;\r\n        }\r\n    });\r\n};\r\n\r\nFE.loadSceneID = (sid)=>{\r\n    if (sid === undefined) return;\r\n\r\n    let reqstr = ATON.PATH_RESTAPI_SCENE + sid;\r\n    if (ATON.SceneHub._bEdit) reqstr += \",edit\";\r\n\r\n    ATON.SceneHub.load(reqstr, sid);\r\n    console.log(reqstr);\r\n};\r\n\r\n\r\n\r\n// HTML UI\r\n//=======================================\r\n// Sample basic UI setup\r\nFE.uiBasicSetup = ()=>{\r\n    FE.uiAddButton(\"idTopToolbar\",\"fullscreen\", ATON.toggleFullScreen );\r\n    if (ATON.Utils.isConnectionSecure()) FE.uiAddButton(\"idTopToolbar\",\"vr\", ATON.XR.toggle );\r\n\r\n    FE.uiAddButton(\"idBottomToolbar\",\"home\", ()=>{ ATON.Nav.requestHome(0.1); });\r\n};\r\n\r\nFE._uiSetupBase = ()=>{\r\n    $(\"#idPopup\").click( FE.popupClose );\r\n    $(\"#idLoader\").html(\"<img src='\"+ATON.PATH_RES+\"loader.png'>\");\r\n};\r\n\r\n// Add Generic button to a specific div container\r\nFE.uiAddButton = (idcontainer, icon, onPress)=>{\r\n    let iconurl;\r\n    let iconid;\r\n\r\n    if (icon.endsWith(\".png\")){\r\n        iconurl = icon;\r\n        iconid  = icon.slice(0,-4);\r\n    }\r\n    else {\r\n        iconurl = FE.PATH_RES_ICONS+icon+\".png\";\r\n        iconid  = icon;\r\n    }\r\n\r\n    let htmlcode = \"<div id='btn-\"+iconid+\"' class='atonBTN'><img src='\"+iconurl+\"'></div>\";\r\n    $(\"#\"+idcontainer).append(htmlcode);\r\n\r\n    if (onPress) $(\"#btn-\"+iconid).click( onPress );\r\n};\r\n\r\nFE.uiSwitchButton = (iconid, b)=>{\r\n    if (b) $(\"#btn-\"+iconid).addClass(\"switchedON\");\r\n    else $(\"#btn-\"+iconid).removeClass(\"switchedON\");\r\n};\r\n\r\nFE.uiAddButtonHome = (idcontainer)=>{\r\n    FE.uiAddButton(idcontainer, \"home\", ()=>{ \r\n        ATON.Nav.requestHome(0.3);\r\n    });\r\n};\r\n\r\nFE.uiAddButtonFirstPerson = (idcontainer)=>{\r\n    FE.uiAddButton(idcontainer, \"fp\", ()=>{\r\n        if (ATON.Nav.isFirstPerson()){\r\n            ATON.Nav.setOrbitControl();\r\n            FE.uiSwitchButton(\"fp\",false);\r\n        }\r\n        else {\r\n            ATON.Nav.setFirstPersonControl();\r\n            FE.uiSwitchButton(\"fp\",true);\r\n        }\r\n    });\r\n};\r\nFE.uiAddButtonVR = (idcontainer)=>{\r\n    if (!ATON.Utils.isConnectionSecure()) return;\r\n    FE.uiAddButton(idcontainer, \"vr\", ATON.XR.toggle );\r\n};\r\nFE.uiAddButtonDeviceOrientation = (idcontainer)=>{\r\n    if (!ATON.Utils.isConnectionSecure()) return;\r\n    if (!ATON.Utils.isMobile()) return;\r\n\r\n    FE.uiAddButton(idcontainer,\"devori\", ()=>{\r\n        if (ATON.Nav.isDevOri()){\r\n            ATON.Nav.setOrbitControl();\r\n            FE.uiSwitchButton(\"devori\",false);\r\n        }\r\n        else {\r\n            ATON.Nav.setDeviceOrientationControl();\r\n            FE.uiSwitchButton(\"devori\",true);\r\n        }\r\n    });\r\n};\r\n\r\nFE.uiAddButtonQR = (idcontainer)=>{\r\n    FE.uiAddButton(idcontainer,\"qr\", FE.popupQR );\r\n};\r\n\r\nFE.uiAddButtonFullScreen = (idcontainer)=>{\r\n    FE.uiAddButton(idcontainer, \"fullscreen\", ()=>{\r\n        ATON.toggleFullScreen();\r\n        screenfull.isFullscreen? FE.uiSwitchButton(\"fullscreen\",false) : FE.uiSwitchButton(\"fullscreen\",true);\r\n    });\r\n};\r\n\r\nFE.uiAddButtonVRC = (idcontainer)=>{\r\n    FE.uiAddButton(idcontainer, \"vrc\", ()=>{\r\n        if (ATON.VRoadcast.isConnected()){\r\n            FE.popupVRC();\r\n        }\r\n        else {\r\n            ATON.VRoadcast.connect();\r\n        }\r\n    });\r\n\r\n    ATON.on(\"VRC_IDassigned\", (uid)=>{\r\n        $(\"#btn-vrc\").addClass(\"atonVRCu\"+(uid%6));\r\n        FE.checkAuth((data)=>{\r\n            if (data.username!==undefined /*&& ATON.VRoadcast._username===undefined*/) ATON.VRoadcast.setUsername(data.username);\r\n        });\r\n    });\r\n\r\n    ATON.on(\"VRC_Disconnected\", ()=>{\r\n        $(\"#btn-vrc\").attr(\"class\",\"atonBTN\");\r\n    });\r\n};\r\n\r\nFE.uiAddButtonUser = (idcontainer)=>{\r\n    FE.uiAddButton(idcontainer, \"user\", ()=>{\r\n        FE.popupUser();\r\n    });\r\n};\r\n\r\nFE.uiAddButtonEditMode = (idcontainer)=>{\r\n    FE.uiAddButton(idcontainer, \"edit\", ()=>{\r\n        FE.checkAuth((data)=>{\r\n            if (data.username !== undefined){\r\n                ATON.SceneHub._bEdit = !ATON.SceneHub._bEdit;\r\n                FE.uiSwitchButton(\"edit\",ATON.SceneHub._bEdit);\r\n            }\r\n\r\n            else {\r\n                FE.popupUser();  \r\n            }\r\n        });\r\n    });\r\n};\r\n\r\n// Attach ID validator to given input field\r\nFE.uiAttachInputFilterID = (inputid)=>{\r\n    $(\"#\"+inputid).on('keyup change input', ()=>{\r\n        let value = $(\"#\"+inputid).val();\r\n        let regReplace = new RegExp('[^A-Za-z-_]', 'ig');\r\n        $(\"#\"+inputid).val( value.replace(regReplace, '') );\r\n\r\n    });\r\n};\r\n\r\nFE.setupBasicUISounds = ()=>{\r\n    FE.auLib = {};\r\n\r\n    FE.auLib.switch = new Audio(ATON.PATH_RES+\"audio/switch.wav\");\r\n    FE.auLib.switch.loop = false;\r\n};\r\n\r\n\r\n// Popups\r\n//===================================================================\r\nFE.popupShow = (htmlcontent, cssClasses)=>{\r\n    if (FE._bPopup) return false;\r\n\r\n    let clstr = \"atonPopup \";\r\n    if (cssClasses) clstr += cssClasses;\r\n\r\n    let htcont = \"<div id='idPopupContent' class='\"+clstr+\"'>\";\r\n    htcont += htmlcontent+\"</div>\"\r\n\r\n    $('#idPopup').html(htcont);\r\n    $('#idPopupContent').click((e)=>{ e.stopPropagation(); });\r\n    $('#idPopup').fadeIn();\r\n\r\n    FE._bPopup = true;\r\n\r\n    if (FE.bPopupBlurBG > 0.0){\r\n        ATON._renderer.setPixelRatio( FE.bPopupBlurBG );\r\n        ATON._renderer.render( ATON._mainRoot, ATON.Nav._camera );\r\n    }\r\n\r\n    ATON._bPauseQuery = true;\r\n    //ATON.renderPause();\r\n\r\n    $(\"#idTopToolbar\").hide();\r\n    $(\"#idBottomToolbar\").hide();\r\n\r\n    return true;\r\n};\r\n\r\nFE.popupClose = ()=>{\r\n    FE._bPopup = false;\r\n\r\n    //ATON.renderResume();\r\n    if (FE.bPopupBlurBG > 0.0) ATON.resetPixelDensity();\r\n\r\n    $(\"#idPopup\").fadeOut();\r\n    //$(\"#idPopup\").empty();\r\n\r\n    ATON._bPauseQuery = false;\r\n\r\n    $(\"#idTopToolbar\").show();\r\n    $(\"#idBottomToolbar\").show();\r\n\r\n    ATON.focusOn3DView();\r\n};\r\n\r\nFE.popupQR = ()=>{\r\n    let htmlcontent = \"<h1>Share</h1>\";\r\n    htmlcontent += \"<div class='atonQRcontainer' id='idQRcode'></div><br><br>\";\r\n\r\n    if ( !ATON.FE.popupShow(htmlcontent) ) return;\r\n\r\n    let url = window.location.href;\r\n    new QRCode(document.getElementById(\"idQRcode\"), url);\r\n};\r\n\r\nFE.popupScreenShot = ()=>{\r\n    let cover = ATON.Utils.takeScreenshot(200);\r\n\r\n    FE.checkAuth((r)=>{\r\n\r\n        let htmlcontent = \"<h1>Screenshot</h1>\";\r\n        htmlcontent += \"This is a preview of what your screenshot will look like:<br><br>\";\r\n        htmlcontent += \"<img src='\"+cover.src+\"'><br>\";\r\n        htmlcontent += \"Resolution: <input id='isShotSize' type='number' min='100' max='4000' value='200'>px<br>\";\r\n\r\n        htmlcontent += \"<div class='atonBTN atonBTN-green' id='btnScreenShot' style='width:90%'><img src='\"+FE.PATH_RES_ICONS+\"sshot.png'>SHOT</div>\";\r\n\r\n        if (r.username !== undefined){\r\n            htmlcontent += \"<div class='atonBTN atonBTN-green' id='btnSetCover' style='width:90%'>Set as Cover</div>\";\r\n            /*\r\n            htmlcontent += \"<div class='atonBTN' id='btnSetCover' style='width:220px; height:220px; padding:5px'>\";\r\n            htmlcontent += \"<img src='\"+cover.src+\"'><br>\";\r\n            htmlcontent += \"Set as Cover</div>\";\r\n            */\r\n        }\r\n\r\n        if ( !ATON.FE.popupShow(htmlcontent) ) return;\r\n\r\n        $(\"#btnScreenShot\").click(()=>{\r\n            ATON.FE.popupClose();\r\n\r\n            let s = parseInt( $('#isShotSize').val() );\r\n            let img = ATON.Utils.takeScreenshot(s,\"shot.png\");\r\n        });\r\n\r\n        $(\"#btnSetCover\").click(()=>{\r\n            ATON.FE.popupClose();\r\n\r\n            ATON.Utils.postJSON(ATON.PATH_RESTAPI+\"setcover/\", {sid: ATON.SceneHub.currID, img: cover.src }, (r)=>{\r\n                console.log(r);\r\n            });\r\n\r\n        });\r\n    });\r\n};\r\n\r\nFE.popupVRC = ()=>{\r\n    let htmlcontent = \"\";\r\n    htmlcontent += \"<h1>Collaborative Session</h1>\";\r\n\r\n    // Username\r\n    htmlcontent += \"<input id='idVRCusername' type='text' size='10' placeholder='username...' style='display:none'>\";\r\n    htmlcontent += \"<div id='idVRCusernameBTN' class='atonBTN' style='width:200px; display:none'>\"+ATON.VRoadcast._username+\"</div>\";\r\n\r\n    htmlcontent += \"<div id='idChatBox' style='width:100%; height:150px; text-align:left;' class='scrollableY'></div>\";\r\n\r\n    //htmlcontent += \"<div style='text-align:left'>\";\r\n    htmlcontent += \"<input id='idVRCmsg' style='width:90%' type='text' placeholder='message...'>\";\r\n    //htmlcontent += \"</div>\";\r\n\r\n    htmlcontent += \"<div class='atonBTN atonBTN-red' id='idVRCdisconnect' style='width:90%'>LEAVE</div>\";\r\n\r\n    if ( !ATON.FE.popupShow(htmlcontent, \"atonPopupLarge\") ) return;\r\n\r\n    if (ATON.VRoadcast._username === undefined){\r\n        $('#idVRCusername').show();\r\n        $('#idVRCusernameBTN').hide();\r\n    }\r\n    else {\r\n        $('#idVRCusername').val(ATON.VRoadcast._username);\r\n        $('#idVRCusername').hide();\r\n        $('#idVRCusernameBTN').show();\r\n    }\r\n\r\n    if (ATON.VRoadcast.uid !== undefined) $('#idVRCusernameBTN').addClass(\"atonVRCu\"+(ATON.VRoadcast.uid % 6));\r\n\r\n    $(\"#idChatBox\").append(ATON.VRoadcast._elChat);\r\n\r\n    $(\"#idVRCmsg\").keypress((e)=>{\r\n        let keycode = (e.keyCode ? e.keyCode : e.which);\r\n        if(keycode == '13'){\r\n            let str = $(\"#idVRCmsg\").val();\r\n            ATON.VRoadcast.setMessage( str );\r\n            $(\"#idVRCmsg\").val(\"\");\r\n            //$(\"#idChatBox:first-child\").scrollTop( $(\"#idChatBox:first-child\").height() );\r\n        }\r\n    });\r\n\r\n    $(\"#idVRCusername\").keypress((e)=>{\r\n        let keycode = (e.keyCode ? e.keyCode : e.which);\r\n        if(keycode == '13'){\r\n            let str = $(\"#idVRCusername\").val();\r\n            ATON.VRoadcast.setUsername( str );\r\n            \r\n            $('#idVRCusername').hide();\r\n            $('#idVRCusernameBTN').html(ATON.VRoadcast._username);\r\n            $('#idVRCusernameBTN').show();\r\n        }\r\n    });\r\n\r\n    $(\"#idVRCusernameBTN\").click(()=>{\r\n        $('#idVRCusername').show();\r\n        $('#idVRCusernameBTN').hide();\r\n    });\r\n\r\n    $(\"#idVRCdisconnect\").click(()=>{\r\n        ATON.VRoadcast.disconnect();\r\n        ATON.FE.popupClose();\r\n    });\r\n\r\n};\r\n\r\n// User auth\r\nFE.checkAuth = (onReceive)=>{\r\n    $.ajax({\r\n        type: 'GET',\r\n        url: ATON.PATH_RESTAPI+\"user\",\r\n        xhrFields: { withCredentials: true },            \r\n        dataType: 'json',\r\n\r\n        success: (data)=>{\r\n            FE._userAuth = data;\r\n            console.log(FE._userAuth);\r\n\r\n            if (data.username!==undefined && ATON.VRoadcast._username===undefined) ATON.VRoadcast.setUsername(data.username);\r\n\r\n            onReceive(data);\r\n        }\r\n    });\r\n};\r\n\r\nFE.popupUser = ()=>{\r\n\r\n    FE.checkAuth((r)=>{\r\n        // We are already logged\r\n        if (r.username !== undefined){\r\n            let htmlcontent = \"<img src='\"+FE.PATH_RES_ICONS+\"user.png'><br>\";\r\n            htmlcontent += \"You are logged in as <b>'\"+r.username+\"'</b><br><br>\";\r\n\r\n            htmlcontent += \"<div class='atonBTN atonBTN-red' id='idLogoutBTN' style='width:90%'>LOGOUT</div>\";\r\n\r\n            if ( !ATON.FE.popupShow(htmlcontent) ) return;\r\n\r\n            $(\"#idLogoutBTN\").click(()=>{\r\n                $.get(ATON.PATH_RESTAPI+\"logout\", (r)=>{\r\n                    console.log(r);\r\n                    ATON.SceneHub.setEditMode(false);\r\n                    ATON.fireEvent(\"Logout\");\r\n                });\r\n\r\n                ATON.FE.popupClose();\r\n            });\r\n\r\n        }\r\n\r\n        // Not logged in\r\n        else {\r\n            let htmlcontent = \"<img src='\"+FE.PATH_RES_ICONS+\"user.png'><br>\";\r\n            htmlcontent += \"username:<input id='idUsername' type='text' maxlength='15' size='15' ><br>\";\r\n            htmlcontent += \"password:<input id='idPassword' type='password' maxlength='15' size='15' ><br>\";\r\n\r\n            htmlcontent += \"<div class='atonBTN atonBTN-green' id='idLoginBTN' style='width:90%'>LOGIN</div>\";\r\n\r\n            if ( !ATON.FE.popupShow(htmlcontent) ) return;\r\n\r\n            $(\"#idLoginBTN\").click(()=>{\r\n                let jstr = JSON.stringify({\r\n                    username: $(\"#idUsername\").val(),\r\n                    password: $(\"#idPassword\").val()\r\n                });\r\n\r\n                $.ajax({\r\n                    url: ATON.PATH_RESTAPI+\"login\",\r\n                    type:\"POST\",\r\n                    data: jstr,\r\n                    contentType:\"application/json; charset=utf-8\",\r\n                    dataType:\"json\",\r\n\r\n                    success: (r)=>{\r\n                        console.log(r);\r\n                        if (r){\r\n                            ATON.fireEvent(\"Login\", r);\r\n                            ATON.FE.popupClose();\r\n                        }\r\n                    }\r\n\r\n                }).fail((err)=>{\r\n                    //console.log(err);\r\n                    $(\"#idLoginBTN\").html(\"LOGIN FAILED\");\r\n                    $(\"#idLoginBTN\").attr(\"class\",\"atonBTN atonBTN-red\");\r\n                });\r\n            });\r\n        }\r\n    });\r\n};\r\n\r\n\r\nexport default FE;","/*!\r\n    @preserve\r\n\r\n \tATON\r\n\r\n \t@author Bruno Fanini\r\n\tVHLab, CNR ISPC\r\n\r\n==================================================================================*/\r\n\r\n'use strict';\r\n\r\n/**\r\n@namespace ATON\r\n*/\r\nlet ATON = {};\r\nwindow.ATON = ATON;\r\n\r\n// Import\r\nimport Node from \"./ATON.node.js\";\r\nimport POV from \"./ATON.pov.js\";\r\n//import Period from \"./ATON.period.js\";\r\nimport LightProbe from \"./ATON.lightprobe.js\";\r\n\r\nimport EventHub from \"./ATON.eventhub.js\";\r\nimport MatHub from \"./ATON.mathub.js\";\r\nimport Utils from \"./ATON.utils.js\";\r\nimport SceneHub from \"./ATON.scenehub.js\";\r\nimport Nav from \"./ATON.nav.js\";\r\nimport XR from \"./ATON.xr.js\";\r\nimport SUI from \"./ATON.sui.js\";\r\nimport VRoadcast from \"./ATON.vroadcast.js\";\r\nimport SemFactory from \"./ATON.semfactory.js\";\r\nimport FE from \"./ATON.fe.js\";\r\n\r\n// Classes\r\nATON.Node       = Node;\r\nATON.POV        = POV;\r\nATON.LightProbe = LightProbe;\r\n//ATON.Period = Period;\r\n\r\n// NS\r\nATON.EventHub   = EventHub;\r\nATON.Utils      = Utils;\r\nATON.SceneHub   = SceneHub;\r\nATON.MatHub     = MatHub;\r\nATON.Nav        = Nav;\r\nATON.XR         = XR;\r\nATON.SUI        = SUI;\r\nATON.VRoadcast  = VRoadcast;\r\nATON.SemFactory = SemFactory;\r\nATON.FE         = FE;\r\n\r\n//==============================================================\r\n// Consts\r\n//==============================================================\r\nATON.STD_UPVECTOR = new THREE.Vector3(0,1,0);\r\nATON.ROOT_NID = \".\"; // reserved node ID for graph-roots\r\n\r\nATON.RAD2DEG = (180.0 / Math.PI);\r\nATON.DEG2RAD = (Math.PI / 180.0);\r\n\r\n// Node types\r\nATON.NTYPES = {};\r\n// 1 and 2 are reserved\r\nATON.NTYPES.SCENE  = 3;\r\nATON.NTYPES.SEM    = 4;\r\nATON.NTYPES.UI     = 5;\r\n\r\n// Folders\r\nATON.PATH_RESTAPI       = window.location.origin + \"/api/\";\r\nATON.PATH_RESTAPI_SCENE = ATON.PATH_RESTAPI + \"scene/\";\r\nATON.PATH_MODS          = window.location.origin + \"/mods/\";\r\nATON.PATH_THREE         = ATON.PATH_MODS + \"three/\";\r\nATON.PATH_DRACO_LIB     = ATON.PATH_THREE+\"examples/js/libs/draco/\";\r\nATON.PATH_BASIS_LIB     = ATON.PATH_THREE+\"examples/js/libs/basis/\";\r\n\r\nATON.PATH_COLLECTION = window.location.origin + \"/collection/\";\r\nATON.PATH_MODELS     = ATON.PATH_COLLECTION + \"models/\";\r\nATON.PATH_SCENES     = window.location.origin + \"/scenes/\";\r\nATON.PATH_RES        = window.location.origin + \"/res/\";\r\n\r\nATON.SHADOWS_NEAR = 0.1;\r\nATON.SHADOWS_FAR  = 50.0;\r\nATON.SHADOWS_SIZE = 15.0;\r\nATON.SHADOWS_RES  = 1024; // 512\r\n\r\n/**\r\nSet path collection (3D models, audio, panoramas, ...)\r\n@param {string} path - path\r\n*/\r\nATON.setPathCollection = (path)=>{\r\n    ATON.PATH_COLLECTION = window.location.origin + path;\r\n    ATON.PATH_MODELS     = ATON.PATH_COLLECTION+\"models/\";\r\n};\r\n\r\n/**\r\nSet path scenes\r\n@param {string} path - path\r\n*/\r\nATON.setPathScenes = (path)=>{\r\n    ATON.PATH_SCENES = window.location.origin + path;\r\n};\r\n\r\n\r\nATON._setupBaseListeners = ()=>{\r\n    let el = ATON._renderer.domElement;\r\n\r\n    window.addEventListener( 'resize', ATON._onResize, false );\r\n    el.addEventListener( 'mousemove', ATON._updateScreenMove, false );\r\n    ///el.addEventListener('dblclick', ATON._doubleTap, false);\r\n\r\n    el.addEventListener('mousedown', (e)=>{\r\n        if (e.button === 1) ATON.fireEvent(\"MouseMidButton\");      // middle-click\r\n        if (e.button === 2) ATON.fireEvent(\"MouseRightButton\");    // right-click\r\n    });\r\n\r\n    el.addEventListener( 'wheel', ATON._onMouseWheel, false );\r\n\r\n\r\n    // Touch events\r\n    Hammer(el).on(\"doubletap\", (e)=>{\r\n        ATON.fireEvent(\"DoubleTap\", e.srcEvent);\r\n        //console.log(e.srcEvent);\r\n    });\r\n\r\n    Hammer(el).on(\"tap\", (e)=>{\r\n        ATON._updateScreenMove(e.srcEvent);\r\n        ATON._handleQueries();\r\n\r\n        ATON.fireEvent(\"Tap\", e.srcEvent);\r\n        //console.log(e.srcEvent);\r\n\r\n        // UI selection\r\n        if (ATON._hoveredUI === undefined) return;\r\n        let H = ATON.getUINode(ATON._hoveredUI);\r\n        if (H && H.onSelect) H.onSelect();\r\n    });\r\n\r\n    ATON.on(\"DoubleTap\", (e)=>{\r\n        //console.log(e);\r\n        ATON.defaultDoubleTapFromScreenCoords(e);\r\n    });\r\n\r\n    //ATON.on(\"Tap\", (e)=>{\r\n        //console.log(e);\r\n    //});\r\n\r\n\r\n    // Keyboard\r\n    ATON._kModShift = false;\r\n    ATON._kModCtrl  = false;\r\n\r\n    el.addEventListener(\"keydown\", (e)=>{\r\n        if (e.key === \"Shift\")   ATON._kModShift = true;\r\n        if (e.key === \"Control\") ATON._kModCtrl  = true;\r\n        \r\n        ATON.fireEvent(\"KeyPress\", e.key);\r\n        //ATON.fireEvent(\"KeyPress/\"+e.key);\r\n    }, false);\r\n\r\n    el.addEventListener(\"keyup\", (e)=>{\r\n        if (e.key === \"Shift\")   ATON._kModShift = false;\r\n        if (e.key === \"Control\") ATON._kModCtrl  = false;\r\n\r\n        ATON.fireEvent(\"KeyUp\", e.key);\r\n        //ATON.fireEvent(\"KeyUp/\"+e.key);\r\n    }, false);\r\n\r\n    // Defaults\r\n    ATON.on(\"KeyPress\", (k)=>{\r\n\r\n        if (k==='+'){\r\n            let f = ATON.Nav.getFOV() + 1.0;\r\n            ATON.Nav.setFOV(f);\r\n        }\r\n        if (k==='-'){\r\n            let f = ATON.Nav.getFOV() - 1.0;\r\n            ATON.Nav.setFOV(f);\r\n        }\r\n\r\n        if (k==='PageUp'){\r\n            let r = ATON.SUI.mainSelector.scale.x + 0.02;\r\n            ATON.SUI.setSelectorRadius(r);\r\n        }\r\n        if (k==='PageDown'){\r\n            let r = ATON.SUI.mainSelector.scale.x - 0.02;\r\n            r = Math.max(r, 0.01);\r\n            ATON.SUI.setSelectorRadius(r); \r\n        }\r\n    });\r\n\r\n    // Default semantic highlight\r\n/*\r\n    ATON.on(\"SemanticNodeLeave\", (semid)=>{\r\n        let S = ATON.getSemanticNode(semid);\r\n        if (S) S.restoreDefaultMaterial();\r\n    });\r\n    ATON.on(\"SemanticNodeHover\", (semid)=>{\r\n        let S = ATON.getSemanticNode(semid);\r\n        if (S) S.highlight();\r\n    });\r\n*/          \r\n};\r\n\r\nATON._onResize = ()=>{\r\n    ATON.Nav._camera.aspect = window.innerWidth / window.innerHeight;\r\n    ATON.Nav._camera.updateProjectionMatrix();\r\n\r\n    ATON._renderer.setSize( window.innerWidth, window.innerHeight );\r\n    console.log(\"onResize\");\r\n};\r\n\r\nATON._onMouseWheel = (e)=>{\r\n    e.preventDefault();\r\n\r\n    ATON.fireEvent(\"MouseWheel\", e.deltaY);\r\n};\r\n\r\nATON.focusOn3DView = ()=>{\r\n    ATON._renderer.domElement.focus();\r\n};\r\n\r\n// Default retarget from screen coordinates (eg.: on double tap)\r\nATON.defaultDoubleTapFromScreenCoords = (e)=>{\r\n    ATON._updateScreenMove(e);\r\n    ATON._handleQueryScene();\r\n\r\n    let bFPtrans = ATON.Nav.isFirstPerson() || ATON.Nav.isDevOri();\r\n\r\n    // When first-person mode, teleport (non immersive)\r\n    if (ATON._queryDataScene && bFPtrans){\r\n        let P = ATON._queryDataScene.p;\r\n        let N = ATON._queryDataScene.n;\r\n        \r\n        if (N.y > 0.7){\r\n            let currDir = ATON.Nav._vDir;\r\n            let feye = new THREE.Vector3(P.x, P.y+ATON.userHeight, P.z);\r\n            let ftgt = new THREE.Vector3(\r\n                feye.x + currDir.x,\r\n                feye.y + currDir.y,\r\n                feye.z + currDir.z,\r\n            );\r\n\r\n            let POV = new ATON.POV().setPosition(feye).setTarget(ftgt);\r\n\r\n            ATON.Nav.requestPOV(POV, 0.5);\r\n        }\r\n        return;\r\n    }\r\n\r\n    // In orbit mode, focus on selected SemNode...\r\n    let hsn = ATON.getSemanticNode(ATON._hoveredSemNode);\r\n    if (ATON._queryDataSem && hsn){\r\n        ATON.Nav.requestPOVbyNode( hsn, 0.3);\r\n        return;\r\n    }\r\n    // ...or perform standard retarget on picket surface point\r\n    if (ATON._queryDataScene){\r\n        ATON.Nav.requestRetarget(ATON._queryDataScene.p, /*ATON._queryDataScene.n*/undefined, 0.3);\r\n    }\r\n\r\n    // TODO: go POV in sight if any (panorama only mode)\r\n}\r\n\r\n/**\r\nToggle fullscreen\r\n*/\r\nATON.toggleFullScreen = ()=>{\r\n    screenfull.toggle();\r\n/*\r\n    if (b === undefined){\r\n        screenfull.toggle();\r\n        return;\r\n    }\r\n\r\n    if (b) screenfull.request();\r\n*/\r\n};\r\n\r\n\r\n//============================================================================\r\n// ATON init routines\r\n//============================================================================\r\n/**\r\nMain ATON initialization, it will take care of all sub-components initialization, device profiling and much more\r\n@example\r\nATON.realize()\r\n*/\r\nATON.realize = ()=>{\r\n    console.log(\"realize\");\r\n\r\n    ATON.Utils.init();\r\n    ATON.Utils.profileDevice();\r\n    \r\n    //THREE.Object3D.DefaultUp = new THREE.Vector3(0,0,1); // mismatches WebXR y-up\r\n\r\n    // Timing\r\n    ATON._clock = new THREE.Clock(true);\r\n\r\n    let wglopts = {\r\n        //canvas: document.getElementById(\"idView\"),\r\n        antialias: true, //ATON.device.isMobile? false : true,\r\n        alpha: true,\r\n        //pecision: \"mediump\"\r\n        preserveDrawingBuffer: true\r\n    };\r\n\r\n    ATON._renderer = new THREE.WebGLRenderer(wglopts);\r\n    ATON._renderer.setSize( window.innerWidth, window.innerHeight );\r\n    //console.log(ATON._renderer);\r\n\r\n    ATON._stdpxd = 1.0; //window.devicePixelRatio? (window.devicePixelRatio) : 1.0;\r\n    ATON._renderer.setPixelRatio( ATON._stdpxd );\r\n    console.log(ATON._stdpxd);\r\n    \r\n    ATON._renderer.outputEncoding = THREE.sRGBEncoding;\r\n    //console.log(ATON._renderer.getPixelRatio());\r\n\r\n    ATON._renderer.setAnimationLoop( ATON._onFrame );\r\n    //ATON._bDirtyLP = false;\r\n\r\n    ATON._maxAnisotropy = ATON._renderer.capabilities.getMaxAnisotropy();\r\n    console.log(ATON._renderer.capabilities);\r\n\r\n    THREE.Cache.enabled = true;\r\n\r\n    ATON.userHeight = 1.7;\r\n \r\n    document.body.appendChild( ATON._renderer.domElement );\r\n    //console.log(ATON._renderer);\r\n\r\n    ATON.EventHub.init();\r\n    ATON.MatHub.init();\r\n\r\n    //ATON._setupLoadManager();\r\n    ATON._assetsManager = {};\r\n    ATON._aLoader = new THREE.GLTFLoader(/*ATON._loadManager*/);\r\n    ATON._dracoLoader = new THREE.DRACOLoader();\r\n    ATON._dracoLoader.setDecoderPath( ATON.PATH_DRACO_LIB );\r\n    ATON._aLoader.setDRACOLoader( ATON._dracoLoader );\r\n    ATON._numReqLoad = 0;\r\n\r\n    // Periods (TODO:)\r\n    //ATON.periods = [];\r\n\r\n    ATON._lps = []; // lightprobes\r\n    ATON._bAutoLP = false;\r\n    //ATON._dirtyLPs = true;\r\n    ATON._bShadowsFixedBound = false;\r\n\r\n    ATON.initGraphs();\r\n    ATON.SceneHub.init();\r\n\r\n    // Init nav system\r\n    ATON.Nav.init();\r\n\r\n    // XR\r\n    ATON.XR.init();\r\n\r\n    // Spatial UI\r\n    ATON.SUI.init();\r\n\r\n    // VRoadcast\r\n    ATON.VRoadcast.init();\r\n\r\n    // Semantic Factory\r\n    ATON.SemFactory.init();\r\n\r\n    // Query / picked data\r\n    ATON._queryDataScene = undefined;\r\n    ATON._queryDataSem   = undefined;\r\n    ATON._queryDataUI    = undefined;\r\n\r\n    ATON._hoveredSemNode = undefined;\r\n    ATON._hoveredUI      = undefined;\r\n\r\n    ATON._bQuerySemOcclusion = true;\r\n    ATON._bQueryNormals  = true;\r\n    ATON._bPauseQuery    = false;\r\n\r\n    //window.setInterval(()=>{ if (!ATON._bPauseQuery) ATON._handleQueries(); }, 500 );\r\n\r\n    // Basis (future support)\r\n/*\r\n    ATON._basisLoader = new BasisTextureLoader();\r\n    ATON._basisLoader.setTranscoderPath( ATON.PATH_BASIS_LIB );\r\n    ATON._basisLoader.detectSupport( ATON._renderer );\r\n    \r\n    // Register BasisTextureLoader for .basis extension.\r\n    THREE.DefaultLoadingManager.addHandler( /\\.basis$/, ATON._basisLoader );\r\n*/\r\n\r\n\r\n    // Mouse/Touch screen coords\r\n    ATON._screenPointerCoords = new THREE.Vector2(0.0,0.0);\r\n\r\n    // Ray casters\r\n    ATON._rcScene = new THREE.Raycaster();\r\n    ATON._rcScene.layers.set(ATON.NTYPES.SCENE);\r\n    ATON._rcSemantics = new THREE.Raycaster();\r\n    ATON._rcSemantics.layers.set(ATON.NTYPES.SEM);\r\n    ATON._rcUI = new THREE.Raycaster();\r\n    ATON._rcUI.layers.set(ATON.NTYPES.UI);\r\n\r\n    //ATON._registerRCS(); // not used for now\r\n\r\n    ATON._setupBaseListeners();\r\n\r\n    ATON.focusOn3DView();\r\n};\r\n\r\n/**\r\nPause rendering\r\n*/\r\nATON.renderPause = ()=>{\r\n    ATON._renderer.setAnimationLoop( undefined );\r\n};\r\n\r\n/**\r\nResume rendering (if paused)\r\n*/\r\nATON.renderResume = ()=>{\r\n    ATON._renderer.setAnimationLoop( ATON._onFrame );\r\n};\r\n\r\nATON._setupLoadManager = ()=>{\r\n    ATON._loadManager = new THREE.LoadingManager();\r\n    ATON._loadManager.onStart = ( url, itemsLoaded, itemsTotal )=>{\r\n\t    console.log( 'Started loading file: ' + url + '.\\nLoaded ' + itemsLoaded + ' of ' + itemsTotal + ' files.' );\r\n        ATON.fireEvent(\"NodeRequestFired\", url);\r\n    };\r\n\r\n    ATON._loadManager.onLoad = ()=>{\r\n\t    console.log( 'Loading complete!');\r\n        ATON.fireEvent(\"AllNodeRequestsCompleted\");\r\n    };\r\n\r\n    ATON._loadManager.onProgress = ( url, itemsLoaded, itemsTotal )=>{\r\n\t    //console.log( 'Loading file: ' + url + '.\\nLoaded ' + itemsLoaded + ' of ' + itemsTotal + ' files.' );\r\n    };\r\n\r\n    ATON._loadManager.onError = ( url )=>{\r\n\t    console.log( 'There was an error loading ' + url );\r\n    };\r\n};\r\n\r\n/**\r\nSet the default pixel density (standard is 1.0)\r\n@example\r\nATON.setDefaultPixelDensity(0.5)\r\n*/\r\nATON.setDefaultPixelDensity = (d)=>{\r\n    ATON._stdpxd = d;\r\n    ATON._renderer.setPixelRatio( d );\r\n};\r\n\r\n/**\r\nReset pixel density to default\r\n*/\r\nATON.resetPixelDensity = ()=>{\r\n    ATON._renderer.setPixelRatio( ATON._stdpxd );\r\n};\r\n\r\n\r\n//============================================================================\r\n// Scene-graphs\r\n//============================================================================\r\nATON.snodes   = {}; // Visible scene-graph\r\nATON.semnodes = {}; // Semantics graph\r\nATON.uinodes  = {}; // UI graph\r\n\r\n// Visible scene-graph\r\n//=============================================\r\n/**\r\nCreate a scene node (visible scene-graph)\r\n@param {string} id - a string representing unique ID of the node (optional)\r\n@returns {Node}\r\n*/\r\nATON.createSceneNode = (id)=>{\r\n    return new ATON.Node(id, ATON.NTYPES.SCENE);\r\n};\r\n\r\n/**\r\nGet a previously created scene node (visible scene-graph)\r\n@param {string} id - the node ID\r\n@returns {Node}\r\n*/\r\nATON.getSceneNode = (id)=>{ \r\n    if (id === undefined) return undefined;    \r\n    return ATON.snodes[id];\r\n};\r\n\r\n/**\r\nGet or create a scene node (visible scene-graph)\r\n@param {string} id - the node ID\r\n@returns {Node}\r\n*/\r\nATON.getOrCreateSceneNode = (id)=>{\r\n    let N = ATON.getSceneNode(id);\r\n    if (N !== undefined) return N;\r\n    return ATON.createSceneNode(id);\r\n};\r\n\r\n/**\r\nGet root (visible scene-graph)\r\n@returns {Node}\r\n*/\r\nATON.getRootScene = ()=>{\r\n    return ATON._rootVisible;\r\n};\r\n\r\n// Semantics, shape descriptors\r\n//=============================================\r\n\r\n/**\r\nCreate a semantic node\r\n@param {string} id - a string representing unique ID of the node (optional)\r\n@returns {Node}\r\n*/\r\nATON.createSemanticNode = (id)=>{\r\n    return new ATON.Node(id, ATON.NTYPES.SEM);\r\n};\r\n\r\n/**\r\nGet a previously created semantic node\r\n@param {string} id - the node ID\r\n@returns {Node}\r\n*/\r\nATON.getSemanticNode = (id)=>{\r\n    if (id === undefined) return undefined; \r\n    return ATON.semnodes[id];\r\n};\r\n\r\n/**\r\nGet or create a semantic node\r\n@param {string} id - the node ID\r\n@returns {Node}\r\n*/\r\nATON.getOrCreateSemanticNode = (id)=>{\r\n    let S = ATON.getSemanticNode(id);\r\n    if (S !== undefined) return S;\r\n    return ATON.createSemanticNode(id);\r\n};\r\n\r\n/**\r\nGet root of semantic graph\r\n@returns {Node}\r\n*/\r\nATON.getRootSemantics = ()=>{\r\n    return ATON._rootSem;\r\n};\r\n\r\n// UI graph\r\n//=============================================\r\n\r\n/**\r\nCreate a UI node\r\n@param {string} id - a string representing unique ID of the node (optional)\r\n@returns {Node}\r\n*/\r\nATON.createUINode = (id)=>{\r\n    return new ATON.Node(id, ATON.NTYPES.UI);\r\n};\r\n\r\n/**\r\nGet a previously created UI node\r\n@param {string} id - the node ID\r\n@returns {Node}\r\n*/\r\nATON.getUINode = (id)=>{\r\n    if (id === undefined) return undefined; \r\n    return ATON.uinodes[id];\r\n};\r\n\r\n/**\r\nGet root of UI graph\r\n@returns {Node}\r\n*/\r\nATON.getRootUI = ()=>{\r\n    return ATON._rootUI;\r\n};\r\n\r\n// Asset loading routines\r\nATON._assetReqNew = (url)=>{\r\n    ATON._numReqLoad++;\r\n    ATON.fireEvent(\"NodeRequestFired\", url);\r\n};\r\nATON._assetReqComplete = (url)=>{\r\n    ATON.fireEvent(\"NodeRequestCompleted\", url);\r\n    ATON._numReqLoad--;\r\n\r\n    if (ATON._numReqLoad <= 0){\r\n        ATON.fireEvent(\"AllNodeRequestsCompleted\");\r\n\r\n        // Bounds\r\n        let c = ATON._rootVisible.getBound().center;\r\n        let r = ATON._rootVisible.getBound().radius;\r\n\r\n        if (ATON._renderer.shadowMap.enabled){\r\n            ATON._rootVisible.traverse((o) => {\r\n                if (o.isMesh){\r\n                    o.castShadow = true;\r\n                    o.receiveShadow = true;\r\n                }\r\n            });\r\n\r\n            // TODO: experimental\r\n            if (ATON._bShadowsFixedBound){\r\n                ATON.SHADOWS_SIZE = r*1.5;\r\n\r\n                ATON._dMainL.shadow.camera.left   = -ATON.SHADOWS_SIZE;\r\n                ATON._dMainL.shadow.camera.right  = ATON.SHADOWS_SIZE;\r\n                ATON._dMainL.shadow.camera.bottom = -ATON.SHADOWS_SIZE;\r\n                ATON._dMainL.shadow.camera.top    = ATON.SHADOWS_SIZE;\r\n\r\n                ATON.updateDirShadows(c);\r\n            }\r\n        }\r\n\r\n        if (ATON._bAutoLP){\r\n            if (ATON._lps[0] === undefined) ATON.addLightProbe( new ATON.LightProbe().setPosition(c).setNear(r) );\r\n            else {\r\n                ATON._lps[0].setPosition(c.x, c.y, c.z).setNear(r);\r\n            }\r\n            console.log(\"Auto LP\");\r\n        }\r\n\r\n        ATON.getRootScene().assignLightProbesByProximity();\r\n\r\n        //ATON._bDirtyLP = true;\r\n\r\n        // FIXME: dirty\r\n        setTimeout( ()=>{\r\n            if (c && ATON._mMainPano) ATON._mMainPano.position.copy(c);\r\n            ATON.updateLightProbes();\r\n        }, 1000);\r\n\r\n    }\r\n};\r\n\r\n\r\nATON.initGraphs = ()=>{\r\n    // Global root\r\n    ATON._mainRoot = new THREE.Scene();\r\n    ATON._mainRoot.background = new THREE.Color( 0.7,0.7,0.7 );\r\n\r\n    // visible scene-graph\r\n    ATON._rootVisibleGlobal = new THREE.Group();\r\n    ATON._mainRoot.add(ATON._rootVisibleGlobal);\r\n\r\n    ATON._rootVisible = ATON.createSceneNode().setAsRoot();\r\n    ATON._rootVisibleGlobal.add(ATON._rootVisible);\r\n\r\n\r\n    // semantics graph\r\n    ATON._rootSem = ATON.createSemanticNode().setAsRoot();\r\n    ATON._mainRoot.add(ATON._rootSem);\r\n\r\n    // UI graph\r\n    ATON._rootUI = ATON.createUINode().setAsRoot();\r\n    ATON._mainRoot.add(ATON._rootUI);\r\n\r\n    // Uniform lighting\r\n    ATON.ambLight = new THREE.AmbientLight( new THREE.Color(1,1,1) /*ATON._mainRoot.background*/ );\r\n    ATON._rootVisibleGlobal.add(ATON.ambLight);\r\n};\r\n\r\nATON.setBackgroundColor = (bg)=>{\r\n    ATON._mainRoot.background = bg;\r\n};\r\n\r\n//==============================================================\r\n// LightProbes\r\n//==============================================================\r\nATON.setAutoLP = (b)=>{\r\n    ATON._bAutoLP = b;\r\n};\r\n\r\nATON.setNeutralAmbientLight = (a)=>{\r\n    ATON.ambLight.color = new THREE.Color( a,a,a );\r\n};\r\n\r\n/**\r\nAdd a LightProbe to the scene\r\n@param {LightProbe} LP - the light probe being added \r\n*/\r\nATON.addLightProbe = (LP)=>{\r\n    if (ATON._lps.length === 0) ATON.setNeutralAmbientLight(0.1);\r\n\r\n    ATON._lps.push(LP);\r\n};\r\n\r\n/**\r\nUpdate all LightProbes in the scene\r\n*/\r\nATON.updateLightProbes = ()=>{\r\n    if (ATON._lps.length === 0) return;\r\n\r\n    for (let i in ATON._lps) ATON._lps[i].update();\r\n\r\n    // FIXME: indirect LP based on first LP (for now)\r\n    if (ATON._lps[0]){\r\n        if (ATON._indLP) ATON._mainRoot.remove(ATON._indLP);\r\n\r\n        ATON._indLP = THREE.LightProbeGenerator.fromCubeRenderTarget( ATON._renderer, ATON._lps[0]._prevCCtarget );\r\n        ATON._mainRoot.add( ATON._indLP );\r\n    }\r\n\r\n    //for (let i in ATON._lps) ATON._lps[i].update();\r\n\r\n    ATON._rootVisible.traverse((o) => {\r\n        let LP = o.userData.LP;\r\n        if (LP !== undefined && LP instanceof ATON.LightProbe){\r\n            o.material.envMap = LP.getEnvTex();\r\n            //o.material.combine = THREE.AddOperation;\r\n            //o.material.envMapIntensity = 5.0;\r\n        }\r\n    });\r\n\r\n    console.log(\"LPs updated.\");\r\n};\r\n\r\n//==============================================================\r\n// Environment\r\n//==============================================================\r\n\r\n/**\r\nSet the main panorama (360)\r\n@param {string} path - url to equirectangular image\r\n@example\r\nATON.setMainPanorama(\"my/pano.jpg\");\r\n*/\r\nATON.setMainPanorama = (path)=>{\r\n\r\n    let tpano = new THREE.TextureLoader().load(path);\r\n    tpano.encoding = THREE.sRGBEncoding;\r\n\r\n    if (ATON._matMainPano !== undefined){\r\n        ATON._matMainPano.map = tpano;\r\n        //ATON._matMainPano.emissive = tpano;\r\n        return;\r\n    }\r\n\r\n    // First time: create it\r\n    ATON._gMainPano = new THREE.SphereBufferGeometry( 1.0, 60,60 );\r\n\r\n    ATON._matMainPano = new THREE.MeshBasicMaterial({ \r\n        map: tpano, \r\n        //emissive: tpano,\r\n        //castShadow: false,\r\n        //receiveShadow: false,\r\n        fog: false,\r\n        depthTest: false,\r\n        depthWrite: false,\r\n        //depthFunc: THREE.AlwaysDepth,\r\n        //side: THREE.DoubleSide\r\n    });\r\n\r\n    ATON._mMainPano = new THREE.Mesh(ATON._gMainPano, ATON._matMainPano);\r\n    ATON._mMainPano.frustumCulled = false;\r\n    ATON.setMainPanoramaRadius(ATON.Nav.STD_FAR * 0.9);\r\n\r\n    ATON._mMainPano.onAfterRender = ()=>{\r\n        //if (ATON._numReqLoad > 0) return;\r\n        ATON._mMainPano.position.copy(ATON.Nav._currPOV.pos);\r\n    };\r\n\r\n    ATON._rootVisibleGlobal.add(ATON._mMainPano);\r\n};\r\n\r\n\r\nATON.setMainPanoramaRadius = (r)=>{\r\n    if (ATON._gMainPano === undefined) return;\r\n    ATON._gMainPano.scale( -r,r,r );\r\n};\r\n\r\n/**\r\nSet main panorama rotation (radians) around up vector\r\n@param {number} r - rotation\r\n@example\r\nATON.setMainPanoramaRotation(1.5);\r\n*/\r\nATON.setMainPanoramaRotation = (r)=>{\r\n    if (ATON._mMainPano === undefined) return;\r\n    ATON._mMainPano.rotation.set( 0,r,0 );\r\n};\r\n\r\n/**\r\nSet and activate main directional light\r\n@param {THREE.Vector3} v - light direction\r\n@example\r\nATON.setMainLightDirection( new THREE.Vector(0.1,-1.0,0.0) );\r\n*/\r\nATON.setMainLightDirection = (v)=>{\r\n\r\n    let d = v.clone();\r\n\r\n    d.x *= ATON.SHADOWS_FAR * 0.5;\r\n    d.y *= ATON.SHADOWS_FAR * 0.5;\r\n    d.z *= ATON.SHADOWS_FAR * 0.5;\r\n\r\n    if (ATON._dMainL === undefined){\r\n        ATON._dMainL = new THREE.DirectionalLight( new THREE.Color(1,1,1), 1.0 );\r\n        ATON._dMainL.castShadow = false;\r\n\r\n        ATON._dMainLtgt = new THREE.Object3D();\r\n        ATON._rootVisibleGlobal.add(ATON._dMainLtgt);\r\n        ATON._dMainL.target = ATON._dMainLtgt;\r\n\r\n        ATON.setNeutralAmbientLight(0.1);\r\n\r\n        ATON._rootVisibleGlobal.add(ATON._dMainL);\r\n        ATON._dMainLpos = new THREE.Vector3();\r\n    }\r\n\r\n    ATON._dMainLdir = d;\r\n\r\n    ATON._dMainL.position.set(-d.x,-d.y,-d.z);\r\n};\r\n\r\nATON.toggleShadows = (b)=>{\r\n    if (ATON._dMainL === undefined) return;\r\n\r\n    if (b){\r\n        ATON._dMainL.castShadow = true;\r\n        ATON._renderer.shadowMap.enabled = true;\r\n\r\n        //ATON._renderer.shadowMap.type    = THREE.BasicShadowMap;\r\n        //ATON._renderer.shadowMap.type    = THREE.PCFShadowMap;\r\n        ATON._renderer.shadowMap.type    = THREE.PCFSoftShadowMap; // bleeding\r\n        //ATON._renderer.shadowMap.type    = THREE.VSMShadowMap;\r\n\r\n        ATON._dMainL.shadow.mapSize.width  = ATON.SHADOWS_RES;\r\n        ATON._dMainL.shadow.mapSize.height = ATON.SHADOWS_RES;\r\n        ATON._dMainL.shadow.camera.near    = ATON.SHADOWS_NEAR;\r\n        ATON._dMainL.shadow.camera.far     = ATON.SHADOWS_FAR;\r\n        //ATON._dMainL.shadow.bias = 0.0001;\r\n\r\n        ATON._dMainL.shadow.camera.left   = -ATON.SHADOWS_SIZE;\r\n        ATON._dMainL.shadow.camera.right  = ATON.SHADOWS_SIZE;\r\n        ATON._dMainL.shadow.camera.bottom = -ATON.SHADOWS_SIZE;\r\n        ATON._dMainL.shadow.camera.top    = ATON.SHADOWS_SIZE;\r\n\r\n        ATON._rootVisible.traverse((o) => {\r\n            if (o.isMesh){\r\n                o.castShadow = true;\r\n                o.receiveShadow = true;\r\n            }\r\n        });\r\n\r\n        if (ATON._bShadowsFixedBound){\r\n            let c = ATON._rootVisible.getBound().center;\r\n            ATON.updateDirShadows(c);\r\n        }\r\n\r\n        console.log(\"Shadows ON\");\r\n    }\r\n    else {\r\n        ATON._dMainL.castShadow = false;\r\n        ATON._renderer.shadowMap.enabled = false;\r\n        console.log(\"Shadows OFF\");\r\n    }\r\n};\r\n\r\nATON.updateDirShadows = (p)=>{\r\n    if (ATON._dMainLdir === undefined) return;\r\n\r\n    if (p === undefined) p = ATON.Nav.getCurrentEyeLocation();\r\n\r\n    ATON._dMainLpos.x = p.x + (ATON.Nav._vDir.x * ATON.SHADOWS_SIZE);\r\n    ATON._dMainLpos.y = p.y + (ATON.Nav._vDir.y * ATON.SHADOWS_SIZE);\r\n    ATON._dMainLpos.z = p.z + (ATON.Nav._vDir.z * ATON.SHADOWS_SIZE);\r\n\r\n    ATON._dMainL.position.set(\r\n        ATON._dMainLpos.x - ATON._dMainLdir.x, \r\n        ATON._dMainLpos.y - ATON._dMainLdir.y, \r\n        ATON._dMainLpos.z - ATON._dMainLdir.z\r\n    );\r\n    ATON._dMainLtgt.position.copy(ATON._dMainLpos);\r\n};\r\n\r\nATON._updateEnvironment = ()=>{\r\n    if (!ATON._renderer.shadowMap.enabled) return;\r\n    if (ATON._bShadowsFixedBound) return;\r\n\r\n    ATON.updateDirShadows();\r\n};\r\n\r\n//==============================================================\r\n// Update routines\r\n//==============================================================\r\nATON._onFrame = ()=>{\r\n    // TODO: add pause render\r\n\r\n    let dt = ATON._clock.getDelta();\r\n\r\n    ATON._fps = 1.0 / dt;\r\n    ATON._dt  = dt;\r\n    \r\n    ATON.Nav._bControlChange = false;\r\n    ATON.Nav._controls.update(dt);\r\n\r\n    ATON._renderer.render( ATON._mainRoot, ATON.Nav._camera );\r\n\r\n/*\r\n    if (ATON.Nav._bControlChange){\r\n        }\r\n    else {\r\n        //ATON._handleScreenPick();\r\n        }\r\n*/\r\n\r\n    if (ATON.XR._bPresenting) ATON.XR.update();\r\n\r\n    // Spatial queries\r\n    ATON._handleQueries();\r\n\r\n    // Navigation system\r\n    ATON.Nav.update();\r\n\r\n    // VRoadcast\r\n    ATON.VRoadcast.update();\r\n\r\n    // UI\r\n    ATON.SUI.update();\r\n\r\n    // Environment/lighting\r\n    ATON._updateEnvironment();\r\n\r\n    ATON.fireEvent(\"frame\");\r\n};\r\n\r\nATON._updateScreenMove = (e)=>{\r\n    e.preventDefault();\r\n\r\n    if (ATON.Nav._mode === ATON.Nav.MODE_DEVORI){\r\n        ATON._screenPointerCoords.x = 0.0;\r\n        ATON._screenPointerCoords.y = 0.0;\r\n        return;\r\n    }\r\n\r\n\tATON._screenPointerCoords.x = ( e.clientX / window.innerWidth ) * 2 - 1;\r\n\tATON._screenPointerCoords.y = -( e.clientY / window.innerHeight ) * 2 + 1;\r\n\r\n    //console.log(ATON._screenPointerCoords);\r\n};\r\n\r\n//==============================================================\r\n// Query rountines\r\n//==============================================================\r\nATON._registerRCS = ()=>{\r\n    ATON._rcRR = 0;\r\n    ATON._rcHandlers = [];\r\n\r\n    ATON._rcHandlers.push( ATON._handleQueryScene );\r\n    ATON._rcHandlers.push( ATON._handleQuerySemantics );\r\n    ATON._rcHandlers.push( ATON._handleQueryUI );\r\n};\r\n\r\nATON._handleQueries = ()=>{\r\n    if (ATON._bPauseQuery) return;\r\n    if (ATON._numReqLoad > 0) return;\r\n    if (ATON.Nav.isTransitioning()) return; // do not query during POV transitions\r\n    //if (ATON.device.isMobile || !ATON.XR.isPresenting()) return; \r\n\r\n    // round-robin\r\n    //ATON._rcRR = (ATON._rcRR+1) % 2;\r\n    //ATON._rcHandlers[ATON._rcRR]();\r\n\r\n    ATON._handleQueryScene();\r\n    ATON._handleQuerySemantics();\r\n    ATON._handleQueryUI();\r\n};\r\n\r\n// Ray casting visible scenegraph\r\nATON._handleQueryScene = ()=>{\r\n    if (ATON.XR.isPresenting()){\r\n        ATON._rcScene.set( ATON.XR.getControllerWorldLocation(0), ATON.XR.getControllerWorldDirection(0) );\r\n    }\r\n    else \r\n        ATON._rcScene.setFromCamera( ATON._screenPointerCoords, ATON.Nav._camera );\r\n\r\n    ATON._hitsScene = [];\r\n    //ATON._rcScene.intersectObjects( ATON._rootVisible.children, true, ATON._hitsScene );\r\n    ATON._rcScene.intersectObjects( ATON._mainRoot.children, true, ATON._hitsScene );\r\n\r\n    //ATON._hitsOperator(ATON._hits);\r\n\r\n    // Process hits\r\n    let hitsnum = ATON._hitsScene.length;\r\n    if (hitsnum <= 0){\r\n        ATON._queryDataScene = undefined;\r\n        return;\r\n    }\r\n\r\n    let h = ATON._hitsScene[0];\r\n\r\n    ATON._queryDataScene = {};\r\n    ATON._queryDataScene.p = h.point;\r\n    ATON._queryDataScene.d = h.distance;\r\n    ATON._queryDataScene.o = h.object;\r\n    \r\n    //console.log(ATON._queryDataScene.o);\r\n\r\n    // Normals\r\n    if (!ATON._bQueryNormals) return;\r\n    if (h.face === null) return;\r\n    if (h.face.normal === undefined) return;\r\n\r\n    ATON._queryDataScene.matrixWorld = new THREE.Matrix3().getNormalMatrix( h.object.matrixWorld );\r\n    ATON._queryDataScene.n = h.face.normal.clone().applyMatrix3( ATON._queryDataScene.matrixWorld ).normalize();\r\n};\r\n\r\n/**\r\nGet location of current queried point (if any) on visible scene.\r\nIf no point is queried, return undefined\r\n@returns {THREE.Vector3}\r\n@example\r\nlet p = ATON.getSceneQueriedPoint()\r\n*/\r\nATON.getSceneQueriedPoint = ()=>{\r\n    if (ATON._queryDataScene === undefined) return undefined;\r\n    return ATON._queryDataScene.p;\r\n};\r\n\r\n/**\r\nGet distance to queried location (if any) on visible scene.\r\nIf no point is queried, return undefined\r\n@returns {number}\r\n@example\r\nlet d = ATON.getSceneQueriedDistance()\r\n*/\r\nATON.getSceneQueriedDistance = ()=>{\r\n    if (ATON._queryDataScene === undefined) return undefined;\r\n    return ATON._queryDataScene.d;\r\n};\r\n\r\n/**\r\nGet queried location normal (if any) on visible scene.\r\nIf no point is queried, return undefined\r\n@returns {THREE.Vector3}\r\n@example\r\nlet n = ATON.getSceneQueriedNormal()\r\n*/\r\nATON.getSceneQueriedNormal = ()=>{\r\n    if (ATON._queryDataScene === undefined) return undefined;\r\n    return ATON._queryDataScene.n;\r\n};\r\n\r\n\r\n// Ray casting semantic-graph\r\nATON._handleQuerySemantics = ()=>{\r\n    if (ATON.XR.isPresenting()){\r\n        ATON._rcSemantics.set( ATON.XR.getControllerWorldLocation(0), ATON.XR.getControllerWorldDirection(0) );\r\n    }\r\n    else \r\n        ATON._rcSemantics.setFromCamera( ATON._screenPointerCoords, ATON.Nav._camera );\r\n\r\n    ATON._hitsSem = [];\r\n    ATON._rcSemantics.intersectObjects( ATON._mainRoot.children, true, ATON._hitsSem );\r\n\r\n    // Process hits\r\n    let hitsnum = ATON._hitsSem.length;\r\n    if (hitsnum <= 0){\r\n        ATON._queryDataSem = undefined;\r\n\r\n        if (ATON._hoveredSemNode){\r\n            ATON.fireEvent(\"SemanticNodeLeave\", ATON._hoveredSemNode);\r\n            let S = ATON.getSemanticNode(ATON._hoveredSemNode);\r\n            if (S && S.onLeave) S.onLeave();\r\n        }\r\n        \r\n        ATON._hoveredSemNode = undefined;\r\n        return;\r\n    }\r\n\r\n    let h = ATON._hitsSem[0];\r\n\r\n    // Occlusion\r\n    if (ATON._bQuerySemOcclusion && ATON._queryDataScene){\r\n        if (ATON._queryDataScene.d < h.distance){\r\n\r\n            ATON._queryDataSem = undefined;\r\n\r\n            if (ATON._hoveredSemNode){\r\n                ATON.fireEvent(\"SemanticNodeLeave\", ATON._hoveredSemNode);\r\n                let S = ATON.getSemanticNode(ATON._hoveredSemNode);\r\n                if (S && S.onLeave) S.onLeave();\r\n            }\r\n\r\n            ATON._hoveredSemNode = undefined;\r\n            return;\r\n        }\r\n    }\r\n\r\n    ATON._queryDataSem = {};\r\n    ATON._queryDataSem.p = h.point;\r\n    ATON._queryDataSem.d = h.distance;\r\n    ATON._queryDataSem.o = h.object;\r\n    ATON._queryDataSem.list = []; // holds sem-nodes parental list\r\n\r\n    // traverse parents\r\n    let L = ATON._queryDataSem.list;\r\n    let sp = h.object.parent;\r\n    while (sp){\r\n        if (sp.nid && sp.nid !== ATON.ROOT_NID) L.push(sp.nid);\r\n        sp = sp.parent;\r\n    }\r\n\r\n    let hsn = L[0];\r\n    if (hsn){\r\n        if (ATON._hoveredSemNode !== hsn){\r\n            if (ATON._hoveredSemNode){\r\n                ATON.fireEvent(\"SemanticNodeLeave\", ATON._hoveredSemNode);\r\n                let S = ATON.getSemanticNode(ATON._hoveredSemNode);\r\n                if (S && S.onLeave) S.onLeave();\r\n            }\r\n\r\n            ATON._hoveredSemNode = hsn;\r\n            ATON.fireEvent(\"SemanticNodeHover\", hsn);\r\n            let S = ATON.getSemanticNode(hsn);\r\n            if (S && S.onHover) S.onHover();\r\n        }\r\n    }\r\n\r\n    //console.log(L);\r\n};\r\n\r\nATON._handleQueryUI = ()=>{\r\n    if (ATON.XR.isPresenting()){\r\n        ATON._rcUI.set( ATON.XR.getControllerWorldLocation(0), ATON.XR.getControllerWorldDirection(0) );\r\n    }\r\n    else \r\n        ATON._rcUI.setFromCamera( ATON._screenPointerCoords, ATON.Nav._camera );\r\n\r\n    ATON._hitsUI = [];\r\n    ATON._rcUI.intersectObjects( ATON._mainRoot.children, true, ATON._hitsUI );\r\n\r\n    // Process hits\r\n    let hitsnum = ATON._hitsUI.length;\r\n    if (hitsnum <= 0){\r\n        ATON._queryDataUI = undefined;\r\n\r\n        if (ATON._hoveredUI){\r\n            ATON.fireEvent(\"UINodeLeave\", ATON._hoveredUI);\r\n            let S = ATON.getUINode(ATON._hoveredUI);\r\n            if (S && S.onLeave) S.onLeave();\r\n        }\r\n        \r\n        ATON._hoveredUI = undefined;\r\n        return;\r\n    }\r\n\r\n    let h = ATON._hitsUI[0];\r\n\r\n    // Occlusion\r\n    if (ATON._queryDataScene){\r\n        if (ATON._queryDataScene.d < h.distance){\r\n\r\n            ATON._queryDataUI = undefined;\r\n\r\n            if (ATON._hoveredUI){\r\n                ATON.fireEvent(\"SemanticNodeLeave\", ATON._hoveredUI);\r\n                let S = ATON.getUINode(ATON._hoveredUI);\r\n                if (S && S.onLeave) S.onLeave();\r\n            }\r\n\r\n            ATON._hoveredUI = undefined;\r\n            return;\r\n        }\r\n    }\r\n\r\n    ATON._queryDataUI = {};\r\n    ATON._queryDataUI.p = h.point;\r\n    ATON._queryDataUI.d = h.distance;\r\n    ATON._queryDataUI.o = h.object;\r\n    ATON._queryDataUI.list = []; // holds ui-nodes parental list\r\n\r\n    // traverse parents\r\n    let L = ATON._queryDataUI.list;\r\n    let sp = h.object.parent;\r\n    while (sp){\r\n        if (sp.nid && sp.nid !== ATON.ROOT_NID) L.push(sp.nid);\r\n        sp = sp.parent;\r\n    }\r\n\r\n    let hui = L[0];\r\n    if (hui){\r\n        if (ATON._hoveredUI !== hui){\r\n            if (ATON._hoveredUI){\r\n                ATON.fireEvent(\"UINodeLeave\", ATON._hoveredUI);\r\n                let S = ATON.getUINode(ATON._hoveredUI);\r\n                if (S && S.onLeave) S.onLeave();\r\n            }\r\n\r\n            ATON._hoveredUI = hui;\r\n            ATON.fireEvent(\"UINodeHover\", hui);\r\n            let S = ATON.getUINode(hui);\r\n            if (S && S.onHover) S.onHover();\r\n        }\r\n    }\r\n};\r\n\r\n\r\nexport default ATON;\r\n\r\n\r\n"]}