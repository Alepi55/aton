{"version":3,"sources":["ATON.node.js","ATON.pov.js","ATON.lightprobe.js","ATON.eventhub.js","ATON.mathub.js","ATON.utils.js","ATON.scenehub.js","ATON.nav.js","ATON.xr.js","ATON.sui.button.js","ATON.sui.js","ATON.avatar.js","ATON.vroadcast.js","ATON.semfactory.js","ATON.fe.js","ATON.js"],"names":["Node","THREE","Group","id","type","traverse","o","isMesh","geometry","LP","userData","undefined","update","material","envMap","getEnvTex","ATON","NTYPES","SCENE","bPickable","_rootG","_rootVisible","_nodes","snodes","SEM","_rootSem","semnodes","UI","_rootUI","uinodes","as","kwords","_bCloneOnLoadHit","castShadow","receiveShadow","onHover","onLeave","onSelect","ROOT_NID","nid","name","b","kw","K","split","k","c","children","C","addKeywords","s","description","visible","layers","disable","enable","hide","show","M","cMat","matSTD","matHL","setMaterial","f","opacity","envtex","Utils","assignLightProbeToMesh","_lps","length","Vector3","cLP","Box3","setFromObject","getCenter","mdist","i","d","distanceToSquared","pos","clone","p","parent","removeChild","dispose","remove","num","node","N","add","bb","bs","Sphere","getBoundingSphere","x","y","z","position","copy","set","sx","sy","sz","scale","rx","ry","rz","rotation","quaternion","Nav","_qOri","url","onComplete","_assetsManager","then","console","log","_assetReqNew","P","Promise","resolve","reject","_aLoader","load","data","model","scene","modelVisitor","_assetReqComplete","err","filename","exportNode","h","POV","povlist","target","up","STD_UPVECTOR","fov","STD_FOV","nextPOV","prevPOV","push","kwarray","pov","LightProbe","res","near","far","_res","_near","_far","STD_FAR","_envtex","_prevCCtarget","_pmremGenerator","PMREMGenerator","_renderer","CCtarget","WebGLCubeRenderTarget","format","RGBEFormat","generateMipmaps","minFilter","LinearMipmapLinearFilter","encoding","sRGBEncoding","CC","CubeCamera","_rootVisibleGlobal","texture","EventHub","evLocal","evNetwork","on","fireEvent","clearEventHandlers","evtname","ehList","handler","handlerLocal","handlerNetwork","evhLocal","VRoadcast","bReplicate","executeHandlers","MatHub","materials","colors","addDefaults","_loader","MaterialLoader","white","Color","black","green","yellow","red","blue","orange","sem","darksem","fullyTransparent","MeshBasicMaterial","transparent","depthWrite","selector","color","flatShading","controllerRay","semanticShape","semanticShapeHL","semanticShapeEdit","mat","jsonfile","addMaterial","device","geomUnitSphere","SphereBufferGeometry","exporter","GLTFExporter","_dlink","document","createElement","style","display","body","appendChild","textureLoader","TextureLoader","window","isSecureContext","isMobile","test","navigator","userAgent","substr","isXRsupported","xr","isSessionSupported","filepath","lastIndexOf","toLowerCase","index","substring","object","updateMatrixWorld","g","applyMatrix4","matrixWorld","toNonIndexed","mergedGeometries","BufferGeometryUtils","mergeBufferGeometries","mergedGeometry","mergeVertices","center","group","mesh","Mesh","parentNode","computeBoundsTree","map","anisotropy","_maxAnisotropy","magFilter","LinearFilter","v","prec","parseFloat","toPrecision","blob","href","URL","createObjectURL","download","click","str","downloadBlob","Blob","jsonobj","downloadText","JSON","stringify","buffer","ext","getFileExtension","bBin","opts","binary","parse","output","ArrayBuffer","downloadArrayBuffer","downloadJSONobj","noLP","BoxBufferGeometry","MeshStandardMaterial","PATH_RES","tex","createSceneNode","enablePicking","metalness","metalnessMap","roughnessMap","normalMap","dx","dz","PlaneBufferGeometry","rotateX","Math","PI","SceneHub","currID","currData","_bEdit","_bLoading","initBaseParsers","reqpath","sid","oncomplete","$","getJSON","parseScene","sobj","_jsonParsers","getSemanticNode","getSceneNode","child","nodes","edges","n","semid","S","SL","sphere","CL","semesh","_convexPoints","environment","env","pano","mainpano","setMainPanorama","PATH_COLLECTION","setMainPanoramaRotation","L","mainlight","direction","setMainLightDirection","_dMainL","intensity","shadows","toggleShadows","lps","lightprobes","auto","_bAutoLP","viewpoints","povs","setHomePOV","setPosition","setTarget","setFOV","setKeywords","keywords","scenegraph","sg","G","getOrCreateSceneNode","removeChildren","urls","Array","isArray","forEach","u","attachTo","shadowcast","setShadowCast","shadowreceive","toYup","setYup","transform","setRotation","setScale","parid","childid","semanticgraph","getOrCreateSemanticNode","createSemanticNode","setDescription","spheres","SemFactory","createSphere","convexshapes","points","createConvexShape","parser","patch","mode","MODE_ADD","O","MODE_DEL","jstr","ajax","PATH_RESTAPI","contentType","dataType","success","r","COSINOIDAL_DIST","cos","POVtransitionDuration","STD_POV_TRANS_DURATION","init","_mode","setOrbitControl","_currPOV","_fromPOV","_reqPOV","homePOV","_tPOVcall","_tPOVprogress","_vDir","Quaternion","_motionAmt","_motionDir","getCurrentEyeLocation","getCurrentDirection","copyCurrentPOV","isTransitioning","isOrbit","MODE_ORBIT","isFirstPerson","MODE_FP","isDevOri","MODE_DEVORI","XR","isPresenting","_cOrbit","_camOrbit","PerspectiveCamera","innerWidth","innerHeight","STD_NEAR","enableAll","OrbitControls","domElement","rotateSpeed","STD_ROT_SPEED_ORBIT","enablePan","enableDamping","screenSpacePanning","enableZoom","minDistance","maxDistance","addEventListener","_bControlChange","_controls","_camera","syncCurrCamera","setFirstPersonControl","_cFirstPerson","_camFP","STD_ROT_SPEED_FP","setDeviceOrientationControl","_screenPointerCoords","_cDevOri","_camDevOri","DeviceOrientationControls","alphaOffset","setMotionAmount","setMotionDirection","stop","cam","updateProjectionMatrix","getFOV","syncCurrPOV","getCamera","getWorldPosition","getWorldQuaternion","getWorldDirection","ctrl","handlePOV","handleXRtransition","handlePOVtransition","handleMotion","controller0","negate","fv","multiplyScalar","_dt","_clock","elapsedTime","lerpVectors","MathUtils","lerp","_currPos","_fromPos","_reqPos","tgt","subVectors","normalize","FP_EPS","requestPOV","duration","requestPOVbyBound","T","E","radius","requestPOVbyNode","getBound","requestRetarget","point","normal","distanceTo","computeDefaultHome","dv","sceneBS","getRootScene","eye","computeAndRequestDefaultHome","requestHome","scope","reorder","enabled","deviceOrientation","screenOrientation","absolute","alphaOffsetDevice","alphaOffsetScreen","onDeviceOrientationChangeEvent","zee","euler","q0","q1","event","onDeviceOrientationAbsoluteChangeEvent","onScreenOrientationChangeEvent","orientation","setObjectQuaternion","Euler","sqrt","alpha","beta","gamma","orient","setFromEuler","multiply","setFromAxisAngle","connect","disconnect","removeEventListener","getDirection","degToRad","iOSOrientationPermission","DeviceOrientationEvent","requestPermission","permissionState","catch","error","webkitCompassHeading","getDirectionMap","setReferenceSpaceType","setFramebufferScaleFactor","_bPresenting","currSession","rig","gControllers","controller0pos","controller1pos","controller0dir","controller1dir","defaultSelectHandler","_queryDataScene","userHeight","STD_TELEP_DURATION","_hoveredUI","H","getUINode","session","onSessionEnded","setSession","getController","controller1","e","gamepad","gp","pose","hasPosition","_handleUISelection","setRefSpaceLocation","setupControllersUI","requestSession","optionalFeatures","onSessionStarted","end","raytick","CylinderBufferGeometry","translate","raylen","createUINode","disablePicking","getControllerGrip","Button","uiid","baseColor","switchColor","_bSwitched","container","ThreeMeshUI","Block","width","height","padding","borderRadius","backgroundColor","backgroundOpacity","fontFamily","fontTexture","justifyContent","alignContent","uiText","Text","content","fontSize","fontColor","_trigger","PlaneGeometry","SUI","STD_BTN_SIZE","text","mainSelector","getMaterial","setSelectorRadius","gPoints","buildInfoNode","bShowInfo","_labelScale","_labelScaleVR","infoNodeText","getSelectorRadius","infoNode","attachToRoot","infoContainer","getInfoNode","createToolbar","buttonlist","cont","m","button","_bPauseQuery","_queryDataSem","orientToCamera","Avatar","uid","userid","username","message","bTalking","_tStateCall","_tStateDur","_tProgress","_currState","_tgtState","realize","avaMats","avatars","SphereGeometry","usermaterial","getAvatarMaterialByUID","smesh","usermeshnode","setCloneOnLoadHit","userlabelnode","labelcontainer","ucolorsdark","usernametext","usermessagetext","A","msg","D","cs","ts","slerp","handleStateTransition","address","location","origin","initMaterials","socket","_connected","avatarList","avaGroup","setInterval","sendState","USER_STATE_FREQ","_lastStateSent","ucolors","MM","sock","emit","REPLICATED_EVT","evhNetwork","isConnected","requestSceneEnter","sceneid","protocol","path","secure","rejectUnauthorized","io","connected","_registerSocketHandlers","_onConnected","setUsername","_username","touchAvatar","decodeState","requestStateTransition","uname","encodeState","Float32Array","binData","Int8Array","w","a8","a","cpov","lastPos","lastOri","dPos","dOri","angleTo","THRES_STATE_POS","THRES_STATE_ORI","getAvatar","loadRepresentation","clearAllAvatars","bConvexBuilding","convexPoints","convexNode","currConvexMesh","currSemNode","currMaterial","_numShapes","numPoints","geom","ConvexBufferGeometry","currSemesh","setVectorPrecision","setDefaultAndHighlightMaterials","offset","addConvexPoint","Object3D","FE","PATH_RES_ICONS","_bPopup","bPopupBlurBG","urlParams","URLSearchParams","search","_uiSetupBase","ddens","get","setDefaultPixelDensity","reqstr","PATH_RESTAPI_SCENE","uiAddButton","toggleFullScreen","isConnectionSecure","toggle","popupClose","html","idcontainer","iconid","onPress","htmlcode","append","addClass","removeClass","uiSwitchButton","popupQR","screenfull","isFullscreen","attr","inputid","value","val","regReplace","RegExp","replace","auLib","switch","Audio","loop","htmlcontent","stopPropagation","fadeIn","setPixelRatio","render","_mainRoot","resetPixelDensity","fadeOut","focusOn3DView","popupShow","QRCode","getElementById","RAD2DEG","DEG2RAD","PATH_MODS","PATH_THREE","PATH_DRACO_LIB","PATH_BASIS_LIB","PATH_MODELS","PATH_SCENES","SHADOWS_NEAR","SHADOWS_FAR","SHADOWS_SIZE","SHADOWS_RES","setPathCollection","setPathScenes","_setupBaseListeners","el","_onResize","_updateScreenMove","_onMouseWheel","Hammer","srcEvent","_handleQueries","defaultDoubleTapFromScreenCoords","_kModShift","_kModCtrl","key","max","aspect","setSize","preventDefault","deltaY","focus","_handleQueryScene","bFPtrans","currDir","feye","ftgt","hsn","_hoveredSemNode","profileDevice","Clock","WebGLRenderer","antialias","_stdpxd","outputEncoding","setAnimationLoop","_onFrame","capabilities","getMaxAnisotropy","Cache","GLTFLoader","_dracoLoader","DRACOLoader","setDecoderPath","setDRACOLoader","_numReqLoad","initGraphs","_queryDataUI","_bQuerySemOcclusion","_bQueryNormals","Vector2","_rcScene","Raycaster","_rcSemantics","_rcUI","_registerRCS","renderPause","renderResume","_setupLoadManager","_loadManager","LoadingManager","onStart","itemsLoaded","itemsTotal","onLoad","onProgress","onError","getRootSemantics","getRootUI","shadowMap","addLightProbe","setNear","assignLightProbesByProximity","setTimeout","_mMainPano","updateLightProbes","Scene","background","setAsRoot","ambLight","AmbientLight","setBackgroundColor","bg","setNeutralAmbientLight","_indLP","LightProbeGenerator","fromCubeRenderTarget","tpano","_matMainPano","_gMainPano","fog","depthTest","frustumCulled","setMainPanoramaRadius","onAfterRender","DirectionalLight","_dMainLtgt","_dMainLpos","_dMainLdir","PCFSoftShadowMap","shadow","mapSize","camera","left","right","bottom","top","updateDirShadows","_updateEnvironment","dt","getDelta","_fps","clientX","clientY","_rcRR","_rcHandlers","_handleQuerySemantics","_handleQueryUI","hitsnum","getControllerWorldLocation","getControllerWorldDirection","setFromCamera","_hitsScene","intersectObjects","distance","face","Matrix3","getNormalMatrix","applyMatrix3","getSceneQueriedPoint","getSceneQueriedDistance","getSceneQueriedNormal","_hitsSem","list","sp","_hitsUI","hui"],"mappings":"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","file":"ATON.min.js","sourceRoot":"..\\src","sourcesContent":["/*\r\n    ATON Node Class\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n//import Period from \"./ATON.period.js\";\r\n\r\n\r\n/**\r\nClass representing an ATON node.\r\nConstructor allows to create different types (scene nodes, semantic nodes and UI nodes)\r\n@class Node\r\n@example \r\nlet myNode = new ATON.Node(\"someID\")\r\n*/\r\nclass Node extends THREE.Group {\r\n\r\nconstructor(id, type){\r\n    super();\r\n\r\n    this.type = type? type : ATON.NTYPES.SCENE;\r\n    \r\n    this.bPickable = true;\r\n\r\n    if (this.type === ATON.NTYPES.SCENE){\r\n        this._rootG = ATON._rootVisible;\r\n        this._nodes = ATON.snodes;\r\n        //this.period = undefined; // TODO: assign period object (read-only, centralized) - NOT USED FOR NOW\r\n    }\r\n    if (this.type === ATON.NTYPES.SEM){\r\n        this._rootG = ATON._rootSem;\r\n        this._nodes = ATON.semnodes;\r\n        //this.period = undefined;\r\n    }\r\n\r\n    if (this.type === ATON.NTYPES.UI){\r\n        this._rootG = ATON._rootUI;\r\n        this._nodes = ATON.uinodes;\r\n    }\r\n\r\n    // Register\r\n    this.as(id);\r\n\r\n    this.kwords = undefined;\r\n\r\n    this._bCloneOnLoadHit = true;\r\n\r\n    // Shadows\r\n    this.castShadow    = false;\r\n    this.receiveShadow = false;\r\n\r\n    // Local handlers\r\n    this.onHover  = undefined;\r\n    this.onLeave  = undefined;\r\n    this.onSelect = undefined;\r\n}\r\n\r\n/**\r\n(Re)assign node ID\r\n@param {string} id - the new ID\r\n@example\r\nmyNode.as(\"newID\")\r\n*/\r\nas(id){\r\n    if (id === undefined) return;\r\n    if (id === ATON.ROOT_NID) return;\r\n\r\n    this._nodes[id] = this;\r\n    this.nid  = id;\r\n    this.name = id;\r\n\r\n    return this;\r\n}\r\n\r\nsetAsRoot(){\r\n    this._nodes[ATON.ROOT_NID] = this;\r\n    this.nid = ATON.ROOT_NID;\r\n\r\n    return this;\r\n}\r\n\r\nsetCloneOnLoadHit(b){\r\n    this._bCloneOnLoadHit = b;\r\n    return this;\r\n}\r\n\r\n/**\r\nAdd keyword(s) to this node. Keywords are also recursively added into the sub-graph\r\n@param {string} kw - the keyword or comma-separated list of keywords\r\n@example\r\nmyNode.addKeywords(\"heritage,reconstruction\");\r\n*/\r\naddKeywords(kw){\r\n    let K = kw.split(\",\");\r\n\r\n    if (this.kwords === undefined) this.kwords = {};\r\n    for (let k in K) this.kwords[ K[k] ] = true;\r\n\r\n    // recurse into ATON nodes\r\n    for (let c in this.children){\r\n        let C = this.children[c];\r\n        if (C.type !== undefined) C.addKeywords(kw);\r\n    }\r\n\r\n    return this;\r\n}\r\n\r\n/**\r\nReturns true if this node has specific keyword\r\n@param {string} kw - the keyword\r\n@returns {boolean}\r\n@example\r\nif (myNode.hasKeyword(\"heritage\")){ ... }\r\n*/\r\nhasKeyword(kw){\r\n    if (this.kwords === undefined) return;\r\n    return (this.kwords[kw] !== undefined);\r\n}\r\n\r\n/**\r\nSet custom description (string) to the node\r\n@param {string} s - content\r\n@example\r\nmyNode.setDescription(\"This is a small description\");\r\n*/\r\nsetDescription(s){\r\n    this.userData.description = s;\r\n    return this;\r\n}\r\n\r\n/**\r\nGet node description (string) if any\r\n@returns {string}\r\n@example\r\nlet desc = myNode.getDescription();\r\n*/\r\ngetDescription(){\r\n    return this.userData.description;\r\n}\r\n\r\n/**\r\nHide this node (and sub-graph), also invisible to queries (ray casting, picking)\r\n@example\r\nmyNode.hide()\r\n*/\r\nhide(){ \r\n    this.visible = false;\r\n    this.traverse((o) => { o.layers.disable(this.type); });\r\n}\r\n\r\n/**\r\nShow this node (and sub-graph). If pickable, becomes sensible to queries (ray casting)\r\n@example\r\nmyNode.show()\r\n*/\r\nshow(){ \r\n    this.visible = true;\r\n    if (this.bPickable) this.traverse((o) => { o.layers.enable(this.type); });\r\n    return this;\r\n}\r\n\r\n/**\r\nToggle node visibility. If visible, becomes invisible, and viceversa.\r\n@example\r\nmyNode.toggle()\r\n*/\r\ntoggle(b){\r\n    if (b === undefined){\r\n        if (this.visible) return this.hide();\r\n        else return this.show();\r\n    }\r\n\r\n    if (b) return this.show();\r\n    else return this.hide();\r\n}\r\n\r\n/**\r\nDisable this node for runtime queries (ray casters). Useful for instance on vegetation, etc...\r\n@example\r\nmyNode.load(\"somevegetation.gltf\").disablePicking()\r\n*/\r\ndisablePicking(){\r\n    this.bPickable = false;\r\n    this.traverse((o) => { o.layers.disable(this.type); });\r\n    return this;  \r\n}\r\n\r\n/**\r\nEnable this node for runtime queries (ray casters)\r\n@example\r\nmyNode.enablePicking()\r\n*/\r\nenablePicking(){\r\n    this.bPickable = true;\r\n    this.traverse((o) => { o.layers.enable(this.type); });\r\n    return this;\r\n}\r\n\r\n/**\r\nSet cascading material. Note this applies to this node and all children (even all those still loading)\r\n@param {THREE.Material} M - the Material\r\n@example\r\nmyNode.setMaterial( new THREE.MeshBasicMaterial({ transparent: true, opacity: 0.2, wireframe: true }) )\r\n*/\r\nsetMaterial(M){\r\n    this.userData.cMat = M;\r\n\r\n    this.traverse((o) => {\r\n        if (o.isMesh){\r\n            this.userData.cMat = M;\r\n            o.material = M;\r\n            //o.material.needsUpdate = true;\r\n            }\r\n    });\r\n\r\n    return this;\r\n}\r\n\r\n/** \r\nGet cascading material\r\n@returns {THREE.Material}\r\n*/\r\ngetMaterial(){\r\n    return this.userData.cMat;\r\n}\r\n\r\n// Set default and highlight materials\r\nsetDefaultAndHighlightMaterials(matSTD, matHL){\r\n    this.userData.matSTD = matSTD;\r\n    this.userData.matHL  = matHL;\r\n\r\n    return this;\r\n}\r\nhighlight(){\r\n    if (this.userData.matHL) this.setMaterial(this.userData.matHL);\r\n    return this;\r\n}\r\nrestoreDefaultMaterial(){\r\n    if (this.userData.matSTD) this.setMaterial(this.userData.matSTD);\r\n    return this;\r\n}\r\n\r\n// Set cascading opacity\r\nsetOpacity(f){\r\n    this.traverse((o) => {\r\n        if (o.isMesh){\r\n            o.material.opacity = f;\r\n            //o.material.needsUpdate = true;\r\n        }\r\n    });\r\n\r\n    return this;\r\n}\r\n\r\n// FIXME: not working\r\nsetShadowCast(b){\r\n    this.castShadow = b;\r\n\r\n    this.traverse((o) => {\r\n        if (o.isMesh){\r\n            o.castShadow = b;\r\n        }\r\n    });\r\n\r\n    return this;\r\n};\r\nsetShadowReceive(b){\r\n    this.receiveShadow = b;\r\n\r\n    this.traverse((o) => {\r\n        if (o.isMesh){\r\n            o.receiveShadow = b;\r\n        }\r\n    });\r\n\r\n    return this;\r\n};\r\n\r\nsetEnvMap(envtex){\r\n    this.traverse((o) => {\r\n        if (o.isMesh){\r\n\t\t\to.material.envMap  = envtex;\r\n\t\t\t//o.material.combine = THREE.MultiplyOperation;\r\n            //o.material.needsUpdate = true;\r\n        }\r\n    });\r\n\r\n    return this;\r\n}\r\n\r\nassignLightProbe(LP){\r\n    this.traverse((o) => {\r\n        if (o.isMesh && o.geometry) ATON.Utils.assignLightProbeToMesh(LP, o);\r\n    });\r\n\r\n    return this;\r\n}\r\n\r\n// (re)assign LPs for each mesh depending on proximity\r\nassignLightProbesByProximity(){\r\n    if (ATON._lps.length === 0) return this;\r\n\r\n    this.traverse((o) => {\r\n        if (o.isMesh && o.geometry){\r\n            let c = new THREE.Vector3();\r\n            let bbox = new THREE.Box3().setFromObject(o).getCenter(c);\r\n\r\n            let cLP   = undefined;\r\n            let mdist = undefined;\r\n\r\n            for (let i in ATON._lps){\r\n                let LP = ATON._lps[i];\r\n                let d = c.distanceToSquared(LP.pos);\r\n\r\n                if (cLP === undefined || d < mdist){\r\n                    mdist = d;\r\n                    cLP = LP;\r\n                }\r\n            }\r\n\r\n            if (cLP) ATON.Utils.assignLightProbeToMesh(cLP, o);\r\n        }\r\n    });\r\n\r\n    return this;\r\n};\r\n\r\n// Find & update all LPs under this subgraph\r\n// FIXME: not working\r\nupdateLightProbes = ()=>{\r\n    this.traverse((o) => {\r\n        if (o.isMesh && o.geometry){\r\n            let LP = o.userData.LP;\r\n\r\n            if (LP !== undefined){\r\n                LP.update();\r\n                o.material.envMap = LP.getEnvTex();\r\n                //o.material.envMapIntensity = 5.0;\r\n                //console.log(\"x\");\r\n            }\r\n        }\r\n    });\r\n\r\n    return this;\r\n};\r\n\r\n// Deep clone\r\nduplicate(){\r\n    let C = this.clone();\r\n\r\n    C.traverse((o)=>{\r\n        if (o.isMesh){\r\n            o.material = o.material.clone();\r\n        }\r\n    });\r\n\r\n    return C;\r\n}\r\n\r\n\r\n// FIXME: xxx\r\ndelete(){\r\n    let p = this.parent;\r\n\r\n    if (p !== undefined && p.nid !== undefined) p.removeChild( this );\r\n}\r\n\r\nremoveChild(c){\r\n    if (c === undefined) return;\r\n\r\n    let nid = c.nid;\r\n    if (c.nid !== undefined) this._nodes[c.nid] = undefined;\r\n\r\n    c.parent = undefined;\r\n\r\n    c.traverse((o) => {\r\n        if (o.geometry) o.geometry.dispose();\r\n        if (o.material) o.material.dispose();\r\n    });\r\n\r\n    this.remove(c);\r\n\r\n    return this;\r\n}\r\n/**\r\nDelete all children of this node\r\n*/\r\nremoveChildren(){\r\n    let num = this.children.length;\r\n    for (let i=(num-1); i>=0; i--) this.removeChild(this.children[i]);\r\n\r\n    return this;\r\n}\r\n\r\n\r\n/**\r\nAttach this node to parent by providing ID (string) or node object\r\n@param {string|Node} node - the parent node\r\n@example\r\nmyNode.attachTo(\"someGroupID\")\r\n@example\r\nmyNode.attachTo(myParentGroup)\r\n*/\r\nattachTo(node){\r\n    let N = (typeof node === 'string')? this._nodes[node] : node;\r\n    if (N){\r\n        N.add(this);\r\n        if (N.userData.cMat) this.userData.cMat = N.userData.cMat;\r\n        }\r\n    return N;\r\n}\r\n\r\n/**\r\nAttach this node to main root. This is usually mandatory in order to visualize the node and all its descendants.\r\nDepending on node type this will be the scene root (visible scene-graph), the semantic-graph root or UI root\r\n@example\r\nmyNode.attachToRoot()\r\n*/\r\nattachToRoot(){\r\n    this._rootG.add(this);\r\n    if (this._rootG.userData.cMat) this.userData.cMat = this._rootG.userData.cMat;\r\n    return this._rootG;\r\n}\r\n\r\n/**\r\nReturn bounding sphere of this node\r\n@returns {THREE.Sphere}\r\n@example\r\nlet bs = myNode.getBound()\r\n*/\r\ngetBound(){\r\n    let bb = new THREE.Box3().setFromObject( this );\r\n    let bs = new THREE.Sphere();\r\n    bb.getBoundingSphere(bs);\r\n\r\n    return bs;\r\n}\r\n\r\n/**\r\nSet location (translation) of this node\r\n@example\r\nmyNode.setPosition(1.0,3.0,0.0)\r\n@example\r\nmyNode.setPosition( new THREE.Vector3(1.0,3.0,0.0) )\r\n*/\r\nsetPosition(x,y,z){\r\n    if (x instanceof THREE.Vector3) this.position.copy(x);\r\n    else this.position.set(x,y,z);\r\n\r\n    return this;\r\n}\r\n\r\n/**\r\nSet scale of this node\r\n@example\r\nmyNode.setScale(3.0,2.0,1.0)\r\n@example\r\nmyNode.setScale(2.0)\r\n@example\r\nmyNode.setScale( new THREE.Vector3(3.0,2.0,1.0) )\r\n*/\r\nsetScale(sx,sy,sz){\r\n    if (sx instanceof THREE.Vector3) this.scale.copy(sx);\r\n    else {\r\n        if (sy === undefined){ sy = sx; sz = sx; }\r\n        this.scale.set(sx,sy,sz);\r\n        }\r\n    \r\n    return this;\r\n}\r\n\r\n/**\r\nSet rotation of this node (Euler rx,ry,rz) in radians\r\n@example\r\nmyNode.setRotation(3.0,2.0,1.0)\r\n@example\r\nmyNode.setRotation( new THREE.Vector3(3.0,2.0,1.0) )\r\n*/\r\nsetRotation(rx,ry,rz){\r\n    if (rx instanceof THREE.Vector3) this.rotation.copy(rx);\r\n    else this.rotation.set(rx,ry,rz);\r\n    \r\n    return this;\r\n}\r\n/**\r\nOrient this node to current camera\r\n*/\r\norientToCamera(){\r\n    this.quaternion.copy( ATON.Nav._qOri );\r\n    return this;\r\n}\r\n\r\nsetYup(){\r\n    this.rotation.set(-1.57079632679,0.0,0.0);\r\n    return this;  \r\n}\r\n\r\n/**\r\nLoad a 3D model under this node, with optional onComplete handler.\r\nNote the system will take care of loading the resources in background, and will manage duplicate requests to same resources avoiding waste of bandwidth\r\n@param {string} url - the url of the 3D model\r\n@param {function} onComplete - the optional handler to be fired on completion\r\n@example\r\nmyNode.load(\"mymodel.gltf\", ()=>{ console.log(\"completed!\") })\r\n*/\r\nload(url, onComplete){\r\n    if (url === undefined) return this;\r\n\r\n    let N = this;\r\n\r\n    // Fire new request\r\n    //if (N.type === ATON.NTYPES.SCENE) ATON._assetReqNew(url);\r\n\r\n    // [C] Promise already requested\r\n    if ( N._bCloneOnLoadHit && ATON._assetsManager[url] !== undefined ){\r\n        ATON._assetsManager[url].then(( o ) => {\r\n            N.add( o.clone() );\r\n\r\n            //if (N.type === ATON.NTYPES.SCENE) ATON._assetReqComplete(url);\r\n            if (onComplete) onComplete();\r\n        });\r\n\r\n        console.log(\"HIT!\");\r\n        return N;\r\n    }\r\n\r\n    // Fire request\r\n    if (N.type === ATON.NTYPES.SCENE) ATON._assetReqNew(url);\r\n\r\n    let P = new Promise( ( resolve, reject ) => {\r\n        ATON._aLoader.load( url, (data)=>{\r\n            let model = data.scene || data.scene[0];\r\n\r\n            // Visit loaded model\r\n            ATON.Utils.modelVisitor(N, model);\r\n\r\n            N.add( model );\r\n\r\n            resolve(model);\r\n            console.log(\"Model \"+url+\" loaded\");\r\n            \r\n            if (N.type === ATON.NTYPES.SCENE) ATON._assetReqComplete(url);\r\n\r\n            if (onComplete) onComplete();\r\n        },\r\n        undefined,\r\n        (err)=>{\r\n            console.log(err);\r\n            //reject(model);\r\n\r\n            if (N.type === ATON.NTYPES.SCENE) ATON._assetReqComplete(url);\r\n            if (onComplete) onComplete();\r\n        });\r\n\r\n/*\r\n        ATON._aLoader.load( url+\"__LOD2-d.gltf\", (data)=>{\r\n            let model = data.scene || data.scene[0];\r\n            ATON._modelVisitor(model);\r\n\r\n            let C = new THREE.Vector3();\r\n            let bb = new THREE.Box3().setFromObject( model ).getCenter(C);\r\n            model.position.set(-C.x,-C.y,-C.z);\r\n\r\n            let lod = new THREE.LOD();\r\n            lod.position.set(C.x,C.y,C.z);\r\n            lod.matrixAutoUpdate = true;\r\n            lod.addLevel(model, 40.0);\r\n            N.add(lod);\r\n\r\n            //N.add( model );\r\n\r\n            resolve(model);\r\n            console.log(\"ATON model \"+url+\" loaded\");\r\n\r\n            ATON._aLoader.load( url+\"__LOD1-d.gltf\", (data2)=>{\r\n                let model2 = data2.scene || data2.scene[0];\r\n                ATON._modelVisitor(model2);\r\n\r\n                model2.position.set(-C.x,-C.y,-C.z);\r\n                \r\n                lod.addLevel(model2, 0.0);\r\n            });\r\n            \r\n            ATON._assetReqComplete(url);\r\n        });\r\n*/\r\n    });\r\n\r\n    // Register\r\n    if (N._bCloneOnLoadHit) ATON._assetsManager[url] = P;\r\n\r\n    return this;\r\n}\r\n\r\nexportAs( filename ){\r\n    ATON.Utils.exportNode(this, filename);\r\n\r\n    return this;\r\n}\r\n\r\nsetOnHover( h ){\r\n    this.onHover = f;\r\n    return this;\r\n}\r\nsetOnLeave( h ){\r\n    this.onLeave = f;\r\n    return this;\r\n}\r\nsetOnSelect( h ){\r\n    this.onSelect = f;\r\n    return this;\r\n}\r\n\r\n// Assign a period to this node\r\n// TODO: \r\n/*\r\nsetPeriod(p){\r\n    if (this.type === ATON.NTYPES.UI) return this; // not on UI nodes\r\n\r\n    let P = (typeof p === 'string')? ATON.periods[p] : p;\r\n    if (P === undefined) return this;\r\n\r\n    this.period = P;\r\n    return this;\r\n}\r\n\r\nfilterByPeriodID(id){\r\n    if (this.period === undefined) return this;\r\n\r\n    if (this.period.id !== id){\r\n        this.hide();\r\n        return this;\r\n        }\r\n    else {\r\n        this.show();\r\n        return this;\r\n    }\r\n\r\n    this.traverse((o) => {\r\n        if (o.period){\r\n            if (o.period.id === id) this.show();\r\n            else this.hide();\r\n        }\r\n    });\r\n\r\n    return this;\r\n}\r\n*/\r\n\r\n}\r\n\r\nexport default Node;","/*\r\n    ATON Viewpoint Class\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\n/**\r\nClass representing a Viewpoint (POV) in the 3D space, abstracting from device used (mobile, desktop or immersive XR).\r\nConstructor allows to assign the POV a unique ID (`string`)\r\n@class POV\r\n@example \r\nnew ATON.POV(\"myView\")\r\n*/\r\nclass POV {\r\n\r\nconstructor(id){\r\n    // Register\r\n    if (id !== undefined){\r\n        ATON.Nav.povlist[id] = this;\r\n        this.id = id;\r\n    }\r\n\r\n    this.pos    = new THREE.Vector3(1,0,0);\r\n    this.target = new THREE.Vector3(0,0,0);\r\n    this.up     = ATON.STD_UPVECTOR;\r\n    this.fov    = ATON.Nav.STD_FOV;\r\n\r\n    this.kwords = undefined;\r\n\r\n    this.nextPOV = undefined;\r\n    this.prevPOV = undefined;\r\n}\r\n\r\n/**\r\nSet eye position\r\n@example\r\nnew ATON.POV(\"myView\").setPosition(2.0,6.0,1.5)\r\n@example\r\nmypov.setPosition( new THREE.Vector3(2.0,6.0,1.5) )\r\n*/\r\nsetPosition(x,y,z){\r\n    if (x instanceof THREE.Vector3) this.pos.copy(x);\r\n    else this.pos.set(x,y,z);\r\n\r\n    return this;\r\n}\r\n\r\n/**\r\nSet target position\r\n@example\r\nnew ATON.POV(\"myView\").setTarget(8.0,6.0,1.5)\r\n@example\r\nmypov.setTarget( new THREE.Vector3(8.0,6.0,1.5) ).setPosition(2.0,6.0,1.5)\r\n*/\r\nsetTarget(x,y,z){\r\n    if (x instanceof THREE.Vector3) this.target.copy(x);\r\n    else this.target.set(x,y,z);\r\n\r\n    return this;\r\n}\r\n\r\n/**\r\nSet field of view (FOV) in degrees\r\n@param {number} f\r\n@example\r\nnew ATON.POV(\"myView\").setFOV(70.0)\r\n*/\r\nsetFOV(f){\r\n    this.fov = f;\r\n\r\n    return this;\r\n}\r\n\r\n/**\r\nAdd a keyword to this viewpoint\r\n@param {string} kw - the keyword\r\n@example\r\nnew ATON.POV(\"myView\").addKeyword(\"heritage\")\r\n*/\r\naddKeyword(kw){\r\n    if (this.kwords === undefined) this.kwords = [];\r\n    this.kwords.push(kw);\r\n\r\n    return this;\r\n}\r\n\r\nsetKeywords(kwarray){\r\n    this.kwords = kwarray;\r\n    return this;\r\n}\r\n\r\n/**\r\nSet an optional next POV\r\n@param {POV} pov - the next POV\r\n*/\r\nsetNextPOV(pov){\r\n    if (!pov) return;\r\n    this.nextPOV = pov;\r\n\r\n    return this;\r\n}\r\n\r\n/**\r\nSet an optional previous POV\r\n@param {POV} pov - the previous POV\r\n*/\r\nsetPrevPOV(pov){\r\n    if (!pov) return;\r\n    this.prevPOV = pov;\r\n\r\n    return this;\r\n}\r\n\r\n}\r\n\r\nexport default POV;","/*\r\n    ATON Light Probe Class\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\n/**\r\nClass representing a light probe (LP), can be static or updated at runtime\r\n@class LightProbe\r\n@param {number} res - Resolution in pixel of lightprobe (default 64)\r\n@param {number} near - Capture near (default 1m)\r\n@param {number} far - Capture far (default 1Km)\r\n@example \r\nlet LP = new ATON.LightProbe()\r\n*/\r\nclass LightProbe {\r\n\r\nconstructor(res, near, far){\r\n    this.pos = new THREE.Vector3(0,0,0);\r\n\r\n    this._res  = (res !== undefined)?  res  : 64;\r\n    this._near = (near !== undefined)? near : 1.0;\r\n    this._far  = (far !== undefined)?  far  : ATON.Nav.STD_FAR;\r\n/*\r\n    this._LPtarget0 = undefined;\r\n    this._LPtarget1 = undefined;\r\n\r\n    this._LP0 = undefined;\r\n    this._LP1 = undefined;\r\n\r\n    this._flipLP = false;\r\n*/\r\n    this._envtex = undefined;\r\n    this._prevCCtarget = undefined;\r\n\r\n    this._pmremGenerator = new THREE.PMREMGenerator(ATON._renderer);\r\n\r\n    //this.realize();\r\n}\r\n\r\n/*\r\nrealize(){\r\n    this._LPtarget0 = new THREE.WebGLCubeRenderTarget( this._res, {\r\n        format: THREE.RGBFormat,\r\n        generateMipmaps: true,\r\n        minFilter: THREE.LinearMipmapLinearFilter,\r\n        encoding: THREE.sRGBEncoding // prevent the material's shader from recompiling every frame\r\n    });\r\n\r\n    this._LPtarget1 = new THREE.WebGLCubeRenderTarget( this._res, {\r\n        format: THREE.RGBFormat,\r\n        generateMipmaps: true,\r\n        minFilter: THREE.LinearMipmapLinearFilter,\r\n        encoding: THREE.sRGBEncoding\r\n    });\r\n\r\n    this._LP0 = new THREE.CubeCamera( this._near, this._far, this._LPtarget0 );\r\n    this._LP1 = new THREE.CubeCamera( this._near, this._far, this._LPtarget1 );\r\n\r\n    return this;\r\n}\r\n*/\r\n\r\n/**\r\nSet LP position\r\n@example\r\nLP.setPosition(2.0,6.0,1.5)\r\n@example\r\nLP.setPosition( new THREE.Vector3(2.0,6.0,1.5) )\r\n*/\r\nsetPosition(x,y,z){\r\n    if (x instanceof THREE.Vector3) this.pos.copy(x);\r\n    else this.pos.set(x,y,z);\r\n\r\n    //if (this._LP0) this._LP0.position.copy(this.pos);\r\n    //if (this._LP1) this._LP1.position.copy(this.pos);\r\n\r\n    return this;\r\n}\r\n\r\nsetNear(near){\r\n    this._near = near;\r\n    return this;\r\n}\r\nsetFar(far){ \r\n    this._far = far;\r\n    return this;\r\n}\r\n\r\n/**\r\nUpdate LP capture. Typically called when all 3D models are loaded and arranged into the scene.\r\nCan be called at runtime or whenever there is some change in the 3D scene\r\n@example\r\nLP.update()\r\n*/\r\nupdate(){\r\n    if (this._envtex) this._envtex.dispose();\r\n    if (this._prevCCtarget) this._prevCCtarget.dispose();\r\n\r\n    let CCtarget = new THREE.WebGLCubeRenderTarget( this._res, {\r\n        format: THREE.RGBEFormat,\r\n        generateMipmaps: true,\r\n        minFilter: THREE.LinearMipmapLinearFilter,\r\n        encoding: THREE.sRGBEncoding // prevent the material's shader from recompiling every frame\r\n    });\r\n\r\n    let CC = new THREE.CubeCamera( this._near, this._far, CCtarget );\r\n    CC.position.copy(this.pos);\r\n\r\n    CC.update( ATON._renderer, ATON._rootVisibleGlobal );\r\n\r\n    this._envtex = CCtarget.texture;\r\n    \r\n/*\r\n    console.log(CC);\r\n    console.log(CCtarget);\r\n\r\n    let CCtargetX = new THREE.WebGLCubeRenderTarget( this._res, {\r\n        format: THREE.RGBFormat,\r\n        //generateMipmaps: true,\r\n        minFilter: THREE.LinearMipmapLinearFilter,\r\n        encoding: THREE.sRGBEncoding\r\n    });\r\n\r\n    let CCX = new THREE.CubeCamera( this._near, this._far, CCtargetX );\r\n    CCX.position.copy(this.pos);\r\n\r\n    CCX.update( ATON._renderer, ATON._rootVisible );\r\n    this._envtex = this._pmremGenerator.fromCubemap(CCtargetX.texture).texture;\r\n*/\r\n\r\n    this._prevCCtarget = CCtarget;\r\n\r\n\r\n/*\r\n    if (this._LP0 === undefined || this._LP1 === undefined) return this;\r\n\r\n    this._flipLP = !this._flipLP;\r\n    //ATON._flipLP = !ATON._flipLP;\r\n\r\n    if (this._flipLP){\r\n        this._LP0.update( ATON._renderer, ATON._mainRoot );\r\n        this._envtex = this._LPtarget0.texture;\r\n    }\r\n    else {\r\n        this._LP1.update( ATON._renderer, ATON._mainRoot );\r\n        this._envtex = this._LPtarget1.texture;\r\n    }\r\n*/\r\n    return this;\r\n}\r\n\r\n\r\ngetEnvTex(){\r\n    return this._envtex;\r\n}\r\n\r\nassignToNode(N){\r\n    if (N === undefined) return;\r\n    //TODO:\r\n}\r\n\r\n}\r\n\r\nexport default LightProbe;","/*\r\n    ATON Event Hub\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\n/**\r\nATON Event Hub\r\n@namespace EventHub\r\n*/\r\nlet EventHub = {};\r\n\r\n/**\r\nInitializes the component\r\n*/\r\nEventHub.init = ()=>{\r\n\r\n    EventHub.evLocal   = {};\r\n    EventHub.evNetwork = {};\r\n\r\n    // Expose\r\n    ATON.on                 = EventHub.on;\r\n    ATON.fireEvent          = EventHub.fireEvent;\r\n    ATON.clearEventHandlers = EventHub.clearEventHandlers\r\n};\r\n\r\n/**\r\nClear all event handlers for a given event\r\n@param {string} evtname - event name\r\n*/\r\nEventHub.clearEventHandlers = (evtname)=>{\r\n    //let evHandlers = (bNetwork)? EventHub.evNetwork : EventHub.evLocal;\r\n\r\n    EventHub.evLocal[evtname]   = [];\r\n    EventHub.evNetwork[evtname] = [];\r\n};\r\n\r\n// Execute all handlers from list with given data\r\nEventHub.executeHandlers = (ehList, data)=>{\r\n    if (!ehList) return;\r\n\r\n    for (let h = 0; h < ehList.length; h++) {\r\n        let handler = ehList[h];\r\n        if (handler) handler(data);\r\n    }\r\n};\r\n\r\n/**\r\nSubscribe to a given event, with local handler and optional network handler\r\n@param {string} evtname - event name\r\n@param {function} handlerLocal - local event handler\r\n@param {function} handlerNetwork - optional network (see VRoadcast) event handler\r\n@example\r\nATON.EventHub.on(\"myEvent\", function(data){ console.log(\"received local event\"); })\r\n*/\r\nEventHub.on = (evtname, handlerLocal, handlerNetwork)=>{\r\n    // Local event (default)\r\n    if (handlerLocal !== undefined){\r\n        let evhLocal = EventHub.evLocal;\r\n\r\n        if (evhLocal[evtname] === undefined) evhLocal[evtname] = []; // First time (event not registered)\r\n        evhLocal[evtname].push(handlerLocal);\r\n    }\r\n\r\n    // Received event (network)\r\n    if (handlerNetwork !== undefined){\r\n        ATON.VRoadcast.on(evtname, handlerNetwork);\r\n    }\r\n\r\n};\r\n\r\n/**\r\nFire a local (and optionally network) event, with data\r\n@param {string} evtname - event name\r\n@param {object} data - object containing data to be transmitted with this event\r\n@param {bool} bReplicate - if true, it will replicate (broadcast) the event to other connected peers in the same scene (see VRoadcast)\r\n@example\r\nATON.EventHub.on(\"myEvent\", function(data){ console.log(\"received local event\"); })\r\n*/\r\nEventHub.fireEvent = (evtname, data, bReplicate)=>{\r\n    let ehList = EventHub.evLocal[evtname];\r\n    EventHub.executeHandlers(ehList, data);\r\n\r\n    if (!bReplicate) return;\r\n    ATON.VRoadcast.fireEvent(evtname, data);\r\n};\r\n\r\nexport default EventHub;","/*\r\n    ATON Materials Hub\r\n    Centralized material manager\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\n/**\r\nATON Material Hub\r\n@namespace MatHub\r\n*/\r\nlet MatHub = {};\r\n\r\nMatHub.init = ()=>{\r\n    MatHub.materials = {};\r\n    MatHub.colors    = {};\r\n\r\n    MatHub.addDefaults();\r\n\r\n    MatHub._loader = new THREE.MaterialLoader();\r\n};\r\n\r\nMatHub.addDefaults = ()=>{\r\n\r\n    // Colors\r\n    MatHub.colors.white  = new THREE.Color(1,1,1);\r\n    MatHub.colors.black  = new THREE.Color(0,0,0);\r\n    MatHub.colors.green  = new THREE.Color(0,1,0);\r\n    MatHub.colors.yellow = new THREE.Color(1,1,0);\r\n    MatHub.colors.red    = new THREE.Color(1,0,0);\r\n    MatHub.colors.blue   = new THREE.Color(0,0,1);\r\n    MatHub.colors.orange = new THREE.Color(1,0.5,0);\r\n    \r\n    MatHub.colors.sem     = new THREE.Color(0,0,1);\r\n    MatHub.colors.darksem = new THREE.Color(0,0,0.1);\r\n\r\n    // Materials\r\n    MatHub.materials.fullyTransparent = new THREE.MeshBasicMaterial({ \r\n        transparent: true, \r\n        depthWrite: false, \r\n        opacity: 0.0\r\n    });\r\n    \r\n    // Selector\r\n    MatHub.materials.selector = new THREE.MeshBasicMaterial({\r\n        color: MatHub.colors.green,\r\n        transparent: true, \r\n        opacity: 0.2, \r\n        flatShading: true\r\n    });\r\n\r\n    // XR/VR ray\r\n    MatHub.materials.controllerRay = new THREE.MeshBasicMaterial({ \r\n        color: MatHub.colors.white, \r\n        transparent: true, \r\n        opacity: 0.2,\r\n        depthWrite: false,\r\n        flatShading: true\r\n    });\r\n\r\n    // Semantic shapes\r\n    MatHub.materials.semanticShape = new THREE.MeshBasicMaterial({ \r\n        color: MatHub.colors.sem, \r\n        transparent: true,\r\n        depthWrite: false, \r\n        opacity: 0.1,\r\n        flatShading: true\r\n    });\r\n    MatHub.materials.semanticShapeHL = new THREE.MeshBasicMaterial({ \r\n        color: MatHub.colors.sem, \r\n        transparent: true,\r\n        depthWrite: false, \r\n        opacity: 0.3,\r\n        flatShading: true\r\n    });\r\n    MatHub.materials.semanticShapeEdit = new THREE.MeshBasicMaterial({ \r\n        color: MatHub.colors.orange, \r\n        transparent: true,\r\n        depthWrite: false, \r\n        opacity: 0.2,\r\n        flatShading: true\r\n    });\r\n};\r\n\r\nMatHub.addMaterial = (id, mat)=>{\r\n    if (MatHub.materials[id]){\r\n        console.log(\"MatHub: material \"+id+\" already registered\");\r\n        return;\r\n    }\r\n\r\n    MatHub.materials[id] = mat;\r\n};\r\n\r\nMatHub.loadMaterial = (id, jsonfile)=>{\r\n    MatHub._loader.load(jsonfile, (mat)=>{\r\n        MatHub.addMaterial(id, mat);\r\n    },\r\n    undefined,\r\n    (err)=>{\r\n        console.log(err);\r\n    });\r\n};\r\n\r\nMatHub.getMaterial = (id)=>{\r\n    return MatHub.materials[id];\r\n};\r\n\r\nexport default MatHub;","/*\r\n    ATON Utils\r\n    various utilities for device profiling, graph visiting, etc.\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\nlet Utils = {};\r\n\r\n\r\nUtils.init = ()=>{\r\n    // read-only object to inspect device capabilities\r\n    ATON.device = {};\r\n\r\n    Utils.geomUnitSphere = new THREE.SphereBufferGeometry( 1.0, 16, 16 );\r\n\r\n    // Export/Download utils\r\n    Utils.exporter = new THREE.GLTFExporter();\r\n    Utils._dlink = document.createElement('a');\r\n    Utils._dlink.style.display = 'none';\r\n    document.body.appendChild( Utils._dlink ); // Firefox workaround, see #6594\r\n\r\n    Utils.textureLoader = new THREE.TextureLoader();\r\n};\r\n\r\nUtils.isConnectionSecure = ()=>{\r\n    return window.isSecureContext;\r\n}\r\n\r\nUtils.isMobile = ()=>{\r\n    return ATON.device.isMobile;\r\n}\r\n\r\n// Profile device capabilities\r\nUtils.profileDevice = ()=>{\r\n\r\n    // Detect mobile\r\n    ATON.device.isMobile = false;\r\n    let detectMobile = ()=>{\r\n        if(/(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|ipad|iris|kindle|Android|Silk|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(navigator.userAgent)\r\n        || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(navigator.userAgent.substr(0,4))){\r\n            return true;\r\n            }\r\n\r\n        return false;\r\n    };\r\n\r\n    ATON.device.isMobile = detectMobile();\r\n\r\n    // XR\r\n    ATON.device.isXRsupported = false;\r\n    if ( 'xr' in navigator ){\r\n\t    navigator.xr.isSessionSupported( 'immersive-vr' ).then( function ( b ){\r\n            if (b){\r\n                ATON.device.isXRsupported = true;\r\n                console.log(\"WebXR supported\");\r\n                }\r\n            else {\r\n                ATON.device.isXRsupported = false;\r\n                console.log(\"WebXR NOT supported\");\r\n                }\r\n\t\t});\r\n    }\r\n};\r\n\r\n// Path utils\r\nUtils.getFileExtension = ( filepath )=>{\r\n\treturn filepath.substr(filepath.lastIndexOf('.')+1).toLowerCase();\r\n};\r\n\r\nUtils.getBaseFolder = ( filepath )=>{\r\n    var index  = filepath.lastIndexOf( '/' );\r\n    if ( index !== -1 ) return filepath.substring( 0, index + 1 );\r\n    \r\n    return '';\r\n};\r\n\r\nUtils.mergeObject = ( object )=>{\r\n    object.updateMatrixWorld( true );\r\n\r\n    const geometry = [];\r\n    object.traverse( c => {\r\n        if ( c.isMesh ){\r\n            const g = c.geometry;\r\n            g.applyMatrix4( c.matrixWorld );\r\n            geometry.push( g.toNonIndexed() );\r\n        }\r\n\r\n    });\r\n\r\n    const mergedGeometries = THREE.BufferGeometryUtils.mergeBufferGeometries( geometry, false );\r\n    const mergedGeometry   = THREE.BufferGeometryUtils.mergeVertices( mergedGeometries ).center();\r\n\r\n    const group = new THREE.Group();\r\n    const mesh = new THREE.Mesh( mergedGeometry );\r\n    group.add( mesh );\r\n    return group;\r\n};\r\n\r\n// Helper visitor routine\r\nUtils.modelVisitor = (parentNode, model)=>{\r\n    if (!model) return this;\r\n\r\n    //model = Utils.mergeObject(model);\r\n    \r\n    let N = parentNode;\r\n    let type = N.type; // Differentiate visit depending on node type\r\n\r\n    model.traverse( ( o ) => {\r\n\r\n        if (N.bPickable !== undefined){\r\n            if (N.bPickable) o.layers.enable(type);\r\n            else o.layers.disable(type);\r\n        }\r\n\r\n        if (o.isMesh){\r\n            //let numVertices = o.geometry.attributes.position.count;\r\n            //console.log(numVertices);\r\n\r\n            if (type === ATON.NTYPES.SCENE){\r\n                // TODO: \r\n                o.castShadow    = true; //N.castShadow;\r\n                o.receiveShadow = true; //N.receiveShadow;\r\n\r\n                // Build accelerated ray casting\r\n                if (o.geometry){\r\n                    o.geometry.computeBoundsTree();\r\n                    console.log(\"Computed BVH\");\r\n                }\r\n\r\n                // Ensure mipmapping is correct\r\n                if ( o.material.map !== null){\r\n                    //console.log(object.material.map);\r\n                    \r\n                    // Why do I have to do this?\r\n                    //o.material.map.generateMipmaps = false;\r\n                    o.material.map.anisotropy = ATON._maxAnisotropy;\r\n                    o.material.map.minFilter  = THREE.LinearMipmapLinearFilter;\r\n                    o.material.map.magFilter  = THREE.LinearFilter;\r\n                    //o.material.map.needsUpdate = true;\r\n                }\r\n            }\r\n\r\n            if (type === ATON.NTYPES.SEM){\r\n                o.material = ATON.MatHub.materials.semanticShape;\r\n            }\r\n\r\n            // Cascading material\r\n            if (N.userData.cMat){\r\n                o.material = N.userData.cMat;\r\n                //o.material.needsUpdate = true;\r\n            }\r\n        }\r\n    });\r\n};\r\n\r\nUtils.setVectorPrecision = (v, prec)=>{\r\n    v.x = parseFloat( v.x.toPrecision(prec) );\r\n    v.y = parseFloat( v.y.toPrecision(prec) );\r\n    v.z = parseFloat( v.z.toPrecision(prec) );\r\n    \r\n    return v;\r\n};\r\n\r\n// Export routines\r\nUtils.downloadBlob = (blob, filename)=>{\r\n    if (filename === undefined) return;\r\n\r\n    Utils._dlink.href = URL.createObjectURL( blob );\r\n    Utils._dlink.download = filename;\r\n    Utils._dlink.click();\r\n};\r\n\r\n// Download text ASCII data\r\nUtils.downloadText = ( str, filename )=>{\r\n    Utils.downloadBlob( new Blob( [ str ], { type: 'text/plain' } ), filename );\r\n};\r\n\r\n// Download json object\r\nUtils.downloadJSONobj = (jsonobj, filename)=>{\r\n    Utils.downloadText( JSON.stringify(jsonobj), filename );\r\n};\r\n\r\nUtils.downloadArrayBuffer = ( buffer, filename )=>{\r\n    Utils.downloadBlob( new Blob( [ buffer ], { type: 'application/octet-stream' } ), filename );\r\n};\r\n\r\n// Export ATON node (gltf or glb)\r\nUtils.exportNode = (node, filename)=>{\r\n    let ext = Utils.getFileExtension(filename);\r\n    if (ext.length < 1) return;\r\n\r\n    let bBin = (ext === \"glb\")? true : false;\r\n\r\n    let opts = {\r\n        //trs: true, // Export position, rotation and scale instead of matrix per node. Default is false\r\n        binary: bBin, // Export in binary (.glb) format, returning an ArrayBuffer. Default is false\r\n        //onlyVisible: false,\r\n        //truncateDrawRange: true\r\n    };\r\n\r\n    Utils.exporter.parse( node, ( output )=>{\r\n        if ( output instanceof ArrayBuffer ){\r\n            Utils.downloadArrayBuffer( output, filename);\r\n        }\r\n        else {\r\n            console.log( output );\r\n            Utils.downloadJSONobj(output, filename);\r\n        }\r\n    }, opts);\r\n};\r\n\r\nUtils.assignLightProbeToMesh = (LP, mesh)=>{\r\n    if (LP === undefined || mesh === undefined) return;\r\n\r\n    if (mesh.noLP) return;\r\n\r\n    mesh.userData.LP = LP;\r\n    //LP.update();\r\n    //mesh.material.envMap = LP.getEnvTex();\r\n    \r\n    //mesh.material.combine = THREE.MultiplyOperation;\r\n    //mesh.material.needsUpdate = true;\r\n\r\n    //console.log(mesh.userData);\r\n};\r\n\r\nUtils.createATONCube = (id)=>{\r\n    let g = new THREE.BoxBufferGeometry( 1,1,1 );\r\n\r\n    let mat = new THREE.MeshStandardMaterial();\r\n\r\n    Utils.textureLoader.load((ATON.PATH_RES+\"models/aton-cube.jpg\"), (tex)=>{\r\n        tex.encoding = THREE.sRGBEncoding;\r\n        mat.map = tex;\r\n    });\r\n\r\n    let N = ATON.createSceneNode(id);\r\n    N.add( new THREE.Mesh(g) );\r\n    N.setMaterial(mat);\r\n\r\n    N.enablePicking();\r\n    return N;\r\n};\r\n\r\n\r\nUtils.createATONCubePBR = (id)=>{\r\n    let g = new THREE.BoxBufferGeometry( 1,1,1 );\r\n\r\n    let mat = new THREE.MeshStandardMaterial();\r\n    mat.metalness = 1.0;\r\n\r\n    Utils.textureLoader.load((ATON.PATH_RES+\"models/aton-cube.jpg\"), (tex)=>{\r\n        tex.encoding = THREE.sRGBEncoding;\r\n        mat.map = tex;\r\n    });\r\n\r\n    Utils.textureLoader.load((ATON.PATH_RES+\"models/aton-cube-pbr.jpg\"), (tex)=>{\r\n        tex.encoding = THREE.sRGBEncoding;\r\n        mat.metalnessMap = tex;\r\n        mat.roughnessMap = tex;\r\n    });\r\n\r\n    Utils.textureLoader.load((ATON.PATH_RES+\"models/aton-cube-nrm.png\"), (tex)=>{\r\n        tex.encoding = THREE.sRGBEncoding;\r\n        mat.normalMap = tex;\r\n\r\n        //mat.bumpMap.anisotropy = ATON._maxAnisotropy;\r\n        //mat.bumpMap.minFilter  = THREE.LinearMipmapLinearFilter;\r\n        //mat.bumpMap.magFilter  = THREE.LinearFilter;\r\n    });\r\n\r\n    let N = ATON.createSceneNode(id);\r\n    N.add( new THREE.Mesh(g) );\r\n    N.setMaterial(mat);\r\n\r\n    N.enablePicking();\r\n    return N;\r\n};\r\n\r\n\r\nUtils.createGround = (texture, dx,dz)=>{\r\n    if (dx === undefined) dx = 1.0;\r\n    if (dz === undefined) dz = 1.0;\r\n\r\n    let g = new THREE.PlaneBufferGeometry( dx, dz );\r\n\r\n    let mat = new THREE.MeshStandardMaterial();\r\n    if (texture !== undefined) Utils.textureLoader.load(texture, (tex)=>{\r\n        tex.encoding = THREE.sRGBEncoding;\r\n        mat.map = tex;\r\n    });\r\n\r\n    let N = ATON.createSceneNode().rotateX(-Math.PI * 0.5);\r\n    N.add( new THREE.Mesh(g, mat) );\r\n    N.enablePicking();\r\n\r\n    return N;\r\n};\r\n\r\n\r\nexport default Utils;","/*\r\n    ATON Scene Hub\r\n    scene JSON routines\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\n/**\r\nATON Scene Hub\r\n@namespace SceneHub\r\n*/\r\nlet SceneHub = {};\r\n\r\nSceneHub.MODE_ADD = 0;\r\nSceneHub.MODE_DEL = 1;\r\n\r\n/**\r\nInitializes the component\r\n*/\r\nSceneHub.init = ()=>{\r\n    SceneHub.currID   = undefined; // Scene ID (sid)\r\n    SceneHub.currData = undefined; // holds compact object describing our ATON scene\r\n    SceneHub._bEdit   = false;     // edit mode (client can modify json on the server)\r\n\r\n    SceneHub._bLoading = false;\r\n\r\n    SceneHub.initBaseParsers();\r\n};\r\n\r\n/**\r\nThis enables/disables edit mode - i.e. changes to the scene are sent to server and become persistent\r\n@param {bool} b - true or false\r\n@example\r\nATON.SceneHub.setEditMode(true)\r\n*/\r\nSceneHub.setEditMode = (b)=>{\r\n    SceneHub._bEdit = b;\r\n    console.log(\"Edit mode:\"+b);\r\n};\r\n\r\n\r\n/**\r\n    Loads a scene by providing JSON path\r\n    @param {string} reqpath - JSON url\r\n    @param {string} sid - Scene ID\r\n    @param {function} oncomplete - Function to be called on complete\r\n    @example\r\n        ATON.SceneHub.load(\"http://path/to/scene.json\", \"sample\", ()=>{ console.log(\"Done!\"); });\r\n*/\r\nSceneHub.load = (reqpath, sid, oncomplete)=>{\r\n    //let args = reqpath.split(',');\r\n\r\n    SceneHub._bLoading = true;\r\n    console.log(\"Loading Scene: \"+sid);\r\n\r\n    return $.getJSON( reqpath, ( data )=>{\r\n        SceneHub.currData  = data;\r\n        SceneHub.currID    = sid; //scenejson.substring(scenejson.lastIndexOf('/')+1);\r\n        SceneHub._bLoading = false;\r\n\r\n        //console.log(ATON.currScene);\r\n\r\n        SceneHub.parseScene(data);\r\n\r\n        if (oncomplete) oncomplete();\r\n        ATON.fireEvent(\"SceneJSONLoaded\", sid);\r\n    });\r\n};\r\n\r\nSceneHub.parseScene = (sobj)=>{\r\n    sobj = (sobj === undefined)? SceneHub.currData : sobj;\r\n    if (sobj === undefined) return;\r\n\r\n    for (let k in sobj)\r\n        if (SceneHub._jsonParsers[k]) SceneHub._jsonParsers[k]( sobj[k] );\r\n};\r\n\r\nSceneHub.getJSONchildren = (nid, type)=>{\r\n    if (type === undefined) type = ATON.NTYPES.SCENE;\r\n\r\n    let P = undefined;\r\n    let children = [];\r\n\r\n    if (type === ATON.NTYPES.SEM)   P = ATON.getSemanticNode(nid);\r\n    if (type === ATON.NTYPES.SCENE) P = ATON.getSceneNode(nid);\r\n\r\n    if (P === undefined) return undefined;\r\n\r\n    for (let c in P.children){\r\n        let child = P.children[c];\r\n\r\n        if (child.nid !== undefined) children.push( child.nid );\r\n        }\r\n\r\n    return children;\r\n};\r\n\r\nSceneHub.getJSONgraphEdges = (type)=>{\r\n    if (type === undefined) type = ATON.NTYPES.SCENE;\r\n    let nodes = ATON.snodes;\r\n    \r\n    if (type === ATON.NTYPES.SEM) nodes = ATON.semnodes;\r\n    if (type === ATON.NTYPES.UI)  nodes = ATON.uinodes;\r\n\r\n    let edges = {};\r\n\r\n    for (let n in nodes){\r\n        let N = nodes[n];\r\n\r\n        //if (N && N.children) edges[n] = SceneHub.getJSONchildren(n, type);\r\n\r\n        let E = {};\r\n        if (N.parent && N.parent.nid){\r\n            //edges.push([N.parent.nid, N.nid]);\r\n            if (edges[N.parent.nid] === undefined) edges[N.parent.nid] = [];\r\n            edges[N.parent.nid].push(N.nid);\r\n            //edges[N.parent.nid].filter((v,i) => edges[N.parent.nid].indexOf(v) === i);\r\n        }\r\n    }\r\n\r\n    //console.log(edges);\r\n    return edges;\r\n};\r\n\r\nSceneHub.getJSONsemanticSpheresList = (semid)=>{\r\n    let S = ATON.getSemanticNode(semid);\r\n    if (S === undefined) return undefined;\r\n\r\n    let SL = [];\r\n\r\n    for (let s in S.children){\r\n        let sphere = S.children[s];\r\n        if (sphere.type){\r\n            SL.push([\r\n                parseFloat(sphere.position.x.toPrecision(3)), \r\n                parseFloat(sphere.position.y.toPrecision(3)), \r\n                parseFloat(sphere.position.z.toPrecision(3)), \r\n                parseFloat(sphere.scale.x.toPrecision(3))\r\n            ]);\r\n        }\r\n    }\r\n\r\n    return SL;\r\n};\r\n\r\nSceneHub.getJSONsemanticConvexShapes = (semid)=>{\r\n    let S = ATON.getSemanticNode(semid);\r\n    if (S === undefined) return undefined;\r\n\r\n    let CL = [];\r\n\r\n    for (let s in S.children){\r\n        let semesh = S.children[s];\r\n        if (semesh.userData._convexPoints){\r\n            CL.push(semesh.userData._convexPoints);\r\n        }\r\n    }\r\n\r\n    //console.log(CL);\r\n    \r\n    return CL;\r\n};\r\n\r\n// Top-level scene-JSON parsers\r\nSceneHub.initBaseParsers = ()=>{\r\n    SceneHub._jsonParsers = {};\r\n\r\n    // Environment\r\n    SceneHub._jsonParsers.environment = (env)=>{\r\n\r\n        let pano = env.mainpano;\r\n        if (env.mainpano){\r\n            if (pano.url) ATON.setMainPanorama(ATON.PATH_COLLECTION+pano.url);\r\n            if (pano.rotation) ATON.setMainPanoramaRotation(pano.rotation);\r\n        }\r\n\r\n        let L = env.mainlight;\r\n        if (L){\r\n            if (L.direction) ATON.setMainLightDirection( new THREE.Vector3(L.direction[0],L.direction[1],L.direction[2]) );\r\n\r\n            if (ATON._dMainL){\r\n                if (L.color)     ATON._dMainL.color = new THREE.Color(L.color[0],L.color[1],L.color[2]);\r\n                if (L.intensity) ATON._dMainL.intensity = L.intensity;\r\n\r\n                if (L.shadows) ATON.toggleShadows(L.shadows);\r\n            }\r\n        }\r\n\r\n        let lps = env.lightprobes;\r\n        if (lps){\r\n            if (lps.auto) ATON._bAutoLP = true;\r\n        }\r\n\r\n    };\r\n\r\n    // Viewpoints\r\n    SceneHub._jsonParsers.viewpoints = (povs)=>{\r\n        if (povs === undefined) return;\r\n\r\n        for (let p in povs){\r\n            let pov = povs[p];\r\n            \r\n            if (p === \"home\"){\r\n                ATON.Nav.setHomePOV( \r\n                    new ATON.POV()\r\n                    .setPosition(pov.position[0],pov.position[1],pov.position[2])\r\n                    .setTarget(pov.target[0],pov.target[1],pov.target[2])\r\n                    .setFOV(pov.fov)\r\n                    .setKeywords(pov.keywords)\r\n                );\r\n            }\r\n            else {\r\n                new ATON.POV(p)\r\n                .setPosition(pov.position)\r\n                .setTarget(pov.target)\r\n                .setFOV(pov.fov)\r\n                .setKeywords(pov.keywords);\r\n            }\r\n        }\r\n    };\r\n\r\n    // Visible scene-graph\r\n    SceneHub._jsonParsers.scenegraph = (sg)=>{\r\n        if (sg === undefined) return;\r\n\r\n        let nodes = sg.nodes;\r\n        let edges = sg.edges;\r\n\r\n        // nodes\r\n        for (let nid in nodes){\r\n            let N = nodes[nid]; // JSON node\r\n\r\n            //let G = ATON.createSceneNode(nid); // ATON node\r\n            let G = ATON.getOrCreateSceneNode(nid).removeChildren();\r\n            \r\n            // load models by urls list\r\n            let urls = N.urls;\r\n            if (urls){\r\n                if (Array.isArray(urls)){\r\n                    urls.forEach(u => {\r\n                        ATON.createSceneNode().load(ATON.PATH_COLLECTION+u).attachTo(G);\r\n                    });\r\n                }\r\n                else {\r\n                    G.load(ATON.PATH_COLLECTION+urls);\r\n                }\r\n            }\r\n\r\n            // FIXME: not working\r\n            if (N.shadowcast)    G.setShadowCast(N.shadowcast);\r\n            if (N.shadowreceive) G.setShadowCast(N.shadowreceive);\r\n\r\n            if (N.toYup) G.setYup();\r\n\r\n            // Keywords\r\n            if (N.keywords) G.kwords = N.keywords;\r\n\r\n            // Transform node\r\n            let transform = N.transform;\r\n            if (transform){\r\n                if (transform.position) G.setPosition(transform.position[0],transform.position[1],transform.position[2]);\r\n                if (transform.rotation) G.setRotation(transform.rotation[0],transform.rotation[1],transform.rotation[2]);\r\n                if (transform.scale)    G.setScale(transform.scale[0],transform.scale[1],transform.scale[2]);\r\n            }\r\n        }\r\n\r\n        // Build graph through relationships\r\n        for (let parid in edges){\r\n            let children = edges[parid];\r\n\r\n            let P = ATON.getSceneNode(parid);\r\n\r\n            if (P !== undefined){\r\n                for (let c in children){\r\n                    let childid = children[c];\r\n                    let C = ATON.getSceneNode(childid);\r\n                    if (C !== undefined) C.attachTo(P);\r\n                }\r\n            }\r\n        }\r\n/*\r\n        for (let e = 0; e < edges.length; e++){\r\n            let E = edges[e];\r\n\r\n            let from = E[0];\r\n            let to   = E[1];\r\n\r\n            if (from && to){\r\n                let child = ATON.getSceneNode(to);\r\n                if (child) child.attachTo(from);\r\n            }\r\n        }\r\n*/\r\n    };\r\n\r\n    // Semantic scene-graph\r\n    SceneHub._jsonParsers.semanticgraph = (sg)=>{\r\n        if (sg === undefined) return;\r\n\r\n        let nodes = sg.nodes;\r\n        let edges = sg.edges;\r\n\r\n        // nodes\r\n        for (let nid in nodes){\r\n            let N = nodes[nid]; // JSON node\r\n\r\n            //let G = ATON.createSemanticNode(nid);\r\n            let G = ATON.getOrCreateSemanticNode(nid).removeChildren();\r\n            \r\n            // load shapes by urls list\r\n            let urls = N.urls;\r\n            if (urls){\r\n                if (Array.isArray(urls)){\r\n                    urls.forEach(u => {\r\n                        ATON.createSemanticNode().load(ATON.PATH_COLLECTION+u).attachTo(G);\r\n                    });\r\n                }\r\n                else {\r\n                    G.load(ATON.PATH_COLLECTION+urls);\r\n                }\r\n            }\r\n\r\n            if (N.toYup) G.setYup();\r\n\r\n            if (N.description) G.setDescription(N.description);\r\n\r\n            // Keywords\r\n            if (N.keywords) G.kwords = N.keywords;\r\n\r\n            // Sphere [x,y,z, r]\r\n            let spheres = N.spheres;\r\n            if (Array.isArray(spheres)){\r\n                for (let s in spheres){\r\n                    let S = spheres[s];\r\n                    ATON.SemFactory.createSphere(nid, new THREE.Vector3(S[0],S[1],S[2]), S[3]);\r\n                }\r\n            }\r\n\r\n            let convexshapes = N.convexshapes;\r\n            if (Array.isArray(convexshapes)){\r\n                for (let s in convexshapes){\r\n                    let S = convexshapes[s];\r\n\r\n                    let points = [];\r\n                    for (let i=0; i<S.length; i+=3){\r\n                        let p = new THREE.Vector3(S[i],S[i+1],S[i+2]);\r\n                        points.push(p);\r\n                    }\r\n\r\n                    ATON.SemFactory.createConvexShape(nid, points);\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        // Build relationships\r\n        for (let parid in edges){\r\n            let children = edges[parid];\r\n\r\n            let P = ATON.getSemanticNode(parid);\r\n\r\n            if (P !== undefined){\r\n                for (let c in children){\r\n                    let childid = children[c];\r\n                    let C = ATON.getSemanticNode(childid);\r\n                    if (C !== undefined) C.attachTo(P);\r\n                }\r\n            }\r\n        }\r\n/*\r\n        for (let e = 0; e < edges.length; e++){\r\n            let E = edges[e];\r\n\r\n            let from = E[0];\r\n            let to   = E[1];\r\n\r\n            if (from && to){\r\n                let child = ATON.getSemanticNode(to);\r\n                if (child) child.attachTo(from);\r\n            }\r\n        }\r\n*/\r\n    };\r\n\r\n};\r\n\r\n// Adds custom scene parser to extend JSON scene\r\n// parser(k){ ... }\r\nSceneHub.addSceneParser = (k, parser)=>{\r\n    SceneHub._jsonParsers[k] = parser;\r\n};\r\n\r\n// [C] Sends JSON edit to server node\r\n// previously used: https://tools.ietf.org/html/rfc6902\r\nSceneHub.sendEdit = (patch, mode, onComplete)=>{\r\n    if (SceneHub._bLoading || !SceneHub._bEdit) return;\r\n    if (patch === undefined) return;\r\n    if (mode === undefined) mode = SceneHub.MODE_ADD;\r\n\r\n    let sid = SceneHub.currID;\r\n\r\n    let O = {};\r\n    O.sid  = sid;\r\n    O.data = patch;\r\n    O.mode = (mode === SceneHub.MODE_DEL)? \"DEL\" : \"ADD\";\r\n\r\n    let jstr = JSON.stringify(O);\r\n    //console.log(jstr);\r\n\r\n    $.ajax({\r\n        url: ATON.PATH_RESTAPI+\"edit/scene\",\r\n        type:\"POST\",\r\n        data: jstr,\r\n        contentType:\"application/json; charset=utf-8\",\r\n        dataType:\"json\",\r\n\r\n        // Update local scene JSON\r\n        // TODO: improve traffic by applying patch to local json, and NOT by receiving entire JSON \r\n        success: (r)=>{\r\n            if (r === undefined) return;\r\n            //console.log(r);\r\n            SceneHub.currData = r;\r\n            //console.log(ATON.currSceneHub.data);\r\n\r\n            if (onComplete) onComplete();\r\n        }\r\n    });\r\n};\r\n\r\n\r\nexport default SceneHub;","/*\r\n    ATON Navigation system\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\nconst COSINOIDAL_DIST = function(x){ return (1.0 - Math.cos(x * Math.PI)) / 2.0; };\r\n\r\n/**\r\nATON Navigation system\r\n@namespace Nav\r\n*/\r\nlet Nav = {};\r\n\r\n// Consts\r\nNav.STD_FOV  = 50.0;\r\nNav.STD_NEAR = 0.05;\r\nNav.STD_FAR  = 1000.0;\r\n\r\nNav.FP_EPS = 0.01;\r\nNav.STD_ROT_SPEED_ORBIT = 0.4;\r\nNav.STD_ROT_SPEED_FP    = -0.3;\r\nNav.STD_POV_TRANS_DURATION = 2.0;\r\n\r\n// Non-immersive navigation controls\r\nNav.MODE_ORBIT  = 0;\r\nNav.MODE_FP     = 1;\r\nNav.MODE_DEVORI = 2;\r\n\r\n\r\nNav.POVtransitionDuration = Nav.STD_POV_TRANS_DURATION;\r\n\r\n\r\n\r\n/**\r\nInitialize nav system\r\n*/\r\nNav.init = ()=>{\r\n    Nav._mode = undefined;\r\n\r\n    // Setup controls\r\n    //Nav._camera = new THREE.PerspectiveCamera( Nav.STD_FOV, window.innerWidth / window.innerHeight, Nav.STD_NEAR, Nav.STD_FAR );\r\n    //Nav._camera.layers.enableAll();\r\n    //Nav._controls = new THREE.OrbitControls( Nav._camera, ATON._renderer.domElement);\r\n    Nav.setOrbitControl();\r\n\r\n    // POV data\r\n    Nav._currPOV = new ATON.POV(); // holds current viewpoint data (eye, target, etc...)\r\n    Nav._fromPOV = new ATON.POV(); // initial POV when requesting a transition\r\n    Nav._reqPOV  = new ATON.POV(); // requested POV for transition\r\n\r\n    Nav.homePOV = undefined; //new ATON.POV();\r\n\r\n    Nav._tPOVcall = -1.0;\r\n    Nav._tPOVprogress = 0.0;\r\n\r\n    Nav.povlist = {}; // This will handle registered POVs\r\n\r\n    // World direction and orientation (quat)\r\n    // consistent within standard and immersive XR\r\n    Nav._vDir = new THREE.Vector3(1,0,0);\r\n    Nav._qOri = new THREE.Quaternion();\r\n\r\n    // Motion\r\n    Nav._motionAmt = 0.0;\r\n    Nav._motionDir = new THREE.Vector3(0,1,0);\r\n};\r\n\r\n/**\r\nGet current eye location, consistent within standard and immersive XR sessions.\r\n@returns {THREE.Vector3}\r\n@example\r\nlet p = ATON.Nav.getCurrentEyeLocation();\r\n*/\r\nNav.getCurrentEyeLocation = ()=>{\r\n    return Nav._currPOV.pos;\r\n};\r\n\r\n/**\r\nGet current view direction (normalized). Consistent within standard and immersive XR sessions.\r\n@returns {THREE.Vector3}\r\n@example\r\nlet d = ATON.Nav.getCurrentDirection();\r\n*/\r\nNav.getCurrentDirection = ()=>{\r\n    return Nav._vDir;\r\n};\r\n\r\n/**\r\nGrab current POV and return a copy.\r\n@returns {POV}\r\n@example\r\nlet pov = ATON.Nav.copyCurrentPOV();\r\n*/\r\nNav.copyCurrentPOV = ()=>{\r\n    let pov = new ATON.POV();\r\n    pov.pos.copy(Nav._currPOV.pos);\r\n    pov.target.copy(Nav._currPOV.target);\r\n    pov.fov = Nav._currPOV.fov;\r\n\r\n    return pov;\r\n};\r\n\r\n/**\r\nReturn true if the navigation system is currently performing a transition\r\n@returns {boolean}\r\n*/\r\nNav.isTransitioning = ()=>{\r\n    if (Nav._tPOVcall >= 0.0) return true;\r\n    return false;\r\n};\r\n\r\n/**\r\nReturn true if the navigation system is in Orbit mode\r\n@returns {boolean}\r\n*/\r\nNav.isOrbit = ()=>{ return (Nav._mode === Nav.MODE_ORBIT); };\r\n\r\n/**\r\nReturn true if the navigation system is in First-person mode\r\n@returns {boolean}\r\n*/\r\nNav.isFirstPerson = ()=>{ return (Nav._mode === Nav.MODE_FP); };\r\n\r\n/**\r\nReturn true if the navigation system is in Device-orientation mode\r\n@returns {boolean}\r\n*/\r\nNav.isDevOri = ()=>{ return (Nav._mode === Nav.MODE_DEVORI); };\r\n\r\n/**\r\nSet Orbit navigation mode (default)\r\n*/\r\nNav.setOrbitControl = ()=>{\r\n    if (ATON.XR.isPresenting()) return;\r\n\r\n    Nav._mode = Nav.MODE_ORBIT;\r\n\r\n    // One-time setup\r\n    if (Nav._cOrbit === undefined){\r\n        Nav._camOrbit = new THREE.PerspectiveCamera( Nav.STD_FOV, window.innerWidth / window.innerHeight, Nav.STD_NEAR, Nav.STD_FAR );\r\n        Nav._camOrbit.layers.enableAll();\r\n\r\n        Nav._cOrbit = new THREE.OrbitControls( Nav._camOrbit, ATON._renderer.domElement);\r\n\r\n        let C = Nav._cOrbit;\r\n\r\n        C.rotateSpeed   = Nav.STD_ROT_SPEED_ORBIT;\r\n        C.enablePan     = true;\r\n        \r\n        C.enableDamping = false;\r\n        //C.dampingFactor = 0.1;\r\n        \r\n        C.screenSpacePanning = true;\r\n        \r\n        C.enableZoom  = true;\r\n        C.minDistance = 0.03;\r\n        C.maxDistance = 1000.0;\r\n\r\n        C.addEventListener(\"change\", () => { Nav._bControlChange = true; });\r\n    }\r\n\r\n    Nav._controls = Nav._cOrbit;\r\n    //Nav._controls.target.copy(Nav._camera.position);\r\n    Nav._camera = Nav._camOrbit;\r\n    \r\n    Nav._controls.update();\r\n    if (Nav._currPOV) Nav.syncCurrCamera();\r\n};\r\n\r\n/**\r\nSet First-Person navigation mode\r\n*/\r\nNav.setFirstPersonControl = ()=>{\r\n    if (ATON.XR.isPresenting()) return;\r\n\r\n    Nav._mode = Nav.MODE_FP;\r\n\r\n    // One-time setup\r\n    if (Nav._cFirstPerson === undefined){\r\n        Nav._camFP = new THREE.PerspectiveCamera( Nav.STD_FOV, window.innerWidth / window.innerHeight, Nav.STD_NEAR, Nav.STD_FAR );\r\n        Nav._camFP.layers.enableAll();\r\n\r\n        Nav._cFirstPerson = new THREE.OrbitControls( Nav._camFP, ATON._renderer.domElement);\r\n\r\n        let C = Nav._cFirstPerson;\r\n\r\n        C.enableZoom  = false;\r\n        C.enablePan   = false;\r\n        C.rotateSpeed = Nav.STD_ROT_SPEED_FP;\r\n        \r\n        C.enableDamping = false;\r\n        //C.dampingFactor = 0.1;\r\n        \r\n        //C.screenSpacePanning = true;\r\n\r\n        C.target.copy(Nav._camera.position);\r\n\r\n        C.minDistance = 0.05;\r\n        C.maxDistance = 0.05;\r\n    }\r\n\r\n    Nav._controls = Nav._cFirstPerson;\r\n    //Nav._controls.target.copy(Nav._camera.position);\r\n    Nav._camera = Nav._camFP;\r\n\r\n    Nav._controls.update();\r\n    if (Nav._currPOV) Nav.syncCurrCamera();\r\n/*\r\n    if (Nav._controls) ATON._controls.dispose();\r\n    ATON._controls = new THREE.FirstPersonControls( ATON._camera, ATON._renderer.domElement);\r\n    ATON._controls.lookSpeed = 0.1;\r\n    ATON._controls.movementSpeed = 10;\r\n    ATON._controls.noFly = true;\r\n    ATON._controls.lookVertical = false;\r\n\r\n    //ATON._camera.position.set( 20.0, 5.0, 0 );\r\n    ATON._controls.lookAt(0,4,0);\r\n\r\n    ATON._controls.update();\r\n    console.log(ATON._controls);\r\n*/\r\n};\r\n\r\n/**\r\nSet device-orientation navigation mode\r\n*/\r\nNav.setDeviceOrientationControl = ()=>{\r\n    if (!ATON.Utils.isMobile()) return;\r\n\r\n    Nav._mode = Nav.MODE_DEVORI;\r\n    ATON._screenPointerCoords.set(0.0,0.0);\r\n\r\n    // One-time setup\r\n    if (Nav._cDevOri === undefined){\r\n        Nav._camDevOri = new THREE.PerspectiveCamera( Nav.STD_FOV, window.innerWidth / window.innerHeight, Nav.STD_NEAR, Nav.STD_FAR );\r\n        Nav._camDevOri.layers.enableAll();\r\n\r\n        Nav._cDevOri = new THREE.DeviceOrientationControls(Nav._camDevOri, ATON._renderer.domElement);\r\n        //Nav._cDevOri = new Nav.DeviceOrientationControls(Nav._camDevOri, ATON._renderer.domElement);\r\n\r\n        Nav._cDevOri.alphaOffset = 0.0; //The alpha offset in radians\r\n    }\r\n\r\n    Nav._controls = Nav._cDevOri;\r\n    Nav._camera   = Nav._camDevOri;\r\n\r\n    Nav._controls.update();\r\n    if (Nav._currPOV) Nav.syncCurrCamera();\r\n};\r\n\r\n/**\r\nSet a motion amount\r\n@param {number} f - the motion amount\r\n@example\r\nATON.Nav.setMotionAmount(0.1);\r\n*/\r\nNav.setMotionAmount = (f)=>{\r\n    Nav._motionAmt = f;\r\n};\r\n\r\n/**\r\nSet a motion direction\r\n@param {THREE.Vector3} f - the motion direction\r\n@example\r\nATON.Nav.setMotionDirection( new THREE.Vector(1,0,0) );\r\n*/\r\nNav.setMotionDirection = (v)=>{\r\n    Nav._motionDir.copy(v);\r\n}\r\n\r\n/**\r\nStop current motion\r\n*/\r\nNav.stop = ()=>{\r\n    Nav._motionAmt = 0.0;\r\n    //TODO: stop any transition\r\n};\r\n\r\n/**\r\nSet field-of-view (FoV) in degrees\r\n@param {number} f\r\n@example\r\nATON.Nav.setFOV(30.0);\r\n*/\r\nNav.setFOV = (f)=>{\r\n    if (ATON.XR.isPresenting()) return; // skip for immersive sessions\r\n\r\n    Nav._currPOV.fov = f;\r\n\r\n    let cam = Nav._camera;\r\n    cam.fov = f;\r\n    cam.updateProjectionMatrix();\r\n};\r\n\r\n/**\r\nGet current field-of-view (FoV) in degrees\r\n@returns {number}\r\n*/\r\nNav.getFOV = ()=>{\r\n    return Nav._currPOV.fov;\r\n};\r\n\r\n\r\n// Retrieve currPOV from camera and controls\r\nNav.syncCurrPOV = ()=>{\r\n    if (ATON.XR.isPresenting()){\r\n        \r\n        let C = ATON._renderer.xr.getCamera(Nav._camera);\r\n        C.getWorldPosition( Nav._currPOV.pos );\r\n        C.getWorldQuaternion( Nav._qOri );\r\n        C.getWorldDirection( Nav._vDir );\r\n        //console.log(Nav._hmdPos);\r\n\r\n        //ATON.XR.hmdPos.copy(Nav._currPOV.pos);\r\n        //ATON.XR.hmdDir.copy(Nav._vDir);\r\n        \r\n        //ATON._renderer.xr.getCamera(Nav._camera);\r\n        //ATON._renderer.xr.getCamera(Nav._camera).getWorldDirection(Nav._vDir);\r\n        //Nav._camera.getWorldDirection(Nav._vDir);\r\n        \r\n        //Nav._currPOV.pos.copy(Nav._camera.position);\r\n        return;\r\n    }\r\n\r\n    let ctrl  = Nav._controls;\r\n    let cam   = Nav._camera;\r\n\r\n    cam.getWorldDirection(Nav._vDir);\r\n    cam.getWorldQuaternion(Nav._qOri);\r\n\r\n    if (Nav._mode === Nav.MODE_DEVORI){\r\n        Nav._currPOV.pos.copy(cam.position);\r\n        return;\r\n    }\r\n\r\n    if (Nav._mode === Nav.MODE_FP){\r\n        Nav._currPOV.pos.copy(ctrl.target);\r\n\r\n        Nav._currPOV.target.x = Nav._currPOV.pos.x + Nav._vDir.x; //ctrl.target.x - cam.position.x;\r\n        Nav._currPOV.target.y = Nav._currPOV.pos.y + Nav._vDir.y; //ctrl.target.y - cam.position.y;\r\n        Nav._currPOV.target.z = Nav._currPOV.pos.z + Nav._vDir.z; //ctrl.target.z - cam.position.z;\r\n        return;\r\n    }\r\n    \r\n    Nav._currPOV.pos.copy(cam.position);\r\n    Nav._currPOV.target.copy(ctrl.target);\r\n};\r\n\r\n// After syncCurrPOV and before updateCamera, we maniuplate currPOV\r\n//==================================================================================\r\nNav.handlePOV = ()=>{\r\n    //console.log(Nav._currPOV.pos);\r\n\r\n    if (ATON.XR.isPresenting()) Nav.handleXRtransition();\r\n    else Nav.handlePOVtransition();\r\n\r\n    Nav.handleMotion();\r\n\r\n    //if (ATON.XR.isPresenting()) console.log(ATON._renderer.xr);\r\n\r\n    // Handle constraints\r\n\r\n};\r\n\r\nNav.handleMotion = ()=>{\r\n    if (Nav.isTransitioning()) return;\r\n\r\n    if (Nav._motionAmt != 0.0){\r\n\r\n        //if ()\r\n\r\n\r\n        if (ATON.XR.controller0 && ATON.XR.controller0.visible){\r\n            ATON.XR.controller0.getWorldDirection(Nav._motionDir);\r\n            Nav._motionDir.negate();\r\n            }\r\n        else Nav._motionDir.copy(Nav._vDir);\r\n\r\n        let fv = Nav._motionDir.clone();\r\n        fv.multiplyScalar(Nav._motionAmt * ATON._dt);\r\n\r\n        Nav._currPOV.pos.add(fv);\r\n        Nav._currPOV.target.add(fv); // check if needed\r\n    }\r\n};\r\n\r\nNav.handlePOVtransition = ()=>{\r\n    if (Nav._tPOVcall < 0.0) return;\r\n\r\n    if (Nav.POVtransitionDuration <= 0.0) Nav._tPOVprogress = 1.0;\r\n    else Nav._tPOVprogress = (ATON._clock.elapsedTime - Nav._tPOVcall) / Nav.POVtransitionDuration;\r\n\r\n    // End\r\n    if (Nav._tPOVprogress >= 1.0){\r\n\r\n        Nav._tPOVcall = -1.0;\r\n        //Nav._controls.enabled = true;\r\n\r\n        Nav._currPOV.pos.copy(Nav._reqPOV.pos);\r\n        Nav._currPOV.target.copy(Nav._reqPOV.target);\r\n        Nav._currPOV.fov = Nav._reqPOV.fov;\r\n\r\n        ATON.fireEvent(\"POVTransitionCompleted\", Nav._reqPOV.id);\r\n        return;\r\n    }\r\n\r\n    Nav._tPOVprogress = COSINOIDAL_DIST(Nav._tPOVprogress);\r\n\r\n    Nav._currPOV.pos.lerpVectors(Nav._fromPOV.pos, Nav._reqPOV.pos, Nav._tPOVprogress);\r\n    Nav._currPOV.target.lerpVectors(Nav._fromPOV.target, Nav._reqPOV.target, Nav._tPOVprogress);\r\n\r\n    if (!Nav._fromPOV.fov || !Nav._reqPOV.fov) return;\r\n    Nav._currPOV.fov = THREE.MathUtils.lerp(Nav._fromPOV.fov, Nav._reqPOV.fov, Nav._tPOVprogress);\r\n\r\n    //console.log(Nav._camera);\r\n\r\n    Nav._camera.fov = Nav._currPOV.fov;\r\n    Nav._camera.updateProjectionMatrix();\r\n};\r\n\r\n// Immersive XR transitions\r\nNav.handleXRtransition = ()=>{\r\n    if (Nav._tPOVcall < 0.0) return;\r\n\r\n    if (Nav.POVtransitionDuration <= 0.0) Nav._tPOVprogress = 1.0;\r\n    else Nav._tPOVprogress = (ATON._clock.elapsedTime - Nav._tPOVcall) / Nav.POVtransitionDuration;\r\n\r\n    // End\r\n    if (Nav._tPOVprogress >= 1.0){\r\n\r\n        Nav._tPOVcall = -1.0;\r\n        //Nav._controls.enabled = true;\r\n\r\n        //ATON.XR.setRefSpaceLocation(Nav._reqXRpos);\r\n\r\n        console.log(\"XR height\"+ATON.XR._currPos.y);\r\n        console.log(\"HMD height\"+Nav._currPOV.pos.y);\r\n\r\n        ATON.fireEvent(\"POVTransitionCompleted\", Nav._reqPOV.id);\r\n        return;\r\n    }\r\n\r\n    ATON.XR._currPos.lerpVectors(ATON.XR._fromPos, ATON.XR._reqPos, Nav._tPOVprogress);\r\n    //ATON.XR._currPos.lerpVectors(Nav._fromPOV.pos, Nav._reqPOV.pos, Nav._tPOVprogress);\r\n\r\n};\r\n\r\n// Update internal camera from currPOV \r\nNav.syncCurrCamera = ()=>{\r\n    let ctrl  = Nav._controls;\r\n    let cam   = Nav._camera;\r\n    \r\n    let pos = Nav._currPOV.pos;\r\n    let tgt = Nav._currPOV.target;\r\n\r\n    // We are in VR\r\n    if (ATON.XR.isPresenting()){\r\n        ///let vrcam = ATON.XR.rig;\r\n        ///vrcam.position.copy(pos);\r\n        \r\n        ///ATON.XR.setRefSpaceLocation(pos);\r\n\r\n        //let C = ATON._renderer.xr.getCamera(cam);\r\n        //C.getWorldDirection(Nav._vDir);\r\n        return;\r\n    }\r\n\r\n    if (Nav._mode === Nav.MODE_DEVORI){\r\n        cam.position.copy(pos);\r\n        return;\r\n    }\r\n\r\n    // Common controls\r\n    //let d = new THREE.Vector3();\r\n    Nav._vDir.subVectors(tgt, pos);\r\n    Nav._vDir.normalize();\r\n\r\n    if (Nav._mode === Nav.MODE_FP){\r\n        ctrl.target.copy(pos);\r\n\r\n        cam.position.x = ctrl.target.x - (Nav._vDir.x * Nav.FP_EPS);\r\n        cam.position.y = ctrl.target.y - (Nav._vDir.y * Nav.FP_EPS);\r\n        cam.position.z = ctrl.target.z - (Nav._vDir.z * Nav.FP_EPS);\r\n    }\r\n    else {\r\n        cam.position.copy(pos);\r\n        ctrl.target.copy(tgt);\r\n    }\r\n};\r\n\r\n// Main update routine\r\nNav.update = ()=>{\r\n\r\n    //Nav._bXR = ATON.XR.isPresenting();\r\n\r\n    Nav.syncCurrPOV();\r\n    Nav.handlePOV();\r\n    Nav.syncCurrCamera();\r\n};\r\n\r\n\r\n/**\r\nRequest transition to viewpoint (POV)\r\n@param {POV} pov - the target POV\r\n@param {number} duration - duration of transition in seconds (optional), otherwise use standard duration\r\n@example\r\nATON.Nav.requestPOV( myTargetPOV );\r\n*/\r\nNav.requestPOV = (pov, duration)=>{\r\n    if (ATON._tPOVcall >= 0.0) return; // already requested\r\n\r\n    ATON.fireEvent(\"POVTransitionRequested\", pov.id);\r\n\r\n    if (duration !== undefined) Nav.POVtransitionDuration = duration;\r\n    \r\n    //Nav._controls.enabled = false;\r\n\r\n    Nav._tPOVcall = ATON._clock.elapsedTime;\r\n    \r\n    if (ATON.XR.isPresenting()){\r\n        Nav._reqPOV.pos.copy(pov.pos? pov.pos : Nav._currPOV.pos);\r\n        Nav._fromPOV.pos.copy(Nav._currPOV.pos);\r\n\r\n        ATON.XR._reqPos.copy(pov.pos? pov.pos : Nav._currPOV.pos);\r\n        ATON.XR._fromPos.copy(ATON.XR._currPos);\r\n    }\r\n    else {\r\n        Nav._reqPOV.pos.copy(pov.pos? pov.pos : Nav._currPOV.pos);\r\n        Nav._reqPOV.target.copy( pov.target? pov.target : Nav._currPOV.target);\r\n        Nav._reqPOV.fov = pov.fov? pov.fov : Nav._currPOV.fov;\r\n\r\n        Nav._fromPOV.pos.copy(Nav._currPOV.pos);\r\n        Nav._fromPOV.target.copy(Nav._currPOV.target);\r\n        Nav._fromPOV.fov = Nav._currPOV.fov;\r\n    }\r\n};\r\n\r\n\r\nNav.requestPOVbyBound = (bs, duration)=>{\r\n    if (bs === undefined) return;\r\n\r\n    let T = new THREE.Vector3();\r\n    let E = new THREE.Vector3();\r\n\r\n    T.copy(bs.center);\r\n    \r\n    let r = bs.radius * 2.5;\r\n    E.x = T.x - (r * Nav._vDir.x);\r\n    E.y = T.y - (r * Nav._vDir.y);\r\n    E.z = T.z - (r * Nav._vDir.z);\r\n\r\n    let pov = new ATON.POV().setPosition(E).setTarget(T);    \r\n    Nav.requestPOV(pov, duration);\r\n};\r\n\r\n/**\r\nRequest transition to specific ATON Node\r\n@param {Node} n - the target ATON Node\r\n@param {number} duration - duration of transition in seconds (optional), otherwise use standard duration\r\n@example\r\nATON.Nav.requestPOVbyNode( myNode );\r\n*/\r\nNav.requestPOVbyNode = (n, duration)=>{\r\n    if (n === undefined) return;\r\n    \r\n    let bs = n.getBound();\r\n\r\n    Nav.requestPOVbyBound(bs,duration);\r\n};\r\n\r\nNav.requestRetarget = (point, normal, duration)=>{\r\n    let M = new THREE.Vector3();\r\n    if (normal === undefined){\r\n        M.lerpVectors(point, Nav._currPOV.pos, 0.8);\r\n    }\r\n    else {\r\n        let d = point.distanceTo(Nav._currPOV.pos);\r\n        d *= 0.5;\r\n        M.x = point.x + (normal.x * d);\r\n        M.y = point.y + (normal.y * d);\r\n        M.z = point.z + (normal.z * d);\r\n    }\r\n\r\n    let pov = new ATON.POV().setPosition(M).setTarget(point).setFOV(Nav._currPOV.fov);\r\n    console.log(pov);\r\n    \r\n    Nav.requestPOV(pov, duration);\r\n};\r\n\r\n\r\n/**\r\nCompute a default home, depending on visibile bounding sphere. Typically called after all assets are loaded\r\n@param {THREE.Vector3} dv - the normalized offset direction (optional)\r\n@example\r\nATON.Nav.computeDefaultHome();\r\n*/\r\nNav.computeDefaultHome = (dv)=>{\r\n    if (dv === undefined) dv = new THREE.Vector3(1,0.7,1);\r\n\r\n    let sceneBS = ATON.getRootScene().getBound();\r\n\r\n    let eye = new THREE.Vector3(\r\n        sceneBS.center.x + (sceneBS.radius * dv.x * 1.5), \r\n        sceneBS.center.y + (sceneBS.radius * dv.y * 1.5), \r\n        sceneBS.center.z + (sceneBS.radius * dv.z * 1.5)\r\n    );\r\n\r\n    Nav.homePOV = new ATON.POV().setPosition(eye).setTarget(sceneBS.center);\r\n};\r\n\r\n/** \r\nSet the home viewpoint (POV)\r\n@param {POV} pov - the home POV\r\n*/\r\nNav.setHomePOV = (pov)=>{\r\n    Nav.homePOV = pov;\r\n};\r\n\r\nNav.computeAndRequestDefaultHome = (duration, dv)=>{\r\n    Nav.computeDefaultHome(dv);\r\n    Nav.requestPOV(Nav.homePOV, duration);\r\n};\r\n\r\n/** \r\nRequest home viewpoint\r\n@param {number} duration - transition duration\r\n*/\r\nNav.requestHome = (duration)=>{\r\n    Nav.requestPOV(Nav.homePOV, duration);\r\n};\r\n\r\n\r\n/*\r\nMobile devori (modified for absolute compass - UNSTABLE)\r\nauthor richt / http://richt.me\r\nauthor WestLangley / http://github.com/WestLangley\r\nW3C Device Orientation control (http://w3c.github.io/deviceorientation/spec-source-orientation.html)\r\n*/\r\nNav.DeviceOrientationControls = function ( object ) {\r\n    let scope = this;\r\n\r\n    this.object = object;\r\n    this.object.rotation.reorder( 'YXZ' );\r\n    this.enabled = true;\r\n\r\n    this.deviceOrientation = {};\r\n    this.screenOrientation = 0;\r\n\r\n    this.alphaOffset = 0; // radians\r\n    this.absolute = false;\r\n    this.alphaOffsetDevice = undefined;\r\n    this.alphaOffsetScreen = undefined;\r\n\r\n    let onDeviceOrientationChangeEvent = function ( event ) {\r\n        if(scope.absolute) return;\r\n        scope.deviceOrientation = event;\r\n    };\r\n\r\n    let onDeviceOrientationAbsoluteChangeEvent = function ( event ) {\r\n        scope.deviceOrientation = event;\r\n        scope.absolute = true;\r\n    };\r\n\r\n    let onScreenOrientationChangeEvent = function () {\r\n        scope.screenOrientation = window.orientation || 0;\r\n    };\r\n\r\n    // The angles alpha, beta and gamma form a set of intrinsic Tait-Bryan angles of type Z-X'-Y''\r\n    let setObjectQuaternion = function () {\r\n        let zee = new THREE.Vector3( 0, 0, 1 );\r\n        let euler = new THREE.Euler();\r\n\r\n        let q0 = new THREE.Quaternion();\r\n        let q1 = new THREE.Quaternion( - Math.sqrt( 0.5 ), 0, 0, Math.sqrt( 0.5 ) ); // - PI/2 around the x-axis\r\n\r\n        return function ( quaternion, alpha, beta, gamma, orient ) {\r\n            euler.set( beta, alpha, - gamma, 'YXZ' ); // 'ZXY' for the device, but 'YXZ' for us\r\n            quaternion.setFromEuler( euler ); // orient the device\r\n            quaternion.multiply( q1 ); // camera looks out the back of the device, not the top\r\n            quaternion.multiply( q0.setFromAxisAngle( zee, - orient ) ); // adjust for screen orientation\r\n        };\r\n\r\n    }();\r\n\r\n    this.connect = function () {\r\n        onScreenOrientationChangeEvent(); // run once on load\r\n\r\n        window.addEventListener( 'orientationchange', onScreenOrientationChangeEvent, false );\r\n        window.addEventListener( 'deviceorientation', onDeviceOrientationChangeEvent, false );\r\n        window.addEventListener( 'deviceorientationabsolute', onDeviceOrientationAbsoluteChangeEvent, false );\r\n\r\n        scope.enabled = true;\r\n    };\r\n\r\n    this.disconnect = function () {\r\n        window.removeEventListener( 'orientationchange', onScreenOrientationChangeEvent, false );\r\n        window.removeEventListener( 'deviceorientation', onDeviceOrientationChangeEvent, false );\r\n        window.removeEventListener( 'deviceorientationabsolute', onDeviceOrientationAbsoluteChangeEvent, false );\r\n\r\n        scope.enabled = false;\r\n    };\r\n\r\n    this.update = function () {\r\n        if ( scope.enabled === false ) return;\r\n\r\n        let device;\r\n        device = scope.deviceOrientation;\r\n\r\n        if ( device ) {\r\n            let alpha = this.getDirection() ? THREE.Math.degToRad( this.getDirection() ) + scope.alphaOffset : 0; // Z\r\n            let beta = device.beta ? THREE.Math.degToRad( device.beta ) : 0; // X'\r\n\r\n            let gamma = device.gamma ? THREE.Math.degToRad( device.gamma ) : 0; // Y''\r\n            let orient = scope.screenOrientation ? THREE.Math.degToRad( scope.screenOrientation ) : 0; // O\r\n\r\n            setObjectQuaternion( scope.object.quaternion, alpha, beta, gamma, orient );\r\n        }\r\n\r\n    };\r\n\r\n    this.dispose = ()=>{\r\n        scope.disconnect();\r\n    };\r\n\r\n    this.iOSOrientationPermission = ()=>{\r\n        if (typeof DeviceOrientationEvent.requestPermission === 'function') {\r\n            DeviceOrientationEvent.requestPermission().then(permissionState => {\r\n                if (permissionState === 'granted') {\r\n\r\n                }\r\n\r\n                console.log(permissionState);\r\n            }).catch(console.error);\r\n        }\r\n    }\r\n\r\n    this.getDirection = ()=>{\r\n        return (typeof scope.deviceOrientation.webkitCompassHeading != \"undefined\") ? scope.deviceOrientation.webkitCompassHeading : scope.deviceOrientation.alpha;\r\n    }\r\n\r\n    this.getDirectionMap = ()=>{\r\n        return (typeof scope.deviceOrientation.webkitCompassHeading != \"undefined\") ? (360 - scope.deviceOrientation.webkitCompassHeading) : scope.deviceOrientation.alpha;\r\n    }\r\n\r\n    this.connect();\r\n};\r\n\r\n\r\nexport default Nav;","/*\r\n    ATON immersive XR module\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\n/**\r\nATON Immersive XR\r\n@namespace XR\r\n*/\r\nlet XR = {};\r\n\r\nXR.STD_TELEP_DURATION = 0.03;\r\n\r\n/**\r\nInitializes XR component\r\n*/\r\nXR.init = ()=>{\r\n    ATON._renderer.xr.enabled = true;\r\n    ATON._renderer.xr.setReferenceSpaceType( 'local' );\r\n    \r\n    if (ATON.device.isMobile) ATON._renderer.xr.setFramebufferScaleFactor(0.5); // WebXR density\r\n\r\n    XR._bPresenting = false;\r\n    XR.currSession = null;\r\n\r\n    XR.rig = new THREE.Group();\r\n    //XR.rig.position.set(0,0,0);\r\n    XR.rig.add( ATON.Nav._camera );\r\n    ATON._rootUI.add(XR.rig);\r\n\r\n    //XR.hmdOri = new THREE.Quaternion();\r\n    //XR.hmdPos = new THREE.Vector3();\r\n\r\n    XR._currPos = XR.rig.position; //new THREE.Vector3();\r\n    XR._fromPos = new THREE.Vector3();\r\n    XR._reqPos  = new THREE.Vector3();\r\n\r\n    XR.gControllers = undefined;\r\n\r\n    XR.controller0pos = new THREE.Vector3();\r\n    XR.controller1pos = new THREE.Vector3();\r\n    XR.controller0dir = new THREE.Vector3();\r\n    XR.controller1dir = new THREE.Vector3();\r\n\r\n    // test\r\n    ATON.on(\"XRselectStart\", (c)=>{\r\n        XR.defaultSelectHandler(c);\r\n    });\r\n    ATON.on(\"XRselectEnd\", (c)=>{\r\n        //ATON.Nav.stop();\r\n        //console.log(\"Sel end \"+c);\r\n    });\r\n};\r\n\r\n/**\r\nReturn true if we are presenting (immersive mode)\r\n@returns {boolean}\r\n*/\r\nXR.isPresenting = ()=>{\r\n    return XR._bPresenting;\r\n};\r\n\r\n\r\nXR.defaultSelectHandler = (c)=>{\r\n\r\n    if (ATON._queryDataScene){\r\n        let P = ATON._queryDataScene.p;\r\n        let N = ATON._queryDataScene.n;\r\n\r\n        //P.y += 0.8; // with 'local': half user height\r\n\r\n        // FIXME: height offset needed for \"local\", fill this automatically\r\n        if (N.y > 0.7) ATON.Nav.requestPOV( new ATON.POV().setPosition(P.x, P.y + ATON.userHeight, P.z), XR.STD_TELEP_DURATION );\r\n    }\r\n    \r\n    //ATON.Nav.setMotionAmount(3.0);\r\n};\r\n\r\nXR._handleUISelection = ()=>{\r\n    if (ATON._hoveredUI === undefined) return false;\r\n\r\n    let H = ATON.getUINode(ATON._hoveredUI);\r\n    if (H && H.onSelect) H.onSelect();\r\n    \r\n    return true;\r\n}\r\n\r\n\r\n/**\r\nSet reference-space location (not the actual HMD camera location).\r\nThis can be used to move around the user, given a proper locomotion technique\r\n@param {THREE.Vector3} p - the new location of reference space\r\n*/\r\nXR.setRefSpaceLocation = (p)=>{\r\n    XR.rig.position.copy(p);\r\n};\r\n\r\n// On XR session started\r\nXR.onSessionStarted = ( session )=>{\r\n\tsession.addEventListener( 'end', XR.onSessionEnded );\r\n\r\n\tATON._renderer.xr.setSession( session );\r\n\tXR.currSession = session;\r\n\r\n    XR.controller0 = ATON._renderer.xr.getController(0);\r\n    XR.controller1 = ATON._renderer.xr.getController(1);\r\n\r\n    //console.log(XR.controller0);\r\n\r\n    // Controller 0\r\n    if (XR.controller0){\r\n        XR.controller0.visible = false;\r\n\r\n        XR.controller0.addEventListener( 'connected', (e) => {\r\n            XR.controller0.gamepad = e.data.gamepad;\r\n            //console.log(XR.controller0.gamepad);\r\n\r\n            let gp = XR.controller0.gamepad;\r\n            if (gp.pose && gp.pose.hasPosition) XR.controller0.visible = true;\r\n        });\r\n\r\n        XR.controller0.addEventListener( 'selectstart', ()=>{\r\n            if (XR._handleUISelection()) return;\r\n\r\n            ATON.fireEvent(\"XRselectStart\", 0);\r\n        });\r\n        XR.controller0.addEventListener( 'selectend', ()=>{ \r\n            ATON.fireEvent(\"XRselectEnd\", 0);\r\n        });\r\n    }\r\n\r\n    // Controller 1\r\n    if (XR.controller1){\r\n        XR.controller1.visible = false;\r\n\r\n        XR.controller1.addEventListener( 'connected', (e) => {\r\n            //XR.controller1.visible = true;\r\n            XR.controller1.gamepad = e.data.gamepad;\r\n            \r\n            let gp = XR.controller1.gamepad;\r\n            if (gp.pose && gp.pose.hasPosition) XR.controller1.visible = true;\r\n        });\r\n\r\n        XR.controller1.addEventListener( 'selectstart',  ()=>{\r\n            //if (XR._handleUISelection()) return;\r\n        \r\n            ATON.fireEvent(\"XRselectStart\", 1);\r\n        });\r\n        XR.controller1.addEventListener( 'selectend',  ()=>{ \r\n            ATON.fireEvent(\"XRselectEnd\", 1);\r\n        });\r\n    }\r\n\r\n    XR.setRefSpaceLocation(ATON.Nav._currPOV.pos);\r\n\r\n    XR._bPresenting = true;\r\n    console.log(\"XR now presenting\");\r\n\r\n    XR.setupControllersUI();\r\n\r\n    ATON.fireEvent(\"XRmode\", true);\r\n\r\n    //console.log(session);\r\n};\r\n\r\n// On XR session terminated\r\nXR.onSessionEnded = ( /*event*/ )=>{\r\n    XR.currSession.removeEventListener( 'end', XR.onSessionEnded );\r\n    XR.currSession = null;\r\n\r\n    XR._bPresenting = false;\r\n    //XR.rig.position.set(0.0,0.0,0.0);\r\n    XR.setRefSpaceLocation( new THREE.Vector3(0,0,0) );\r\n\r\n    ATON.fireEvent(\"XRmode\", false);\r\n\r\n    console.log(\"Quit XR\");\r\n};\r\n\r\n/**\r\nToggle immersive mode\r\n*/\r\nXR.toggle = ()=>{\r\n    if (!ATON.device.isXRsupported) return;\r\n\r\n    // Enter XR\r\n    if (XR.currSession === null){\r\n        let sessionInit = { \r\n            optionalFeatures: [\r\n                \"local\",\r\n                //\"local-floor\" \r\n                ///\"bounded-floor\"\r\n            ]\r\n        };\r\n        navigator.xr.requestSession( 'immersive-vr', sessionInit ).then( XR.onSessionStarted );\r\n        //console.log(navigator.xr);\r\n    }\r\n    // Exit XR\r\n    else {\r\n        XR.currSession.end();\r\n    }\r\n};\r\n\r\nXR.setupControllersUI = ()=>{\r\n    if (XR.gControllers) return; // already set\r\n\r\n    let raytick = 0.003;\r\n    let raylen  = 5.0;\r\n    var geometry = new THREE.CylinderBufferGeometry( raytick,raytick, raylen, 4 );\r\n    geometry.rotateX( -Math.PI / 2 );\r\n    geometry.translate(0,0,-(raylen*0.5));\r\n\r\n    var mesh = new THREE.Mesh( geometry, ATON.MatHub.materials.controllerRay );\r\n\r\n    XR.controller0.add( mesh.clone() );\r\n    //XR.controller1.add( mesh.clone() );\r\n\r\n    XR.gControllers = ATON.createUINode();\r\n    XR.gControllers.add( XR.controller0 );\r\n    XR.gControllers.add( XR.controller1 );\r\n\r\n    XR.controller0.visible = false;\r\n    XR.controller1.visible = false;\r\n\r\n    XR.gControllers.disablePicking();\r\n\r\n    XR.rig.add(XR.gControllers);\r\n};\r\n\r\n// Not working\r\nXR.getControllerSpace = (i)=>{\r\n   if (i === 1) XR.getControllerGrip(1);\r\n   else XR.getControllerGrip(0);\r\n};\r\n\r\n/**\r\nGet controller world location\r\n@param {number} i - the controller ID (0 or 1)\r\n@returns {THREE.Vector3}\r\n*/\r\nXR.getControllerWorldLocation = (i)=>{\r\n    if (i === 1) return XR.controller1pos;\r\n    else return XR.controller0pos;\r\n};\r\n\r\n/**\r\nGet controller world direction\r\n@param {number} i - the controller ID (0 or 1)\r\n@returns {THREE.Vector3}\r\n*/\r\nXR.getControllerWorldDirection = (i)=>{\r\n    if (i === 1) return XR.controller1dir;\r\n    else return XR.controller0dir;\r\n};\r\n\r\nXR.update = ()=>{\r\n    if (XR.controller0.visible){\r\n        XR.controller0.getWorldPosition(XR.controller0pos);\r\n        XR.controller0.getWorldDirection(XR.controller0dir);\r\n        XR.controller0dir.negate();\r\n    }\r\n    if (XR.controller1.visible){\r\n        XR.controller1.getWorldPosition(XR.controller1pos);\r\n        XR.controller1.getWorldDirection(XR.controller1dir);\r\n        XR.controller1dir.negate(); \r\n    }\r\n};\r\n\r\n\r\nexport default XR;","/*\r\n    ATON spatial UI Button class\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\nimport Node from \"./ATON.node.js\";\r\n\r\nexport default class Button extends Node {\r\n    constructor(uiid){\r\n        super(uiid, ATON.NTYPES.UI);\r\n\r\n        this.baseColor   = ATON.MatHub.colors.black;\r\n        this.switchColor = ATON.MatHub.colors.green;\r\n\r\n        this._bSwitched = false;\r\n\r\n        this.container = new ThreeMeshUI.Block({\r\n            width: 0.1,\r\n            height: 0.1,\r\n            padding: 0.01,\r\n            borderRadius: 0.02,\r\n            backgroundColor: this.baseColor,\r\n            backgroundOpacity: 0.5,\r\n\r\n            fontFamily: ATON.PATH_RES+\"fonts/custom-msdf.json\",\r\n            fontTexture: ATON.PATH_RES+\"fonts/custom.png\",\r\n\r\n            justifyContent: 'center',\r\n            alignContent: 'center'\r\n        });\r\n        this.add(this.container);\r\n\r\n        this.uiText = new ThreeMeshUI.Text({ \r\n            content: \"button\",\r\n            fontSize: 0.02,\r\n            fontColor: ATON.MatHub.colors.white\r\n        });\r\n        this.container.add(this.uiText);\r\n\r\n        this._trigger = new THREE.Mesh( \r\n            new THREE.PlaneGeometry( ATON.SUI.STD_BTN_SIZE*0.9, ATON.SUI.STD_BTN_SIZE*0.9, 2 ), \r\n            ATON.MatHub.materials.fullyTransparent\r\n        );\r\n        this._trigger.position.set(0,0,0.002);\r\n\r\n        this.add( this._trigger );\r\n\r\n        this.onHover = ()=>{\r\n            this.container.set({ \r\n                backgroundOpacity: 0.8\r\n            });\r\n        };\r\n        this.onLeave = ()=>{\r\n            this.container.set({ \r\n                backgroundOpacity: 0.5 \r\n            });\r\n        };\r\n\r\n        this.enablePicking();\r\n    }\r\n\r\n    setBaseColor(c){\r\n        this.baseColor = c;\r\n        if (!this._bSwitched) this.container.set({ backgroundColor: this.baseColor });\r\n        return this;\r\n    }\r\n    setSwitchColor(c){\r\n        this.switchColor = c;\r\n        if (this._bSwitched) this.container.set({ backgroundColor: this.switchColor });\r\n        return this;\r\n    }\r\n\r\n    setText(text){\r\n        this.uiText.set({ content: text });\r\n        return this;\r\n    }\r\n\r\n    switch(b){\r\n        this._bSwitched = b;\r\n        if (b) this.container.set({ backgroundColor: this.switchColor });\r\n        else this.container.set({ backgroundColor: this.baseColor });\r\n        \r\n        return this;\r\n    }\r\n\r\n    setIcon(url){\r\n        ATON.Utils.textureLoader.load(url, (texture) => {\r\n\r\n            this._trigger.material = new THREE.MeshStandardMaterial({\r\n                map: texture,\r\n                transparent: true,\r\n                depthWrite: false\r\n            });\r\n/*\r\n            this.container.set({ \r\n                backgroundTexture: texture,\r\n                backgroundOpacity: 1.0,\r\n                backgroundColor: undefined \r\n            });\r\n*/\r\n            this.uiText.position.set(0,-0.035,0);\r\n        });\r\n\r\n        return this;\r\n    }\r\n\r\n}","/*\r\n    ATON spatial UI\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\nimport Button from \"./ATON.sui.button.js\";\r\n\r\n\r\n/**\r\nATON Spatial UI\r\n@namespace SUI\r\n*/\r\nlet SUI = {};\r\n\r\nSUI.STD_BTN_SIZE = 0.1;\r\n\r\nSUI.Button = Button;\r\n\r\n\r\n/**\r\nInitializes Spatial UI module\r\n*/\r\nSUI.init = ()=>{\r\n    SUI.mainSelector   = ATON.createUINode();\r\n    //SUI.secondSelector = ATON.createUINode();\r\n\r\n    //SUI._uiSelGeom = new THREE.SphereGeometry( 0.1, 16, 16 );\r\n    SUI.mainSelector.add( new THREE.Mesh( ATON.Utils.geomUnitSphere, ATON.MatHub.getMaterial(\"selector\") ));\r\n    SUI.mainSelector.disablePicking();\r\n\r\n    SUI.setSelectorRadius(0.05);\r\n    SUI.mainSelector.visible = false;\r\n\r\n    ATON._rootUI.add(SUI.mainSelector);\r\n\r\n    SUI.gPoints = ATON.createUINode();\r\n    ATON._rootUI.add(SUI.gPoints);\r\n\r\n    SUI.buildInfoNode();\r\n    SUI.bShowInfo = true;\r\n\r\n    SUI._labelScale   = ATON.Utils.isMobile()? 1.2 : 1.0;\r\n    SUI._labelScaleVR = 2.0;\r\n\r\n    ATON.on( \"SemanticNodeHover\", (semid)=>{\r\n        if (!SUI.bShowInfo) return;\r\n        SUI.infoNodeText.set({ content: semid });\r\n    });\r\n/*\r\n    ATON.on(\"UINodeHover\", (uiid)=>{\r\n        console.log(\"Hover UI node: \"+uiid);\r\n    });\r\n    ATON.on(\"UINodeLeave\", (uiid)=>{\r\n        console.log(\"Leave UI node: \"+uiid);\r\n    });\r\n*/\r\n};\r\n\r\nSUI.setSelectorRadius = (r)=>{\r\n    SUI.mainSelector.scale.set(r,r,r);\r\n};\r\nSUI.getSelectorRadius = ()=>{\r\n    return SUI.mainSelector.scale.x;\r\n};\r\n\r\nSUI.buildInfoNode = ()=>{\r\n    SUI.infoNode = ATON.createUINode();\r\n    SUI.infoNode.attachToRoot();\r\n\r\n    SUI.infoContainer = new ThreeMeshUI.Block({\r\n        width: 0.15,\r\n        height: 0.05, //0.07,\r\n        padding: 0.01,\r\n        borderRadius: 0.02,\r\n        //backgroundColor: ATON.MatHub.colors.darksem,\r\n        //backgroundOpacity: 0.2,\r\n\r\n        fontFamily: ATON.PATH_RES+\"fonts/custom-msdf.json\", //ATON.PATH_MODS+'three-mesh-ui/examples/assets/Roboto-msdf.json',\r\n        fontTexture: ATON.PATH_RES+\"fonts/custom.png\", //ATON.PATH_MODS+'three-mesh-ui/examples/assets/Roboto-msdf.png',\r\n\r\n        alignContent: 'center', // could be 'center' or 'left'\r\n        justifyContent: 'center', // could be 'center' or 'start'\r\n    });\r\n    SUI.infoNode.add(SUI.infoContainer);\r\n\r\n    SUI.infoNodeText = new ThreeMeshUI.Text({ \r\n        content: \"Info\",\r\n        fontSize: 0.02,\r\n        fontColor: ATON.MatHub.colors.white\r\n    });\r\n    SUI.infoContainer.add(SUI.infoNodeText);\r\n    //SUI.infoNode.scale.set(0.07,0.07,0.07);\r\n};\r\n\r\nSUI.getInfoNode = ()=>{\r\n    return SUI.infoNode;\r\n};\r\n\r\nSUI.createToolbar = (buttonlist, color)=>{\r\n    let T = ATON.createUINode();\r\n\r\n    let num = buttonlist.length;\r\n    let padding = SUI.STD_BTN_SIZE * 0.3;\r\n\r\n    let cont = new ThreeMeshUI.Block({\r\n        width: (SUI.STD_BTN_SIZE * num) + padding,\r\n        height: SUI.STD_BTN_SIZE + padding,\r\n        padding: 0.01,\r\n        borderRadius: 0.02,\r\n        backgroundColor: color? color : ATON.MatHub.colors.black,\r\n        backgroundOpacity: 0.3,\r\n\r\n        fontFamily: ATON.PATH_RES+\"fonts/custom-msdf.json\", //ATON.PATH_MODS+'three-mesh-ui/examples/assets/Roboto-msdf.json',\r\n        fontTexture: ATON.PATH_RES+\"fonts/custom.png\", //ATON.PATH_MODS+'three-mesh-ui/examples/assets/Roboto-msdf.png',\r\n\r\n        alignContent: 'center', // could be 'center' or 'left'\r\n        justifyContent: 'center', // could be 'center' or 'start'\r\n    });\r\n    //cont.position.set(0,0,0);\r\n\r\n    let m = (num*0.5) * SUI.STD_BTN_SIZE;\r\n    m -= (SUI.STD_BTN_SIZE*0.5);\r\n\r\n    for (let i=0; i<num; i++){\r\n        let button = buttonlist[i];\r\n        button.position.set((i*SUI.STD_BTN_SIZE)-m, 0.0, 0.01);\r\n        cont.add(button);\r\n    }\r\n\r\n    T.add(cont);\r\n    return T;\r\n};\r\n\r\n// Main update routine\r\nSUI.update = ()=>{\r\n    if (ATON.Nav.isTransitioning() || ATON._bPauseQuery){\r\n        SUI.infoNode.visible = false;\r\n        return;\r\n    }\r\n\r\n    ThreeMeshUI.update();\r\n\r\n    if (ATON._queryDataScene){\r\n        SUI.mainSelector.visible = true;\r\n        SUI.mainSelector.position.copy(ATON._queryDataScene.p);    \r\n    }\r\n    else {\r\n        SUI.mainSelector.visible = false;\r\n    }\r\n\r\n    // InfoNode (semantics)\r\n    if (ATON._queryDataSem){\r\n\r\n        if (ATON.XR._bPresenting){\r\n            SUI.infoNode.position.copy(ATON.XR.controller0pos); //.lerpVectors(ATON._queryDataSem.p, ATON.XR.controller0pos, 0.8);\r\n            SUI.infoNode.setScale(SUI._labelScaleVR);\r\n        }\r\n        else {\r\n            SUI.infoNode.position.lerpVectors(ATON._queryDataSem.p, ATON.Nav._currPOV.pos, 0.2);\r\n            SUI.infoNode.setScale(ATON._queryDataSem.d * SUI._labelScale);\r\n        }\r\n        SUI.infoNode.orientToCamera();\r\n\r\n        if (SUI.bShowInfo) SUI.infoNode.visible = true;\r\n        SUI.mainSelector.visible = false;\r\n    }\r\n    else {\r\n        SUI.infoNode.visible = false;\r\n    }\r\n\r\n};\r\n\r\nexport default SUI;","/*\r\n    ATON Avatar Class\r\n    used in VRoadcast system\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\nimport Node from \"./ATON.node.js\";\r\n\r\nexport default class Avatar extends Node {\r\n\r\nconstructor(uid){\r\n    super(undefined /*uid*/, ATON.NTYPES.UI);\r\n\r\n    this.userid   = uid;\r\n    this.username = \"anonymous\";\r\n    this.message  = \"...\";\r\n    this.bTalking = false;\r\n\r\n    this._tStateCall = -1.0;\r\n    this._tStateDur  = 0.1;\r\n    this._tProgress  = 0.0;\r\n\r\n    this._currState  = {};\r\n    this._currState.position   = new THREE.Vector3();\r\n    this._currState.quaternion = new THREE.Quaternion();\r\n\r\n    this._tgtState = undefined;\r\n\r\n    //console.log(this);\r\n\r\n    this.realize();\r\n}\r\n\r\ngetAvatarMaterialByUID(uid){\r\n    //if (uid === undefined) return 0;\r\n\r\n    let avaMats = ATON.MatHub.materials.avatars;\r\n    let mi = (uid % avaMats.length); //uid? (uid % avaMats.length) : 0;\r\n    \r\n    return avaMats[mi];\r\n}\r\n\r\nrealize(){\r\n    // build minimal representation\r\n    let g = new THREE.SphereGeometry( 0.2, 16, 16 );\r\n\r\n    this.usermaterial = this.getAvatarMaterialByUID(this.userid);\r\n\r\n    let smesh = new THREE.Mesh( g, this.usermaterial );\r\n\r\n    this.usermeshnode = ATON.createUINode();\r\n    this.usermeshnode.add(smesh);\r\n    this.usermeshnode.setMaterial(this.usermaterial);\r\n\r\n    // CHECK / FIXME: this is to avoid cloning of the same mesh when using same representation for all avatars\r\n    this.usermeshnode.setCloneOnLoadHit(false);\r\n\r\n    // Build Label\r\n    this.userlabelnode = ATON.createUINode();\r\n    this.labelcontainer = new ThreeMeshUI.Block({\r\n        width: 0.7,\r\n        height: 0.25,\r\n        padding: 0.03,\r\n        borderRadius: 0.05,\r\n        backgroundColor: ATON.VRoadcast.ucolorsdark[this.userid % ATON.VRoadcast.ucolorsdark.length],\r\n\r\n        fontFamily: ATON.PATH_RES+\"fonts/custom-msdf.json\", //ATON.PATH_MODS+'three-mesh-ui/examples/assets/Roboto-msdf.json',\r\n        fontTexture: ATON.PATH_RES+\"fonts/custom.png\" //ATON.PATH_MODS+'three-mesh-ui/examples/assets/Roboto-msdf.png',\r\n\r\n        //alignContent: 'right', // could be 'center' or 'left'\r\n        //justifyContent: 'end', // could be 'center' or 'start'\r\n    });\r\n\r\n    this.userlabelnode.position.y = 0.4;\r\n    this.userlabelnode.add(this.labelcontainer);\r\n\r\n    // username text\r\n    this.usernametext = new ThreeMeshUI.Text({ \r\n        content: \"User #\"+this.userid,\r\n        fontSize: 0.09,\r\n        fontColor: ATON.MatHub.colors.white //ATON.VRoadcast.ucolors[this.userid % ATON.VRoadcast.ucolors.length]\r\n    });\r\n    this.usernametext.position.y = 0.0;\r\n\r\n    // message text\r\n    this.usermessagetext = new ThreeMeshUI.Text({ \r\n        content: \"\\nHello World!\",\r\n        fontSize: 0.03,\r\n        fontColor: ATON.MatHub.colors.white\r\n    });\r\n    this.usermessagetext.position.y = -0.03;\r\n\r\n    this.labelcontainer.add(this.usernametext);\r\n    this.labelcontainer.add(this.usermessagetext);\r\n    \r\n    this.add(this.usermeshnode);\r\n    this.add(this.userlabelnode);\r\n};\r\n\r\n// Loads custom avatar representation (3D model)\r\nloadRepresentation(url){\r\n    let A = this;\r\n\r\n    if (A.usermeshnode.children[0] !== undefined){\r\n        A.usermeshnode.remove(A.usermeshnode.children[0]);\r\n    }\r\n\r\n    A.usermeshnode.load(url); //.setMaterial(A.usermaterial);\r\n\r\n    return this;\r\n}\r\n\r\nsetUsername(username){\r\n    this.username = username;\r\n\r\n    this.usernametext.set({ \r\n        content: username\r\n    });\r\n\r\n    return this;\r\n}\r\n\r\nsetMessage(msg){\r\n    this.message = msg;\r\n\r\n    // TODO: check for text length\r\n    this.usermessagetext.set({ \r\n        content: \"\\n\"+msg\r\n    });\r\n\r\n    return this;\r\n}\r\n\r\nrequestStateTransition(S){\r\n    if (this._tStateCall >= 0.0) return; // already requested\r\n\r\n    this._tStateCall = ATON._clock.elapsedTime;\r\n\r\n    this._currState.position.copy(this.position);\r\n    this._currState.quaternion.copy(this.quaternion);\r\n\r\n    this._tgtState = S;\r\n    \r\n    //this._sDistance = this.position.distanceTo(S.position);\r\n}\r\n\r\nhandleStateTransition(){\r\n    if (this._tStateCall < 0.0) return;\r\n\r\n    let D = this._tStateDur; //(this._sDistance * this._tStateDur);\r\n\r\n    if (D <= 0.0) this._tProgress = 1.0;\r\n    else this._tProgress = (ATON._clock.elapsedTime - this._tStateCall) / D;\r\n\r\n    let cs = this._currState;\r\n    let ts = this._tgtState;\r\n\r\n    // End\r\n    if (this._tProgress >= 1.0){\r\n        this._tStateCall = -1.0;\r\n\r\n        this.position.copy(ts.position);\r\n        //this.quaternion.copy(ts.quaternion);\r\n        this.usermeshnode.quaternion.copy(ts.quaternion);\r\n\r\n        return;\r\n    }\r\n\r\n    this.position.lerpVectors(cs.position, ts.position, this._tProgress);\r\n    this.usermeshnode.quaternion.slerp(ts.quaternion, this._tProgress);\r\n    //THREE.Quaternion.slerp( cs.quaternion, ts.quaternion, this.usermeshnode.quaternion, this._tProgress);\r\n}\r\n\r\nupdate(){\r\n    this.handleStateTransition();\r\n\r\n    let cam  = ATON.Nav._camera;\r\n    let eye = ATON.Nav._currPOV.pos;\r\n    if (cam === undefined || eye === undefined) return;\r\n\r\n    //this.userlabelnode.lookAt( eye );\r\n\r\n    //this.userlabelnode.setRotationFromMatrix(cam.matrix); // quaternion.setFromRotationMatrix( cam.matrix );\r\n    //this.userlabelnode.rotation.copy(cam.rotation);\r\n\r\n    this.userlabelnode.orientToCamera(); //quaternion.copy( ATON.Nav._qOri );\r\n\r\n/*\r\n    this.userlabelnode.rotation.y = Math.atan2(\r\n        ( cam.position.x - this.userlabelnode.position.x ),\r\n        ( cam.position.z - this.userlabelnode.position.z )\r\n    );\r\n*/\r\n    //this.userlabelnode.matrix.copy( cam.matrix );\r\n}\r\n\r\n\r\n};","/*\r\n    ATON VRoadcast\r\n    real-time collaborative networking\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\nimport Avatar from \"./ATON.avatar.js\";\r\n\r\n/**\r\nATON VRoadcast component\r\n@namespace VRoadcast\r\n*/\r\nlet VRoadcast = {};\r\n\r\nVRoadcast.USER_STATE_FREQ = 0.25; // sec\r\nVRoadcast.REPLICATED_EVT = \"EREP\";\r\n\r\n// Thresholds state sending\r\nVRoadcast.THRES_STATE_POS = 0.01;\r\nVRoadcast.THRES_STATE_ORI = 0.08; // radians\r\n\r\nVRoadcast.Avatar = Avatar;\r\n\r\n\r\n/**\r\nInitialize the component\r\n*/\r\nVRoadcast.init = ()=>{\r\n    VRoadcast.address = window.location.origin;\r\n\r\n    VRoadcast.initMaterials();\r\n\r\n    VRoadcast.socket = undefined;\r\n    VRoadcast._connected = false;\r\n\r\n    //VRoadcast.sid = \"_SHARED_\";\r\n    VRoadcast.uid = undefined; // my userID (0,1,....)\r\n\r\n    VRoadcast.avatarList = [];\r\n\r\n    VRoadcast.avaGroup = ATON.createUINode(\"avatars\"); // holds all avatars representations\r\n    VRoadcast.avaGroup.attachToRoot();\r\n\r\n    // send own state with given freq\r\n    window.setInterval( VRoadcast.sendState, VRoadcast.USER_STATE_FREQ*1000.0 );\r\n    VRoadcast._lastStateSent = undefined;\r\n\r\n    console.log(\"VRoadcast initialized\");\r\n};\r\n\r\n// Register materials (avatars/users)\r\nVRoadcast.initMaterials = ()=>{\r\n\r\n    VRoadcast.ucolors = [];\r\n    VRoadcast.ucolors.push( new THREE.Color(1,0,0) );\r\n    VRoadcast.ucolors.push( new THREE.Color(1,1,0) );\r\n    VRoadcast.ucolors.push( new THREE.Color(0,1,0) );\r\n    VRoadcast.ucolors.push( new THREE.Color(0,1,1) );\r\n    VRoadcast.ucolors.push( new THREE.Color(0,0,1) );\r\n    VRoadcast.ucolors.push( new THREE.Color(1,0,1) );\r\n\r\n    VRoadcast.ucolorsdark = [];\r\n    VRoadcast.ucolorsdark.push( new THREE.Color(0.2,0.0,0.0) );\r\n    VRoadcast.ucolorsdark.push( new THREE.Color(0.2,0.2,0.0) );\r\n    VRoadcast.ucolorsdark.push( new THREE.Color(0.0,0.2,0.0) );\r\n    VRoadcast.ucolorsdark.push( new THREE.Color(0.0,0.2,0.2) );\r\n    VRoadcast.ucolorsdark.push( new THREE.Color(0.0,0.0,0.2) );\r\n    VRoadcast.ucolorsdark.push( new THREE.Color(0.2,0.0,0.2) );\r\n\r\n    let MM = ATON.MatHub.materials;\r\n    MM.avatars = [];\r\n\r\n    let mat = new THREE.MeshBasicMaterial({\r\n        color: VRoadcast.ucolors[0], \r\n        transparent: true, \r\n        opacity: 0.4, \r\n        depthWrite: false,\r\n        flatShading: true\r\n    });\r\n\r\n    MM.avatars.push(mat);\r\n\r\n    for (let c=1; c<VRoadcast.ucolors.length; c++){\r\n        let M = mat.clone();\r\n        M.color = VRoadcast.ucolors[c];\r\n\r\n        MM.avatars.push(M);\r\n    }\r\n};\r\n\r\n/**\r\nFire a replicated event (network)\r\n@param {string} evtname - the event name\r\n@param {object} data - object containing data to be transmitted with this event\r\n\r\n@example\r\nATON.VRoadcast.fireEvent(\"test\", 42);\r\n*/\r\nVRoadcast.fireEvent = (evtname, data)=>{\r\n    if (!VRoadcast._connected) return;\r\n    let sock = VRoadcast.socket;\r\n\r\n    if (sock) sock.emit(VRoadcast.REPLICATED_EVT, {e: evtname, d: data});\r\n    //else ATON.on(\"VRC_Connected\", ()=>{ sock.on(evtname, onReceive); });\r\n};\r\n\r\n/**\r\nSubscribe to a given network event, through given handler\r\n@param {string} evtname - the event name\r\n@param {function} handler - network event handler (how we handle incoming event)\r\n\r\n@example\r\nATON.VRoadcast.on(\"test\", function(data){ console.log(\"Received: \"+data); });\r\n*/\r\nVRoadcast.on = (evtname, handler)=>{\r\n    if (handler === undefined) return;\r\n\r\n    let evhNetwork = ATON.EventHub.evNetwork;\r\n\r\n    if (evhNetwork[evtname] === undefined) evhNetwork[evtname] = []; // First time (event not registered)\r\n    evhNetwork[evtname].push(handler);\r\n};\r\n\r\n/**\r\nReturn true if VRoadcast is connected to the service\r\n@returns {boolean}\r\n*/\r\nVRoadcast.isConnected = ()=>{\r\n    return VRoadcast._connected;\r\n};\r\n\r\n/**\r\nRequest enter in a given scene\r\n@param {string} sceneid - the scene id (sid)\r\n@example\r\nATON.VRoadcast.requestSceneEnter(\"testscene\");\r\n*/\r\nVRoadcast.requestSceneEnter = (sceneid)=>{\r\n    if (!VRoadcast.socket) return;\r\n    if (sceneid === undefined) sceneid = ATON.SceneHub.currID;\r\n\r\n    if (sceneid === undefined){\r\n        console.log(\"VRC ERROR: current scene ID is undefined\");\r\n        return;\r\n    }\r\n\r\n    VRoadcast.socket.emit(\"SENTER\", sceneid );\r\n};\r\n\r\n/**\r\nConnect to VRoadcast service\r\n@param {string} address - the address of the service (optional). Default is same server where main service is running\r\n@example\r\nATON.VRoadcast.connect();\r\n*/\r\nVRoadcast.connect = (address)=>{\r\n    if (address) VRoadcast.address = address;\r\n\r\n    let opts = {};\r\n\r\n    // Secure connection\r\n    if (window.location.protocol === \"https:\"){\r\n        opts.path = '/svrc/socket.io';\r\n        opts.secure = true;\r\n        opts.rejectUnauthorized = false;\r\n        //opts.transports = ['websocket'], \r\n        //opts.upgrade = false \r\n    }\r\n    else {\r\n        opts.path = '/vrc/socket.io';\r\n    }\r\n\r\n    VRoadcast.socket = io.connect(VRoadcast.address, opts); //, { 'force new connection': true });\r\n\r\n    if (VRoadcast.socket === undefined) return;\r\n    VRoadcast._connected = VRoadcast.socket.connected;\r\n\r\n    VRoadcast._registerSocketHandlers();\r\n};\r\n\r\n\r\nVRoadcast._onConnected = ()=>{\r\n    //\r\n};\r\n\r\nVRoadcast.setUsername = (username)=>{\r\n    VRoadcast._username = username;\r\n    if (VRoadcast.socket === undefined) return;\r\n\r\n    VRoadcast.socket.emit(\"UNAME\", username);\r\n};\r\n\r\n// Handle incoming server msgs\r\nVRoadcast._registerSocketHandlers = ()=>{\r\n\r\n    // We connected to server\r\n    VRoadcast.socket.on('connect', ()=>{\r\n        VRoadcast._connected = true;\r\n\r\n        // Request enter in scene node (room)\r\n        if (ATON.SceneHub.currID !== undefined) VRoadcast.requestSceneEnter();\r\n        \r\n        console.log(\"VRC connected, entering scene: \"+ATON.SceneHub.currID);\r\n        ATON.fireEvent(\"VRC_Connected\");\r\n\r\n        VRoadcast._onConnected();\r\n    });\r\n\r\n    VRoadcast.socket.on('disconnect', ()=>{\r\n        VRoadcast._connected = false;\r\n        VRoadcast.uid = undefined;\r\n\r\n        VRoadcast.avaGroup.hide();\r\n\r\n        console.log(\"VRC disconnected!\");\r\n        ATON.fireEvent(\"VRC_Disconnected\");\r\n    });\r\n\r\n    // Incoming replicated event\r\n    VRoadcast.socket.on(VRoadcast.REPLICATED_EVT, (data)=>{\r\n        let evtname = data.e;\r\n        let d = data.d;\r\n\r\n        let ehList = ATON.EventHub.evNetwork[evtname];\r\n        ATON.EventHub.executeHandlers(ehList, d);\r\n    });\r\n\r\n    VRoadcast.socket.on('ID', (data)=>{\r\n        console.log(\"Your ID is \" + data);\r\n        VRoadcast.uid = data;\r\n\r\n        ATON.fireEvent(\"VRC_IDassigned\", data);\r\n    });\r\n\r\n    VRoadcast.socket.on('UENTER', (data)=>{\r\n        let uid = data;\r\n        //if (uid === VRoadcast.uid) return; // myself\r\n\r\n        console.log(\"User #\" +uid+\" entered the scene\");\r\n\r\n        VRoadcast.touchAvatar(uid);\r\n    });\r\n\r\n    VRoadcast.socket.on('ULEAVE', (data)=>{\r\n        let uid = data;\r\n        \r\n        let A = VRoadcast.avatarList[uid];\r\n        if (A) A.hide();\r\n\r\n        console.log(\"User #\" +uid+\" left the scene\");\r\n    });\r\n\r\n    VRoadcast.socket.on('USTATE', (data)=>{\r\n        let S = VRoadcast.decodeState(data);\r\n\r\n        let uid = S.userid;\r\n        let A = VRoadcast.touchAvatar(uid);\r\n\r\n        //A.position.copy(S.position);\r\n        //A.quaternion.copy(S.quaternion);\r\n        A.requestStateTransition(S);\r\n    });\r\n\r\n    VRoadcast.socket.on('UNAME', (data)=>{\r\n        let uid   = data.uid;\r\n        let uname = data.name;\r\n\r\n        let A = VRoadcast.touchAvatar(uid);\r\n        A.setUsername(uname);\r\n        console.log(\"User #\" +uid+\" changed username to: \"+uname);\r\n    });\r\n};\r\n\r\n// Encode state\r\nVRoadcast.encodeState = (S)=>{\r\n    if (!S) return;\r\n\r\n    let A = new Float32Array(6); // make sufficient room\r\n    A[0] = S.position.x;\r\n    A[1] = S.position.y;\r\n    A[2] = S.position.z;\r\n\r\n    // Convert to byte array, we use last float storage (4 bytes)\r\n    var binData = new Int8Array(A.buffer);\r\n\r\n    binData[16] = (S.quaternion.x * 128.0);\r\n    binData[17] = (S.quaternion.y * 128.0);\r\n    binData[18] = (S.quaternion.z * 128.0);\r\n    binData[19] = (S.quaternion.w * 128.0);\r\n\r\n    binData[20] = S.userid;\r\n\r\n    //binData[21] = parseInt(S.rank);\r\n\r\n    return binData;\r\n}\r\n\r\n// Decode state\r\nVRoadcast.decodeState = (binData)=>{\r\n    let S = {};\r\n    S.userid = binData[20];\r\n\r\n    // First decode quat\r\n    S.quaternion = new THREE.Quaternion(\r\n        binData[16] / 128.0,\r\n        binData[17] / 128.0,\r\n        binData[18] / 128.0,\r\n        binData[19] / 128.0\r\n    );\r\n\r\n    // Now decode floats\r\n    let a8 = new Int8Array(16);\r\n    for (var i=0; i<16; i++) a8[i] = binData[i];\r\n    let A = new Float32Array(a8.buffer);\r\n\r\n    S.position = new THREE.Vector3(A[0],A[1],A[2]);\r\n\r\n    //S.scale = A[3];\r\n\r\n    return S;\r\n}\r\n\r\n\r\n// Update\r\nVRoadcast.update = ()=>{\r\n\r\n    // State interpolation\r\n    for (let a=0; a<VRoadcast.avatarList.length; a++){\r\n        let A = VRoadcast.avatarList[a];\r\n        if (A && A.visible){\r\n            A._tStateDur = VRoadcast.USER_STATE_FREQ;\r\n            A.update();\r\n        }\r\n    }\r\n};\r\n\r\nVRoadcast.sendState = ()=>{\r\n    if (VRoadcast.uid === undefined) return;\r\n    if (!VRoadcast.socket || !VRoadcast._connected) return;\r\n    \r\n    let cpov = ATON.Nav._currPOV;\r\n    if (!cpov) return;\r\n\r\n    //console.log(cpov);\r\n\r\n    let S = {};\r\n    S.position = new THREE.Vector3();\r\n    S.quaternion = new THREE.Quaternion();\r\n\r\n    S.position.copy(cpov.pos);\r\n    S.quaternion.copy(ATON.Nav._qOri);\r\n    S.userid = VRoadcast.uid;\r\n\r\n    // Save bandwidth\r\n    if (VRoadcast._lastStateSent !== undefined){\r\n        let lastPos = VRoadcast._lastStateSent.position;\r\n        let lastOri = VRoadcast._lastStateSent.quaternion;\r\n\r\n        let dPos = lastPos.distanceToSquared(cpov.pos);\r\n        let dOri = lastOri.angleTo(ATON.Nav._qOri);\r\n\r\n        if ( dPos < VRoadcast.THRES_STATE_POS && dOri < VRoadcast.THRES_STATE_ORI) return;\r\n    }\r\n\r\n    // Encode and send\r\n    let binData = VRoadcast.encodeState(S);\r\n    VRoadcast.socket.emit(\"USTATE\", binData/*.buffer*/ );\r\n    VRoadcast._lastStateSent = S;\r\n\r\n    //console.log(\"State sent\");\r\n};\r\n\r\n\r\n// Avatars\r\nVRoadcast.getAvatar = (uid)=>{\r\n    return VRoadcast.avatarList[uid];\r\n};\r\n\r\nVRoadcast.touchAvatar = (uid)=>{\r\n\r\n    // First time\r\n    if (VRoadcast.avatarList[uid] === undefined){\r\n        let A = new VRoadcast.Avatar(uid);\r\n        A.attachTo(VRoadcast.avaGroup);\r\n        \r\n        A.loadRepresentation(ATON.PATH_RES+\"models/vrc/head.gltf\");\r\n        //console.log(VRoadcast.avaGroup);\r\n\r\n        VRoadcast.avatarList[uid] = A;\r\n\r\n        //console.log(VRoadcast.avatarList);\r\n        //console.log(ATON.MatHub.materials.avatars);\r\n        //console.log(A);\r\n    }\r\n\r\n    let A = VRoadcast.avatarList[uid];\r\n    A.show();\r\n\r\n    return A;\r\n}\r\n\r\nVRoadcast.clearAllAvatars = ()=>{\r\n    for (let i in VRoadcast.avatarList){\r\n        let A = VRoadcast.avatarList[i];\r\n        A.hide();\r\n        //A.dispose();\r\n    }\r\n};\r\n\r\nexport default VRoadcast;","/*\r\n    ATON Semantic shapes factory\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\n/**\r\nATON Semantic Factory\r\n@namespace SemFactory\r\n*/\r\nlet SemFactory = {};\r\n\r\nSemFactory.init = ()=>{\r\n    SemFactory.bConvexBuilding = false;\r\n    SemFactory.convexPoints = [];\r\n    //SemFactory.convexMeshes = [];\r\n    SemFactory.convexNode   = undefined; // keeps track of current convex semnode\r\n    SemFactory.currConvexMesh = undefined;\r\n    \r\n    // Temp sem node to hold developing convex mesh\r\n    SemFactory.currSemNode = ATON.createSemanticNode();\r\n    SemFactory.currSemNode.disablePicking();\r\n    SemFactory.currSemNode.attachToRoot();\r\n\r\n    SemFactory.currMaterial = ATON.MatHub.getMaterial(\"semanticShape\"); // current sem material we are using\r\n\r\n    SemFactory._numShapes = 0; // counter of shapes produced\r\n};\r\n\r\n\r\n// Current material\r\nSemFactory.resetMaterial = ()=>{\r\n    SemFactory.currMaterial = ATON.MatHub.getMaterial(\"semanticShape\");\r\n};\r\n\r\nSemFactory.setMaterial = (m)=>{\r\n    if (m === undefined) return;\r\n    SemFactory.currMaterial = m;\r\n};\r\n\r\n\r\n// Convex shapes\r\n// NOTE: if semid exists, add mesh under the same id\r\nSemFactory.addConvexPoint = (/*semid,*/ p)=>{\r\n\r\n    SemFactory.convexPoints.push(p);\r\n    let numPoints = SemFactory.convexPoints.length;\r\n\r\n    // Spatial UI\r\n    let M = new THREE.Mesh( ATON.Utils.geomUnitSphere, ATON.MatHub.getMaterial(\"semanticShapeEdit\"));\r\n    M.position.copy(p);\r\n    M.scale.set(0.01,0.01,0.01);\r\n    ATON.SUI.gPoints.add( M );\r\n\r\n    if (numPoints < 4) return false;\r\n\r\n    // lets build convex shape\r\n    let geom   = new THREE.ConvexBufferGeometry( SemFactory.convexPoints );\r\n    let semesh = new THREE.Mesh( geom, ATON.MatHub.getMaterial(\"semanticShapeEdit\") );\r\n\r\n    //let numMeshes = SemFactory.convexMeshes.length;\r\n\r\n    // First time: create semnode and add it to current sem group\r\n    if (!SemFactory.bConvexBuilding){\r\n        //if (semid === undefined) semid = \"sem\"+SemFactory._numShapes;\r\n\r\n        //SemFactory.convexNode = ATON.getSemanticNode(semid) || ATON.createSemanticNode(semid);\r\n        //SemFactory.convexNode = ATON.createSemanticNode();\r\n        //SemFactory.convexNode.add(semesh);\r\n        SemFactory.currSemNode.add(semesh);\r\n        \r\n        // Store\r\n        semesh.userData._convexPoints = [];\r\n        for (let i=0; i<numPoints; i++){\r\n            //semesh.userData._convexPoints.push( ATON.Utils.setVectorPrecision(SemFactory.convexPoints[i],3) );\r\n\r\n            ATON.Utils.setVectorPrecision(SemFactory.convexPoints[i],4);\r\n            semesh.userData._convexPoints.push(SemFactory.convexPoints[i].x);\r\n            semesh.userData._convexPoints.push(SemFactory.convexPoints[i].y);\r\n            semesh.userData._convexPoints.push(SemFactory.convexPoints[i].z);\r\n        }\r\n\r\n        SemFactory.currConvexMesh = semesh;\r\n        SemFactory.bConvexBuilding = true;\r\n    }\r\n\r\n    // keep updating current semantic geometry\r\n    else {\r\n        let currSemesh = SemFactory.currConvexMesh;\r\n        currSemesh.geometry.dispose();\r\n        currSemesh.geometry = geom;\r\n\r\n        //currSemesh.userData._convexPoints.push( ATON.Utils.setVectorPrecision(p,3) );\r\n\r\n        ATON.Utils.setVectorPrecision(p,4);\r\n        currSemesh.userData._convexPoints.push( p.x );\r\n        currSemesh.userData._convexPoints.push( p.y );\r\n        currSemesh.userData._convexPoints.push( p.z );\r\n    }\r\n\r\n    return true;\r\n};\r\n\r\nSemFactory.stopCurrentConvex = ()=>{\r\n    SemFactory.convexPoints = [];\r\n    SemFactory.bConvexBuilding = false;\r\n\r\n    SemFactory.currSemNode.removeChildren();\r\n    ATON.SUI.gPoints.removeChildren();\r\n};\r\n\r\nSemFactory.getCurrentConvexShape = ()=>{\r\n    return SemFactory.currSemNode\r\n};\r\n\r\nSemFactory.completeConvexShape = (semid)=>{\r\n    SemFactory.convexPoints = [];\r\n    SemFactory.bConvexBuilding = false;\r\n\r\n    //if (SemFactory.convexNode === undefined) return undefined;\r\n    //if (SemFactory.currConvexMesh === undefined) return undefined;\r\n    if (SemFactory.currSemNode === undefined) return;\r\n\r\n    if (semid === undefined) semid = \"sem\"+SemFactory._numShapes;\r\n\r\n    let S = ATON.getSemanticNode(semid) || ATON.createSemanticNode(semid);\r\n    \r\n    S.add(SemFactory.currSemNode.children[0]);\r\n    S.setMaterial( SemFactory.currMaterial );\r\n    S.setDefaultAndHighlightMaterials(SemFactory.currMaterial, ATON.MatHub.materials.semanticShapeHL);\r\n    S.enablePicking();\r\n\r\n    SemFactory.currSemNode.removeChildren();\r\n\r\n/*\r\n    SemFactory.convexNode = ATON.getSemanticNode(semid) || ATON.createSemanticNode(semid);\r\n    SemFactory.convexNode.add(SemFactory.currConvexMesh);\r\n\r\n    SemFactory.convexNode.setMaterial( SemFactory.currMaterial );\r\n    SemFactory.convexNode.setDefaultMaterial(SemFactory.currMaterial);\r\n    SemFactory.convexNode.enablePicking();\r\n*/\r\n    SemFactory._numShapes++;\r\n\r\n    //console.log(SemFactory.convexNode);\r\n    //console.log(SemFactory.convexNode.userData._convexPoints);\r\n\r\n    //return SemFactory.convexNode;\r\n\r\n    // Spatial UI\r\n    ATON.SUI.gPoints.removeChildren();\r\n\r\n    return S;\r\n};\r\n\r\nSemFactory.createConvexShape = (semid, points)=>{\r\n    let geom   = new THREE.ConvexBufferGeometry( points );\r\n    let semesh = new THREE.Mesh( geom, SemFactory.currMaterial );\r\n\r\n    semesh.userData._convexPoints = [];\r\n    for (let i=0; i<points.length; i++){\r\n        let p = points[i];\r\n        ATON.Utils.setVectorPrecision(p,4);\r\n\r\n        semesh.userData._convexPoints.push( p.x );\r\n        semesh.userData._convexPoints.push( p.y );\r\n        semesh.userData._convexPoints.push( p.z );\r\n        }\r\n\r\n    let S = ATON.getOrCreateSemanticNode(semid);\r\n    S.add(semesh);\r\n    S.setDefaultAndHighlightMaterials(SemFactory.currMaterial, ATON.MatHub.materials.semanticShapeHL);\r\n\r\n    S.enablePicking();\r\n\r\n    return S;\r\n};\r\n\r\nSemFactory.addSurfaceConvexPoint = (/*semid,*/ offset)=>{\r\n    if (!ATON._queryDataScene) return false;\r\n\r\n    if (offset === undefined) offset = 0.02;\r\n\r\n    let p = ATON._queryDataScene.p;\r\n    let n = ATON._queryDataScene.n;\r\n    p.x += (n.x * offset);\r\n    p.y += (n.y * offset);\r\n    p.z += (n.z * offset);\r\n\r\n    SemFactory.addConvexPoint(p);\r\n    return p;\r\n};\r\n\r\n\r\n// Spherical semantic shapes\r\n// NOTE: if semid exists, add mesh under the same id\r\nSemFactory.createSphere = (semid, location, radius)=>{\r\n    if (location === undefined) return undefined;\r\n    if (radius === undefined) return undefined;\r\n\r\n/*\r\n    if (ATON.getSemanticNode(semid)){\r\n        console.log(\"ERROR SemFactory: semantic node \"+semid+\" already exists.\");\r\n        return false;\r\n    }\r\n*/\r\n    if (semid === undefined) semid = \"sem\"+SemFactory._numShapes;\r\n\r\n    let S = ATON.getOrCreateSemanticNode(semid);\r\n\r\n    //let g = new THREE.SphereGeometry( 1.0, 16, 16 );\r\n    let M = new THREE.Mesh( ATON.Utils.geomUnitSphere, SemFactory.currMaterial );\r\n    \r\n    // Note: we add multiple spheres to the same <semid> node\r\n    let sphere = new THREE.Object3D();\r\n    sphere.position.copy(location);\r\n    sphere.scale.set(radius, radius, radius);\r\n    sphere.add(M);\r\n\r\n    S.add( sphere );\r\n    S.enablePicking();\r\n    S.setDefaultAndHighlightMaterials(SemFactory.currMaterial, ATON.MatHub.materials.semanticShapeHL);\r\n\r\n    //SemFactory.currParent.add( S );\r\n\r\n    SemFactory._numShapes++;\r\n\r\n    return S;\r\n};\r\n\r\nSemFactory.createSurfaceSphere = (semid)=>{\r\n    if (!ATON._queryDataScene) return undefined;\r\n\r\n    let p = ATON._queryDataScene.p;\r\n    let r = ATON.SUI.getSelectorRadius();\r\n\r\n    return SemFactory.createSphere(semid, p,r);\r\n};\r\n\r\nexport default SemFactory;","/*\r\n    ATON Front-end blueprint\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\n/**\r\nATON Front-end routines\r\n@namespace FE\r\n*/\r\nlet FE = {};\r\n\r\n\r\nFE.realize = ()=>{\r\n    FE.PATH_RES_ICONS = ATON.PATH_RES+\"icons/\";\r\n\r\n    FE._bPopup = false; // showing popup\r\n    FE.bPopupBlurBG = 0.25; // blur 3D content on popup show, 0.0 to disable\r\n\r\n    FE.urlParams = new URLSearchParams(window.location.search);\r\n\r\n    FE._uiSetupBase();\r\n\r\n    ATON.realize();\r\n\r\n    // built-in base front-end parameters\r\n    let ddens = ATON.FE.urlParams.get('d');\r\n    if (ddens && ddens>0.0) ATON.setDefaultPixelDensity(ddens);\r\n};\r\n\r\n// Add basic spinning loader\r\nFE.addBasicLoaderEvents = ()=>{\r\n    ATON.on(\"NodeRequestFired\", ()=>{ $(\"#idLoader\").show(); });\r\n    ATON.on(\"AllNodeRequestsCompleted\", ()=>{ \r\n        $(\"#idLoader\").hide();\r\n        \r\n        //console.log(ATON.Nav.homePOV);\r\n\r\n        if (ATON.Nav.homePOV === undefined) ATON.Nav.computeAndRequestDefaultHome(0.5);\r\n        else {\r\n            ATON.Nav.requestHome(0.5);\r\n        }\r\n    });\r\n};\r\n\r\nFE.loadSceneID = (sid)=>{\r\n    if (sid === undefined) return;\r\n\r\n    let reqstr = ATON.PATH_RESTAPI_SCENE + sid;\r\n    if (ATON.SceneHub._bEdit) reqstr += \",edit\";\r\n\r\n    ATON.SceneHub.load(reqstr, sid);\r\n    console.log(reqstr);\r\n};\r\n\r\n\r\n\r\n// HTML UI\r\n//=======================================\r\n// Sample basic UI setup\r\nFE.uiBasicSetup = ()=>{\r\n    FE.uiAddButton(\"idTopToolbar\",\"fullscreen\", ATON.toggleFullScreen );\r\n    if (ATON.Utils.isConnectionSecure()) FE.uiAddButton(\"idTopToolbar\",\"vr\", ATON.XR.toggle );\r\n\r\n    FE.uiAddButton(\"idBottomToolbar\",\"home\", ()=>{ ATON.Nav.requestHome(0.1); });\r\n};\r\n\r\nFE._uiSetupBase = ()=>{\r\n    $(\"#idPopup\").click( FE.popupClose );\r\n    $(\"#idLoader\").html(\"<img src='\"+ATON.PATH_RES+\"loader.png'>\");\r\n};\r\n\r\n// Add Generic button to a specific div container\r\nFE.uiAddButton = (idcontainer, iconid, onPress)=>{\r\n    let htmlcode = \"<button id='btn-\"+iconid+\"' type='button' class='atonBTN'><img src='\"+FE.PATH_RES_ICONS+iconid+\".png'></button>\";\r\n    $(\"#\"+idcontainer).append(htmlcode);\r\n\r\n    if (onPress) $(\"#btn-\"+iconid).click( onPress );\r\n};\r\n\r\nFE.uiSwitchButton = (iconid, b)=>{\r\n    if (b) $(\"#btn-\"+iconid).addClass(\"switchedON\");\r\n    else $(\"#btn-\"+iconid).removeClass(\"switchedON\");\r\n};\r\n\r\nFE.uiAddButtonHome = (idcontainer)=>{\r\n    FE.uiAddButton(idcontainer, \"home\", ()=>{ \r\n        ATON.Nav.requestHome(0.3);\r\n    });\r\n};\r\n\r\nFE.uiAddButtonFirstPerson = (idcontainer)=>{\r\n    FE.uiAddButton(idcontainer, \"fp\", ()=>{\r\n        if (ATON.Nav.isFirstPerson()){\r\n            ATON.Nav.setOrbitControl();\r\n            FE.uiSwitchButton(\"fp\",false);\r\n        }\r\n        else {\r\n            ATON.Nav.setFirstPersonControl();\r\n            FE.uiSwitchButton(\"fp\",true);\r\n        }\r\n    });\r\n};\r\nFE.uiAddButtonVR = (idcontainer)=>{\r\n    if (!ATON.Utils.isConnectionSecure()) return;\r\n    FE.uiAddButton(idcontainer, \"vr\", ATON.XR.toggle );\r\n};\r\nFE.uiAddButtonDeviceOrientation = (idcontainer)=>{\r\n    if (!ATON.Utils.isConnectionSecure()) return;\r\n    if (!ATON.Utils.isMobile()) return;\r\n\r\n    FE.uiAddButton(idcontainer,\"devori\", ()=>{\r\n        if (ATON.Nav.isDevOri()){\r\n            ATON.Nav.setOrbitControl();\r\n            FE.uiSwitchButton(\"devori\",false);\r\n        }\r\n        else {\r\n            ATON.Nav.setDeviceOrientationControl();\r\n            FE.uiSwitchButton(\"devori\",true);\r\n        }\r\n    });\r\n};\r\n\r\nFE.uiAddButtonQR = (idcontainer)=>{\r\n    FE.uiAddButton(idcontainer,\"qr\", FE.popupQR );\r\n};\r\n\r\nFE.uiAddButtonFullScreen = (idcontainer)=>{\r\n    FE.uiAddButton(idcontainer, \"fullscreen\", ()=>{\r\n        ATON.toggleFullScreen();\r\n        screenfull.isFullscreen? FE.uiSwitchButton(\"fullscreen\",false) : FE.uiSwitchButton(\"fullscreen\",true);\r\n    });\r\n};\r\n\r\nFE.uiAddButtonVRC = (idcontainer)=>{\r\n    FE.uiAddButton(idcontainer, \"vrc\", ()=>{\r\n        if (ATON.VRoadcast.isConnected()){\r\n\r\n        }\r\n        else {\r\n            ATON.VRoadcast.connect();\r\n        }\r\n    });\r\n\r\n    ATON.on(\"VRC_IDassigned\", (uid)=>{\r\n        $(\"#btn-vrc\").addClass(\"atonVRCu\"+(uid%6));\r\n    });\r\n\r\n    ATON.on(\"VRC_Disconnected\", ()=>{\r\n        $(\"#btn-vrc\").attr(\"class\",\"atonBTN\");\r\n    });\r\n};\r\n\r\n// Attach ID validator to given input field\r\nFE.uiAttachInputFilterID = (inputid)=>{\r\n    $(\"#\"+inputid).on('keyup change input', ()=>{\r\n        let value = $(\"#\"+inputid).val();\r\n        let regReplace = new RegExp('[^A-Za-z-_]', 'ig');\r\n        $(\"#\"+inputid).val( value.replace(regReplace, '') );\r\n\r\n    });\r\n};\r\n\r\nFE.setupBasicUISounds = ()=>{\r\n    FE.auLib = {};\r\n\r\n    FE.auLib.switch = new Audio(ATON.PATH_RES+\"audio/switch.wav\");\r\n    FE.auLib.switch.loop = false;\r\n};\r\n\r\n\r\n// Popups\r\n//===================================================================\r\nFE.popupShow = (htmlcontent)=>{\r\n    if (FE._bPopup) return false;\r\n\r\n    $('#idPopup').html(\"<div class='atonPopup' id='idPopupContent'>\"+htmlcontent+\"</div>\");\r\n    $('#idPopupContent').click((e)=>{ e.stopPropagation(); });\r\n    $('#idPopup').fadeIn();\r\n\r\n    FE._bPopup = true;\r\n\r\n    if (FE.bPopupBlurBG > 0.0){\r\n        ATON._renderer.setPixelRatio( FE.bPopupBlurBG );\r\n        ATON._renderer.render( ATON._mainRoot, ATON.Nav._camera );\r\n    }\r\n\r\n    ATON._bPauseQuery = true;\r\n    //ATON.renderPause();\r\n\r\n    $(\"#idTopToolbar\").hide();\r\n    $(\"#idBottomToolbar\").hide();\r\n\r\n    return true;\r\n};\r\n\r\nFE.popupClose = ()=>{\r\n    FE._bPopup = false;\r\n\r\n    //ATON.renderResume();\r\n    if (FE.bPopupBlurBG > 0.0) ATON.resetPixelDensity();\r\n\r\n    $(\"#idPopup\").fadeOut();\r\n    //$(\"#idPopup\").empty();\r\n\r\n    ATON._bPauseQuery = false;\r\n\r\n    $(\"#idTopToolbar\").show();\r\n    $(\"#idBottomToolbar\").show();\r\n\r\n    ATON.focusOn3DView();\r\n};\r\n\r\nFE.popupQR = ()=>{\r\n    let htmlcontent = \"<h1>Share</h1>\";\r\n    htmlcontent += \"<div class='atonQRcontainer' id='idQRcode'></div><br><br>\";\r\n\r\n    if ( !ATON.FE.popupShow(htmlcontent) ) return;\r\n\r\n    let url = window.location.href;\r\n    new QRCode(document.getElementById(\"idQRcode\"), url);\r\n};\r\n\r\n\r\n\r\nexport default FE;","/*!\r\n    @preserve\r\n\r\n \tATON\r\n\r\n \t@author Bruno Fanini\r\n\tVHLab, CNR ISPC\r\n\r\n==================================================================================*/\r\n\r\n'use strict';\r\n\r\n/**\r\n@namespace ATON\r\n*/\r\nlet ATON = {};\r\nwindow.ATON = ATON;\r\n\r\n// Import\r\nimport Node from \"./ATON.node.js\";\r\nimport POV from \"./ATON.pov.js\";\r\n//import Period from \"./ATON.period.js\";\r\nimport LightProbe from \"./ATON.lightprobe.js\";\r\n\r\nimport EventHub from \"./ATON.eventhub.js\";\r\nimport MatHub from \"./ATON.mathub.js\";\r\nimport Utils from \"./ATON.utils.js\";\r\nimport SceneHub from \"./ATON.scenehub.js\";\r\nimport Nav from \"./ATON.nav.js\";\r\nimport XR from \"./ATON.xr.js\";\r\nimport SUI from \"./ATON.sui.js\";\r\nimport VRoadcast from \"./ATON.vroadcast.js\";\r\nimport SemFactory from \"./ATON.semfactory.js\";\r\nimport FE from \"./ATON.fe.js\";\r\n\r\n// Classes\r\nATON.Node       = Node;\r\nATON.POV        = POV;\r\nATON.LightProbe = LightProbe;\r\n//ATON.Period = Period;\r\n\r\n// NS\r\nATON.EventHub   = EventHub;\r\nATON.Utils      = Utils;\r\nATON.SceneHub   = SceneHub;\r\nATON.MatHub     = MatHub;\r\nATON.Nav        = Nav;\r\nATON.XR         = XR;\r\nATON.SUI        = SUI;\r\nATON.VRoadcast  = VRoadcast;\r\nATON.SemFactory = SemFactory;\r\nATON.FE         = FE;\r\n\r\n//==============================================================\r\n// Consts\r\n//==============================================================\r\nATON.STD_UPVECTOR = new THREE.Vector3(0,1,0);\r\nATON.ROOT_NID = \".\"; // reserved node ID for graph-roots\r\n\r\nATON.RAD2DEG = (180.0 / Math.PI);\r\nATON.DEG2RAD = (Math.PI / 180.0);\r\n\r\n// Node types\r\nATON.NTYPES = {};\r\n// 1 and 2 are reserved\r\nATON.NTYPES.SCENE  = 3;\r\nATON.NTYPES.SEM    = 4;\r\nATON.NTYPES.UI     = 5;\r\n\r\n// Folders\r\nATON.PATH_RESTAPI       = window.location.origin + \"/api/\";\r\nATON.PATH_RESTAPI_SCENE = ATON.PATH_RESTAPI + \"scene/\";\r\nATON.PATH_MODS          = window.location.origin + \"/mods/\";\r\nATON.PATH_THREE         = ATON.PATH_MODS + \"three/\";\r\nATON.PATH_DRACO_LIB     = ATON.PATH_THREE+\"examples/js/libs/draco/\";\r\nATON.PATH_BASIS_LIB     = ATON.PATH_THREE+\"examples/js/libs/basis/\";\r\n\r\nATON.PATH_COLLECTION = window.location.origin + \"/collection/\";\r\nATON.PATH_MODELS     = ATON.PATH_COLLECTION + \"models/\";\r\nATON.PATH_SCENES     = window.location.origin + \"/scenes/\";\r\nATON.PATH_RES        = window.location.origin + \"/res/\";\r\n\r\nATON.SHADOWS_NEAR = 0.1;\r\nATON.SHADOWS_FAR  = 50.0;\r\nATON.SHADOWS_SIZE = 15.0;\r\nATON.SHADOWS_RES  = 512; // 512\r\n\r\n/**\r\nSet path collection (3D models, audio, panoramas, ...)\r\n@param {string} path - path\r\n*/\r\nATON.setPathCollection = (path)=>{\r\n    ATON.PATH_COLLECTION = window.location.origin + path;\r\n    ATON.PATH_MODELS     = ATON.PATH_COLLECTION+\"models/\";\r\n};\r\n\r\n/**\r\nSet path scenes\r\n@param {string} path - path\r\n*/\r\nATON.setPathScenes = (path)=>{\r\n    ATON.PATH_SCENES = window.location.origin + path;\r\n};\r\n\r\n\r\nATON._setupBaseListeners = ()=>{\r\n    let el = ATON._renderer.domElement;\r\n\r\n    window.addEventListener( 'resize', ATON._onResize, false );\r\n    el.addEventListener( 'mousemove', ATON._updateScreenMove, false );\r\n    ///el.addEventListener('dblclick', ATON._doubleTap, false);\r\n\r\n    el.addEventListener('mousedown', (e)=>{\r\n        if (e.button === 1) ATON.fireEvent(\"MouseMidButton\");      // middle-click\r\n        if (e.button === 2) ATON.fireEvent(\"MouseRightButton\");    // right-click\r\n    });\r\n\r\n    el.addEventListener( 'wheel', ATON._onMouseWheel, false );\r\n\r\n\r\n    // Touch events\r\n    Hammer(el).on(\"doubletap\", (e)=>{\r\n        ATON.fireEvent(\"DoubleTap\", e.srcEvent);\r\n        //console.log(e.srcEvent);\r\n    });\r\n\r\n    Hammer(el).on(\"tap\", (e)=>{\r\n        ATON._updateScreenMove(e.srcEvent);\r\n        ATON._handleQueries();\r\n\r\n        ATON.fireEvent(\"Tap\", e.srcEvent);\r\n        //console.log(e.srcEvent);\r\n\r\n        // UI selection\r\n        if (ATON._hoveredUI === undefined) return;\r\n        let H = ATON.getUINode(ATON._hoveredUI);\r\n        if (H && H.onSelect) H.onSelect();\r\n    });\r\n\r\n    ATON.on(\"DoubleTap\", (e)=>{\r\n        //console.log(e);\r\n        ATON.defaultDoubleTapFromScreenCoords(e);\r\n    });\r\n\r\n    //ATON.on(\"Tap\", (e)=>{\r\n        //console.log(e);\r\n    //});\r\n\r\n\r\n    // Keyboard\r\n    ATON._kModShift = false;\r\n    ATON._kModCtrl  = false;\r\n\r\n    el.addEventListener(\"keydown\", (e)=>{\r\n        if (e.key === \"Shift\")   ATON._kModShift = true;\r\n        if (e.key === \"Control\") ATON._kModCtrl  = true;\r\n        \r\n        ATON.fireEvent(\"KeyPress\", e.key);\r\n        //ATON.fireEvent(\"KeyPress/\"+e.key);\r\n    }, false);\r\n\r\n    el.addEventListener(\"keyup\", (e)=>{\r\n        if (e.key === \"Shift\")   ATON._kModShift = false;\r\n        if (e.key === \"Control\") ATON._kModCtrl  = false;\r\n\r\n        ATON.fireEvent(\"KeyUp\", e.key);\r\n        //ATON.fireEvent(\"KeyUp/\"+e.key);\r\n    }, false);\r\n\r\n    // Defaults\r\n    ATON.on(\"KeyPress\", (k)=>{\r\n\r\n        if (k==='+'){\r\n            let f = ATON.Nav.getFOV() + 1.0;\r\n            ATON.Nav.setFOV(f);\r\n        }\r\n        if (k==='-'){\r\n            let f = ATON.Nav.getFOV() - 1.0;\r\n            ATON.Nav.setFOV(f);\r\n        }\r\n\r\n        if (k==='PageUp'){\r\n            let r = ATON.SUI.mainSelector.scale.x + 0.02;\r\n            ATON.SUI.setSelectorRadius(r);\r\n        }\r\n        if (k==='PageDown'){\r\n            let r = ATON.SUI.mainSelector.scale.x - 0.02;\r\n            r = Math.max(r, 0.01);\r\n            ATON.SUI.setSelectorRadius(r); \r\n        }\r\n    });\r\n\r\n    // Default semantic highlight\r\n/*\r\n    ATON.on(\"SemanticNodeLeave\", (semid)=>{\r\n        let S = ATON.getSemanticNode(semid);\r\n        if (S) S.restoreDefaultMaterial();\r\n    });\r\n    ATON.on(\"SemanticNodeHover\", (semid)=>{\r\n        let S = ATON.getSemanticNode(semid);\r\n        if (S) S.highlight();\r\n    });\r\n*/          \r\n};\r\n\r\nATON._onResize = ()=>{\r\n    ATON.Nav._camera.aspect = window.innerWidth / window.innerHeight;\r\n    ATON.Nav._camera.updateProjectionMatrix();\r\n\r\n    ATON._renderer.setSize( window.innerWidth, window.innerHeight );\r\n    console.log(\"onResize\");\r\n};\r\n\r\nATON._onMouseWheel = (e)=>{\r\n    e.preventDefault();\r\n\r\n    ATON.fireEvent(\"MouseWheel\", e.deltaY);\r\n};\r\n\r\nATON.focusOn3DView = ()=>{\r\n    ATON._renderer.domElement.focus();\r\n};\r\n\r\n// Default retarget from screen coordinates (eg.: on double tap)\r\nATON.defaultDoubleTapFromScreenCoords = (e)=>{\r\n    ATON._updateScreenMove(e);\r\n    ATON._handleQueryScene();\r\n\r\n    let bFPtrans = ATON.Nav.isFirstPerson() || ATON.Nav.isDevOri();\r\n\r\n    // When first-person mode, teleport (non immersive)\r\n    if (ATON._queryDataScene && bFPtrans){\r\n        let P = ATON._queryDataScene.p;\r\n        let N = ATON._queryDataScene.n;\r\n        \r\n        if (N.y > 0.7){\r\n            let currDir = ATON.Nav._vDir;\r\n            let feye = new THREE.Vector3(P.x, P.y+ATON.userHeight, P.z);\r\n            let ftgt = new THREE.Vector3(\r\n                feye.x + currDir.x,\r\n                feye.y + currDir.y,\r\n                feye.z + currDir.z,\r\n            );\r\n\r\n            let POV = new ATON.POV().setPosition(feye).setTarget(ftgt);\r\n\r\n            ATON.Nav.requestPOV(POV, 0.5);\r\n        }\r\n        return;\r\n    }\r\n\r\n    // In orbit mode, focus on selected SemNode...\r\n    let hsn = ATON.getSemanticNode(ATON._hoveredSemNode);\r\n    if (ATON._queryDataSem && hsn){\r\n        ATON.Nav.requestPOVbyNode( hsn, 0.3);\r\n        return;\r\n    }\r\n    // ...or perform standard retarget on picket surface point\r\n    if (ATON._queryDataScene){\r\n        ATON.Nav.requestRetarget(ATON._queryDataScene.p, /*ATON._queryDataScene.n*/undefined, 0.3);\r\n    }\r\n\r\n    // TODO: go POV in sight if any (panorama only mode)\r\n}\r\n\r\n/**\r\nToggle fullscreen\r\n*/\r\nATON.toggleFullScreen = ()=>{\r\n    screenfull.toggle();\r\n/*\r\n    if (b === undefined){\r\n        screenfull.toggle();\r\n        return;\r\n    }\r\n\r\n    if (b) screenfull.request();\r\n*/\r\n};\r\n\r\n\r\n//============================================================================\r\n// ATON init routines\r\n//============================================================================\r\n/**\r\nMain ATON initialization, it will take care of all sub-components initialization, device profiling and much more\r\n@example\r\nATON.realize()\r\n*/\r\nATON.realize = ()=>{\r\n    console.log(\"realize\");\r\n\r\n    ATON.Utils.init();\r\n    ATON.Utils.profileDevice();\r\n    \r\n    //THREE.Object3D.DefaultUp = new THREE.Vector3(0,0,1); // mismatches WebXR y-up\r\n\r\n    // Timing\r\n    ATON._clock = new THREE.Clock(true);\r\n\r\n    let wglopts = {\r\n        //canvas: document.getElementById(\"idView\"),\r\n        antialias: true, //ATON.device.isMobile? false : true,\r\n        alpha: true,\r\n        //pecision: \"mediump\"\r\n    };\r\n\r\n    ATON._renderer = new THREE.WebGLRenderer(wglopts);\r\n    ATON._renderer.setSize( window.innerWidth, window.innerHeight );\r\n    //console.log(ATON._renderer);\r\n\r\n    ATON._stdpxd = 1.0; //window.devicePixelRatio? (window.devicePixelRatio) : 1.0;\r\n    ATON._renderer.setPixelRatio( ATON._stdpxd );\r\n    console.log(ATON._stdpxd);\r\n    \r\n    ATON._renderer.outputEncoding = THREE.sRGBEncoding;\r\n    //console.log(ATON._renderer.getPixelRatio());\r\n\r\n    ATON._renderer.setAnimationLoop( ATON._onFrame );\r\n    //ATON._bDirtyLP = false;\r\n\r\n    ATON._maxAnisotropy = ATON._renderer.capabilities.getMaxAnisotropy();\r\n    console.log(ATON._renderer.capabilities);\r\n\r\n    THREE.Cache.enabled = true;\r\n\r\n    ATON.userHeight = 1.7;\r\n \r\n    document.body.appendChild( ATON._renderer.domElement );\r\n    //console.log(ATON._renderer);\r\n\r\n    ATON.EventHub.init();\r\n    ATON.MatHub.init();\r\n\r\n    //ATON._setupLoadManager();\r\n    ATON._assetsManager = {};\r\n    ATON._aLoader = new THREE.GLTFLoader(/*ATON._loadManager*/);\r\n    ATON._dracoLoader = new THREE.DRACOLoader();\r\n    ATON._dracoLoader.setDecoderPath( ATON.PATH_DRACO_LIB );\r\n    ATON._aLoader.setDRACOLoader( ATON._dracoLoader );\r\n    ATON._numReqLoad = 0;\r\n\r\n    // Periods (TODO:)\r\n    //ATON.periods = [];\r\n\r\n    ATON._lps = []; // lightprobes\r\n    ATON._bAutoLP = false;\r\n    //ATON._dirtyLPs = true;\r\n\r\n    ATON.initGraphs();\r\n    ATON.SceneHub.init();\r\n\r\n    // Init nav system\r\n    ATON.Nav.init();\r\n\r\n    // XR\r\n    ATON.XR.init();\r\n\r\n    // Spatial UI\r\n    ATON.SUI.init();\r\n\r\n    // VRoadcast\r\n    ATON.VRoadcast.init();\r\n\r\n    // Semantic Factory\r\n    ATON.SemFactory.init();\r\n\r\n    // Query / picked data\r\n    ATON._queryDataScene = undefined;\r\n    ATON._queryDataSem   = undefined;\r\n    ATON._queryDataUI    = undefined;\r\n\r\n    ATON._hoveredSemNode = undefined;\r\n    ATON._hoveredUI      = undefined;\r\n\r\n    ATON._bQuerySemOcclusion = true; // TODO: implement\r\n    ATON._bQueryNormals  = true;\r\n    ATON._bPauseQuery    = false;\r\n\r\n    //window.setInterval(()=>{ if (!ATON._bPauseQuery) ATON._handleQueries(); }, 500 );\r\n\r\n    // Basis (future support)\r\n/*\r\n    ATON._basisLoader = new BasisTextureLoader();\r\n    ATON._basisLoader.setTranscoderPath( ATON.PATH_BASIS_LIB );\r\n    ATON._basisLoader.detectSupport( ATON._renderer );\r\n    \r\n    // Register BasisTextureLoader for .basis extension.\r\n    THREE.DefaultLoadingManager.addHandler( /\\.basis$/, ATON._basisLoader );\r\n*/\r\n\r\n\r\n    // Mouse/Touch screen coords\r\n    ATON._screenPointerCoords = new THREE.Vector2(0.0,0.0);\r\n\r\n    // Ray casters\r\n    ATON._rcScene = new THREE.Raycaster();\r\n    ATON._rcScene.layers.set(ATON.NTYPES.SCENE);\r\n    ATON._rcSemantics = new THREE.Raycaster();\r\n    ATON._rcSemantics.layers.set(ATON.NTYPES.SEM);\r\n    ATON._rcUI = new THREE.Raycaster();\r\n    ATON._rcUI.layers.set(ATON.NTYPES.UI);\r\n\r\n    ATON._registerRCS();\r\n\r\n    ATON._setupBaseListeners();\r\n\r\n    ATON.focusOn3DView();\r\n};\r\n\r\n/**\r\nPause rendering\r\n*/\r\nATON.renderPause = ()=>{\r\n    ATON._renderer.setAnimationLoop( undefined );\r\n};\r\n\r\n/**\r\nResume rendering (if paused)\r\n*/\r\nATON.renderResume = ()=>{\r\n    ATON._renderer.setAnimationLoop( ATON._onFrame );\r\n};\r\n\r\nATON._setupLoadManager = ()=>{\r\n    ATON._loadManager = new THREE.LoadingManager();\r\n    ATON._loadManager.onStart = ( url, itemsLoaded, itemsTotal )=>{\r\n\t    console.log( 'Started loading file: ' + url + '.\\nLoaded ' + itemsLoaded + ' of ' + itemsTotal + ' files.' );\r\n        ATON.fireEvent(\"NodeRequestFired\", url);\r\n    };\r\n\r\n    ATON._loadManager.onLoad = ()=>{\r\n\t    console.log( 'Loading complete!');\r\n        ATON.fireEvent(\"AllNodeRequestsCompleted\");\r\n    };\r\n\r\n    ATON._loadManager.onProgress = ( url, itemsLoaded, itemsTotal )=>{\r\n\t    //console.log( 'Loading file: ' + url + '.\\nLoaded ' + itemsLoaded + ' of ' + itemsTotal + ' files.' );\r\n    };\r\n\r\n    ATON._loadManager.onError = ( url )=>{\r\n\t    console.log( 'There was an error loading ' + url );\r\n    };\r\n};\r\n\r\n/**\r\nSet the default pixel density (standard is 1.0)\r\n@example\r\nATON.setDefaultPixelDensity(0.5)\r\n*/\r\nATON.setDefaultPixelDensity = (d)=>{\r\n    ATON._stdpxd = d;\r\n    ATON._renderer.setPixelRatio( d );\r\n};\r\n\r\n/**\r\nReset pixel density to default\r\n*/\r\nATON.resetPixelDensity = ()=>{\r\n    ATON._renderer.setPixelRatio( ATON._stdpxd );\r\n};\r\n\r\n\r\n//============================================================================\r\n// Scene-graphs\r\n//============================================================================\r\nATON.snodes   = {}; // Visible scene-graph\r\nATON.semnodes = {}; // Semantics graph\r\nATON.uinodes  = {}; // UI graph\r\n\r\n// Visible scene-graph\r\n//=============================================\r\n/**\r\nCreate a scene node (visible scene-graph)\r\n@param {string} id - a string representing unique ID of the node (optional)\r\n@returns {Node}\r\n*/\r\nATON.createSceneNode = (id)=>{\r\n    return new ATON.Node(id, ATON.NTYPES.SCENE);\r\n};\r\n\r\n/**\r\nGet a previously created scene node (visible scene-graph)\r\n@param {string} id - the node ID\r\n@returns {Node}\r\n*/\r\nATON.getSceneNode = (id)=>{ \r\n    if (id === undefined) return undefined;    \r\n    return ATON.snodes[id];\r\n};\r\n\r\n/**\r\nGet or create a scene node (visible scene-graph)\r\n@param {string} id - the node ID\r\n@returns {Node}\r\n*/\r\nATON.getOrCreateSceneNode = (id)=>{\r\n    let N = ATON.getSceneNode(id);\r\n    if (N !== undefined) return N;\r\n    return ATON.createSceneNode(id);\r\n};\r\n\r\n/**\r\nGet root (visible scene-graph)\r\n@returns {Node}\r\n*/\r\nATON.getRootScene = ()=>{\r\n    return ATON._rootVisible;\r\n};\r\n\r\n// Semantics, shape descriptors\r\n//=============================================\r\n\r\n/**\r\nCreate a semantic node\r\n@param {string} id - a string representing unique ID of the node (optional)\r\n@returns {Node}\r\n*/\r\nATON.createSemanticNode = (id)=>{\r\n    return new ATON.Node(id, ATON.NTYPES.SEM);\r\n};\r\n\r\n/**\r\nGet a previously created semantic node\r\n@param {string} id - the node ID\r\n@returns {Node}\r\n*/\r\nATON.getSemanticNode = (id)=>{\r\n    if (id === undefined) return undefined; \r\n    return ATON.semnodes[id];\r\n};\r\n\r\n/**\r\nGet or create a semantic node\r\n@param {string} id - the node ID\r\n@returns {Node}\r\n*/\r\nATON.getOrCreateSemanticNode = (id)=>{\r\n    let S = ATON.getSemanticNode(id);\r\n    if (S !== undefined) return S;\r\n    return ATON.createSemanticNode(id);\r\n};\r\n\r\n/**\r\nGet root of semantic graph\r\n@returns {Node}\r\n*/\r\nATON.getRootSemantics = ()=>{\r\n    return ATON._rootSem;\r\n};\r\n\r\n// UI graph\r\n//=============================================\r\n\r\n/**\r\nCreate a UI node\r\n@param {string} id - a string representing unique ID of the node (optional)\r\n@returns {Node}\r\n*/\r\nATON.createUINode = (id)=>{\r\n    return new ATON.Node(id, ATON.NTYPES.UI);\r\n};\r\n\r\n/**\r\nGet a previously created UI node\r\n@param {string} id - the node ID\r\n@returns {Node}\r\n*/\r\nATON.getUINode = (id)=>{\r\n    if (id === undefined) return undefined; \r\n    return ATON.uinodes[id];\r\n};\r\n\r\n/**\r\nGet root of UI graph\r\n@returns {Node}\r\n*/\r\nATON.getRootUI = ()=>{\r\n    return ATON._rootUI;\r\n};\r\n\r\n// Asset loading routines\r\nATON._assetReqNew = (url)=>{\r\n    ATON._numReqLoad++;\r\n    ATON.fireEvent(\"NodeRequestFired\", url);\r\n};\r\nATON._assetReqComplete = (url)=>{\r\n    ATON.fireEvent(\"NodeRequestCompleted\", url);\r\n    ATON._numReqLoad--;\r\n\r\n    if (ATON._numReqLoad <= 0){\r\n        ATON.fireEvent(\"AllNodeRequestsCompleted\");\r\n\r\n        // Bounds\r\n        let c = ATON._rootVisible.getBound().center;\r\n        let r = ATON._rootVisible.getBound().radius;\r\n\r\n        if (ATON._renderer.shadowMap.enabled){\r\n            ATON._rootVisible.traverse((o) => {\r\n                if (o.isMesh){\r\n                    o.castShadow = true;\r\n                    o.receiveShadow = true;\r\n                }\r\n            });\r\n        }\r\n\r\n        if (ATON._bAutoLP){\r\n            if (ATON._lps[0] === undefined) ATON.addLightProbe( new ATON.LightProbe().setPosition(c).setNear(r) );\r\n            else {\r\n                ATON._lps[0].setPosition(c.x, c.y, c.z).setNear(r);\r\n            }\r\n            console.log(\"Auto LP\");\r\n        }\r\n\r\n        ATON.getRootScene().assignLightProbesByProximity();\r\n\r\n        //ATON._bDirtyLP = true;\r\n\r\n        // FIXME: dirty\r\n        setTimeout( ()=>{\r\n            if (c && ATON._mMainPano) ATON._mMainPano.position.copy(c);\r\n            ATON.updateLightProbes();\r\n        }, 1000);\r\n\r\n    }\r\n};\r\n\r\n\r\nATON.initGraphs = ()=>{\r\n    // Global root\r\n    ATON._mainRoot = new THREE.Scene();\r\n    ATON._mainRoot.background = new THREE.Color( 0.7,0.7,0.7 );\r\n\r\n    // visible scene-graph\r\n    ATON._rootVisibleGlobal = new THREE.Group();\r\n    ATON._mainRoot.add(ATON._rootVisibleGlobal);\r\n\r\n    ATON._rootVisible = ATON.createSceneNode().setAsRoot();\r\n    ATON._rootVisibleGlobal.add(ATON._rootVisible);\r\n\r\n\r\n    // semantics graph\r\n    ATON._rootSem = ATON.createSemanticNode().setAsRoot();\r\n    ATON._mainRoot.add(ATON._rootSem);\r\n\r\n    // UI graph\r\n    ATON._rootUI = ATON.createUINode().setAsRoot();\r\n    ATON._mainRoot.add(ATON._rootUI);\r\n\r\n    // Uniform lighting\r\n    ATON.ambLight = new THREE.AmbientLight( new THREE.Color(1,1,1) /*ATON._mainRoot.background*/ );\r\n    ATON._rootVisibleGlobal.add(ATON.ambLight);\r\n};\r\n\r\nATON.setBackgroundColor = (bg)=>{\r\n    ATON._mainRoot.background = bg;\r\n};\r\n\r\n//==============================================================\r\n// LightProbes\r\n//==============================================================\r\nATON.setNeutralAmbientLight = (a)=>{\r\n    ATON.ambLight.color = new THREE.Color( a,a,a );\r\n};\r\n\r\n/**\r\nAdd a LightProbe to the scene\r\n@param {LightProbe} LP - the light probe being added \r\n*/\r\nATON.addLightProbe = (LP)=>{\r\n    if (ATON._lps.length === 0) ATON.setNeutralAmbientLight(0.1);\r\n\r\n    ATON._lps.push(LP);\r\n};\r\n\r\n/**\r\nUpdate all LightProbes in the scene\r\n*/\r\nATON.updateLightProbes = ()=>{\r\n    if (ATON._lps.length === 0) return;\r\n\r\n    for (let i in ATON._lps) ATON._lps[i].update();\r\n\r\n    // FIXME: indirect LP based on first LP (for now)\r\n    if (ATON._lps[0]){\r\n        if (ATON._indLP) ATON._mainRoot.remove(ATON._indLP);\r\n\r\n        ATON._indLP = THREE.LightProbeGenerator.fromCubeRenderTarget( ATON._renderer, ATON._lps[0]._prevCCtarget );\r\n        ATON._mainRoot.add( ATON._indLP );\r\n    }\r\n\r\n    //for (let i in ATON._lps) ATON._lps[i].update();\r\n\r\n    ATON._rootVisible.traverse((o) => {\r\n        let LP = o.userData.LP;\r\n        if (LP !== undefined && LP instanceof ATON.LightProbe){\r\n            o.material.envMap = LP.getEnvTex();\r\n            //o.material.combine = THREE.AddOperation;\r\n            //o.material.envMapIntensity = 5.0;\r\n        }\r\n    });\r\n\r\n    console.log(\"LPs updated.\");\r\n};\r\n\r\n//==============================================================\r\n// Environment\r\n//==============================================================\r\n\r\n/**\r\nSet the main panorama (360)\r\n@param {string} path - url to equirectangular image\r\n@example\r\nATON.setMainPanorama(\"my/pano.jpg\");\r\n*/\r\nATON.setMainPanorama = (path)=>{\r\n\r\n    let tpano = new THREE.TextureLoader().load(path);\r\n    tpano.encoding = THREE.sRGBEncoding;\r\n\r\n    if (ATON._matMainPano !== undefined){\r\n        ATON._matMainPano.map = tpano;\r\n        //ATON._matMainPano.emissive = tpano;\r\n        return;\r\n    }\r\n\r\n    // First time: create it\r\n    ATON._gMainPano = new THREE.SphereBufferGeometry( 1.0, 30,30 );\r\n\r\n    ATON._matMainPano = new THREE.MeshBasicMaterial({ \r\n        map: tpano, \r\n        //emissive: tpano,\r\n        //castShadow: false,\r\n        //receiveShadow: false,\r\n        fog: false,\r\n        depthTest: false,\r\n        depthWrite: false,\r\n        //depthFunc: THREE.AlwaysDepth,\r\n        //side: THREE.DoubleSide\r\n    });\r\n\r\n    ATON._mMainPano = new THREE.Mesh(ATON._gMainPano, ATON._matMainPano);\r\n    ATON._mMainPano.frustumCulled = false;\r\n    ATON.setMainPanoramaRadius(ATON.Nav.STD_FAR * 0.9);\r\n\r\n    ATON._mMainPano.onAfterRender = ()=>{\r\n        //if (ATON._numReqLoad > 0) return;\r\n        ATON._mMainPano.position.copy(ATON.Nav._currPOV.pos);\r\n    };\r\n\r\n    ATON._rootVisibleGlobal.add(ATON._mMainPano);\r\n};\r\n\r\n\r\nATON.setMainPanoramaRadius = (r)=>{\r\n    if (ATON._gMainPano === undefined) return;\r\n    ATON._gMainPano.scale( -r,r,r );\r\n};\r\n\r\n/**\r\nSet main panorama rotation (radians) around up vector\r\n@param {number} r - rotation\r\n@example\r\nATON.setMainPanoramaRotation(1.5);\r\n*/\r\nATON.setMainPanoramaRotation = (r)=>{\r\n    if (ATON._mMainPano === undefined) return;\r\n    ATON._mMainPano.rotation.set( 0,r,0 );\r\n};\r\n\r\n/**\r\nSet and activate main directional light\r\n@param {THREE.Vector3} v - light direction\r\n@example\r\nATON.setMainLightDirection( new THREE.Vector(0.1,-1.0,0.0) );\r\n*/\r\nATON.setMainLightDirection = (v)=>{\r\n\r\n    let d = v.clone();\r\n\r\n    d.x *= ATON.SHADOWS_FAR * 0.5;\r\n    d.y *= ATON.SHADOWS_FAR * 0.5;\r\n    d.z *= ATON.SHADOWS_FAR * 0.5;\r\n\r\n    if (ATON._dMainL === undefined){\r\n        ATON._dMainL = new THREE.DirectionalLight( new THREE.Color(1,1,1), 1.0 );\r\n        ATON._dMainL.castShadow = false;\r\n\r\n        ATON._dMainLtgt = new THREE.Object3D();\r\n        ATON._rootVisibleGlobal.add(ATON._dMainLtgt);\r\n        ATON._dMainL.target = ATON._dMainLtgt;\r\n\r\n        ATON.setNeutralAmbientLight(0.1);\r\n\r\n        ATON._rootVisibleGlobal.add(ATON._dMainL);\r\n        ATON._dMainLpos = new THREE.Vector3();\r\n    }\r\n\r\n    ATON._dMainLdir = d;\r\n\r\n    ATON._dMainL.position.set(-d.x,-d.y,-d.z);\r\n};\r\n\r\nATON.toggleShadows = (b)=>{\r\n    if (ATON._dMainL === undefined) return;\r\n\r\n    if (b){\r\n        ATON._dMainL.castShadow = true;\r\n        ATON._renderer.shadowMap.enabled = true;\r\n\r\n        //ATON._renderer.shadowMap.type    = THREE.BasicShadowMap;\r\n        //ATON._renderer.shadowMap.type    = THREE.PCFShadowMap;\r\n        ATON._renderer.shadowMap.type    = THREE.PCFSoftShadowMap; // bleeding\r\n        //ATON._renderer.shadowMap.type    = THREE.VSMShadowMap;\r\n\r\n        ATON._dMainL.shadow.mapSize.width  = ATON.SHADOWS_RES;\r\n        ATON._dMainL.shadow.mapSize.height = ATON.SHADOWS_RES;\r\n        ATON._dMainL.shadow.camera.near    = ATON.SHADOWS_NEAR;\r\n        ATON._dMainL.shadow.camera.far     = ATON.SHADOWS_FAR;\r\n        //ATON._dMainL.shadow.bias = 0.0001;\r\n\r\n        ATON._dMainL.shadow.camera.left   = -ATON.SHADOWS_SIZE;\r\n        ATON._dMainL.shadow.camera.right  = ATON.SHADOWS_SIZE;\r\n        ATON._dMainL.shadow.camera.bottom = -ATON.SHADOWS_SIZE;\r\n        ATON._dMainL.shadow.camera.top    = ATON.SHADOWS_SIZE;\r\n\r\n        ATON._rootVisible.traverse((o) => {\r\n            if (o.isMesh){\r\n                o.castShadow = true;\r\n                o.receiveShadow = true;\r\n            }\r\n        });\r\n\r\n        console.log(\"Shadows ON\");\r\n    }\r\n    else {\r\n        ATON._dMainL.castShadow = false;\r\n        ATON._renderer.shadowMap.enabled = false;\r\n        console.log(\"Shadows OFF\");\r\n    }\r\n};\r\n\r\nATON.updateDirShadows = ()=>{\r\n    if (ATON._dMainLdir === undefined) return;\r\n\r\n    \r\n    let p = ATON.Nav.getCurrentEyeLocation();\r\n\r\n    ATON._dMainLpos.x = p.x + (ATON.Nav._vDir.x * ATON.SHADOWS_SIZE);\r\n    ATON._dMainLpos.y = p.y + (ATON.Nav._vDir.y * ATON.SHADOWS_SIZE);\r\n    ATON._dMainLpos.z = p.z + (ATON.Nav._vDir.z * ATON.SHADOWS_SIZE);\r\n\r\n    ATON._dMainL.position.set(\r\n        ATON._dMainLpos.x - ATON._dMainLdir.x, \r\n        ATON._dMainLpos.y - ATON._dMainLdir.y, \r\n        ATON._dMainLpos.z - ATON._dMainLdir.z\r\n    );\r\n    ATON._dMainLtgt.position.copy(ATON._dMainLpos);\r\n};\r\n\r\nATON._updateEnvironment = ()=>{\r\n    if (!ATON._renderer.shadowMap.enabled) return;\r\n    \r\n    ATON.updateDirShadows();\r\n};\r\n\r\n//==============================================================\r\n// Update routines\r\n//==============================================================\r\nATON._onFrame = ()=>{\r\n    // TODO: add pause render\r\n\r\n    let dt = ATON._clock.getDelta();\r\n\r\n    ATON._fps = 1.0 / dt;\r\n    ATON._dt  = dt;\r\n    \r\n    ATON.Nav._bControlChange = false;\r\n    ATON.Nav._controls.update(dt);\r\n\r\n    ATON._renderer.render( ATON._mainRoot, ATON.Nav._camera );\r\n\r\n/*\r\n    if (ATON.Nav._bControlChange){\r\n        }\r\n    else {\r\n        //ATON._handleScreenPick();\r\n        }\r\n*/\r\n\r\n    if (ATON.XR._bPresenting) ATON.XR.update();\r\n\r\n    // Spatial queries\r\n    ATON._handleQueries();\r\n\r\n    // Navigation system\r\n    ATON.Nav.update();\r\n\r\n    // VRoadcast\r\n    ATON.VRoadcast.update();\r\n\r\n    // UI\r\n    ATON.SUI.update();\r\n\r\n    // Environment/lighting\r\n    ATON._updateEnvironment();\r\n\r\n    ATON.fireEvent(\"frame\");\r\n};\r\n\r\nATON._updateScreenMove = (e)=>{\r\n    e.preventDefault();\r\n\r\n    if (ATON.Nav._mode === ATON.Nav.MODE_DEVORI){\r\n        ATON._screenPointerCoords.x = 0.0;\r\n        ATON._screenPointerCoords.y = 0.0;\r\n        return;\r\n    }\r\n\r\n\tATON._screenPointerCoords.x = ( e.clientX / window.innerWidth ) * 2 - 1;\r\n\tATON._screenPointerCoords.y = -( e.clientY / window.innerHeight ) * 2 + 1;\r\n\r\n    //console.log(ATON._screenPointerCoords);\r\n};\r\n\r\n//==============================================================\r\n// Query rountines\r\n//==============================================================\r\nATON._registerRCS = ()=>{\r\n    ATON._rcRR = 0;\r\n    ATON._rcHandlers = [];\r\n\r\n    ATON._rcHandlers.push( ATON._handleQueryScene );\r\n    ATON._rcHandlers.push( ATON._handleQuerySemantics );\r\n    ATON._rcHandlers.push( ATON._handleQueryUI );\r\n};\r\n\r\nATON._handleQueries = ()=>{\r\n    if (ATON._bPauseQuery) return;\r\n    if (ATON._numReqLoad > 0) return;\r\n    if (ATON.Nav.isTransitioning()) return; // do not query during POV transitions\r\n    //if (ATON.device.isMobile || !ATON.XR.isPresenting()) return; \r\n\r\n    // round-robin\r\n    //ATON._rcRR = (ATON._rcRR+1) % 2;\r\n    //ATON._rcHandlers[ATON._rcRR]();\r\n\r\n    ATON._handleQueryScene();\r\n    ATON._handleQuerySemantics();\r\n    ATON._handleQueryUI();\r\n};\r\n\r\n// Ray casting visible scenegraph\r\nATON._handleQueryScene = ()=>{\r\n    if (ATON.XR.isPresenting()){\r\n        ATON._rcScene.set( ATON.XR.getControllerWorldLocation(0), ATON.XR.getControllerWorldDirection(0) );\r\n    }\r\n    else \r\n        ATON._rcScene.setFromCamera( ATON._screenPointerCoords, ATON.Nav._camera );\r\n\r\n    ATON._hitsScene = [];\r\n    //ATON._rcScene.intersectObjects( ATON._rootVisible.children, true, ATON._hitsScene );\r\n    ATON._rcScene.intersectObjects( ATON._mainRoot.children, true, ATON._hitsScene );\r\n\r\n    //ATON._hitsOperator(ATON._hits);\r\n\r\n    // Process hits\r\n    let hitsnum = ATON._hitsScene.length;\r\n    if (hitsnum <= 0){\r\n        ATON._queryDataScene = undefined;\r\n        return;\r\n    }\r\n\r\n    let h = ATON._hitsScene[0];\r\n\r\n    ATON._queryDataScene = {};\r\n    ATON._queryDataScene.p = h.point;\r\n    ATON._queryDataScene.d = h.distance;\r\n    ATON._queryDataScene.o = h.object;\r\n    \r\n    //console.log(ATON._queryDataScene.o);\r\n\r\n    // Normals\r\n    if (!ATON._bQueryNormals) return;\r\n    if (h.face === null) return;\r\n    if (h.face.normal === undefined) return;\r\n\r\n    ATON._queryDataScene.matrixWorld = new THREE.Matrix3().getNormalMatrix( h.object.matrixWorld );\r\n    ATON._queryDataScene.n = h.face.normal.clone().applyMatrix3( ATON._queryDataScene.matrixWorld ).normalize();\r\n};\r\n\r\n/**\r\nGet location of current queried point (if any) on visible scene.\r\nIf no point is queried, return undefined\r\n@returns {THREE.Vector3}\r\n@example\r\nlet p = ATON.getSceneQueriedPoint()\r\n*/\r\nATON.getSceneQueriedPoint = ()=>{\r\n    if (ATON._queryDataScene === undefined) return undefined;\r\n    return ATON._queryDataScene.p;\r\n};\r\n\r\n/**\r\nGet distance to queried location (if any) on visible scene.\r\nIf no point is queried, return undefined\r\n@returns {number}\r\n@example\r\nlet d = ATON.getSceneQueriedDistance()\r\n*/\r\nATON.getSceneQueriedDistance = ()=>{\r\n    if (ATON._queryDataScene === undefined) return undefined;\r\n    return ATON._queryDataScene.d;\r\n};\r\n\r\n/**\r\nGet queried location normal (if any) on visible scene.\r\nIf no point is queried, return undefined\r\n@returns {THREE.Vector3}\r\n@example\r\nlet n = ATON.getSceneQueriedNormal()\r\n*/\r\nATON.getSceneQueriedNormal = ()=>{\r\n    if (ATON._queryDataScene === undefined) return undefined;\r\n    return ATON._queryDataScene.n;\r\n};\r\n\r\n\r\n// Ray casting semantic-graph\r\nATON._handleQuerySemantics = ()=>{\r\n    if (ATON.XR.isPresenting()){\r\n        ATON._rcSemantics.set( ATON.XR.getControllerWorldLocation(0), ATON.XR.getControllerWorldDirection(0) );\r\n    }\r\n    else \r\n        ATON._rcSemantics.setFromCamera( ATON._screenPointerCoords, ATON.Nav._camera );\r\n\r\n    ATON._hitsSem = [];\r\n    ATON._rcSemantics.intersectObjects( ATON._mainRoot.children, true, ATON._hitsSem );\r\n\r\n    // Process hits\r\n    let hitsnum = ATON._hitsSem.length;\r\n    if (hitsnum <= 0){\r\n        ATON._queryDataSem = undefined;\r\n\r\n        if (ATON._hoveredSemNode){\r\n            ATON.fireEvent(\"SemanticNodeLeave\", ATON._hoveredSemNode);\r\n            let S = ATON.getSemanticNode(ATON._hoveredSemNode);\r\n            if (S && S.onLeave) S.onLeave();\r\n        }\r\n        \r\n        ATON._hoveredSemNode = undefined;\r\n        return;\r\n    }\r\n\r\n    let h = ATON._hitsSem[0];\r\n\r\n    // Occlusion\r\n    if (ATON._bQuerySemOcclusion && ATON._queryDataScene){\r\n        if (ATON._queryDataScene.d < h.distance){\r\n\r\n            ATON._queryDataSem = undefined;\r\n\r\n            if (ATON._hoveredSemNode){\r\n                ATON.fireEvent(\"SemanticNodeLeave\", ATON._hoveredSemNode);\r\n                let S = ATON.getSemanticNode(ATON._hoveredSemNode);\r\n                if (S && S.onLeave) S.onLeave();\r\n            }\r\n\r\n            ATON._hoveredSemNode = undefined;\r\n            return;\r\n        }\r\n    }\r\n\r\n    ATON._queryDataSem = {};\r\n    ATON._queryDataSem.p = h.point;\r\n    ATON._queryDataSem.d = h.distance;\r\n    ATON._queryDataSem.o = h.object;\r\n    ATON._queryDataSem.list = []; // holds sem-nodes parental list\r\n\r\n    // traverse parents\r\n    let L = ATON._queryDataSem.list;\r\n    let sp = h.object.parent;\r\n    while (sp){\r\n        if (sp.nid && sp.nid !== ATON.ROOT_NID) L.push(sp.nid);\r\n        sp = sp.parent;\r\n    }\r\n\r\n    let hsn = L[0];\r\n    if (hsn){\r\n        if (ATON._hoveredSemNode !== hsn){\r\n            if (ATON._hoveredSemNode){\r\n                ATON.fireEvent(\"SemanticNodeLeave\", ATON._hoveredSemNode);\r\n                let S = ATON.getSemanticNode(ATON._hoveredSemNode);\r\n                if (S && S.onLeave) S.onLeave();\r\n            }\r\n\r\n            ATON._hoveredSemNode = hsn;\r\n            ATON.fireEvent(\"SemanticNodeHover\", hsn);\r\n            let S = ATON.getSemanticNode(hsn);\r\n            if (S && S.onHover) S.onHover();\r\n        }\r\n    }\r\n\r\n    //console.log(L);\r\n};\r\n\r\nATON._handleQueryUI = ()=>{\r\n    if (ATON.XR.isPresenting()){\r\n        ATON._rcUI.set( ATON.XR.getControllerWorldLocation(0), ATON.XR.getControllerWorldDirection(0) );\r\n    }\r\n    else \r\n        ATON._rcUI.setFromCamera( ATON._screenPointerCoords, ATON.Nav._camera );\r\n\r\n    ATON._hitsUI = [];\r\n    ATON._rcUI.intersectObjects( ATON._mainRoot.children, true, ATON._hitsUI );\r\n\r\n    // Process hits\r\n    let hitsnum = ATON._hitsUI.length;\r\n    if (hitsnum <= 0){\r\n        ATON._queryDataUI = undefined;\r\n\r\n        if (ATON._hoveredUI){\r\n            ATON.fireEvent(\"UINodeLeave\", ATON._hoveredUI);\r\n            let S = ATON.getUINode(ATON._hoveredUI);\r\n            if (S && S.onLeave) S.onLeave();\r\n        }\r\n        \r\n        ATON._hoveredUI = undefined;\r\n        return;\r\n    }\r\n\r\n    let h = ATON._hitsUI[0];\r\n\r\n    // Occlusion\r\n    if (ATON._queryDataScene){\r\n        if (ATON._queryDataScene.d < h.distance){\r\n\r\n            ATON._queryDataUI = undefined;\r\n\r\n            if (ATON._hoveredUI){\r\n                ATON.fireEvent(\"SemanticNodeLeave\", ATON._hoveredUI);\r\n                let S = ATON.getUINode(ATON._hoveredUI);\r\n                if (S && S.onLeave) S.onLeave();\r\n            }\r\n\r\n            ATON._hoveredUI = undefined;\r\n            return;\r\n        }\r\n    }\r\n\r\n    ATON._queryDataUI = {};\r\n    ATON._queryDataUI.p = h.point;\r\n    ATON._queryDataUI.d = h.distance;\r\n    ATON._queryDataUI.o = h.object;\r\n    ATON._queryDataUI.list = []; // holds ui-nodes parental list\r\n\r\n    // traverse parents\r\n    let L = ATON._queryDataUI.list;\r\n    let sp = h.object.parent;\r\n    while (sp){\r\n        if (sp.nid && sp.nid !== ATON.ROOT_NID) L.push(sp.nid);\r\n        sp = sp.parent;\r\n    }\r\n\r\n    let hui = L[0];\r\n    if (hui){\r\n        if (ATON._hoveredUI !== hui){\r\n            if (ATON._hoveredUI){\r\n                ATON.fireEvent(\"UINodeLeave\", ATON._hoveredUI);\r\n                let S = ATON.getUINode(ATON._hoveredUI);\r\n                if (S && S.onLeave) S.onLeave();\r\n            }\r\n\r\n            ATON._hoveredUI = hui;\r\n            ATON.fireEvent(\"UINodeHover\", hui);\r\n            let S = ATON.getUINode(hui);\r\n            if (S && S.onHover) S.onHover();\r\n        }\r\n    }\r\n};\r\n\r\n\r\nexport default ATON;\r\n\r\n\r\n"]}