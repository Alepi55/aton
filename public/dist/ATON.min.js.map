{"version":3,"sources":["ATON.node.js","ATON.pov.js","ATON.lightprobe.js","ATON.eventhub.js","ATON.mathub.js","ATON.utils.js","ATON.scenehub.js","ATON.nav.js","ATON.xr.js","ATON.sui.button.js","ATON.sui.js","ATON.avatar.js","ATON.vroadcast.js","ATON.semfactory.js","ATON.fe.js","ATON.js"],"names":["Node","THREE","Group","id","type","traverse","o","isMesh","geometry","LP","userData","undefined","update","material","envMap","getEnvTex","ATON","NTYPES","SCENE","bPickable","_rootG","_rootVisible","_nodes","snodes","SEM","_rootSem","semnodes","UI","_rootUI","uinodes","as","kwords","_bCloneOnLoadHit","onHover","onLeave","onSelect","ROOT_NID","nid","name","b","kw","push","visible","layers","disable","enable","hide","show","M","cMat","matSTD","matHL","setMaterial","f","opacity","envtex","Utils","assignLightProbeToMesh","c","Vector3","cLP","Box3","setFromObject","getCenter","mdist","i","_lps","d","distanceToSquared","pos","C","clone","p","parent","removeChild","dispose","remove","num","children","length","node","N","add","bb","bs","Sphere","getBoundingSphere","x","y","z","position","copy","set","sx","sy","sz","scale","rx","ry","rz","rotation","quaternion","Nav","_qOri","url","onComplete","_assetsManager","then","console","log","_assetReqNew","P","Promise","resolve","reject","_aLoader","load","data","model","scene","modelVisitor","_assetReqComplete","err","filename","exportNode","h","POV","povlist","target","up","STD_UPVECTOR","fov","STD_FOV","nextPOV","prevPOV","kwarray","pov","LightProbe","res","near","far","_res","_near","_far","STD_FAR","_envtex","_prevCCtarget","_pmremGenerator","PMREMGenerator","_renderer","CCtarget","WebGLCubeRenderTarget","format","RGBEFormat","generateMipmaps","minFilter","LinearMipmapLinearFilter","encoding","sRGBEncoding","CC","CubeCamera","_rootVisibleGlobal","texture","EventHub","evLocal","evNetwork","on","fireEvent","clearEventHandlers","evtname","ehList","handler","handlerLocal","handlerNetwork","evhLocal","VRoadcast","bReplicate","executeHandlers","MatHub","materials","colors","addDefaults","_loader","MaterialLoader","white","Color","black","green","yellow","red","blue","orange","sem","darksem","fullyTransparent","MeshBasicMaterial","transparent","depthWrite","selector","color","flatShading","controllerRay","semanticShape","semanticShapeHL","semanticShapeEdit","mat","jsonfile","addMaterial","device","geomUnitSphere","SphereBufferGeometry","exporter","GLTFExporter","_dlink","document","createElement","style","display","body","appendChild","textureLoader","TextureLoader","window","isSecureContext","isMobile","test","navigator","userAgent","substr","isXRsupported","xr","isSessionSupported","filepath","lastIndexOf","toLowerCase","index","substring","parentNode","computeBoundsTree","map","anisotropy","_maxAnisotropy","magFilter","LinearFilter","v","prec","parseFloat","toPrecision","blob","href","URL","createObjectURL","download","click","str","downloadBlob","Blob","jsonobj","downloadText","JSON","stringify","buffer","ext","getFileExtension","bBin","opts","binary","parse","output","ArrayBuffer","downloadArrayBuffer","downloadJSONobj","mesh","noLP","g","BoxBufferGeometry","MeshStandardMaterial","PATH_RES","tex","createSceneNode","Mesh","enablePicking","metalness","metalnessMap","roughnessMap","normalMap","dx","dz","PlaneBufferGeometry","rotateX","Math","PI","SceneHub","currID","currData","_bEdit","_bLoading","initBaseParsers","reqpath","sid","oncomplete","$","getJSON","parseScene","sobj","k","_jsonParsers","getSemanticNode","getSceneNode","child","nodes","edges","n","semid","S","SL","s","sphere","CL","semesh","_convexPoints","viewpoints","povs","setHomePOV","setPosition","setTarget","setFOV","setKeywords","keywords","scenegraph","sg","G","getOrCreateSceneNode","removeChildren","urls","Array","isArray","forEach","u","PATH_COLLECTION","attachTo","toYup","setYup","transform","setRotation","setScale","parid","childid","semanticgraph","getOrCreateSemanticNode","createSemanticNode","spheres","SemFactory","createSphere","convexshapes","points","createConvexShape","parser","patch","mode","MODE_ADD","O","MODE_DEL","jstr","ajax","PATH_RESTAPI","contentType","dataType","success","r","COSINOIDAL_DIST","cos","POVtransitionDuration","STD_POV_TRANS_DURATION","init","_mode","setOrbitControl","_currPOV","_fromPOV","_reqPOV","homePOV","_tPOVcall","_tPOVprogress","_vDir","Quaternion","_motionAmt","_motionDir","getCurrentEyeLocation","isTransitioning","isOrbit","MODE_ORBIT","isFirstPerson","MODE_FP","isDevOri","MODE_DEVORI","XR","isPresenting","_cOrbit","_camOrbit","PerspectiveCamera","innerWidth","innerHeight","STD_NEAR","enableAll","OrbitControls","domElement","rotateSpeed","STD_ROT_SPEED_ORBIT","enablePan","enableDamping","dampingFactor","screenSpacePanning","enableZoom","minDistance","maxDistance","addEventListener","_bControlChange","_controls","_camera","syncCurrCamera","setFirstPersonControl","_cFirstPerson","_camFP","STD_ROT_SPEED_FP","setDeviceOrientationControl","_screenPointerCoords","_cDevOri","_camDevOri","DeviceOrientationControls","alphaOffset","setMotionAmount","setMotionDirection","stop","cam","updateProjectionMatrix","getFOV","syncCurrPOV","getCamera","getWorldPosition","getWorldQuaternion","getWorldDirection","ctrl","handlePOV","handleXRtransition","handlePOVtransition","handleMotion","controller0","negate","fv","multiplyScalar","_dt","_clock","elapsedTime","lerpVectors","MathUtils","lerp","_currPos","_fromPos","_reqPos","tgt","subVectors","normalize","FP_EPS","requestPOV","duration","requestPOVbyBound","T","E","center","radius","requestPOVbyNode","getBound","requestRetarget","point","normal","distanceTo","computeDefaultHome","dv","sceneBS","getRootScene","eye","computeAndRequestDefaultHome","requestHome","object","scope","reorder","enabled","deviceOrientation","screenOrientation","absolute","alphaOffsetDevice","alphaOffsetScreen","onDeviceOrientationChangeEvent","zee","euler","q0","q1","event","onDeviceOrientationAbsoluteChangeEvent","onScreenOrientationChangeEvent","orientation","setObjectQuaternion","Euler","sqrt","alpha","beta","gamma","orient","setFromEuler","multiply","setFromAxisAngle","connect","disconnect","removeEventListener","getDirection","degToRad","iOSOrientationPermission","DeviceOrientationEvent","requestPermission","permissionState","catch","error","webkitCompassHeading","getDirectionMap","_bPresenting","setReferenceSpaceType","setFramebufferScaleFactor","currSession","rig","gControllers","controller0pos","controller1pos","controller0dir","controller1dir","defaultSelectHandler","_queryDataScene","userHeight","STD_TELEP_DURATION","_hoveredUI","H","getUINode","session","onSessionEnded","setSession","getController","controller1","e","gamepad","_handleUISelection","setRefSpaceLocation","setupControllersUI","requestSession","optionalFeatures","onSessionStarted","end","CylinderBufferGeometry","translate","createUINode","disablePicking","getControllerGrip","Button","uiid","baseColor","switchColor","_bSwitched","container","ThreeMeshUI","Block","width","height","padding","borderRadius","backgroundColor","backgroundOpacity","fontFamily","fontTexture","justifyContent","alignContent","uiText","Text","content","fontSize","fontColor","_trigger","PlaneGeometry","SUI","STD_BTN_SIZE","text","mainSelector","getMaterial","setSelectorRadius","gPoints","buildInfoNode","bShowInfo","_labelScale","_labelScaleVR","infoNodeText","getSelectorRadius","infoNode","attachToRoot","infoContainer","getInfoNode","createToolbar","buttonlist","cont","m","button","_queryDataSem","orientToCamera","Avatar","uid","userid","username","message","bTalking","_tStateCall","_tStateDur","_tProgress","_currState","_tgtState","realize","avaMats","avatars","SphereGeometry","usermaterial","getAvatarMaterialByUID","smesh","usermeshnode","setCloneOnLoadHit","userlabelnode","labelcontainer","ucolorsdark","usernametext","usermessagetext","A","msg","D","cs","ts","slerp","handleStateTransition","address","location","origin","initMaterials","socket","_connected","avatarList","avaGroup","setInterval","sendState","USER_STATE_FREQ","_lastStateSent","ucolors","MM","sock","emit","REPLICATED_EVT","evhNetwork","isConnected","requestSceneEnter","sceneid","protocol","path","secure","rejectUnauthorized","io","connected","_registerSocketHandlers","_onConnected","setUsername","_username","touchAvatar","decodeState","requestStateTransition","uname","encodeState","Float32Array","binData","Int8Array","w","a8","a","cpov","lastPos","lastOri","dPos","dOri","angleTo","THRES_STATE_POS","THRES_STATE_ORI","getAvatar","loadRepresentation","clearAllAvatars","bConvexBuilding","convexPoints","convexNode","currConvexMesh","currSemNode","currMaterial","_numShapes","numPoints","geom","ConvexBufferGeometry","currSemesh","setVectorPrecision","setDefaultAndHighlightMaterials","offset","addConvexPoint","Object3D","FE","PATH_RES_ICONS","_bPopup","bPopupBlurBG","urlParams","URLSearchParams","search","_uiSetupBase","reqstr","PATH_RESTAPI_SCENE","uiAddButton","toggleFullScreen","isConnectionSecure","toggle","popupClose","html","idcontainer","iconid","onPress","htmlcode","append","popupQR","inputid","value","val","regReplace","RegExp","replace","auLib","switch","Audio","loop","htmlcontent","stopPropagation","fadeIn","setPixelRatio","render","_mainRoot","_bPauseQuery","renderPause","renderResume","resetPixelDensity","fadeOut","focusOn3DView","popupShow","QRCode","getElementById","RAD2DEG","DEG2RAD","PATH_MODS","PATH_THREE","PATH_DRACO_LIB","PATH_BASIS_LIB","PATH_MODELS","PATH_SCENES","setPathCollection","setPathScenes","_setupBaseListeners","el","_onResize","_updateScreenMove","_onMouseWheel","Hammer","srcEvent","_handleQueries","defaultDoubleTapFromScreenCoords","_kModShift","_kModCtrl","key","max","restoreDefaultMaterial","highlight","aspect","setSize","preventDefault","deltaY","focus","_handleQueryScene","bFPtrans","currDir","feye","ftgt","hsn","_hoveredSemNode","screenfull","request","profileDevice","Clock","WebGLRenderer","antialias","_stdpxd","outputEncoding","setAnimationLoop","_onFrame","capabilities","Cache","GLTFLoader","_dracoLoader","DRACOLoader","setDecoderPath","setDRACOLoader","_numReqLoad","initGraphs","_queryDataUI","_bQuerySemOcclusion","_bQueryNormals","Vector2","_rcScene","Raycaster","_rcSemantics","_rcUI","_registerRCS","_setupLoadManager","_loadManager","LoadingManager","onStart","itemsLoaded","itemsTotal","onLoad","onProgress","onError","setDefaultPixelDensity","getRootSemantics","getRootUI","setTimeout","_mMainPano","updateLightProbes","Scene","background","setAsRoot","ambLight","AmbientLight","setBackgroundColor","bg","addLightProbe","_indLP","LightProbeGenerator","fromCubeRenderTarget","setMainPanorama","tpano","_matMainPano","_gMainPano","setMainPanoramaRadius","fog","depthTest","frustumCulled","onAfterRender","dt","getDelta","_fps","clientX","clientY","_rcRR","_rcHandlers","_handleQuerySemantics","_handleQueryUI","hitsnum","getControllerWorldLocation","getControllerWorldDirection","setFromCamera","_hitsScene","intersectObjects","distance","face","matrixWorld","Matrix3","getNormalMatrix","applyMatrix3","getSceneQueriedPoint","getSceneQueriedDistance","getSceneQueriedNormal","_hitsSem","list","sp","L","_hitsUI","hui"],"mappings":"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","file":"ATON.min.js","sourceRoot":"..\\src","sourcesContent":["/*\r\n    ATON Node Class\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n//import Period from \"./ATON.period.js\";\r\n\r\n\r\n/**\r\nClass representing an ATON node\r\nConstructor allows to create different types (Scene nodes, semantic nodes and UI nodes)\r\n@class Node\r\n@example \r\nnew ATON.Node(\"someID\")\r\n*/\r\nclass Node extends THREE.Group {\r\n\r\nconstructor(id, type){\r\n    super();\r\n\r\n    this.type = type? type : ATON.NTYPES.SCENE;\r\n    \r\n    this.bPickable = true;\r\n\r\n    if (this.type === ATON.NTYPES.SCENE){\r\n        this._rootG = ATON._rootVisible;\r\n        this._nodes = ATON.snodes;\r\n        //this.period = undefined; // TODO: assign period object (read-only, centralized) - NOT USED FOR NOW\r\n    }\r\n    if (this.type === ATON.NTYPES.SEM){\r\n        this._rootG = ATON._rootSem;\r\n        this._nodes = ATON.semnodes;\r\n        //this.period = undefined;\r\n    }\r\n\r\n    if (this.type === ATON.NTYPES.UI){\r\n        this._rootG = ATON._rootUI;\r\n        this._nodes = ATON.uinodes;\r\n    }\r\n\r\n    // Register\r\n    this.as(id);\r\n\r\n    this.kwords = undefined;\r\n\r\n    this._bCloneOnLoadHit = true;\r\n\r\n    // Local handlers\r\n    this.onHover  = undefined;\r\n    this.onLeave  = undefined;\r\n    this.onSelect = undefined;\r\n}\r\n\r\n/**\r\n(Re)assign node ID\r\n@param {string} id - the new ID\r\n@example\r\nmyNode.as(\"newID\")\r\n*/\r\nas(id){\r\n    if (id === undefined) return;\r\n    if (id === ATON.ROOT_NID) return;\r\n\r\n    this._nodes[id] = this;\r\n    this.nid  = id;\r\n    this.name = id;\r\n\r\n    return this;\r\n}\r\n\r\nsetAsRoot(){\r\n    this._nodes[ATON.ROOT_NID] = this;\r\n    this.nid = ATON.ROOT_NID;\r\n\r\n    return this;\r\n}\r\n\r\nsetCloneOnLoadHit(b){\r\n    this._bCloneOnLoadHit = b;\r\n    return this;\r\n}\r\n\r\n/**\r\nAdds a keyword to this node\r\n@param {string} kw - the keyword\r\n@example\r\nmyNode.addKeyword(\"heritage\").addKeyword(\"reconstruction\")\r\n*/\r\naddKeyword(kw){\r\n    if (this.kwords === undefined) this.kwords = [];\r\n    this.kwords.push(kw);\r\n\r\n    return this;\r\n}\r\n\r\n/**\r\nHide this node (and sub-graph), also invisible to queries (ray casting, picking)\r\n@example\r\nmyNode.hide()\r\n*/\r\nhide(){ \r\n    this.visible = false;\r\n    this.traverse((o) => { o.layers.disable(this.type); });\r\n}\r\n\r\n/**\r\nShow this node (and sub-graph). If pickable, becomes sensible to queries (ray casting)\r\n@example\r\nmyNode.show()\r\n*/\r\nshow(){ \r\n    this.visible = true;\r\n    if (this.bPickable) this.traverse((o) => { o.layers.enable(this.type); });\r\n    return this;\r\n}\r\n\r\n/**\r\nToggle node visibility. If visible, becomes invisible, and viceversa.\r\n@example\r\nmyNode.toggle()\r\n*/\r\ntoggle(b){\r\n    if (b === undefined){\r\n        if (this.visible) return this.hide();\r\n        else return this.show();\r\n    }\r\n\r\n    if (b) return this.show();\r\n    else return this.hide();\r\n}\r\n\r\n/**\r\nDisable this node for runtime queries (ray casters). Useful for instance on vegetation, etc...\r\n@example\r\nmyNode.load(\"somevegetation.gltf\").disablePicking()\r\n*/\r\ndisablePicking(){\r\n    this.bPickable = false;\r\n    this.traverse((o) => { o.layers.disable(this.type); });\r\n    return this;  \r\n}\r\n\r\n/**\r\nEnable this node for runtime queries (ray casters)\r\n@example\r\nmyNode.enablePicking()\r\n*/\r\nenablePicking(){\r\n    this.bPickable = true;\r\n    this.traverse((o) => { o.layers.enable(this.type); });\r\n    return this;\r\n}\r\n\r\n/**\r\nSet cascading material. Note this applies to this node and all children (even all those still loading)\r\n@param {THREE.Material} M - the Material\r\n@example\r\nmyNode.setMaterial( new THREE.MeshBasicMaterial({ transparent: true, opacity: 0.2, wireframe: true }) )\r\n*/\r\nsetMaterial(M){\r\n    this.userData.cMat = M;\r\n\r\n    this.traverse((o) => {\r\n        if (o.isMesh){\r\n            this.userData.cMat = M;\r\n            o.material = M;\r\n            //o.material.needsUpdate = true;\r\n            }\r\n    });\r\n\r\n    return this;\r\n}\r\ngetMaterial(){\r\n    return this.userData.cMat;\r\n}\r\n\r\n// Set default and highlight materials\r\nsetDefaultAndHighlightMaterials(matSTD, matHL){\r\n    this.userData.matSTD = matSTD;\r\n    this.userData.matHL  = matHL;\r\n\r\n    return this;\r\n}\r\nhighlight(){\r\n    if (this.userData.matHL) this.setMaterial(this.userData.matHL);\r\n    return this;\r\n}\r\nrestoreDefaultMaterial(){\r\n    if (this.userData.matSTD) this.setMaterial(this.userData.matSTD);\r\n    return this;\r\n}\r\n\r\n// Set cascading opacity\r\nsetOpacity(f){\r\n    this.traverse((o) => {\r\n        if (o.isMesh){\r\n            o.material.opacity = f;\r\n            //o.material.needsUpdate = true;\r\n        }\r\n    });\r\n\r\n    return this;\r\n}\r\n\r\nsetEnvMap(envtex){\r\n    this.traverse((o) => {\r\n        if (o.isMesh){\r\n\t\t\to.material.envMap  = envtex;\r\n\t\t\t//o.material.combine = THREE.MultiplyOperation;\r\n            //o.material.needsUpdate = true;\r\n        }\r\n    });\r\n\r\n    return this;\r\n}\r\n\r\nassignLightProbe(LP){\r\n    this.traverse((o) => {\r\n        if (o.isMesh && o.geometry) ATON.Utils.assignLightProbeToMesh(LP, o);\r\n    });\r\n\r\n    return this;\r\n}\r\n\r\n// (re)assign LPs for each mesh depending on proximity\r\nassignLightProbesByProximity(){\r\n\r\n    this.traverse((o) => {\r\n        if (o.isMesh && o.geometry){\r\n            let c = new THREE.Vector3();\r\n            let bbox = new THREE.Box3().setFromObject(o).getCenter(c);\r\n\r\n            let cLP   = undefined;\r\n            let mdist = undefined;\r\n\r\n            for (let i in ATON._lps){\r\n                let LP = ATON._lps[i];\r\n                let d = c.distanceToSquared(LP.pos);\r\n\r\n                if (cLP === undefined || d < mdist){\r\n                    mdist = d;\r\n                    cLP = LP;\r\n                }\r\n            }\r\n\r\n            if (cLP) ATON.Utils.assignLightProbeToMesh(cLP, o);\r\n        }\r\n    });\r\n\r\n    return this;\r\n};\r\n\r\n// Find & update all LPs under this subgraph\r\n// FIXME: not working\r\nupdateLightProbes = ()=>{\r\n    this.traverse((o) => {\r\n        if (o.isMesh && o.geometry){\r\n            let LP = o.userData.LP;\r\n\r\n            if (LP !== undefined){\r\n                LP.update();\r\n                o.material.envMap = LP.getEnvTex();\r\n                //o.material.envMapIntensity = 5.0;\r\n                //console.log(\"x\");\r\n            }\r\n        }\r\n    });\r\n\r\n    return this;\r\n};\r\n\r\n// Deep clone\r\nduplicate(){\r\n    let C = this.clone();\r\n\r\n    C.traverse((o)=>{\r\n        if (o.isMesh){\r\n            o.material = o.material.clone();\r\n        }\r\n    });\r\n\r\n    return C;\r\n}\r\n\r\n\r\n// FIXME: xxx\r\ndelete(){\r\n    let p = this.parent;\r\n\r\n    if (p !== undefined && p.nid !== undefined) p.removeChild( this );\r\n}\r\n\r\nremoveChild(c){\r\n    if (c === undefined) return;\r\n\r\n    let nid = c.nid;\r\n    if (c.nid !== undefined) this._nodes[c.nid] = undefined;\r\n\r\n    c.parent = undefined;\r\n\r\n    c.traverse((o) => {\r\n        if (o.geometry) o.geometry.dispose();\r\n        if (o.material) o.material.dispose();\r\n    });\r\n\r\n    this.remove(c);\r\n\r\n    return this;\r\n}\r\n\r\nremoveChildren(){\r\n    let num = this.children.length;\r\n    for (let i=(num-1); i>=0; i--) this.removeChild(this.children[i]);\r\n\r\n    return this;\r\n}\r\n\r\n// Attach this node to parent by ID or object\r\n\r\n\r\n/**\r\nAttach this node to parent by proding ID (string) or node object\r\n@param {string} node - the parent node ID\r\n@example\r\nmyNode.attachTo(\"someGroupID\")\r\nmyNode.attachTo(myParentGroup)\r\n*/\r\nattachTo(node){\r\n    let N = (typeof node === 'string')? this._nodes[node] : node;\r\n    if (N){\r\n        N.add(this);\r\n        if (N.userData.cMat) this.userData.cMat = N.userData.cMat;\r\n        }\r\n    return N;\r\n}\r\n\r\n/**\r\nAttach this node to main root. This is usually mandatory in order to visualize the node and all its descendants.\r\nDepending on node type this will be the scene root (visible scene-graph), the semantic-graph root or UI root\r\n@example\r\nmyNode.attachToRoot()\r\n*/\r\nattachToRoot(){\r\n    this._rootG.add(this);\r\n    if (this._rootG.userData.cMat) this.userData.cMat = this._rootG.userData.cMat;\r\n    return this._rootG;\r\n}\r\n\r\n/**\r\nReturn bound of this node\r\n@example\r\nmyNode.getBound()\r\n*/\r\ngetBound(){\r\n    let bb = new THREE.Box3().setFromObject( this );\r\n    let bs = new THREE.Sphere();\r\n    bb.getBoundingSphere(bs);\r\n\r\n    return bs;\r\n}\r\n\r\nsetPosition(x,y,z){\r\n    if (x instanceof THREE.Vector3) this.position.copy(x);\r\n    else this.position.set(x,y,z);\r\n\r\n    return this;\r\n}\r\n\r\nsetScale(sx,sy,sz){\r\n    if (sx instanceof THREE.Vector3) this.scale.copy(sx);\r\n    else {\r\n        if (sy === undefined){ sy = sx; sz = sx; }\r\n        this.scale.set(sx,sy,sz);\r\n        }\r\n    \r\n    return this;\r\n}\r\n\r\nsetRotation(rx,ry,rz){\r\n    if (rx instanceof THREE.Vector3) this.rotation.copy(rx);\r\n    else this.rotation.set(rx,ry,rz);\r\n    \r\n    return this;\r\n}\r\n\r\norientToCamera(){\r\n    this.quaternion.copy( ATON.Nav._qOri );\r\n    return this;\r\n}\r\n\r\nsetYup(){\r\n    this.rotation.set(-1.57079632679,0.0,0.0);\r\n    return this;  \r\n}\r\n\r\n/**\r\nLoad a 3D model under this node, with optional onComplete handler.\r\nNote the system will take care of loading the resources in background, and will manage duplicate requests to same resources avoiding to waste bandwidth\r\n@param {string} url - the url of the 3D model\r\n@param {function} onComplete - the optional handler to be fired on completion\r\n@example\r\nmyNode.load(\"mymodel.gltf\", ()=>{ console.log(\"completed!\") })\r\n*/\r\nload(url, onComplete){\r\n    if (url === undefined) return this;\r\n\r\n    let N = this;\r\n\r\n    // Fire new request\r\n    //if (N.type === ATON.NTYPES.SCENE) ATON._assetReqNew(url);\r\n\r\n    // [C] Promise already requested\r\n    if ( N._bCloneOnLoadHit && ATON._assetsManager[url] !== undefined ){\r\n        ATON._assetsManager[url].then(( o ) => {\r\n            N.add( o.clone() );\r\n\r\n            //if (N.type === ATON.NTYPES.SCENE) ATON._assetReqComplete(url);\r\n            if (onComplete) onComplete();\r\n        });\r\n\r\n        console.log(\"HIT!\");\r\n        return N;\r\n    }\r\n\r\n    // Fire request\r\n    if (N.type === ATON.NTYPES.SCENE) ATON._assetReqNew(url);\r\n\r\n    let P = new Promise( ( resolve, reject ) => {\r\n\r\n        ATON._aLoader.load( url, (data)=>{\r\n            let model = data.scene || data.scene[0];\r\n\r\n            // Visit loaded model\r\n            ATON.Utils.modelVisitor(N, model);\r\n\r\n            N.add( model );\r\n\r\n            resolve(model);\r\n            console.log(\"Model \"+url+\" loaded\");\r\n            \r\n            if (N.type === ATON.NTYPES.SCENE) ATON._assetReqComplete(url);\r\n\r\n            if (onComplete) onComplete();\r\n        },\r\n        undefined,\r\n        (err)=>{\r\n            console.log(err);\r\n            //reject(model);\r\n\r\n            if (N.type === ATON.NTYPES.SCENE) ATON._assetReqComplete(url);\r\n            if (onComplete) onComplete();\r\n        });\r\n\r\n/*\r\n        ATON._aLoader.load( url+\"__LOD2-d.gltf\", (data)=>{\r\n            let model = data.scene || data.scene[0];\r\n            ATON._modelVisitor(model);\r\n\r\n            let C = new THREE.Vector3();\r\n            let bb = new THREE.Box3().setFromObject( model ).getCenter(C);\r\n            model.position.set(-C.x,-C.y,-C.z);\r\n\r\n            let lod = new THREE.LOD();\r\n            lod.position.set(C.x,C.y,C.z);\r\n            lod.matrixAutoUpdate = true;\r\n            lod.addLevel(model, 40.0);\r\n            N.add(lod);\r\n\r\n            //N.add( model );\r\n\r\n            resolve(model);\r\n            console.log(\"ATON model \"+url+\" loaded\");\r\n\r\n            ATON._aLoader.load( url+\"__LOD1-d.gltf\", (data2)=>{\r\n                let model2 = data2.scene || data2.scene[0];\r\n                ATON._modelVisitor(model2);\r\n\r\n                model2.position.set(-C.x,-C.y,-C.z);\r\n                \r\n                lod.addLevel(model2, 0.0);\r\n            });\r\n            \r\n            ATON._assetReqComplete(url);\r\n        });\r\n*/\r\n    });\r\n\r\n    // Register\r\n    if (N._bCloneOnLoadHit) ATON._assetsManager[url] = P;\r\n\r\n    return this;\r\n}\r\n\r\nexportAs( filename ){\r\n    ATON.Utils.exportNode(this, filename);\r\n\r\n    return this;\r\n}\r\n\r\nsetOnHover( h ){\r\n    this.onHover = f;\r\n    return this;\r\n}\r\nsetOnLeave( h ){\r\n    this.onLeave = f;\r\n    return this;\r\n}\r\nsetOnSelect( h ){\r\n    this.onSelect = f;\r\n    return this;\r\n}\r\n\r\n// Assign a period to this node\r\n// TODO: \r\n/*\r\nsetPeriod(p){\r\n    if (this.type === ATON.NTYPES.UI) return this; // not on UI nodes\r\n\r\n    let P = (typeof p === 'string')? ATON.periods[p] : p;\r\n    if (P === undefined) return this;\r\n\r\n    this.period = P;\r\n    return this;\r\n}\r\n\r\nfilterByPeriodID(id){\r\n    if (this.period === undefined) return this;\r\n\r\n    if (this.period.id !== id){\r\n        this.hide();\r\n        return this;\r\n        }\r\n    else {\r\n        this.show();\r\n        return this;\r\n    }\r\n\r\n    this.traverse((o) => {\r\n        if (o.period){\r\n            if (o.period.id === id) this.show();\r\n            else this.hide();\r\n        }\r\n    });\r\n\r\n    return this;\r\n}\r\n*/\r\n\r\n}\r\n\r\nexport default Node;","/*\r\n    ATON Viewpoint Class\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\n/**\r\nClass representing a Viewpoint (POV) in the 3D space, abstracting from device used (mobile, desktop or immersive XR).\r\nConstructor allows to assign the POV a unique ID (`string`)\r\n@class POV\r\n@example \r\nnew ATON.POV(\"myView\")\r\n*/\r\nclass POV {\r\n\r\nconstructor(id){\r\n    // Register\r\n    if (id !== undefined){\r\n        ATON.Nav.povlist[id] = this;\r\n        this.id = id;\r\n    }\r\n\r\n    this.pos    = new THREE.Vector3(1,0,0);\r\n    this.target = new THREE.Vector3(0,0,0);\r\n    this.up     = ATON.STD_UPVECTOR;\r\n    this.fov    = ATON.Nav.STD_FOV;\r\n\r\n    this.kwords = undefined;\r\n\r\n    this.nextPOV = undefined;\r\n    this.prevPOV = undefined;\r\n}\r\n\r\n/**\r\nSet eye position\r\n@example\r\nnew ATON.POV(\"myView\").setPosition(2.0,6.0,1.5)\r\n@example\r\nmypov.setPosition( new THREE.Vector3(2.0,6.0,1.5) )\r\n*/\r\nsetPosition(x,y,z){\r\n    if (x instanceof THREE.Vector3) this.pos.copy(x);\r\n    else this.pos.set(x,y,z);\r\n\r\n    return this;\r\n}\r\n\r\n/**\r\nSet target position\r\n@example\r\nnew ATON.POV(\"myView\").setTarget(8.0,6.0,1.5)\r\n@example\r\nmypov.setTarget( new THREE.Vector3(8.0,6.0,1.5) ).setPosition(2.0,6.0,1.5)\r\n*/\r\nsetTarget(x,y,z){\r\n    if (x instanceof THREE.Vector3) this.target.copy(x);\r\n    else this.target.set(x,y,z);\r\n\r\n    return this;\r\n}\r\n\r\n/**\r\nSet field of view (FOV) in degrees\r\n@param {number} f\r\n@example\r\nnew ATON.POV(\"myView\").setFOV(70.0)\r\n*/\r\nsetFOV(f){\r\n    this.fov = f;\r\n\r\n    return this;\r\n}\r\n\r\n/**\r\nAdd a keyword to this viewpoint\r\n@param {string} kw - the keyword\r\n@example\r\nnew ATON.POV(\"myView\").addKeyword(\"heritage\")\r\n*/\r\naddKeyword(kw){\r\n    if (this.kwords === undefined) this.kwords = [];\r\n    this.kwords.push(kw);\r\n\r\n    return this;\r\n}\r\n\r\nsetKeywords(kwarray){\r\n    this.kwords = kwarray;\r\n}\r\n\r\n/**\r\nSet an optional next POV\r\n@param {POV} pov - the next POV\r\n*/\r\nsetNextPOV(pov){\r\n    if (!pov) return;\r\n    this.nextPOV = pov;\r\n\r\n    return this;\r\n}\r\n\r\n/**\r\nSet an optional previous POV\r\n@param {POV} pov - the previous POV\r\n*/\r\nsetPrevPOV(pov){\r\n    if (!pov) return;\r\n    this.prevPOV = pov;\r\n\r\n    return this;\r\n}\r\n\r\n}\r\n\r\nexport default POV;","/*\r\n    ATON Light Probe Class\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\n/**\r\nClass representing a light probe (LP), can be static or updated at runtime\r\n@class LightProbe\r\n@param {number} res - Resolution in pixel of lightprobe (default 64)\r\n@param {number} near - Capture near (default 1m)\r\n@param {number} far - Capture far (default 1Km)\r\n@example \r\nnew ATON.LightProbe()\r\n*/\r\nclass LightProbe {\r\n\r\nconstructor(res, near, far){\r\n    this.pos = new THREE.Vector3(0,0,0);\r\n\r\n    this._res  = (res !== undefined)?  res  : 64;\r\n    this._near = (near !== undefined)? near : 1.0;\r\n    this._far  = (far !== undefined)?  far  : ATON.Nav.STD_FAR;\r\n/*\r\n    this._LPtarget0 = undefined;\r\n    this._LPtarget1 = undefined;\r\n\r\n    this._LP0 = undefined;\r\n    this._LP1 = undefined;\r\n\r\n    this._flipLP = false;\r\n*/\r\n    this._envtex = undefined;\r\n    this._prevCCtarget = undefined;\r\n\r\n    this._pmremGenerator = new THREE.PMREMGenerator(ATON._renderer);\r\n\r\n    //this.realize();\r\n}\r\n\r\n/*\r\nrealize(){\r\n    this._LPtarget0 = new THREE.WebGLCubeRenderTarget( this._res, {\r\n        format: THREE.RGBFormat,\r\n        generateMipmaps: true,\r\n        minFilter: THREE.LinearMipmapLinearFilter,\r\n        encoding: THREE.sRGBEncoding // prevent the material's shader from recompiling every frame\r\n    });\r\n\r\n    this._LPtarget1 = new THREE.WebGLCubeRenderTarget( this._res, {\r\n        format: THREE.RGBFormat,\r\n        generateMipmaps: true,\r\n        minFilter: THREE.LinearMipmapLinearFilter,\r\n        encoding: THREE.sRGBEncoding\r\n    });\r\n\r\n    this._LP0 = new THREE.CubeCamera( this._near, this._far, this._LPtarget0 );\r\n    this._LP1 = new THREE.CubeCamera( this._near, this._far, this._LPtarget1 );\r\n\r\n    return this;\r\n}\r\n*/\r\n\r\n/**\r\nSet LP position\r\n@example\r\nLP.setPosition(2.0,6.0,1.5)\r\n@example\r\nLP.setPosition( new THREE.Vector3(2.0,6.0,1.5) )\r\n*/\r\nsetPosition(x,y,z){\r\n    if (x instanceof THREE.Vector3) this.pos.copy(x);\r\n    else this.pos.set(x,y,z);\r\n\r\n    //if (this._LP0) this._LP0.position.copy(this.pos);\r\n    //if (this._LP1) this._LP1.position.copy(this.pos);\r\n\r\n    return this;\r\n}\r\n\r\n/**\r\nUpdate LP capture. Typically called when all 3D models are loaded and arranged into the scene.\r\nCan be called at runtime or whenever there is some change in the 3D scene\r\n@example\r\nLP.update()\r\n*/\r\nupdate(){\r\n    if (this._envtex) this._envtex.dispose();\r\n    if (this._prevCCtarget) this._prevCCtarget.dispose();\r\n\r\n    let CCtarget = new THREE.WebGLCubeRenderTarget( this._res, {\r\n        format: THREE.RGBEFormat,\r\n        generateMipmaps: true,\r\n        minFilter: THREE.LinearMipmapLinearFilter,\r\n        encoding: THREE.sRGBEncoding // prevent the material's shader from recompiling every frame\r\n    });\r\n\r\n    let CC = new THREE.CubeCamera( this._near, this._far, CCtarget );\r\n    CC.position.copy(this.pos);\r\n\r\n    CC.update( ATON._renderer, ATON._rootVisibleGlobal );\r\n\r\n    this._envtex = CCtarget.texture;\r\n    \r\n/*\r\n    console.log(CC);\r\n    console.log(CCtarget);\r\n\r\n    let CCtargetX = new THREE.WebGLCubeRenderTarget( this._res, {\r\n        format: THREE.RGBFormat,\r\n        //generateMipmaps: true,\r\n        minFilter: THREE.LinearMipmapLinearFilter,\r\n        encoding: THREE.sRGBEncoding\r\n    });\r\n\r\n    let CCX = new THREE.CubeCamera( this._near, this._far, CCtargetX );\r\n    CCX.position.copy(this.pos);\r\n\r\n    CCX.update( ATON._renderer, ATON._rootVisible );\r\n    this._envtex = this._pmremGenerator.fromCubemap(CCtargetX.texture).texture;\r\n*/\r\n\r\n    this._prevCCtarget = CCtarget;\r\n\r\n\r\n/*\r\n    if (this._LP0 === undefined || this._LP1 === undefined) return this;\r\n\r\n    this._flipLP = !this._flipLP;\r\n    //ATON._flipLP = !ATON._flipLP;\r\n\r\n    if (this._flipLP){\r\n        this._LP0.update( ATON._renderer, ATON._mainRoot );\r\n        this._envtex = this._LPtarget0.texture;\r\n    }\r\n    else {\r\n        this._LP1.update( ATON._renderer, ATON._mainRoot );\r\n        this._envtex = this._LPtarget1.texture;\r\n    }\r\n*/\r\n    return this;\r\n}\r\n\r\n\r\ngetEnvTex(){\r\n    return this._envtex;\r\n}\r\n\r\nassignToNode(N){\r\n    if (N === undefined) return;\r\n    //TODO:\r\n}\r\n\r\n}\r\n\r\nexport default LightProbe;","/*\r\n    ATON Event Hub\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\n/**\r\nATON Event Hub\r\n@namespace EventHub\r\n*/\r\nlet EventHub = {};\r\n\r\n/**\r\nInitializes the component\r\n*/\r\nEventHub.init = ()=>{\r\n\r\n    EventHub.evLocal   = {};\r\n    EventHub.evNetwork = {};\r\n\r\n    // Expose\r\n    ATON.on                 = EventHub.on;\r\n    ATON.fireEvent          = EventHub.fireEvent;\r\n    ATON.clearEventHandlers = EventHub.clearEventHandlers\r\n};\r\n\r\n/**\r\nClear all event handlers for a given event\r\n@param {string} evtname - event name\r\n*/\r\nEventHub.clearEventHandlers = (evtname)=>{\r\n    //let evHandlers = (bNetwork)? EventHub.evNetwork : EventHub.evLocal;\r\n\r\n    EventHub.evLocal[evtname]   = [];\r\n    EventHub.evNetwork[evtname] = [];\r\n};\r\n\r\n// Execute all handlers from list with given data\r\nEventHub.executeHandlers = (ehList, data)=>{\r\n    if (!ehList) return;\r\n\r\n    for (let h = 0; h < ehList.length; h++) {\r\n        let handler = ehList[h];\r\n        if (handler) handler(data);\r\n    }\r\n};\r\n\r\n/**\r\nSubscribe to a given event, with local handler and optional network handler\r\n@param {string} evtname - event name\r\n@param {function} handlerLocal - local event handler\r\n@param {function} handlerNetwork - optional network (see VRoadcast) event handler\r\n@example\r\nATON.EventHub.on(\"myEvent\", function(data){ console.log(\"received local event\"); })\r\n*/\r\nEventHub.on = (evtname, handlerLocal, handlerNetwork)=>{\r\n    // Local event (default)\r\n    if (handlerLocal !== undefined){\r\n        let evhLocal = EventHub.evLocal;\r\n\r\n        if (evhLocal[evtname] === undefined) evhLocal[evtname] = []; // First time (event not registered)\r\n        evhLocal[evtname].push(handlerLocal);\r\n    }\r\n\r\n    // Received event (network)\r\n    if (handlerNetwork !== undefined){\r\n        ATON.VRoadcast.on(evtname, handlerNetwork);\r\n    }\r\n\r\n};\r\n\r\n/**\r\nFire a local (and optionally network) event, with data\r\n@param {string} evtname - event name\r\n@param {object} data - object containing data to be transmitted with this event\r\n@param {bool} bReplicate - if true, it will replicate (broadcast) the event to other connected peers in the same scene (see VRoadcast)\r\n@example\r\nATON.EventHub.on(\"myEvent\", function(data){ console.log(\"received local event\"); })\r\n*/\r\nEventHub.fireEvent = (evtname, data, bReplicate)=>{\r\n    let ehList = EventHub.evLocal[evtname];\r\n    EventHub.executeHandlers(ehList, data);\r\n\r\n    if (!bReplicate) return;\r\n    ATON.VRoadcast.fireEvent(evtname, data);\r\n};\r\n\r\nexport default EventHub;","/*\r\n    ATON Materials Hub\r\n    Centralized material manager\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\n/**\r\nATON Material Hub\r\n@namespace MatHub\r\n*/\r\nlet MatHub = {};\r\n\r\nMatHub.init = ()=>{\r\n    MatHub.materials = {};\r\n    MatHub.colors    = {};\r\n\r\n    MatHub.addDefaults();\r\n\r\n    MatHub._loader = new THREE.MaterialLoader();\r\n};\r\n\r\nMatHub.addDefaults = ()=>{\r\n\r\n    // Colors\r\n    MatHub.colors.white  = new THREE.Color(1,1,1);\r\n    MatHub.colors.black  = new THREE.Color(0,0,0);\r\n    MatHub.colors.green  = new THREE.Color(0,1,0);\r\n    MatHub.colors.yellow = new THREE.Color(1,1,0);\r\n    MatHub.colors.red    = new THREE.Color(1,0,0);\r\n    MatHub.colors.blue   = new THREE.Color(0,0,1);\r\n    MatHub.colors.orange = new THREE.Color(1,0.5,0);\r\n    \r\n    MatHub.colors.sem     = new THREE.Color(0,0,1);\r\n    MatHub.colors.darksem = new THREE.Color(0,0,0.1);\r\n\r\n    // Materials\r\n    MatHub.materials.fullyTransparent = new THREE.MeshBasicMaterial({ \r\n        transparent: true, \r\n        depthWrite: false, \r\n        opacity: 0.0\r\n    });\r\n    \r\n    // Selector\r\n    MatHub.materials.selector = new THREE.MeshBasicMaterial({\r\n        color: MatHub.colors.green,\r\n        transparent: true, \r\n        opacity: 0.2, \r\n        flatShading: true\r\n    });\r\n\r\n    // XR/VR ray\r\n    MatHub.materials.controllerRay = new THREE.MeshBasicMaterial({ \r\n        color: MatHub.colors.white, \r\n        transparent: true, \r\n        opacity: 0.2,\r\n        flatShading: true\r\n    });\r\n\r\n    // Semantic shapes\r\n    MatHub.materials.semanticShape = new THREE.MeshBasicMaterial({ \r\n        color: MatHub.colors.sem, \r\n        transparent: true,\r\n        depthWrite: false, \r\n        opacity: 0.1,\r\n        flatShading: true\r\n    });\r\n    MatHub.materials.semanticShapeHL = new THREE.MeshBasicMaterial({ \r\n        color: MatHub.colors.sem, \r\n        transparent: true,\r\n        depthWrite: false, \r\n        opacity: 0.3,\r\n        flatShading: true\r\n    });\r\n    MatHub.materials.semanticShapeEdit = new THREE.MeshBasicMaterial({ \r\n        color: MatHub.colors.orange, \r\n        transparent: true,\r\n        depthWrite: false, \r\n        opacity: 0.2,\r\n        flatShading: true\r\n    });\r\n};\r\n\r\nMatHub.addMaterial = (id, mat)=>{\r\n    if (MatHub.materials[id]){\r\n        console.log(\"MatHub: material \"+id+\" already registered\");\r\n        return;\r\n    }\r\n\r\n    MatHub.materials[id] = mat;\r\n};\r\n\r\nMatHub.loadMaterial = (id, jsonfile)=>{\r\n    MatHub._loader.load(jsonfile, (mat)=>{\r\n        MatHub.addMaterial(id, mat);\r\n    },\r\n    undefined,\r\n    (err)=>{\r\n        console.log(err);\r\n    });\r\n};\r\n\r\nMatHub.getMaterial = (id)=>{\r\n    return MatHub.materials[id];\r\n};\r\n\r\nexport default MatHub;","/*\r\n    ATON Utils\r\n    various utilities for device profiling, graph visiting, etc.\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\nlet Utils = {};\r\n\r\n\r\nUtils.init = ()=>{\r\n    // read-only object to inspect device capabilities\r\n    ATON.device = {};\r\n\r\n    Utils.geomUnitSphere = new THREE.SphereBufferGeometry( 1.0, 16, 16 );\r\n\r\n    // Export/Download utils\r\n    Utils.exporter = new THREE.GLTFExporter();\r\n    Utils._dlink = document.createElement('a');\r\n    Utils._dlink.style.display = 'none';\r\n    document.body.appendChild( Utils._dlink ); // Firefox workaround, see #6594\r\n\r\n    Utils.textureLoader = new THREE.TextureLoader();\r\n};\r\n\r\nUtils.isConnectionSecure = ()=>{\r\n    return window.isSecureContext;\r\n}\r\n\r\nUtils.isMobile = ()=>{\r\n    return ATON.device.isMobile;\r\n}\r\n\r\n// Profile device capabilities\r\nUtils.profileDevice = ()=>{\r\n\r\n    // Detect mobile\r\n    ATON.device.isMobile = false;\r\n    let detectMobile = ()=>{\r\n        if(/(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|ipad|iris|kindle|Android|Silk|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(navigator.userAgent)\r\n        || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(navigator.userAgent.substr(0,4))){\r\n            return true;\r\n            }\r\n\r\n        return false;\r\n    };\r\n\r\n    ATON.device.isMobile = detectMobile();\r\n\r\n    // XR\r\n    ATON.device.isXRsupported = false;\r\n    if ( 'xr' in navigator ){\r\n\t    navigator.xr.isSessionSupported( 'immersive-vr' ).then( function ( b ){\r\n            if (b){\r\n                ATON.device.isXRsupported = true;\r\n                console.log(\"WebXR supported\");\r\n                }\r\n            else {\r\n                ATON.device.isXRsupported = false;\r\n                console.log(\"WebXR NOT supported\");\r\n                }\r\n\t\t});\r\n    }\r\n};\r\n\r\n// Path utils\r\nUtils.getFileExtension = ( filepath )=>{\r\n\treturn filepath.substr(filepath.lastIndexOf('.')+1).toLowerCase();\r\n};\r\n\r\nUtils.getBaseFolder = ( filepath )=>{\r\n    var index  = filepath.lastIndexOf( '/' );\r\n    if ( index !== -1 ) return filepath.substring( 0, index + 1 );\r\n    \r\n    return '';\r\n};\r\n\r\n// Helper visitor routine\r\nUtils.modelVisitor = (parentNode, model)=>{\r\n    if (!model) return this;\r\n    \r\n    let N = parentNode;\r\n    let type = N.type; // Differentiate visit depending on node type\r\n\r\n    model.traverse( ( o ) => {\r\n\r\n        if (N.bPickable !== undefined){\r\n            if (N.bPickable) o.layers.enable(type);\r\n            else o.layers.disable(type);\r\n        }\r\n\r\n        if (o.isMesh){\r\n            //let numVertices = o.geometry.attributes.position.count;\r\n            //console.log(numVertices);\r\n\r\n            if (type === ATON.NTYPES.SCENE){\r\n                // Build accelerated ray casting\r\n                if (o.geometry){\r\n                    o.geometry.computeBoundsTree();\r\n                    console.log(\"Computed BVH\");\r\n                }\r\n\r\n                // Ensure mipmapping is correct\r\n                if ( o.material.map !== null){\r\n                    //console.log(object.material.map);\r\n                    \r\n                    // Why do I have to do this?\r\n                    //o.material.map.generateMipmaps = false;\r\n                    o.material.map.anisotropy = ATON._maxAnisotropy;\r\n                    o.material.map.minFilter  = THREE.LinearMipmapLinearFilter;\r\n                    o.material.map.magFilter  = THREE.LinearFilter;\r\n                    //o.material.map.needsUpdate = true;\r\n                }\r\n            }\r\n\r\n            if (type === ATON.NTYPES.SEM){\r\n                o.material = ATON.MatHub.materials.semanticShape;\r\n            }\r\n\r\n            // Cascading material\r\n            if (N.userData.cMat){\r\n                o.material = N.userData.cMat;\r\n                //o.material.needsUpdate = true;\r\n            }\r\n        }\r\n    });\r\n};\r\n\r\nUtils.setVectorPrecision = (v, prec)=>{\r\n    v.x = parseFloat( v.x.toPrecision(prec) );\r\n    v.y = parseFloat( v.y.toPrecision(prec) );\r\n    v.z = parseFloat( v.z.toPrecision(prec) );\r\n    \r\n    return v;\r\n};\r\n\r\n// Export routines\r\nUtils.downloadBlob = (blob, filename)=>{\r\n    if (filename === undefined) return;\r\n\r\n    Utils._dlink.href = URL.createObjectURL( blob );\r\n    Utils._dlink.download = filename;\r\n    Utils._dlink.click();\r\n};\r\n\r\n// Download text ASCII data\r\nUtils.downloadText = ( str, filename )=>{\r\n    Utils.downloadBlob( new Blob( [ str ], { type: 'text/plain' } ), filename );\r\n};\r\n\r\n// Download json object\r\nUtils.downloadJSONobj = (jsonobj, filename)=>{\r\n    Utils.downloadText( JSON.stringify(jsonobj), filename );\r\n};\r\n\r\nUtils.downloadArrayBuffer = ( buffer, filename )=>{\r\n    Utils.downloadBlob( new Blob( [ buffer ], { type: 'application/octet-stream' } ), filename );\r\n};\r\n\r\n// Export ATON node (gltf or glb)\r\nUtils.exportNode = (node, filename)=>{\r\n    let ext = Utils.getFileExtension(filename);\r\n    if (ext.length < 1) return;\r\n\r\n    let bBin = (ext === \"glb\")? true : false;\r\n\r\n    let opts = {\r\n        //trs: true, // Export position, rotation and scale instead of matrix per node. Default is false\r\n        binary: bBin, // Export in binary (.glb) format, returning an ArrayBuffer. Default is false\r\n        //onlyVisible: false,\r\n        //truncateDrawRange: true\r\n    };\r\n\r\n    Utils.exporter.parse( node, ( output )=>{\r\n        if ( output instanceof ArrayBuffer ){\r\n            Utils.downloadArrayBuffer( output, filename);\r\n        }\r\n        else {\r\n            console.log( output );\r\n            Utils.downloadJSONobj(output, filename);\r\n        }\r\n    }, opts);\r\n};\r\n\r\nUtils.assignLightProbeToMesh = (LP, mesh)=>{\r\n    if (LP === undefined || mesh === undefined) return;\r\n\r\n    if (mesh.noLP) return;\r\n\r\n    mesh.userData.LP = LP;\r\n    //LP.update();\r\n    //mesh.material.envMap = LP.getEnvTex();\r\n    \r\n    //mesh.material.combine = THREE.MultiplyOperation;\r\n    //mesh.material.needsUpdate = true;\r\n\r\n    //console.log(mesh.userData);\r\n};\r\n\r\nUtils.createATONCube = (id)=>{\r\n    let g = new THREE.BoxBufferGeometry( 1,1,1 );\r\n\r\n    let mat = new THREE.MeshStandardMaterial();\r\n\r\n    Utils.textureLoader.load((ATON.PATH_RES+\"models/aton-cube.jpg\"), (tex)=>{\r\n        tex.encoding = THREE.sRGBEncoding;\r\n        mat.map = tex;\r\n    });\r\n\r\n    let N = ATON.createSceneNode(id);\r\n    N.add( new THREE.Mesh(g) );\r\n    N.setMaterial(mat);\r\n\r\n    N.enablePicking();\r\n    return N;\r\n};\r\n\r\n\r\nUtils.createATONCubePBR = (id)=>{\r\n    let g = new THREE.BoxBufferGeometry( 1,1,1 );\r\n\r\n    let mat = new THREE.MeshStandardMaterial();\r\n    mat.metalness = 1.0;\r\n\r\n    Utils.textureLoader.load((ATON.PATH_RES+\"models/aton-cube.jpg\"), (tex)=>{\r\n        tex.encoding = THREE.sRGBEncoding;\r\n        mat.map = tex;\r\n    });\r\n\r\n    Utils.textureLoader.load((ATON.PATH_RES+\"models/aton-cube-pbr.jpg\"), (tex)=>{\r\n        tex.encoding = THREE.sRGBEncoding;\r\n        mat.metalnessMap = tex;\r\n        mat.roughnessMap = tex;\r\n    });\r\n\r\n    Utils.textureLoader.load((ATON.PATH_RES+\"models/aton-cube-nrm.png\"), (tex)=>{\r\n        tex.encoding = THREE.sRGBEncoding;\r\n        mat.normalMap = tex;\r\n\r\n        //mat.bumpMap.anisotropy = ATON._maxAnisotropy;\r\n        //mat.bumpMap.minFilter  = THREE.LinearMipmapLinearFilter;\r\n        //mat.bumpMap.magFilter  = THREE.LinearFilter;\r\n    });\r\n\r\n    let N = ATON.createSceneNode(id);\r\n    N.add( new THREE.Mesh(g) );\r\n    N.setMaterial(mat);\r\n\r\n    N.enablePicking();\r\n    return N;\r\n};\r\n\r\n\r\nUtils.createGround = (texture, dx,dz)=>{\r\n    if (dx === undefined) dx = 1.0;\r\n    if (dz === undefined) dz = 1.0;\r\n\r\n    let g = new THREE.PlaneBufferGeometry( dx, dz );\r\n\r\n    let mat = new THREE.MeshStandardMaterial();\r\n    if (texture !== undefined) Utils.textureLoader.load(texture, (tex)=>{\r\n        tex.encoding = THREE.sRGBEncoding;\r\n        mat.map = tex;\r\n    });\r\n\r\n    let N = ATON.createSceneNode().rotateX(-Math.PI * 0.5);\r\n    N.add( new THREE.Mesh(g, mat) );\r\n    N.enablePicking();\r\n\r\n    return N;\r\n};\r\n\r\n\r\nexport default Utils;","/*\r\n    ATON Scene Hub\r\n    scene JSON routines\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\n/**\r\nATON Scene Hub\r\n@namespace SceneHub\r\n*/\r\nlet SceneHub = {};\r\n\r\nSceneHub.MODE_ADD = 0;\r\nSceneHub.MODE_DEL = 1;\r\n\r\n/**\r\nInitializes the component\r\n*/\r\nSceneHub.init = ()=>{\r\n    SceneHub.currID   = undefined; // Scene ID (sid)\r\n    SceneHub.currData = undefined; // holds compact object describing our ATON scene\r\n    SceneHub._bEdit   = false;     // edit mode (client can modify json on the server)\r\n\r\n    SceneHub._bLoading = false;\r\n\r\n    SceneHub.initBaseParsers();\r\n};\r\n\r\n/**\r\nThis enables/disables edit mode - i.e. changes to the scene are sent to server and become persistent\r\n@param {bool} b - true or false\r\n@example\r\nATON.SceneHub.setEditMode(true)\r\n*/\r\nSceneHub.setEditMode = (b)=>{\r\n    SceneHub._bEdit = b;\r\n};\r\n\r\n\r\n/**\r\n    Loads a scene by providing JSON path\r\n    @param {string} reqpath - JSON url\r\n    @param {string} sid - Scene ID\r\n    @param {function} oncomplete - Function to be called on complete\r\n    @example\r\n        ATON.SceneHub.load(\"http://path/to/scene.json\", \"sample\", ()=>{ console.log(\"Done!\"); });\r\n*/\r\nSceneHub.load = (reqpath, sid, oncomplete)=>{\r\n    //let args = reqpath.split(',');\r\n\r\n    SceneHub._bLoading = true;\r\n    console.log(\"Loading Scene: \"+sid);\r\n\r\n    return $.getJSON( reqpath, ( data )=>{\r\n        SceneHub.currData  = data;\r\n        SceneHub.currID    = sid; //scenejson.substring(scenejson.lastIndexOf('/')+1);\r\n        SceneHub._bLoading = false;\r\n\r\n        //console.log(ATON.currScene);\r\n\r\n        SceneHub.parseScene(data);\r\n\r\n        if (oncomplete) oncomplete();\r\n        ATON.fireEvent(\"SceneJSONLoaded\", sid);\r\n    });\r\n};\r\n\r\nSceneHub.parseScene = (sobj)=>{\r\n    sobj = (sobj === undefined)? SceneHub.currData : sobj;\r\n    if (sobj === undefined) return;\r\n\r\n    for (let k in sobj)\r\n        if (SceneHub._jsonParsers[k]) SceneHub._jsonParsers[k]( sobj[k] );\r\n};\r\n\r\nSceneHub.getJSONchildren = (nid, type)=>{\r\n    if (type === undefined) type = ATON.NTYPES.SCENE;\r\n\r\n    let P = undefined;\r\n    let children = [];\r\n\r\n    if (type === ATON.NTYPES.SEM)   P = ATON.getSemanticNode(nid);\r\n    if (type === ATON.NTYPES.SCENE) P = ATON.getSceneNode(nid);\r\n\r\n    if (P === undefined) return undefined;\r\n\r\n    for (let c in P.children){\r\n        let child = P.children[c];\r\n\r\n        if (child.nid !== undefined) children.push( child.nid );\r\n        }\r\n\r\n    return children;\r\n};\r\n\r\nSceneHub.getJSONgraphEdges = (type)=>{\r\n    if (type === undefined) type = ATON.NTYPES.SCENE;\r\n    let nodes = ATON.snodes;\r\n    \r\n    if (type === ATON.NTYPES.SEM) nodes = ATON.semnodes;\r\n    if (type === ATON.NTYPES.UI)  nodes = ATON.uinodes;\r\n\r\n    let edges = {};\r\n\r\n    for (let n in nodes){\r\n        let N = nodes[n];\r\n\r\n        //if (N && N.children) edges[n] = SceneHub.getJSONchildren(n, type);\r\n\r\n        let E = {};\r\n        if (N.parent && N.parent.nid){\r\n            //edges.push([N.parent.nid, N.nid]);\r\n            if (edges[N.parent.nid] === undefined) edges[N.parent.nid] = [];\r\n            edges[N.parent.nid].push(N.nid);\r\n            //edges[N.parent.nid].filter((v,i) => edges[N.parent.nid].indexOf(v) === i);\r\n        }\r\n    }\r\n\r\n    //console.log(edges);\r\n    return edges;\r\n};\r\n\r\nSceneHub.getJSONsemanticSpheresList = (semid)=>{\r\n    let S = ATON.getSemanticNode(semid);\r\n    if (S === undefined) return undefined;\r\n\r\n    let SL = [];\r\n\r\n    for (let s in S.children){\r\n        let sphere = S.children[s];\r\n        if (sphere.type){\r\n            SL.push([\r\n                parseFloat(sphere.position.x.toPrecision(3)), \r\n                parseFloat(sphere.position.y.toPrecision(3)), \r\n                parseFloat(sphere.position.z.toPrecision(3)), \r\n                parseFloat(sphere.scale.x.toPrecision(3))\r\n            ]);\r\n        }\r\n    }\r\n\r\n    return SL;\r\n};\r\n\r\nSceneHub.getJSONsemanticConvexShapes = (semid)=>{\r\n    let S = ATON.getSemanticNode(semid);\r\n    if (S === undefined) return undefined;\r\n\r\n    let CL = [];\r\n\r\n    for (let s in S.children){\r\n        let semesh = S.children[s];\r\n        if (semesh.userData._convexPoints){\r\n            CL.push(semesh.userData._convexPoints);\r\n        }\r\n    }\r\n\r\n    //console.log(CL);\r\n    \r\n    return CL;\r\n};\r\n\r\n// Top-level scene-JSON parsers\r\nSceneHub.initBaseParsers = ()=>{\r\n    SceneHub._jsonParsers = {};\r\n\r\n    // Viewpoints\r\n    SceneHub._jsonParsers.viewpoints = (povs)=>{\r\n        if (povs === undefined) return;\r\n\r\n        for (let p in povs){\r\n            let pov = povs[p];\r\n            \r\n            if (p === \"home\"){\r\n                ATON.Nav.setHomePOV( \r\n                    new ATON.POV()\r\n                    .setPosition(pov.position)\r\n                    .setTarget(pov.target)\r\n                    .setFOV(pov.fov)\r\n                    .setKeywords(pov.keywords)\r\n                );\r\n            }\r\n            else {\r\n                new ATON.POV(p)\r\n                .setPosition(pov.position)\r\n                .setTarget(pov.target)\r\n                .setFOV(pov.fov)\r\n                .setKeywords(pov.keywords);\r\n            }\r\n        }\r\n    };\r\n\r\n    // Visible scene-graph\r\n    SceneHub._jsonParsers.scenegraph = (sg)=>{\r\n        if (sg === undefined) return;\r\n\r\n        let nodes = sg.nodes;\r\n        let edges = sg.edges;\r\n\r\n        // nodes\r\n        for (let nid in nodes){\r\n            let N = nodes[nid]; // JSON node\r\n\r\n            //let G = ATON.createSceneNode(nid); // ATON node\r\n            let G = ATON.getOrCreateSceneNode(nid).removeChildren();\r\n            \r\n            // load models by urls list\r\n            let urls = N.urls;\r\n            if (urls){\r\n                if (Array.isArray(urls)){\r\n                    urls.forEach(u => {\r\n                        ATON.createSceneNode().load(ATON.PATH_COLLECTION+u).attachTo(G);\r\n                    });\r\n                }\r\n                else {\r\n                    G.load(ATON.PATH_COLLECTION+urls);\r\n                }\r\n            }\r\n\r\n            if (N.toYup) G.setYup();\r\n\r\n            // Transform node\r\n            let transform = N.transform;\r\n            if (transform){\r\n                if (transform.position) G.setPosition(transform.position[0],transform.position[1],transform.position[2]);\r\n                if (transform.rotation) G.setRotation(transform.rotation[0],transform.rotation[1],transform.rotation[2]);\r\n                if (transform.scale)    G.setScale(transform.scale[0],transform.scale[1],transform.scale[2]);\r\n            }\r\n        }\r\n\r\n        // Build graph through relationships\r\n        for (let parid in edges){\r\n            let children = edges[parid];\r\n\r\n            let P = ATON.getSceneNode(parid);\r\n\r\n            if (P !== undefined){\r\n                for (let c in children){\r\n                    let childid = children[c];\r\n                    let C = ATON.getSceneNode(childid);\r\n                    if (C !== undefined) C.attachTo(P);\r\n                }\r\n            }\r\n        }\r\n/*\r\n        for (let e = 0; e < edges.length; e++){\r\n            let E = edges[e];\r\n\r\n            let from = E[0];\r\n            let to   = E[1];\r\n\r\n            if (from && to){\r\n                let child = ATON.getSceneNode(to);\r\n                if (child) child.attachTo(from);\r\n            }\r\n        }\r\n*/\r\n    };\r\n\r\n    // Semantic scene-graph\r\n    SceneHub._jsonParsers.semanticgraph = (sg)=>{\r\n        if (sg === undefined) return;\r\n\r\n        let nodes = sg.nodes;\r\n        let edges = sg.edges;\r\n\r\n        // nodes\r\n        for (let nid in nodes){\r\n            let N = nodes[nid]; // JSON node\r\n\r\n            //let G = ATON.createSemanticNode(nid);\r\n            let G = ATON.getOrCreateSemanticNode(nid).removeChildren();\r\n            \r\n            // load shapes by urls list\r\n            let urls = N.urls;\r\n            if (urls){\r\n                if (Array.isArray(urls)){\r\n                    urls.forEach(u => {\r\n                        ATON.createSemanticNode().load(ATON.PATH_COLLECTION+u).attachTo(G);\r\n                    });\r\n                }\r\n                else {\r\n                    G.load(ATON.PATH_COLLECTION+urls);\r\n                }\r\n            }\r\n\r\n            if (N.toYup) G.setYup();\r\n\r\n            // Sphere [x,y,z, r]\r\n            let spheres = N.spheres;\r\n            if (Array.isArray(spheres)){\r\n                for (let s in spheres){\r\n                    let S = spheres[s];\r\n                    ATON.SemFactory.createSphere(nid, new THREE.Vector3(S[0],S[1],S[2]), S[3]);\r\n                }\r\n            }\r\n\r\n            let convexshapes = N.convexshapes;\r\n            if (Array.isArray(convexshapes)){\r\n                for (let s in convexshapes){\r\n                    let S = convexshapes[s];\r\n\r\n                    let points = [];\r\n                    for (let i=0; i<S.length; i+=3){\r\n                        let p = new THREE.Vector3(S[i],S[i+1],S[i+2]);\r\n                        points.push(p);\r\n                    }\r\n\r\n                    ATON.SemFactory.createConvexShape(nid, points);\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        // Build relationships\r\n        for (let parid in edges){\r\n            let children = edges[parid];\r\n\r\n            let P = ATON.getSemanticNode(parid);\r\n\r\n            if (P !== undefined){\r\n                for (let c in children){\r\n                    let childid = children[c];\r\n                    let C = ATON.getSemanticNode(childid);\r\n                    if (C !== undefined) C.attachTo(P);\r\n                }\r\n            }\r\n        }\r\n/*\r\n        for (let e = 0; e < edges.length; e++){\r\n            let E = edges[e];\r\n\r\n            let from = E[0];\r\n            let to   = E[1];\r\n\r\n            if (from && to){\r\n                let child = ATON.getSemanticNode(to);\r\n                if (child) child.attachTo(from);\r\n            }\r\n        }\r\n*/\r\n    };\r\n\r\n};\r\n\r\n// Adds custom scene parser to extend JSON scene\r\n// parser(k){ ... }\r\nSceneHub.addSceneParser = (k, parser)=>{\r\n    SceneHub._jsonParsers[k] = parser;\r\n};\r\n\r\n// [C] Sends JSON edit to server node\r\n// previously used: https://tools.ietf.org/html/rfc6902\r\nSceneHub.sendEdit = (patch, mode, onComplete)=>{\r\n    if (SceneHub._bLoading || !SceneHub._bEdit) return;\r\n    if (patch === undefined) return;\r\n    if (mode === undefined) mode = SceneHub.MODE_ADD;\r\n\r\n    let sid = SceneHub.currID;\r\n\r\n    let O = {};\r\n    O.sid  = sid;\r\n    O.data = patch;\r\n    O.mode = (mode === SceneHub.MODE_DEL)? \"DEL\" : \"ADD\";\r\n\r\n    let jstr = JSON.stringify(O);\r\n    //console.log(jstr);\r\n\r\n    $.ajax({\r\n        url: ATON.PATH_RESTAPI+\"edit/scene\",\r\n        type:\"POST\",\r\n        data: jstr,\r\n        contentType:\"application/json; charset=utf-8\",\r\n        dataType:\"json\",\r\n\r\n        // Update local scene JSON\r\n        // TODO: improve traffic by applying patch to local json, and NOT by receiving entire JSON \r\n        success: (r)=>{\r\n            if (r === undefined) return;\r\n            //console.log(r);\r\n            SceneHub.currData = r;\r\n            //console.log(ATON.currSceneHub.data);\r\n\r\n            if (onComplete) onComplete();\r\n        }\r\n    });\r\n};\r\n\r\n\r\nexport default SceneHub;","/*\r\n    ATON Navigation system\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\nconst COSINOIDAL_DIST = function(x){ return (1.0 - Math.cos(x * Math.PI)) / 2.0; };\r\n\r\n/**\r\nATON Navigation system\r\n@namespace Nav\r\n*/\r\nlet Nav = {};\r\n\r\n// Consts\r\nNav.STD_FOV  = 50.0;\r\nNav.STD_NEAR = 0.05;\r\nNav.STD_FAR  = 1000.0;\r\n\r\nNav.FP_EPS = 0.01;\r\nNav.STD_ROT_SPEED_ORBIT = 0.4;\r\nNav.STD_ROT_SPEED_FP    = -0.3;\r\nNav.STD_POV_TRANS_DURATION = 2.0;\r\n\r\n// Non-immersive navigation controls\r\nNav.MODE_ORBIT  = 0;\r\nNav.MODE_FP     = 1;\r\nNav.MODE_DEVORI = 2;\r\n\r\n\r\nNav.POVtransitionDuration = Nav.STD_POV_TRANS_DURATION;\r\n\r\n\r\n\r\n// Initialize nav system\r\nNav.init = ()=>{\r\n    Nav._mode = undefined;\r\n\r\n    // Setup controls\r\n    //Nav._camera = new THREE.PerspectiveCamera( Nav.STD_FOV, window.innerWidth / window.innerHeight, Nav.STD_NEAR, Nav.STD_FAR );\r\n    //Nav._camera.layers.enableAll();\r\n    //Nav._controls = new THREE.OrbitControls( Nav._camera, ATON._renderer.domElement);\r\n    Nav.setOrbitControl();\r\n\r\n    // POV data\r\n    Nav._currPOV = new ATON.POV(); // holds current viewpoint data (eye, target, etc...)\r\n    Nav._fromPOV = new ATON.POV(); // initial POV when requesting a transition\r\n    Nav._reqPOV  = new ATON.POV(); // requested POV for transition\r\n\r\n    Nav.homePOV = undefined; //new ATON.POV();\r\n\r\n    Nav._tPOVcall = -1.0;\r\n    Nav._tPOVprogress = 0.0;\r\n\r\n    Nav.povlist = {}; // This will handle registered POVs\r\n\r\n    // World direction and orientation (quat)\r\n    // consistent within standard and immersive XR\r\n    Nav._vDir = new THREE.Vector3(1,0,0);\r\n    Nav._qOri = new THREE.Quaternion();\r\n\r\n    // Motion\r\n    Nav._motionAmt = 0.0;\r\n    Nav._motionDir = new THREE.Vector3(0,1,0);\r\n};\r\n\r\n// Returns current eye location (consistent within standard and immersive XR sessions)\r\nNav.getCurrentEyeLocation = ()=>{\r\n    return Nav._currPOV.pos;\r\n};\r\n\r\n\r\nNav.isTransitioning = ()=>{\r\n    if (Nav._tPOVcall >= 0.0) return true;\r\n    return false;\r\n};\r\n\r\nNav.isOrbit = ()=>{ return (Nav._mode === Nav.MODE_ORBIT); };\r\nNav.isFirstPerson = ()=>{ return (Nav._mode === Nav.MODE_FP); };\r\nNav.isDevOri = ()=>{ return (Nav._mode === Nav.MODE_DEVORI); };\r\n\r\n// Set Orbit controls (default)\r\nNav.setOrbitControl = ()=>{\r\n    if (ATON.XR.isPresenting()) return;\r\n\r\n    Nav._mode = Nav.MODE_ORBIT;\r\n\r\n    // One-time setup\r\n    if (Nav._cOrbit === undefined){\r\n        Nav._camOrbit = new THREE.PerspectiveCamera( Nav.STD_FOV, window.innerWidth / window.innerHeight, Nav.STD_NEAR, Nav.STD_FAR );\r\n        Nav._camOrbit.layers.enableAll();\r\n\r\n        Nav._cOrbit = new THREE.OrbitControls( Nav._camOrbit, ATON._renderer.domElement);\r\n\r\n        let C = Nav._cOrbit;\r\n\r\n        C.rotateSpeed   = Nav.STD_ROT_SPEED_ORBIT;\r\n        C.enablePan     = true;\r\n        C.enableDamping = true;\r\n        C.dampingFactor = 0.1;\r\n        C.screenSpacePanning = true;\r\n        \r\n        C.enableZoom  = true;\r\n        C.minDistance = 0.03;\r\n        C.maxDistance = 1000.0;\r\n\r\n        C.addEventListener(\"change\", () => { Nav._bControlChange = true; });\r\n    }\r\n\r\n    Nav._controls = Nav._cOrbit;\r\n    //Nav._controls.target.copy(Nav._camera.position);\r\n    Nav._camera = Nav._camOrbit;\r\n    \r\n    Nav._controls.update();\r\n    if (Nav._currPOV) Nav.syncCurrCamera();\r\n};\r\n\r\n// Set FP controls\r\nNav.setFirstPersonControl = ()=>{\r\n    if (ATON.XR.isPresenting()) return;\r\n\r\n    Nav._mode = Nav.MODE_FP;\r\n\r\n    // One-time setup\r\n    if (Nav._cFirstPerson === undefined){\r\n        Nav._camFP = new THREE.PerspectiveCamera( Nav.STD_FOV, window.innerWidth / window.innerHeight, Nav.STD_NEAR, Nav.STD_FAR );\r\n        Nav._camFP.layers.enableAll();\r\n\r\n        Nav._cFirstPerson = new THREE.OrbitControls( Nav._camFP, ATON._renderer.domElement);\r\n\r\n        let C = Nav._cFirstPerson;\r\n\r\n        C.enableZoom  = false;\r\n        C.enablePan   = false;\r\n        C.rotateSpeed = Nav.STD_ROT_SPEED_FP;\r\n        \r\n        C.enableDamping = true;\r\n        C.dampingFactor = 0.1;\r\n        //C.screenSpacePanning = true;\r\n\r\n        C.target.copy(Nav._camera.position);\r\n\r\n        C.minDistance = 0.05;\r\n        C.maxDistance = 0.05;\r\n    }\r\n\r\n    Nav._controls = Nav._cFirstPerson;\r\n    //Nav._controls.target.copy(Nav._camera.position);\r\n    Nav._camera = Nav._camFP;\r\n\r\n    Nav._controls.update();\r\n    if (Nav._currPOV) Nav.syncCurrCamera();\r\n/*\r\n    if (Nav._controls) ATON._controls.dispose();\r\n    ATON._controls = new THREE.FirstPersonControls( ATON._camera, ATON._renderer.domElement);\r\n    ATON._controls.lookSpeed = 0.1;\r\n    ATON._controls.movementSpeed = 10;\r\n    ATON._controls.noFly = true;\r\n    ATON._controls.lookVertical = false;\r\n\r\n    //ATON._camera.position.set( 20.0, 5.0, 0 );\r\n    ATON._controls.lookAt(0,4,0);\r\n\r\n    ATON._controls.update();\r\n    console.log(ATON._controls);\r\n*/\r\n};\r\n\r\n// Set DevOri controls\r\nNav.setDeviceOrientationControl = ()=>{\r\n    if (!ATON.Utils.isMobile()) return;\r\n\r\n    Nav._mode = Nav.MODE_DEVORI;\r\n    ATON._screenPointerCoords.set(0.0,0.0);\r\n\r\n    // One-time setup\r\n    if (Nav._cDevOri === undefined){\r\n        Nav._camDevOri = new THREE.PerspectiveCamera( Nav.STD_FOV, window.innerWidth / window.innerHeight, Nav.STD_NEAR, Nav.STD_FAR );\r\n        Nav._camDevOri.layers.enableAll();\r\n\r\n        Nav._cDevOri = new THREE.DeviceOrientationControls(Nav._camDevOri, ATON._renderer.domElement);\r\n        //Nav._cDevOri = new Nav.DeviceOrientationControls(Nav._camDevOri, ATON._renderer.domElement);\r\n\r\n        Nav._cDevOri.alphaOffset = 0.0; //The alpha offset in radians\r\n    }\r\n\r\n    Nav._controls = Nav._cDevOri;\r\n    Nav._camera   = Nav._camDevOri;\r\n\r\n    Nav._controls.update();\r\n    if (Nav._currPOV) Nav.syncCurrCamera();\r\n};\r\n\r\n\r\nNav.setMotionAmount = (f)=>{\r\n    Nav._motionAmt = f;\r\n};\r\n\r\nNav.setMotionDirection = (v)=>{\r\n    Nav._motionDir.copy(v);\r\n}\r\n\r\nNav.stop = ()=>{\r\n    Nav._motionAmt = 0.0;\r\n};\r\n\r\n// FoV\r\nNav.setFOV = (f)=>{\r\n    if (ATON.XR.isPresenting()) return; // skip for immersive sessions\r\n\r\n    Nav._currPOV.fov = f;\r\n\r\n    let cam = Nav._camera;\r\n    cam.fov = f;\r\n    cam.updateProjectionMatrix();\r\n};\r\n\r\nNav.getFOV = ()=>{\r\n    return Nav._currPOV.fov;\r\n};\r\n\r\n\r\n// Retrieve currPOV from camera and controls\r\nNav.syncCurrPOV = ()=>{\r\n    if (ATON.XR.isPresenting()){\r\n        \r\n        let C = ATON._renderer.xr.getCamera(Nav._camera);\r\n        C.getWorldPosition( Nav._currPOV.pos );\r\n        C.getWorldQuaternion( Nav._qOri );\r\n        C.getWorldDirection( Nav._vDir );\r\n        //console.log(Nav._hmdPos);\r\n\r\n        //ATON.XR.hmdPos.copy(Nav._currPOV.pos);\r\n        //ATON.XR.hmdDir.copy(Nav._vDir);\r\n        \r\n        //ATON._renderer.xr.getCamera(Nav._camera);\r\n        //ATON._renderer.xr.getCamera(Nav._camera).getWorldDirection(Nav._vDir);\r\n        //Nav._camera.getWorldDirection(Nav._vDir);\r\n        \r\n        //Nav._currPOV.pos.copy(Nav._camera.position);\r\n        return;\r\n    }\r\n\r\n    let ctrl  = Nav._controls;\r\n    let cam   = Nav._camera;\r\n\r\n    cam.getWorldDirection(Nav._vDir);\r\n    cam.getWorldQuaternion(Nav._qOri);\r\n\r\n    if (Nav._mode === Nav.MODE_DEVORI){\r\n        Nav._currPOV.pos.copy(cam.position);\r\n        return;\r\n    }\r\n\r\n    if (Nav._mode === Nav.MODE_FP){\r\n        Nav._currPOV.pos.copy(ctrl.target);\r\n\r\n        Nav._currPOV.target.x = Nav._currPOV.pos.x + Nav._vDir.x; //ctrl.target.x - cam.position.x;\r\n        Nav._currPOV.target.y = Nav._currPOV.pos.y + Nav._vDir.y; //ctrl.target.y - cam.position.y;\r\n        Nav._currPOV.target.z = Nav._currPOV.pos.z + Nav._vDir.z; //ctrl.target.z - cam.position.z;\r\n        return;\r\n    }\r\n    \r\n    Nav._currPOV.pos.copy(cam.position);\r\n    Nav._currPOV.target.copy(ctrl.target);\r\n};\r\n\r\n// After syncCurrPOV and before updateCamera, we maniuplate currPOV\r\n//==================================================================================\r\nNav.handlePOV = ()=>{\r\n    //console.log(Nav._currPOV.pos);\r\n\r\n    if (ATON.XR.isPresenting()) Nav.handleXRtransition();\r\n    else Nav.handlePOVtransition();\r\n\r\n    Nav.handleMotion();\r\n\r\n    //if (ATON.XR.isPresenting()) console.log(ATON._renderer.xr);\r\n\r\n    // Handle constraints\r\n\r\n};\r\n\r\nNav.handleMotion = ()=>{\r\n    if (Nav.isTransitioning()) return;\r\n\r\n    if (Nav._motionAmt != 0.0){\r\n\r\n        //if ()\r\n\r\n\r\n        if (ATON.XR.controller0 && ATON.XR.controller0.visible){\r\n            ATON.XR.controller0.getWorldDirection(Nav._motionDir);\r\n            Nav._motionDir.negate();\r\n            }\r\n        else Nav._motionDir.copy(Nav._vDir);\r\n\r\n        let fv = Nav._motionDir.clone();\r\n        fv.multiplyScalar(Nav._motionAmt * ATON._dt);\r\n\r\n        Nav._currPOV.pos.add(fv);\r\n        Nav._currPOV.target.add(fv); // check if needed\r\n    }\r\n};\r\n\r\nNav.handlePOVtransition = ()=>{\r\n    if (Nav._tPOVcall < 0.0) return;\r\n\r\n    if (Nav.POVtransitionDuration <= 0.0) Nav._tPOVprogress = 1.0;\r\n    else Nav._tPOVprogress = (ATON._clock.elapsedTime - Nav._tPOVcall) / Nav.POVtransitionDuration;\r\n\r\n    // End\r\n    if (Nav._tPOVprogress >= 1.0){\r\n\r\n        Nav._tPOVcall = -1.0;\r\n        //Nav._controls.enabled = true;\r\n\r\n        Nav._currPOV.pos.copy(Nav._reqPOV.pos);\r\n        Nav._currPOV.target.copy(Nav._reqPOV.target);\r\n        Nav._currPOV.fov = Nav._reqPOV.fov;\r\n\r\n        ATON.fireEvent(\"POVTransitionCompleted\", Nav._reqPOV.id);\r\n        return;\r\n    }\r\n\r\n    Nav._tPOVprogress = COSINOIDAL_DIST(Nav._tPOVprogress);\r\n\r\n    Nav._currPOV.pos.lerpVectors(Nav._fromPOV.pos, Nav._reqPOV.pos, Nav._tPOVprogress);\r\n    Nav._currPOV.target.lerpVectors(Nav._fromPOV.target, Nav._reqPOV.target, Nav._tPOVprogress);\r\n\r\n    if (!Nav._fromPOV.fov || !Nav._reqPOV.fov) return;\r\n    Nav._currPOV.fov = THREE.MathUtils.lerp(Nav._fromPOV.fov, Nav._reqPOV.fov, Nav._tPOVprogress);\r\n\r\n    //console.log(Nav._camera);\r\n\r\n    Nav._camera.fov = Nav._currPOV.fov;\r\n    Nav._camera.updateProjectionMatrix();\r\n};\r\n\r\n// Immersive XR transitions\r\nNav.handleXRtransition = ()=>{\r\n    if (Nav._tPOVcall < 0.0) return;\r\n\r\n    if (Nav.POVtransitionDuration <= 0.0) Nav._tPOVprogress = 1.0;\r\n    else Nav._tPOVprogress = (ATON._clock.elapsedTime - Nav._tPOVcall) / Nav.POVtransitionDuration;\r\n\r\n    // End\r\n    if (Nav._tPOVprogress >= 1.0){\r\n\r\n        Nav._tPOVcall = -1.0;\r\n        //Nav._controls.enabled = true;\r\n\r\n        //ATON.XR.setRefSpaceLocation(Nav._reqXRpos);\r\n\r\n        console.log(\"XR height\"+ATON.XR._currPos.y);\r\n        console.log(\"HMD height\"+Nav._currPOV.pos.y);\r\n\r\n        ATON.fireEvent(\"POVTransitionCompleted\", Nav._reqPOV.id);\r\n        return;\r\n    }\r\n\r\n    ATON.XR._currPos.lerpVectors(ATON.XR._fromPos, ATON.XR._reqPos, Nav._tPOVprogress);\r\n    //ATON.XR._currPos.lerpVectors(Nav._fromPOV.pos, Nav._reqPOV.pos, Nav._tPOVprogress);\r\n\r\n};\r\n\r\n\r\n\r\n\r\n// Update internal camera from currPOV \r\nNav.syncCurrCamera = ()=>{\r\n    let ctrl  = Nav._controls;\r\n    let cam   = Nav._camera;\r\n    \r\n    let pos = Nav._currPOV.pos;\r\n    let tgt = Nav._currPOV.target;\r\n\r\n    // We are in VR\r\n    if (ATON.XR.isPresenting()){\r\n        ///let vrcam = ATON.XR.rig;\r\n        ///vrcam.position.copy(pos);\r\n        \r\n        ///ATON.XR.setRefSpaceLocation(pos);\r\n\r\n        //let C = ATON._renderer.xr.getCamera(cam);\r\n        //C.getWorldDirection(Nav._vDir);\r\n        return;\r\n    }\r\n\r\n    if (Nav._mode === Nav.MODE_DEVORI){\r\n        cam.position.copy(pos);\r\n        return;\r\n    }\r\n\r\n    // Common controls\r\n    //let d = new THREE.Vector3();\r\n    Nav._vDir.subVectors(tgt, pos);\r\n    Nav._vDir.normalize();\r\n\r\n    if (Nav._mode === Nav.MODE_FP){\r\n        ctrl.target.copy(pos);\r\n\r\n        cam.position.x = ctrl.target.x - (Nav._vDir.x * Nav.FP_EPS);\r\n        cam.position.y = ctrl.target.y - (Nav._vDir.y * Nav.FP_EPS);\r\n        cam.position.z = ctrl.target.z - (Nav._vDir.z * Nav.FP_EPS);\r\n    }\r\n    else {\r\n        cam.position.copy(pos);\r\n        ctrl.target.copy(tgt);\r\n    }\r\n};\r\n\r\n// Main update routine\r\nNav.update = ()=>{\r\n\r\n    //Nav._bXR = ATON.XR.isPresenting();\r\n\r\n    Nav.syncCurrPOV();\r\n    Nav.handlePOV();\r\n    Nav.syncCurrCamera();\r\n};\r\n\r\n\r\n// Request transition to viewpoint (POV)\r\nNav.requestPOV = (pov, duration)=>{\r\n    if (ATON._tPOVcall >= 0.0) return; // already requested\r\n\r\n    ATON.fireEvent(\"POVTransitionRequested\", pov.id);\r\n\r\n    if (duration !== undefined) Nav.POVtransitionDuration = duration;\r\n    \r\n    //Nav._controls.enabled = false;\r\n\r\n    Nav._tPOVcall = ATON._clock.elapsedTime;\r\n    \r\n    if (ATON.XR.isPresenting()){\r\n        Nav._reqPOV.pos.copy(pov.pos? pov.pos : Nav._currPOV.pos);\r\n        Nav._fromPOV.pos.copy(Nav._currPOV.pos);\r\n\r\n        ATON.XR._reqPos.copy(pov.pos? pov.pos : Nav._currPOV.pos);\r\n        ATON.XR._fromPos.copy(ATON.XR._currPos);\r\n    }\r\n    else {\r\n        Nav._reqPOV.pos.copy(pov.pos? pov.pos : Nav._currPOV.pos);\r\n        Nav._reqPOV.target.copy( pov.target? pov.target : Nav._currPOV.target);\r\n        Nav._reqPOV.fov = pov.fov? pov.fov : Nav._currPOV.fov;\r\n\r\n        Nav._fromPOV.pos.copy(Nav._currPOV.pos);\r\n        Nav._fromPOV.target.copy(Nav._currPOV.target);\r\n        Nav._fromPOV.fov = Nav._currPOV.fov;\r\n    }\r\n};\r\n\r\nNav.requestPOVbyBound = (bs, duration)=>{\r\n    if (bs === undefined) return;\r\n\r\n    let T = new THREE.Vector3();\r\n    let E = new THREE.Vector3();\r\n\r\n    T.copy(bs.center);\r\n    \r\n    let r = bs.radius * 2.5;\r\n    E.x = T.x - (r * Nav._vDir.x);\r\n    E.y = T.y - (r * Nav._vDir.y);\r\n    E.z = T.z - (r * Nav._vDir.z);\r\n\r\n    let pov = new ATON.POV().setPosition(E).setTarget(T);    \r\n    Nav.requestPOV(pov, duration);\r\n};\r\n\r\nNav.requestPOVbyNode = (n, duration)=>{\r\n    if (n === undefined) return;\r\n    \r\n    let bs = n.getBound();\r\n\r\n    Nav.requestPOVbyBound(bs,duration);\r\n};\r\n\r\nNav.requestRetarget = (point, normal, duration)=>{\r\n    let M = new THREE.Vector3();\r\n    if (normal === undefined){\r\n        M.lerpVectors(point, Nav._currPOV.pos, 0.8);\r\n    }\r\n    else {\r\n        let d = point.distanceTo(Nav._currPOV.pos);\r\n        d *= 0.5;\r\n        M.x = point.x + (normal.x * d);\r\n        M.y = point.y + (normal.y * d);\r\n        M.z = point.z + (normal.z * d);\r\n    }\r\n\r\n    let pov = new ATON.POV().setPosition(M).setTarget(point).setFOV(Nav._currPOV.fov);\r\n    console.log(pov);\r\n    \r\n    Nav.requestPOV(pov, duration);\r\n};\r\n\r\n// Typically after all assets are loaded\r\nNav.computeDefaultHome = (dv)=>{\r\n    if (dv === undefined) dv = new THREE.Vector3(1,0.7,1);\r\n\r\n    let sceneBS = ATON.getRootScene().getBound();\r\n\r\n    let eye = new THREE.Vector3(\r\n        sceneBS.center.x + (sceneBS.radius * dv.x), \r\n        sceneBS.center.y + (sceneBS.radius * dv.y), \r\n        sceneBS.center.z + (sceneBS.radius * dv.z)\r\n    );\r\n\r\n    Nav.homePOV = new ATON.POV().setPosition(eye).setTarget(sceneBS.center);\r\n};\r\n\r\nNav.setHomePOV = (pov)=>{\r\n    Nav.homePOV = pov;\r\n};\r\n\r\nNav.computeAndRequestDefaultHome = (duration, dv)=>{\r\n    Nav.computeDefaultHome(dv);\r\n    Nav.requestPOV(Nav.homePOV, duration);\r\n};\r\n\r\nNav.requestHome = (duration)=>{\r\n    Nav.requestPOV(Nav.homePOV, duration);\r\n};\r\n\r\n\r\n\r\n// Mobile devori (modified for absolute compass - UNSTABLE)\r\n/**\r\n * @author richt / http://richt.me\r\n * @author WestLangley / http://github.com/WestLangley\r\n *\r\n * W3C Device Orientation control (http://w3c.github.io/deviceorientation/spec-source-orientation.html)\r\n */\r\nNav.DeviceOrientationControls = function ( object ) {\r\n    let scope = this;\r\n\r\n    this.object = object;\r\n    this.object.rotation.reorder( 'YXZ' );\r\n    this.enabled = true;\r\n\r\n    this.deviceOrientation = {};\r\n    this.screenOrientation = 0;\r\n\r\n    this.alphaOffset = 0; // radians\r\n    this.absolute = false;\r\n    this.alphaOffsetDevice = undefined;\r\n    this.alphaOffsetScreen = undefined;\r\n\r\n    let onDeviceOrientationChangeEvent = function ( event ) {\r\n        if(scope.absolute) return;\r\n        scope.deviceOrientation = event;\r\n    };\r\n\r\n    let onDeviceOrientationAbsoluteChangeEvent = function ( event ) {\r\n        scope.deviceOrientation = event;\r\n        scope.absolute = true;\r\n    };\r\n\r\n    let onScreenOrientationChangeEvent = function () {\r\n        scope.screenOrientation = window.orientation || 0;\r\n    };\r\n\r\n    // The angles alpha, beta and gamma form a set of intrinsic Tait-Bryan angles of type Z-X'-Y''\r\n    let setObjectQuaternion = function () {\r\n        let zee = new THREE.Vector3( 0, 0, 1 );\r\n        let euler = new THREE.Euler();\r\n\r\n        let q0 = new THREE.Quaternion();\r\n        let q1 = new THREE.Quaternion( - Math.sqrt( 0.5 ), 0, 0, Math.sqrt( 0.5 ) ); // - PI/2 around the x-axis\r\n\r\n        return function ( quaternion, alpha, beta, gamma, orient ) {\r\n            euler.set( beta, alpha, - gamma, 'YXZ' ); // 'ZXY' for the device, but 'YXZ' for us\r\n            quaternion.setFromEuler( euler ); // orient the device\r\n            quaternion.multiply( q1 ); // camera looks out the back of the device, not the top\r\n            quaternion.multiply( q0.setFromAxisAngle( zee, - orient ) ); // adjust for screen orientation\r\n        };\r\n\r\n    }();\r\n\r\n    this.connect = function () {\r\n        onScreenOrientationChangeEvent(); // run once on load\r\n\r\n        window.addEventListener( 'orientationchange', onScreenOrientationChangeEvent, false );\r\n        window.addEventListener( 'deviceorientation', onDeviceOrientationChangeEvent, false );\r\n        window.addEventListener( 'deviceorientationabsolute', onDeviceOrientationAbsoluteChangeEvent, false );\r\n\r\n        scope.enabled = true;\r\n    };\r\n\r\n    this.disconnect = function () {\r\n        window.removeEventListener( 'orientationchange', onScreenOrientationChangeEvent, false );\r\n        window.removeEventListener( 'deviceorientation', onDeviceOrientationChangeEvent, false );\r\n        window.removeEventListener( 'deviceorientationabsolute', onDeviceOrientationAbsoluteChangeEvent, false );\r\n\r\n        scope.enabled = false;\r\n    };\r\n\r\n    this.update = function () {\r\n        if ( scope.enabled === false ) return;\r\n\r\n        let device;\r\n        device = scope.deviceOrientation;\r\n\r\n        if ( device ) {\r\n            let alpha = this.getDirection() ? THREE.Math.degToRad( this.getDirection() ) + scope.alphaOffset : 0; // Z\r\n            let beta = device.beta ? THREE.Math.degToRad( device.beta ) : 0; // X'\r\n\r\n            let gamma = device.gamma ? THREE.Math.degToRad( device.gamma ) : 0; // Y''\r\n            let orient = scope.screenOrientation ? THREE.Math.degToRad( scope.screenOrientation ) : 0; // O\r\n\r\n            setObjectQuaternion( scope.object.quaternion, alpha, beta, gamma, orient );\r\n        }\r\n\r\n    };\r\n\r\n    this.dispose = ()=>{\r\n        scope.disconnect();\r\n    };\r\n\r\n    this.iOSOrientationPermission = ()=>{\r\n        if (typeof DeviceOrientationEvent.requestPermission === 'function') {\r\n            DeviceOrientationEvent.requestPermission().then(permissionState => {\r\n                if (permissionState === 'granted') {\r\n\r\n                }\r\n\r\n                console.log(permissionState);\r\n            }).catch(console.error);\r\n        }\r\n    }\r\n\r\n    this.getDirection = ()=>{\r\n        return (typeof scope.deviceOrientation.webkitCompassHeading != \"undefined\") ? scope.deviceOrientation.webkitCompassHeading : scope.deviceOrientation.alpha;\r\n    }\r\n\r\n    this.getDirectionMap = ()=>{\r\n        return (typeof scope.deviceOrientation.webkitCompassHeading != \"undefined\") ? (360 - scope.deviceOrientation.webkitCompassHeading) : scope.deviceOrientation.alpha;\r\n    }\r\n\r\n    this.connect();\r\n};\r\n\r\n\r\nexport default Nav;","/*\r\n    ATON immersive XR module\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\n/**\r\nATON Immersive XR\r\n@namespace XR\r\n*/\r\nlet XR = {};\r\n\r\nXR.STD_TELEP_DURATION = 0.03;\r\n\r\n\r\nXR.isPresenting = ()=>{\r\n    return XR._bPresenting;\r\n};\r\n\r\n/**\r\nInitializes XR component\r\n@function\r\n*/\r\nXR.init = ()=>{\r\n    ATON._renderer.xr.enabled = true;\r\n    ATON._renderer.xr.setReferenceSpaceType( 'local' );\r\n    \r\n    if (ATON.device.isMobile) ATON._renderer.xr.setFramebufferScaleFactor(0.5); // WebXR density\r\n\r\n    XR._bPresenting = false;\r\n    XR.currSession = null;\r\n\r\n    XR.rig = new THREE.Group();\r\n    //XR.rig.position.set(0,0,0);\r\n    XR.rig.add( ATON.Nav._camera );\r\n    ATON._rootUI.add(XR.rig);\r\n\r\n    //XR.hmdOri = new THREE.Quaternion();\r\n    //XR.hmdPos = new THREE.Vector3();\r\n\r\n    XR._currPos = XR.rig.position; //new THREE.Vector3();\r\n    XR._fromPos = new THREE.Vector3();\r\n    XR._reqPos  = new THREE.Vector3();\r\n\r\n    XR.gControllers = undefined;\r\n\r\n    XR.controller0pos = new THREE.Vector3();\r\n    XR.controller1pos = new THREE.Vector3();\r\n    XR.controller0dir = new THREE.Vector3();\r\n    XR.controller1dir = new THREE.Vector3();\r\n\r\n    // test\r\n    ATON.on(\"XRselectStart\", (c)=>{\r\n        XR.defaultSelectHandler(c);\r\n    });\r\n    ATON.on(\"XRselectEnd\", (c)=>{\r\n        //ATON.Nav.stop();\r\n        //console.log(\"Sel end \"+c);\r\n    });\r\n};\r\n\r\nXR.defaultSelectHandler = (c)=>{\r\n\r\n    if (ATON._queryDataScene){\r\n        let P = ATON._queryDataScene.p;\r\n        let N = ATON._queryDataScene.n;\r\n\r\n        //P.y += 0.8; // with 'local': half user height\r\n\r\n        // FIXME: height offset needed for \"local\", fill this automatically\r\n        if (N.y > 0.7) ATON.Nav.requestPOV( new ATON.POV().setPosition(P.x, P.y+ATON.userHeight, P.z), XR.STD_TELEP_DURATION );\r\n    }\r\n    \r\n    //ATON.Nav.setMotionAmount(3.0);\r\n};\r\n\r\nXR._handleUISelection = ()=>{\r\n    if (ATON._hoveredUI === undefined) return false;\r\n\r\n    let H = ATON.getUINode(ATON._hoveredUI);\r\n    if (H && H.onSelect) H.onSelect();\r\n    \r\n    return true;\r\n}\r\n\r\n\r\n// Set reference-space location (not the actual HMD camera location)\r\n// this can be used to move around the user, given a proper locomotion technique\r\nXR.setRefSpaceLocation = (p)=>{\r\n    XR.rig.position.copy(p);\r\n};\r\n\r\n// On XR session started\r\nXR.onSessionStarted = ( session )=>{\r\n\tsession.addEventListener( 'end', XR.onSessionEnded );\r\n\r\n\tATON._renderer.xr.setSession( session );\r\n\tXR.currSession = session;\r\n\r\n    XR.controller0 = ATON._renderer.xr.getController(0);\r\n    XR.controller1 = ATON._renderer.xr.getController(1);\r\n\r\n    //console.log(XR.controller0);\r\n\r\n    // Controller 0\r\n    if (XR.controller0){\r\n        XR.controller0.addEventListener( 'connected', (e) => {\r\n            XR.controller0.visible = true;\r\n\r\n            XR.controller0.gamepad = e.data.gamepad;\r\n            //console.log(XR.controller0.gamepad);\r\n        });\r\n\r\n        XR.controller0.addEventListener( 'selectstart', ()=>{\r\n            if (XR._handleUISelection()) return;\r\n\r\n            ATON.fireEvent(\"XRselectStart\", 0);\r\n        });\r\n        XR.controller0.addEventListener( 'selectend', ()=>{ \r\n            ATON.fireEvent(\"XRselectEnd\", 0);\r\n        });\r\n    }\r\n\r\n    // Controller 1\r\n    if (XR.controller1){ \r\n        XR.controller1.addEventListener( 'connected', (e) => {\r\n            XR.controller1.visible = true;\r\n            XR.controller1.gamepad = e.data.gamepad;\r\n            //console.log(ATON.xrControllers1);\r\n        });\r\n\r\n        XR.controller1.addEventListener( 'selectstart',  ()=>{\r\n            //if (XR._handleUISelection()) return;\r\n        \r\n            ATON.fireEvent(\"XRselectStart\", 1);\r\n        });\r\n        XR.controller1.addEventListener( 'selectend',  ()=>{ \r\n            ATON.fireEvent(\"XRselectEnd\", 1);\r\n        });\r\n    }\r\n\r\n    XR.setRefSpaceLocation(ATON.Nav._currPOV.pos);\r\n\r\n    XR._bPresenting = true;\r\n    console.log(\"XR now presenting\");\r\n\r\n    XR.setupControllersUI();\r\n\r\n    ATON.fireEvent(\"XRmode\", true);\r\n\r\n    //console.log(session);\r\n};\r\n\r\n// On XR session terminated\r\nXR.onSessionEnded = ( /*event*/ )=>{\r\n    XR.currSession.removeEventListener( 'end', XR.onSessionEnded );\r\n    XR.currSession = null;\r\n\r\n    XR._bPresenting = false;\r\n    //XR.rig.position.set(0.0,0.0,0.0);\r\n    XR.setRefSpaceLocation( new THREE.Vector3(0,0,0) );\r\n\r\n    ATON.fireEvent(\"XRmode\", false);\r\n\r\n    console.log(\"Quit XR\");\r\n};\r\n\r\nXR.toggle = ()=>{\r\n    if (!ATON.device.isXRsupported) return;\r\n\r\n    // Enter XR\r\n    if (XR.currSession === null){\r\n        let sessionInit = { \r\n            optionalFeatures: [\r\n                //\"local-floor\" \r\n                \"local\" \r\n                ///\"bounded-floor\"\r\n            ]\r\n        };\r\n        navigator.xr.requestSession( 'immersive-vr', sessionInit ).then( XR.onSessionStarted );\r\n        //console.log(navigator.xr);\r\n    }\r\n    // Exit XR\r\n    else {\r\n        XR.currSession.end();\r\n    }\r\n};\r\n\r\nXR.setupControllersUI = ()=>{\r\n    if (XR.gControllers) return; // already set\r\n\r\n    var geometry = new THREE.CylinderBufferGeometry( 0.003,0.003, 10.0, 5 );\r\n    geometry.rotateX( -Math.PI / 2 );\r\n    geometry.translate(0,0,-5);\r\n\r\n    var mesh = new THREE.Mesh( geometry, ATON.MatHub.materials.controllerRay );\r\n\r\n    XR.controller0.add( mesh.clone() );\r\n    //XR.controller1.add( mesh.clone() );\r\n\r\n    XR.gControllers = ATON.createUINode();\r\n    XR.gControllers.add( XR.controller0 );\r\n    XR.gControllers.add( XR.controller1 );\r\n\r\n    XR.controller0.visible = false;\r\n    XR.controller1.visible = false;\r\n\r\n    XR.gControllers.disablePicking();\r\n\r\n    XR.rig.add(XR.gControllers);\r\n};\r\n\r\nXR.getControllerSpace = (i)=>{\r\n   if (i === 1) XR.getControllerGrip(1);\r\n   else XR.getControllerGrip(0);\r\n};\r\n\r\nXR.getControllerWorldLocation = (i)=>{\r\n    if (i === 1) return XR.controller1pos;\r\n    else return XR.controller0pos;\r\n};\r\n\r\nXR.getControllerWorldDirection = (i)=>{\r\n    if (i === 1) return XR.controller1dir;\r\n    else return XR.controller0dir;\r\n};\r\n\r\nXR.update = ()=>{\r\n    if (XR.controller0.visible){\r\n        XR.controller0.getWorldPosition(XR.controller0pos);\r\n        XR.controller0.getWorldDirection(XR.controller0dir);\r\n        XR.controller0dir.negate();\r\n    }\r\n    if (XR.controller1.visible){\r\n        XR.controller1.getWorldPosition(XR.controller1pos);\r\n        XR.controller1.getWorldDirection(XR.controller1dir);\r\n        XR.controller1dir.negate(); \r\n    }\r\n};\r\n\r\n\r\nexport default XR;","/*\r\n    ATON spatial UI Button class\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\nimport Node from \"./ATON.node.js\";\r\n\r\nexport default class Button extends Node {\r\n    constructor(uiid){\r\n        super(uiid, ATON.NTYPES.UI);\r\n\r\n        this.baseColor   = ATON.MatHub.colors.black;\r\n        this.switchColor = ATON.MatHub.colors.green;\r\n\r\n        this._bSwitched = false;\r\n\r\n        this.container = new ThreeMeshUI.Block({\r\n            width: 0.1,\r\n            height: 0.1,\r\n            padding: 0.01,\r\n            borderRadius: 0.02,\r\n            backgroundColor: this.baseColor,\r\n            backgroundOpacity: 0.5,\r\n\r\n            fontFamily: ATON.PATH_RES+\"fonts/custom-msdf.json\",\r\n            fontTexture: ATON.PATH_RES+\"fonts/custom.png\",\r\n\r\n            justifyContent: 'center',\r\n            alignContent: 'center'\r\n        });\r\n        this.add(this.container);\r\n\r\n        this.uiText = new ThreeMeshUI.Text({ \r\n            content: \"button\",\r\n            fontSize: 0.02,\r\n            fontColor: ATON.MatHub.colors.white\r\n        });\r\n        this.container.add(this.uiText);\r\n\r\n        this._trigger = new THREE.Mesh( \r\n            new THREE.PlaneGeometry( ATON.SUI.STD_BTN_SIZE*0.9, ATON.SUI.STD_BTN_SIZE*0.9, 2 ), \r\n            ATON.MatHub.materials.fullyTransparent\r\n        );\r\n        this._trigger.position.set(0,0,0.002);\r\n\r\n        this.add( this._trigger );\r\n\r\n        this.onHover = ()=>{\r\n            this.container.set({ \r\n                backgroundOpacity: 0.8\r\n            });\r\n        };\r\n        this.onLeave = ()=>{\r\n            this.container.set({ \r\n                backgroundOpacity: 0.5 \r\n            });\r\n        };\r\n\r\n        this.enablePicking();\r\n    }\r\n\r\n    setBaseColor(c){\r\n        this.baseColor = c;\r\n        if (!this._bSwitched) this.container.set({ backgroundColor: this.baseColor });\r\n        return this;\r\n    }\r\n    setSwitchColor(c){\r\n        this.switchColor = c;\r\n        if (this._bSwitched) this.container.set({ backgroundColor: this.switchColor });\r\n        return this;\r\n    }\r\n\r\n    setText(text){\r\n        this.uiText.set({ content: text });\r\n        return this;\r\n    }\r\n\r\n    switch(b){\r\n        this._bSwitched = b;\r\n        if (b) this.container.set({ backgroundColor: this.switchColor });\r\n        else this.container.set({ backgroundColor: this.baseColor });\r\n        \r\n        return this;\r\n    }\r\n\r\n    setIcon(url){\r\n        ATON.Utils.textureLoader.load(url, (texture) => {\r\n\r\n            this._trigger.material = new THREE.MeshStandardMaterial({\r\n                map: texture,\r\n                transparent: true,\r\n                depthWrite: false\r\n            });\r\n/*\r\n            this.container.set({ \r\n                backgroundTexture: texture,\r\n                backgroundOpacity: 1.0,\r\n                backgroundColor: undefined \r\n            });\r\n*/\r\n            this.uiText.position.set(0,-0.035,0);\r\n        });\r\n\r\n        return this;\r\n    }\r\n\r\n}","/*\r\n    ATON spatial UI\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\nimport Button from \"./ATON.sui.button.js\";\r\n\r\n\r\n/**\r\nATON Spatial UI\r\n@namespace SUI\r\n*/\r\nlet SUI = {};\r\n\r\nSUI.STD_BTN_SIZE = 0.1;\r\n\r\nSUI.Button = Button;\r\n\r\n\r\n/**\r\nInitializes Spatial UI module\r\n*/\r\nSUI.init = ()=>{\r\n    SUI.mainSelector   = ATON.createUINode();\r\n    //SUI.secondSelector = ATON.createUINode();\r\n\r\n    //SUI._uiSelGeom = new THREE.SphereGeometry( 0.1, 16, 16 );\r\n    SUI.mainSelector.add( new THREE.Mesh( ATON.Utils.geomUnitSphere, ATON.MatHub.getMaterial(\"selector\") ));\r\n    SUI.mainSelector.disablePicking();\r\n\r\n    SUI.setSelectorRadius(0.05);\r\n    SUI.mainSelector.visible = false;\r\n\r\n    ATON._rootUI.add(SUI.mainSelector);\r\n\r\n    SUI.gPoints = ATON.createUINode();\r\n    ATON._rootUI.add(SUI.gPoints);\r\n\r\n    SUI.buildInfoNode();\r\n    SUI.bShowInfo = true;\r\n\r\n    SUI._labelScale   = ATON.Utils.isMobile()? 1.5 : 1.0;\r\n    SUI._labelScaleVR = 2.0;\r\n\r\n    ATON.on( \"SemanticNodeHover\", (semid)=>{\r\n        if (!SUI.bShowInfo) return;\r\n        SUI.infoNodeText.set({ content: semid });\r\n    });\r\n/*\r\n    ATON.on(\"UINodeHover\", (uiid)=>{\r\n        console.log(\"Hover UI node: \"+uiid);\r\n    });\r\n    ATON.on(\"UINodeLeave\", (uiid)=>{\r\n        console.log(\"Leave UI node: \"+uiid);\r\n    });\r\n*/\r\n};\r\n\r\nSUI.setSelectorRadius = (r)=>{\r\n    SUI.mainSelector.scale.set(r,r,r);\r\n};\r\nSUI.getSelectorRadius = ()=>{\r\n    return SUI.mainSelector.scale.x;\r\n};\r\n\r\nSUI.buildInfoNode = ()=>{\r\n    SUI.infoNode = ATON.createUINode();\r\n    SUI.infoNode.attachToRoot();\r\n\r\n    SUI.infoContainer = new ThreeMeshUI.Block({\r\n        width: 0.15,\r\n        height: 0.05, //0.07,\r\n        padding: 0.01,\r\n        borderRadius: 0.02,\r\n        //backgroundColor: ATON.MatHub.colors.darksem,\r\n        //backgroundOpacity: 0.2,\r\n\r\n        fontFamily: ATON.PATH_RES+\"fonts/custom-msdf.json\", //ATON.PATH_MODS+'three-mesh-ui/examples/assets/Roboto-msdf.json',\r\n        fontTexture: ATON.PATH_RES+\"fonts/custom.png\", //ATON.PATH_MODS+'three-mesh-ui/examples/assets/Roboto-msdf.png',\r\n\r\n        alignContent: 'center', // could be 'center' or 'left'\r\n        justifyContent: 'center', // could be 'center' or 'start'\r\n    });\r\n    SUI.infoNode.add(SUI.infoContainer);\r\n\r\n    SUI.infoNodeText = new ThreeMeshUI.Text({ \r\n        content: \"Info\",\r\n        fontSize: 0.02,\r\n        fontColor: ATON.MatHub.colors.white\r\n    });\r\n    SUI.infoContainer.add(SUI.infoNodeText);\r\n    //SUI.infoNode.scale.set(0.07,0.07,0.07);\r\n};\r\n\r\nSUI.getInfoNode = ()=>{\r\n    return SUI.infoNode;\r\n};\r\n\r\nSUI.createToolbar = (buttonlist, color)=>{\r\n    let T = ATON.createUINode();\r\n\r\n    let num = buttonlist.length;\r\n    let padding = SUI.STD_BTN_SIZE * 0.3;\r\n\r\n    let cont = new ThreeMeshUI.Block({\r\n        width: (SUI.STD_BTN_SIZE * num) + padding,\r\n        height: SUI.STD_BTN_SIZE + padding,\r\n        padding: 0.01,\r\n        borderRadius: 0.02,\r\n        backgroundColor: color? color : ATON.MatHub.colors.black,\r\n        backgroundOpacity: 0.3,\r\n\r\n        fontFamily: ATON.PATH_RES+\"fonts/custom-msdf.json\", //ATON.PATH_MODS+'three-mesh-ui/examples/assets/Roboto-msdf.json',\r\n        fontTexture: ATON.PATH_RES+\"fonts/custom.png\", //ATON.PATH_MODS+'three-mesh-ui/examples/assets/Roboto-msdf.png',\r\n\r\n        alignContent: 'center', // could be 'center' or 'left'\r\n        justifyContent: 'center', // could be 'center' or 'start'\r\n    });\r\n    //cont.position.set(0,0,0);\r\n\r\n    let m = (num*0.5) * SUI.STD_BTN_SIZE;\r\n    m -= (SUI.STD_BTN_SIZE*0.5);\r\n\r\n    for (let i=0; i<num; i++){\r\n        let button = buttonlist[i];\r\n        button.position.set((i*SUI.STD_BTN_SIZE)-m, 0.0, 0.01);\r\n        cont.add(button);\r\n    }\r\n\r\n    T.add(cont);\r\n    return T;\r\n};\r\n\r\n// Main update routine\r\nSUI.update = ()=>{\r\n    if (ATON.Nav.isTransitioning()){\r\n        SUI.infoNode.visible = false;\r\n        return;\r\n    }\r\n\r\n    ThreeMeshUI.update();\r\n\r\n    if (ATON._queryDataScene){\r\n        SUI.mainSelector.visible = true;\r\n        SUI.mainSelector.position.copy(ATON._queryDataScene.p);    \r\n    }\r\n    else {\r\n        SUI.mainSelector.visible = false;\r\n    }\r\n\r\n    // InfoNode (semantics)\r\n    if (ATON._queryDataSem){\r\n\r\n        if (ATON.XR._bPresenting){\r\n            SUI.infoNode.position.copy(ATON.XR.controller0pos); //.lerpVectors(ATON._queryDataSem.p, ATON.XR.controller0pos, 0.8);\r\n            SUI.infoNode.setScale(SUI._labelScaleVR);\r\n        }\r\n        else {\r\n            SUI.infoNode.position.lerpVectors(ATON._queryDataSem.p, ATON.Nav._currPOV.pos, 0.2);\r\n            SUI.infoNode.setScale(ATON._queryDataSem.d * SUI._labelScale);\r\n        }\r\n        SUI.infoNode.orientToCamera();\r\n\r\n        if (SUI.bShowInfo) SUI.infoNode.visible = true;\r\n        SUI.mainSelector.visible = false;\r\n    }\r\n    else {\r\n        SUI.infoNode.visible = false;\r\n    }\r\n\r\n};\r\n\r\nexport default SUI;","/*\r\n    ATON Avatar Class\r\n    used in VRoadcast system\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\nimport Node from \"./ATON.node.js\";\r\n\r\nexport default class Avatar extends Node {\r\n\r\nconstructor(uid){\r\n    super(undefined /*uid*/, ATON.NTYPES.UI);\r\n\r\n    this.userid   = uid;\r\n    this.username = \"anonymous\";\r\n    this.message  = \"...\";\r\n    this.bTalking = false;\r\n\r\n    this._tStateCall = -1.0;\r\n    this._tStateDur  = 0.1;\r\n    this._tProgress  = 0.0;\r\n\r\n    this._currState  = {};\r\n    this._currState.position   = new THREE.Vector3();\r\n    this._currState.quaternion = new THREE.Quaternion();\r\n\r\n    this._tgtState = undefined;\r\n\r\n    //console.log(this);\r\n\r\n    this.realize();\r\n}\r\n\r\ngetAvatarMaterialByUID(uid){\r\n    //if (uid === undefined) return 0;\r\n\r\n    let avaMats = ATON.MatHub.materials.avatars;\r\n    let mi = (uid % avaMats.length); //uid? (uid % avaMats.length) : 0;\r\n    \r\n    return avaMats[mi];\r\n}\r\n\r\nrealize(){\r\n    // build minimal representation\r\n    let g = new THREE.SphereGeometry( 0.2, 16, 16 );\r\n\r\n    this.usermaterial = this.getAvatarMaterialByUID(this.userid);\r\n\r\n    let smesh = new THREE.Mesh( g, this.usermaterial );\r\n\r\n    this.usermeshnode = ATON.createUINode();\r\n    this.usermeshnode.add(smesh);\r\n    this.usermeshnode.setMaterial(this.usermaterial);\r\n\r\n    // CHECK / FIXME: this is to avoid cloning of the same mesh when using same representation for all avatars\r\n    this.usermeshnode.setCloneOnLoadHit(false);\r\n\r\n    // Build Label\r\n    this.userlabelnode = ATON.createUINode();\r\n    this.labelcontainer = new ThreeMeshUI.Block({\r\n        width: 0.7,\r\n        height: 0.25,\r\n        padding: 0.03,\r\n        borderRadius: 0.05,\r\n        backgroundColor: ATON.VRoadcast.ucolorsdark[this.userid % ATON.VRoadcast.ucolorsdark.length],\r\n\r\n        fontFamily: ATON.PATH_RES+\"fonts/custom-msdf.json\", //ATON.PATH_MODS+'three-mesh-ui/examples/assets/Roboto-msdf.json',\r\n        fontTexture: ATON.PATH_RES+\"fonts/custom.png\" //ATON.PATH_MODS+'three-mesh-ui/examples/assets/Roboto-msdf.png',\r\n\r\n        //alignContent: 'right', // could be 'center' or 'left'\r\n        //justifyContent: 'end', // could be 'center' or 'start'\r\n    });\r\n\r\n    this.userlabelnode.position.y = 0.4;\r\n    this.userlabelnode.add(this.labelcontainer);\r\n\r\n    // username text\r\n    this.usernametext = new ThreeMeshUI.Text({ \r\n        content: \"User #\"+this.userid,\r\n        fontSize: 0.09,\r\n        fontColor: ATON.MatHub.colors.white //ATON.VRoadcast.ucolors[this.userid % ATON.VRoadcast.ucolors.length]\r\n    });\r\n    this.usernametext.position.y = 0.0;\r\n\r\n    // message text\r\n    this.usermessagetext = new ThreeMeshUI.Text({ \r\n        content: \"\\nHello World!\",\r\n        fontSize: 0.03,\r\n        fontColor: ATON.MatHub.colors.white\r\n    });\r\n    this.usermessagetext.position.y = -0.03;\r\n\r\n    this.labelcontainer.add(this.usernametext);\r\n    this.labelcontainer.add(this.usermessagetext);\r\n    \r\n    this.add(this.usermeshnode);\r\n    this.add(this.userlabelnode);\r\n};\r\n\r\n// Loads custom avatar representation (3D model)\r\nloadRepresentation(url){\r\n    let A = this;\r\n\r\n    if (A.usermeshnode.children[0] !== undefined){\r\n        A.usermeshnode.remove(A.usermeshnode.children[0]);\r\n    }\r\n\r\n    A.usermeshnode.load(url); //.setMaterial(A.usermaterial);\r\n\r\n    return this;\r\n}\r\n\r\nsetUsername(username){\r\n    this.username = username;\r\n\r\n    this.usernametext.set({ \r\n        content: username\r\n    });\r\n\r\n    return this;\r\n}\r\n\r\nsetMessage(msg){\r\n    this.message = msg;\r\n\r\n    // TODO: check for text length\r\n    this.usermessagetext.set({ \r\n        content: \"\\n\"+msg\r\n    });\r\n\r\n    return this;\r\n}\r\n\r\nrequestStateTransition(S){\r\n    if (this._tStateCall >= 0.0) return; // already requested\r\n\r\n    this._tStateCall = ATON._clock.elapsedTime;\r\n\r\n    this._currState.position.copy(this.position);\r\n    this._currState.quaternion.copy(this.quaternion);\r\n\r\n    this._tgtState = S;\r\n    \r\n    //this._sDistance = this.position.distanceTo(S.position);\r\n}\r\n\r\nhandleStateTransition(){\r\n    if (this._tStateCall < 0.0) return;\r\n\r\n    let D = this._tStateDur; //(this._sDistance * this._tStateDur);\r\n\r\n    if (D <= 0.0) this._tProgress = 1.0;\r\n    else this._tProgress = (ATON._clock.elapsedTime - this._tStateCall) / D;\r\n\r\n    let cs = this._currState;\r\n    let ts = this._tgtState;\r\n\r\n    // End\r\n    if (this._tProgress >= 1.0){\r\n        this._tStateCall = -1.0;\r\n\r\n        this.position.copy(ts.position);\r\n        //this.quaternion.copy(ts.quaternion);\r\n        this.usermeshnode.quaternion.copy(ts.quaternion);\r\n\r\n        return;\r\n    }\r\n\r\n    this.position.lerpVectors(cs.position, ts.position, this._tProgress);\r\n    this.usermeshnode.quaternion.slerp(ts.quaternion, this._tProgress);\r\n    //THREE.Quaternion.slerp( cs.quaternion, ts.quaternion, this.usermeshnode.quaternion, this._tProgress);\r\n}\r\n\r\nupdate(){\r\n    this.handleStateTransition();\r\n\r\n    let cam  = ATON.Nav._camera;\r\n    let eye = ATON.Nav._currPOV.pos;\r\n    if (cam === undefined || eye === undefined) return;\r\n\r\n    //this.userlabelnode.lookAt( eye );\r\n\r\n    //this.userlabelnode.setRotationFromMatrix(cam.matrix); // quaternion.setFromRotationMatrix( cam.matrix );\r\n    //this.userlabelnode.rotation.copy(cam.rotation);\r\n\r\n    this.userlabelnode.orientToCamera(); //quaternion.copy( ATON.Nav._qOri );\r\n\r\n/*\r\n    this.userlabelnode.rotation.y = Math.atan2(\r\n        ( cam.position.x - this.userlabelnode.position.x ),\r\n        ( cam.position.z - this.userlabelnode.position.z )\r\n    );\r\n*/\r\n    //this.userlabelnode.matrix.copy( cam.matrix );\r\n}\r\n\r\n\r\n};","/*\r\n    ATON VRoadcast\r\n    real-time collaborative networking\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\nimport Avatar from \"./ATON.avatar.js\";\r\n\r\n\r\nlet VRoadcast = {};\r\n\r\nVRoadcast.USER_STATE_FREQ = 0.25; // sec\r\nVRoadcast.REPLICATED_EVT = \"EREP\";\r\n\r\n// Thresholds state sending\r\nVRoadcast.THRES_STATE_POS = 0.01;\r\nVRoadcast.THRES_STATE_ORI = 0.08; // radians\r\n\r\nVRoadcast.Avatar = Avatar;\r\n\r\n\r\n// Init routine\r\nVRoadcast.init = ()=>{\r\n    VRoadcast.address = window.location.origin;\r\n\r\n    VRoadcast.initMaterials();\r\n\r\n    VRoadcast.socket = undefined;\r\n    VRoadcast._connected = false;\r\n\r\n    //VRoadcast.sid = \"_SHARED_\";\r\n    VRoadcast.uid = undefined; // my userID (0,1,....)\r\n\r\n    VRoadcast.avatarList = [];\r\n\r\n    VRoadcast.avaGroup = ATON.createUINode(\"avatars\"); // holds all avatars representations\r\n    VRoadcast.avaGroup.attachToRoot();\r\n\r\n    // send own state with given freq\r\n    window.setInterval( VRoadcast.sendState, VRoadcast.USER_STATE_FREQ*1000.0 );\r\n    VRoadcast._lastStateSent = undefined;\r\n\r\n    console.log(\"VRoadcast initialized\");\r\n};\r\n\r\n// Register materials (avatars/users)\r\nVRoadcast.initMaterials = ()=>{\r\n\r\n    VRoadcast.ucolors = [];\r\n    VRoadcast.ucolors.push( new THREE.Color(1,0,0) );\r\n    VRoadcast.ucolors.push( new THREE.Color(1,1,0) );\r\n    VRoadcast.ucolors.push( new THREE.Color(0,1,0) );\r\n    VRoadcast.ucolors.push( new THREE.Color(0,1,1) );\r\n    VRoadcast.ucolors.push( new THREE.Color(0,0,1) );\r\n    VRoadcast.ucolors.push( new THREE.Color(1,0,1) );\r\n\r\n    VRoadcast.ucolorsdark = [];\r\n    VRoadcast.ucolorsdark.push( new THREE.Color(0.2,0.0,0.0) );\r\n    VRoadcast.ucolorsdark.push( new THREE.Color(0.2,0.2,0.0) );\r\n    VRoadcast.ucolorsdark.push( new THREE.Color(0.0,0.2,0.0) );\r\n    VRoadcast.ucolorsdark.push( new THREE.Color(0.0,0.2,0.2) );\r\n    VRoadcast.ucolorsdark.push( new THREE.Color(0.0,0.0,0.2) );\r\n    VRoadcast.ucolorsdark.push( new THREE.Color(0.2,0.0,0.2) );\r\n\r\n    let MM = ATON.MatHub.materials;\r\n    MM.avatars = [];\r\n\r\n    let mat = new THREE.MeshStandardMaterial({\r\n        color: VRoadcast.ucolors[0], \r\n        transparent: true, \r\n        opacity: 0.4, \r\n        depthWrite: false,\r\n        flatShading: true\r\n    });\r\n\r\n    MM.avatars.push(mat);\r\n\r\n    for (let c=1; c<VRoadcast.ucolors.length; c++){\r\n        let M = mat.clone();\r\n        M.color = VRoadcast.ucolors[c];\r\n\r\n        MM.avatars.push(M);\r\n    }\r\n};\r\n\r\n// Fire replicated event (network)\r\nVRoadcast.fireEvent = (evtname, data)=>{\r\n    if (!VRoadcast._connected) return;\r\n    let sock = VRoadcast.socket;\r\n\r\n    if (sock) sock.emit(VRoadcast.REPLICATED_EVT, {e: evtname, d: data});\r\n    //else ATON.on(\"VRC_Connected\", ()=>{ sock.on(evtname, onReceive); });\r\n};\r\n\r\n// Receive network event\r\nVRoadcast.on = (evtname, handler)=>{\r\n    if (handler === undefined) return;\r\n\r\n    let evhNetwork = ATON.EventHub.evNetwork;\r\n\r\n    if (evhNetwork[evtname] === undefined) evhNetwork[evtname] = []; // First time (event not registered)\r\n    evhNetwork[evtname].push(handler);\r\n};\r\n\r\n\r\nVRoadcast.isConnected = ()=>{\r\n    return VRoadcast._connected;\r\n};\r\n\r\n// Request enter in scene (room) by sid\r\nVRoadcast.requestSceneEnter = (sceneid)=>{\r\n    if (!VRoadcast.socket) return;\r\n    if (sceneid === undefined) sceneid = ATON.SceneHub.currID;\r\n\r\n    if (sceneid === undefined){\r\n        console.log(\"VRC ERROR: current scene ID is undefined\");\r\n        return;\r\n    }\r\n\r\n    VRoadcast.socket.emit(\"SENTER\", sceneid );\r\n};\r\n\r\nVRoadcast.connect = (address)=>{\r\n    if (address) VRoadcast.address = address;\r\n\r\n    let opts = {};\r\n\r\n    // Secure connection\r\n    if (window.location.protocol === \"https:\"){\r\n        opts.path = '/svrc/socket.io';\r\n        opts.secure = true;\r\n        opts.rejectUnauthorized = false;\r\n        //opts.transports = ['websocket'], \r\n        //opts.upgrade = false \r\n    }\r\n    else {\r\n        opts.path = '/vrc/socket.io';\r\n    }\r\n\r\n    VRoadcast.socket = io.connect(VRoadcast.address, opts); //, { 'force new connection': true });\r\n\r\n    if (VRoadcast.socket === undefined) return;\r\n    VRoadcast._connected = VRoadcast.socket.connected;\r\n\r\n    VRoadcast._registerSocketHandlers();\r\n};\r\n\r\n\r\nVRoadcast._onConnected = ()=>{\r\n    //\r\n};\r\n\r\nVRoadcast.setUsername = (username)=>{\r\n    VRoadcast._username = username;\r\n    if (VRoadcast.socket === undefined) return;\r\n\r\n    VRoadcast.socket.emit(\"UNAME\", username);\r\n};\r\n\r\n// Handle incoming server msgs\r\nVRoadcast._registerSocketHandlers = ()=>{\r\n\r\n    // We connected to server\r\n    VRoadcast.socket.on('connect', ()=>{\r\n        VRoadcast._connected = true;\r\n\r\n        // Request enter in scene node (room)\r\n        if (ATON.SceneHub.currID !== undefined) VRoadcast.requestSceneEnter();\r\n        \r\n        console.log(\"VRC connected, entering scene: \"+ATON.SceneHub.currID);\r\n        ATON.fireEvent(\"VRC_Connected\");\r\n\r\n        VRoadcast._onConnected();\r\n    });\r\n\r\n    VRoadcast.socket.on('disconnect', ()=>{\r\n        VRoadcast._connected = false;\r\n        VRoadcast.uid = undefined;\r\n\r\n        VRoadcast.avaGroup.hide();\r\n\r\n        console.log(\"VRC disconnected!\");\r\n        ATON.fireEvent(\"VRC_Disconnected\");\r\n    });\r\n\r\n    // Incoming replicated event\r\n    VRoadcast.socket.on(VRoadcast.REPLICATED_EVT, (data)=>{\r\n        let evtname = data.e;\r\n        let d = data.d;\r\n\r\n        let ehList = ATON.EventHub.evNetwork[evtname];\r\n        ATON.EventHub.executeHandlers(ehList, d);\r\n    });\r\n\r\n    VRoadcast.socket.on('ID', (data)=>{\r\n        console.log(\"Your ID is \" + data);\r\n        VRoadcast.uid = data;\r\n\r\n        //if (ATON.vroadcast.onIDassigned) ATON.vroadcast.onIDassigned();\r\n        ATON.fireEvent(\"VRC_IDassigned\", data.id);\r\n    });\r\n\r\n    VRoadcast.socket.on('UENTER', (data)=>{\r\n        let uid = data;\r\n        //if (uid === VRoadcast.uid) return; // myself\r\n\r\n        console.log(\"User #\" +uid+\" entered the scene\");\r\n\r\n        VRoadcast.touchAvatar(uid);\r\n    });\r\n\r\n    VRoadcast.socket.on('ULEAVE', (data)=>{\r\n        let uid = data;\r\n        \r\n        let A = VRoadcast.avatarList[uid];\r\n        if (A) A.hide();\r\n\r\n        console.log(\"User #\" +uid+\" left the scene\");\r\n    });\r\n\r\n    VRoadcast.socket.on('USTATE', (data)=>{\r\n        let S = VRoadcast.decodeState(data);\r\n\r\n        let uid = S.userid;\r\n        let A = VRoadcast.touchAvatar(uid);\r\n\r\n        //A.position.copy(S.position);\r\n        //A.quaternion.copy(S.quaternion);\r\n        A.requestStateTransition(S);\r\n    });\r\n\r\n    VRoadcast.socket.on('UNAME', (data)=>{\r\n        let uid   = data.uid;\r\n        let uname = data.name;\r\n\r\n        let A = VRoadcast.touchAvatar(uid);\r\n        A.setUsername(uname);\r\n        console.log(\"User #\" +uid+\" changed username to: \"+uname);\r\n    });\r\n};\r\n\r\n// Encode state\r\nVRoadcast.encodeState = (S)=>{\r\n    if (!S) return;\r\n\r\n    let A = new Float32Array(6); // make sufficient room\r\n    A[0] = S.position.x;\r\n    A[1] = S.position.y;\r\n    A[2] = S.position.z;\r\n\r\n    // Convert to byte array, we use last float storage (4 bytes)\r\n    var binData = new Int8Array(A.buffer);\r\n\r\n    binData[16] = (S.quaternion.x * 128.0);\r\n    binData[17] = (S.quaternion.y * 128.0);\r\n    binData[18] = (S.quaternion.z * 128.0);\r\n    binData[19] = (S.quaternion.w * 128.0);\r\n\r\n    binData[20] = S.userid;\r\n\r\n    //binData[21] = parseInt(S.rank);\r\n\r\n    return binData;\r\n}\r\n\r\n// Decode state\r\nVRoadcast.decodeState = (binData)=>{\r\n    let S = {};\r\n    S.userid = binData[20];\r\n\r\n    // First decode quat\r\n    S.quaternion = new THREE.Quaternion(\r\n        binData[16] / 128.0,\r\n        binData[17] / 128.0,\r\n        binData[18] / 128.0,\r\n        binData[19] / 128.0\r\n    );\r\n\r\n    // Now decode floats\r\n    let a8 = new Int8Array(16);\r\n    for (var i=0; i<16; i++) a8[i] = binData[i];\r\n    let A = new Float32Array(a8.buffer);\r\n\r\n    S.position = new THREE.Vector3(A[0],A[1],A[2]);\r\n\r\n    //S.scale = A[3];\r\n\r\n    return S;\r\n}\r\n\r\n\r\n// Update\r\nVRoadcast.update = ()=>{\r\n\r\n    // State interpolation\r\n    for (let a=0; a<VRoadcast.avatarList.length; a++){\r\n        let A = VRoadcast.avatarList[a];\r\n        if (A && A.visible){\r\n            A._tStateDur = VRoadcast.USER_STATE_FREQ;\r\n            A.update();\r\n        }\r\n    }\r\n};\r\n\r\nVRoadcast.sendState = ()=>{\r\n    if (VRoadcast.uid === undefined) return;\r\n    if (!VRoadcast.socket || !VRoadcast._connected) return;\r\n    \r\n    let cpov = ATON.Nav._currPOV;\r\n    if (!cpov) return;\r\n\r\n    //console.log(cpov);\r\n\r\n    let S = {};\r\n    S.position = new THREE.Vector3();\r\n    S.quaternion = new THREE.Quaternion();\r\n\r\n    S.position.copy(cpov.pos);\r\n    S.quaternion.copy(ATON.Nav._qOri);\r\n    S.userid = VRoadcast.uid;\r\n\r\n    // Save bandwidth\r\n    if (VRoadcast._lastStateSent !== undefined){\r\n        let lastPos = VRoadcast._lastStateSent.position;\r\n        let lastOri = VRoadcast._lastStateSent.quaternion;\r\n\r\n        let dPos = lastPos.distanceToSquared(cpov.pos);\r\n        let dOri = lastOri.angleTo(ATON.Nav._qOri);\r\n\r\n        if ( dPos < VRoadcast.THRES_STATE_POS && dOri < VRoadcast.THRES_STATE_ORI) return;\r\n    }\r\n\r\n    // Encode and send\r\n    let binData = VRoadcast.encodeState(S);\r\n    VRoadcast.socket.emit(\"USTATE\", binData/*.buffer*/ );\r\n    VRoadcast._lastStateSent = S;\r\n\r\n    //console.log(\"State sent\");\r\n};\r\n\r\n\r\n// Avatars\r\nVRoadcast.getAvatar = (uid)=>{\r\n    return VRoadcast.avatarList[uid];\r\n};\r\n\r\nVRoadcast.touchAvatar = (uid)=>{\r\n\r\n    // First time\r\n    if (VRoadcast.avatarList[uid] === undefined){\r\n        let A = new VRoadcast.Avatar(uid);\r\n        A.attachTo(VRoadcast.avaGroup);\r\n        \r\n        A.loadRepresentation(ATON.PATH_RES+\"models/vrc/head.gltf\");\r\n        //console.log(VRoadcast.avaGroup);\r\n\r\n        VRoadcast.avatarList[uid] = A;\r\n\r\n        //console.log(VRoadcast.avatarList);\r\n        //console.log(ATON.MatHub.materials.avatars);\r\n        //console.log(A);\r\n    }\r\n\r\n    let A = VRoadcast.avatarList[uid];\r\n    A.show();\r\n\r\n    return A;\r\n}\r\n\r\nVRoadcast.clearAllAvatars = ()=>{\r\n    for (let i in VRoadcast.avatarList){\r\n        let A = VRoadcast.avatarList[i];\r\n        A.hide();\r\n        //A.dispose();\r\n    }\r\n};\r\n\r\nexport default VRoadcast;","/*\r\n    ATON Semantic shapes factory\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\n/**\r\nATON Semantic Factory\r\n@namespace SemFactory\r\n*/\r\nlet SemFactory = {};\r\n\r\nSemFactory.init = ()=>{\r\n    SemFactory.bConvexBuilding = false;\r\n    SemFactory.convexPoints = [];\r\n    //SemFactory.convexMeshes = [];\r\n    SemFactory.convexNode   = undefined; // keeps track of current convex semnode\r\n    SemFactory.currConvexMesh = undefined;\r\n    \r\n    // Temp sem node to hold developing convex mesh\r\n    SemFactory.currSemNode = ATON.createSemanticNode();\r\n    SemFactory.currSemNode.disablePicking();\r\n    SemFactory.currSemNode.attachToRoot();\r\n\r\n    SemFactory.currMaterial = ATON.MatHub.getMaterial(\"semanticShape\"); // current sem material we are using\r\n\r\n    SemFactory._numShapes = 0; // counter of shapes produced\r\n};\r\n\r\n\r\n// Current material\r\nSemFactory.resetMaterial = ()=>{\r\n    SemFactory.currMaterial = ATON.MatHub.getMaterial(\"semanticShape\");\r\n};\r\n\r\nSemFactory.setMaterial = (m)=>{\r\n    if (m === undefined) return;\r\n    SemFactory.currMaterial = m;\r\n};\r\n\r\n\r\n// Convex shapes\r\n// NOTE: if semid exists, add mesh under the same id\r\nSemFactory.addConvexPoint = (/*semid,*/ p)=>{\r\n\r\n    SemFactory.convexPoints.push(p);\r\n    let numPoints = SemFactory.convexPoints.length;\r\n\r\n    // Spatial UI\r\n    let M = new THREE.Mesh( ATON.Utils.geomUnitSphere, ATON.MatHub.getMaterial(\"semanticShapeEdit\"));\r\n    M.position.copy(p);\r\n    M.scale.set(0.01,0.01,0.01);\r\n    ATON.SUI.gPoints.add( M );\r\n\r\n    if (numPoints < 4) return false;\r\n\r\n    // lets build convex shape\r\n    let geom   = new THREE.ConvexBufferGeometry( SemFactory.convexPoints );\r\n    let semesh = new THREE.Mesh( geom, ATON.MatHub.getMaterial(\"semanticShapeEdit\") );\r\n\r\n    //let numMeshes = SemFactory.convexMeshes.length;\r\n\r\n    // First time: create semnode and add it to current sem group\r\n    if (!SemFactory.bConvexBuilding){\r\n        //if (semid === undefined) semid = \"sem\"+SemFactory._numShapes;\r\n\r\n        //SemFactory.convexNode = ATON.getSemanticNode(semid) || ATON.createSemanticNode(semid);\r\n        //SemFactory.convexNode = ATON.createSemanticNode();\r\n        //SemFactory.convexNode.add(semesh);\r\n        SemFactory.currSemNode.add(semesh);\r\n        \r\n        // Store\r\n        semesh.userData._convexPoints = [];\r\n        for (let i=0; i<numPoints; i++){\r\n            //semesh.userData._convexPoints.push( ATON.Utils.setVectorPrecision(SemFactory.convexPoints[i],3) );\r\n\r\n            ATON.Utils.setVectorPrecision(SemFactory.convexPoints[i],4);\r\n            semesh.userData._convexPoints.push(SemFactory.convexPoints[i].x);\r\n            semesh.userData._convexPoints.push(SemFactory.convexPoints[i].y);\r\n            semesh.userData._convexPoints.push(SemFactory.convexPoints[i].z);\r\n        }\r\n\r\n        SemFactory.currConvexMesh = semesh;\r\n        SemFactory.bConvexBuilding = true;\r\n    }\r\n\r\n    // keep updating current semantic geometry\r\n    else {\r\n        let currSemesh = SemFactory.currConvexMesh;\r\n        currSemesh.geometry.dispose();\r\n        currSemesh.geometry = geom;\r\n\r\n        //currSemesh.userData._convexPoints.push( ATON.Utils.setVectorPrecision(p,3) );\r\n\r\n        ATON.Utils.setVectorPrecision(p,4);\r\n        currSemesh.userData._convexPoints.push( p.x );\r\n        currSemesh.userData._convexPoints.push( p.y );\r\n        currSemesh.userData._convexPoints.push( p.z );\r\n    }\r\n\r\n    return true;\r\n};\r\n\r\nSemFactory.stopCurrentConvex = ()=>{\r\n    SemFactory.convexPoints = [];\r\n    SemFactory.bConvexBuilding = false;\r\n\r\n    SemFactory.currSemNode.removeChildren();\r\n    ATON.SUI.gPoints.removeChildren();\r\n};\r\n\r\nSemFactory.getCurrentConvexShape = ()=>{\r\n    return SemFactory.currSemNode\r\n};\r\n\r\nSemFactory.completeConvexShape = (semid)=>{\r\n    SemFactory.convexPoints = [];\r\n    SemFactory.bConvexBuilding = false;\r\n\r\n    //if (SemFactory.convexNode === undefined) return undefined;\r\n    //if (SemFactory.currConvexMesh === undefined) return undefined;\r\n    if (SemFactory.currSemNode === undefined) return;\r\n\r\n    if (semid === undefined) semid = \"sem\"+SemFactory._numShapes;\r\n\r\n    let S = ATON.getSemanticNode(semid) || ATON.createSemanticNode(semid);\r\n    \r\n    S.add(SemFactory.currSemNode.children[0]);\r\n    S.setMaterial( SemFactory.currMaterial );\r\n    S.setDefaultAndHighlightMaterials(SemFactory.currMaterial, ATON.MatHub.materials.semanticShapeHL);\r\n    S.enablePicking();\r\n\r\n    SemFactory.currSemNode.removeChildren();\r\n\r\n/*\r\n    SemFactory.convexNode = ATON.getSemanticNode(semid) || ATON.createSemanticNode(semid);\r\n    SemFactory.convexNode.add(SemFactory.currConvexMesh);\r\n\r\n    SemFactory.convexNode.setMaterial( SemFactory.currMaterial );\r\n    SemFactory.convexNode.setDefaultMaterial(SemFactory.currMaterial);\r\n    SemFactory.convexNode.enablePicking();\r\n*/\r\n    SemFactory._numShapes++;\r\n\r\n    //console.log(SemFactory.convexNode);\r\n    //console.log(SemFactory.convexNode.userData._convexPoints);\r\n\r\n    //return SemFactory.convexNode;\r\n\r\n    // Spatial UI\r\n    ATON.SUI.gPoints.removeChildren();\r\n\r\n    return S;\r\n};\r\n\r\nSemFactory.createConvexShape = (semid, points)=>{\r\n    let geom   = new THREE.ConvexBufferGeometry( points );\r\n    let semesh = new THREE.Mesh( geom, SemFactory.currMaterial );\r\n\r\n    semesh.userData._convexPoints = [];\r\n    for (let i=0; i<points.length; i++){\r\n        let p = points[i];\r\n        ATON.Utils.setVectorPrecision(p,4);\r\n\r\n        semesh.userData._convexPoints.push( p.x );\r\n        semesh.userData._convexPoints.push( p.y );\r\n        semesh.userData._convexPoints.push( p.z );\r\n        }\r\n\r\n    let S = ATON.getOrCreateSemanticNode(semid);\r\n    S.add(semesh);\r\n    S.setDefaultAndHighlightMaterials(SemFactory.currMaterial, ATON.MatHub.materials.semanticShapeHL);\r\n\r\n    S.enablePicking();\r\n\r\n    return S;\r\n};\r\n\r\nSemFactory.addSurfaceConvexPoint = (/*semid,*/ offset)=>{\r\n    if (!ATON._queryDataScene) return false;\r\n\r\n    if (offset === undefined) offset = 0.02;\r\n\r\n    let p = ATON._queryDataScene.p;\r\n    let n = ATON._queryDataScene.n;\r\n    p.x += (n.x * offset);\r\n    p.y += (n.y * offset);\r\n    p.z += (n.z * offset);\r\n\r\n    SemFactory.addConvexPoint(p);\r\n    return p;\r\n};\r\n\r\n\r\n// Spherical semantic shapes\r\n// NOTE: if semid exists, add mesh under the same id\r\nSemFactory.createSphere = (semid, location, radius)=>{\r\n    if (location === undefined) return undefined;\r\n    if (radius === undefined) return undefined;\r\n\r\n/*\r\n    if (ATON.getSemanticNode(semid)){\r\n        console.log(\"ERROR SemFactory: semantic node \"+semid+\" already exists.\");\r\n        return false;\r\n    }\r\n*/\r\n    if (semid === undefined) semid = \"sem\"+SemFactory._numShapes;\r\n\r\n    let S = ATON.getOrCreateSemanticNode(semid);\r\n\r\n    //let g = new THREE.SphereGeometry( 1.0, 16, 16 );\r\n    let M = new THREE.Mesh( ATON.Utils.geomUnitSphere, SemFactory.currMaterial );\r\n    \r\n    // Note: we add multiple spheres to the same <semid> node\r\n    let sphere = new THREE.Object3D();\r\n    sphere.position.copy(location);\r\n    sphere.scale.set(radius, radius, radius);\r\n    sphere.add(M);\r\n\r\n    S.add( sphere );\r\n    S.enablePicking();\r\n    S.setDefaultAndHighlightMaterials(SemFactory.currMaterial, ATON.MatHub.materials.semanticShapeHL);\r\n\r\n    //SemFactory.currParent.add( S );\r\n\r\n    SemFactory._numShapes++;\r\n\r\n    return S;\r\n};\r\n\r\nSemFactory.createSurfaceSphere = (semid)=>{\r\n    if (!ATON._queryDataScene) return undefined;\r\n\r\n    let p = ATON._queryDataScene.p;\r\n    let r = ATON.SUI.getSelectorRadius();\r\n\r\n    return SemFactory.createSphere(semid, p,r);\r\n};\r\n\r\nexport default SemFactory;","/*\r\n    ATON Front-end blueprint\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\n/**\r\nATON Front-end routines\r\n@namespace FE\r\n*/\r\nlet FE = {};\r\n\r\n\r\nFE.realize = ()=>{\r\n    FE.PATH_RES_ICONS = ATON.PATH_RES+\"icons/\";\r\n\r\n    FE._bPopup = false; // showing popup\r\n    FE.bPopupBlurBG = false; // blur 3D content on popup show\r\n\r\n    FE.urlParams = new URLSearchParams(window.location.search);\r\n\r\n    FE._uiSetupBase();\r\n\r\n    ATON.realize();\r\n};\r\n\r\n// Add basic spinning loader\r\nFE.addBasicLoaderEvents = ()=>{\r\n    ATON.on(\"NodeRequestFired\", ()=>{ $(\"#idLoader\").show(); });\r\n    ATON.on(\"AllNodeRequestsCompleted\", ()=>{ \r\n        $(\"#idLoader\").hide();\r\n        \r\n        if (ATON.Nav.homePOV === undefined) ATON.Nav.computeAndRequestDefaultHome(0.5);\r\n    });\r\n};\r\n\r\nFE.loadSceneID = (sid)=>{\r\n    if (sid === undefined) return;\r\n\r\n    let reqstr = ATON.PATH_RESTAPI_SCENE + sid;\r\n    if (ATON.SceneHub._bEdit) reqstr += \",edit\";\r\n\r\n    ATON.SceneHub.load(reqstr, sid);\r\n    console.log(reqstr);\r\n};\r\n\r\n\r\n\r\n// HTML UI\r\n//=======================================\r\n// Sample basic UI setup\r\nFE.uiBasicSetup = ()=>{\r\n    FE.uiAddButton(\"idTopToolbar\",\"fullscreen\", ATON.toggleFullScreen );\r\n    if (ATON.Utils.isConnectionSecure()) FE.uiAddButton(\"idTopToolbar\",\"vr\", ATON.XR.toggle );\r\n\r\n    FE.uiAddButton(\"idBottomToolbar\",\"home\", ()=>{ ATON.Nav.requestHome(0.1); });\r\n};\r\n\r\nFE._uiSetupBase = ()=>{\r\n    $(\"#idPopup\").click( FE.popupClose );\r\n    $(\"#idLoader\").html(\"<img src='\"+ATON.PATH_RES+\"loader.png'>\");\r\n};\r\n\r\n// Add Generic button to a specific div container\r\nFE.uiAddButton = (idcontainer, iconid, onPress)=>{\r\n    let htmlcode = \"<button id='btn-\"+iconid+\"' type='button' class='atonBTN'><img src='\"+FE.PATH_RES_ICONS+iconid+\".png'></button>\";\r\n    $(\"#\"+idcontainer).append(htmlcode);\r\n\r\n    if (onPress) $(\"#btn-\"+iconid).click( onPress );\r\n};\r\n\r\nFE.uiAddButtonHome = (idcontainer)=>{\r\n    FE.uiAddButton(idcontainer, \"home\", ()=>{ ATON.Nav.requestHome(0.1); });\r\n};\r\nFE.uiAddButtonFirstPerson = (idcontainer)=>{\r\n    FE.uiAddButton(idcontainer, \"fp\", ATON.Nav.setFirstPersonControl );\r\n};\r\nFE.uiAddButtonVR = (idcontainer)=>{\r\n    if (!ATON.Utils.isConnectionSecure()) return;\r\n    FE.uiAddButton(idcontainer, \"vr\", ATON.XR.toggle );\r\n};\r\nFE.uiAddButtonDeviceOrientation = (idcontainer)=>{\r\n    if (!ATON.Utils.isConnectionSecure()) return;\r\n    if (!ATON.Utils.isMobile()) return;\r\n    FE.uiAddButton(idcontainer,\"devori\", ATON.Nav.setDeviceOrientationControl );\r\n};\r\n\r\nFE.uiAddButtonQR = (idcontainer)=>{\r\n    FE.uiAddButton(idcontainer,\"qr\", FE.popupQR );\r\n};\r\n\r\n// Attach ID validator to given input field\r\nFE.uiAttachInputFilterID = (inputid)=>{\r\n    $(\"#\"+inputid).on('keyup change input', ()=>{\r\n        let value = $(\"#\"+inputid).val();\r\n        let regReplace = new RegExp('[^A-Za-z-_]', 'ig');\r\n        $(\"#\"+inputid).val( value.replace(regReplace, '') );\r\n\r\n    });\r\n};\r\n\r\nFE.setupBasicUISounds = ()=>{\r\n    FE.auLib = {};\r\n\r\n    FE.auLib.switch = new Audio(ATON.PATH_RES+\"audio/switch.wav\");\r\n    FE.auLib.switch.loop = false;\r\n};\r\n\r\n\r\n// Popups\r\n//===================================================================\r\nFE.popupShow = (htmlcontent)=>{\r\n    if (FE._bPopup) return false;\r\n\r\n    $('#idPopup').html(\"<div class='atonPopup' id='idPopupContent'>\"+htmlcontent+\"</div>\");\r\n    $('#idPopupContent').click((e)=>{ e.stopPropagation(); });\r\n    $('#idPopup').fadeIn();\r\n\r\n    FE._bPopup = true;\r\n\r\n    if (FE.bPopupBlurBG){\r\n        ATON._renderer.setPixelRatio( 0.1 );\r\n        ATON._renderer.render( ATON._mainRoot, ATON.Nav._camera );\r\n    }\r\n\r\n    ATON._bPauseQuery = true;\r\n    ATON.renderPause();\r\n    return true;\r\n};\r\n\r\nFE.popupClose = ()=>{\r\n    FE._bPopup = false;\r\n\r\n    ATON.renderResume();\r\n    if (FE.bPopupBlurBG) ATON.resetPixelDensity();\r\n\r\n    $(\"#idPopup\").fadeOut();\r\n    //$(\"#idPopup\").empty();\r\n\r\n    ATON._bPauseQuery = false;\r\n    ATON.focusOn3DView();\r\n};\r\n\r\nFE.popupQR = ()=>{\r\n    let htmlcontent = \"<h1>Share</h1>\";\r\n    htmlcontent += \"<div class='atonQRcontainer' id='idQRcode'></div><br><br>\";\r\n\r\n    if ( !ATON.FE.popupShow(htmlcontent) ) return;\r\n\r\n    let url = window.location.href;\r\n    new QRCode(document.getElementById(\"idQRcode\"), url);\r\n};\r\n\r\n\r\n\r\nexport default FE;","/*!\r\n    @preserve\r\n\r\n \tATON\r\n\r\n \t@author Bruno Fanini\r\n\tVHLab, CNR ISPC\r\n\r\n==================================================================================*/\r\n\r\n'use strict';\r\n\r\n/**\r\n@namespace ATON\r\n*/\r\nlet ATON = {};\r\nwindow.ATON = ATON;\r\n\r\n// Import\r\nimport Node from \"./ATON.node.js\";\r\nimport POV from \"./ATON.pov.js\";\r\n//import Period from \"./ATON.period.js\";\r\nimport LightProbe from \"./ATON.lightprobe.js\";\r\n\r\nimport EventHub from \"./ATON.eventhub.js\";\r\nimport MatHub from \"./ATON.mathub.js\";\r\nimport Utils from \"./ATON.utils.js\";\r\nimport SceneHub from \"./ATON.scenehub.js\";\r\nimport Nav from \"./ATON.nav.js\";\r\nimport XR from \"./ATON.xr.js\";\r\nimport SUI from \"./ATON.sui.js\";\r\nimport VRoadcast from \"./ATON.vroadcast.js\";\r\nimport SemFactory from \"./ATON.semfactory.js\";\r\nimport FE from \"./ATON.fe.js\";\r\n\r\n// Classes\r\nATON.Node       = Node;\r\nATON.POV        = POV;\r\nATON.LightProbe = LightProbe;\r\n//ATON.Period = Period;\r\n\r\n// NS\r\nATON.EventHub   = EventHub;\r\nATON.Utils      = Utils;\r\nATON.SceneHub   = SceneHub;\r\nATON.MatHub     = MatHub;\r\nATON.Nav        = Nav;\r\nATON.XR         = XR;\r\nATON.SUI        = SUI;\r\nATON.VRoadcast  = VRoadcast;\r\nATON.SemFactory = SemFactory;\r\nATON.FE         = FE;\r\n\r\n//==============================================================\r\n// Consts\r\n//==============================================================\r\nATON.STD_UPVECTOR = new THREE.Vector3(0,1,0);\r\nATON.ROOT_NID = \".\"; // reserved node ID for graph-roots\r\n\r\nATON.RAD2DEG = (180.0 / Math.PI);\r\nATON.DEG2RAD = (Math.PI / 180.0);\r\n\r\n// Node types\r\nATON.NTYPES = {};\r\n// 1 and 2 are reserved\r\nATON.NTYPES.SCENE  = 3;\r\nATON.NTYPES.SEM    = 4;\r\nATON.NTYPES.UI     = 5;\r\n\r\n// Folders\r\nATON.PATH_RESTAPI       = window.location.origin + \"/api/\";\r\nATON.PATH_RESTAPI_SCENE = ATON.PATH_RESTAPI + \"scene/\";\r\nATON.PATH_MODS          = window.location.origin + \"/mods/\";\r\nATON.PATH_THREE         = ATON.PATH_MODS + \"three/\";\r\nATON.PATH_DRACO_LIB     = ATON.PATH_THREE+\"examples/js/libs/draco/\";\r\nATON.PATH_BASIS_LIB     = ATON.PATH_THREE+\"examples/js/libs/basis/\";\r\n\r\nATON.PATH_COLLECTION = window.location.origin + \"/collection/\";\r\nATON.PATH_MODELS     = ATON.PATH_COLLECTION + \"models/\";\r\nATON.PATH_SCENES     = window.location.origin + \"/scenes/\";\r\nATON.PATH_RES        = window.location.origin + \"/res/\";\r\n\r\n/**\r\nSet path collection (3D models, audio, panoramas, ...)\r\n@param {string} path - path\r\n*/\r\nATON.setPathCollection = (path)=>{\r\n    ATON.PATH_COLLECTION = window.location.origin + path;\r\n    ATON.PATH_MODELS     = ATON.PATH_COLLECTION+\"models/\";\r\n};\r\n\r\n/**\r\nSet path scenes\r\n@param {string} path - path\r\n*/\r\nATON.setPathScenes = (path)=>{\r\n    ATON.PATH_SCENES = window.location.origin + path;\r\n};\r\n\r\n\r\nATON._setupBaseListeners = ()=>{\r\n    let el = ATON._renderer.domElement;\r\n\r\n    window.addEventListener( 'resize', ATON._onResize, false );\r\n    el.addEventListener( 'mousemove', ATON._updateScreenMove, false );\r\n    ///el.addEventListener('dblclick', ATON._doubleTap, false);\r\n\r\n    el.addEventListener( 'wheel', ATON._onMouseWheel, false );\r\n\r\n\r\n    // Touch events\r\n    Hammer(el).on(\"doubletap\", (e)=>{\r\n        ATON.fireEvent(\"DoubleTap\", e.srcEvent);\r\n        //console.log(e.srcEvent);\r\n    });\r\n\r\n    Hammer(el).on(\"tap\", (e)=>{\r\n        ATON._updateScreenMove(e.srcEvent);\r\n        ATON._handleQueries();\r\n\r\n        ATON.fireEvent(\"Tap\", e.srcEvent);\r\n        //console.log(e.srcEvent);\r\n\r\n        // UI selection\r\n        if (ATON._hoveredUI === undefined) return;\r\n        let H = ATON.getUINode(ATON._hoveredUI);\r\n        if (H && H.onSelect) H.onSelect();\r\n    });\r\n\r\n    ATON.on(\"DoubleTap\", (e)=>{\r\n        //console.log(e);\r\n        ATON.defaultDoubleTapFromScreenCoords(e);\r\n    });\r\n\r\n    //ATON.on(\"Tap\", (e)=>{\r\n        //console.log(e);\r\n    //});\r\n\r\n\r\n    // Keyboard\r\n    ATON._kModShift = false;\r\n    ATON._kModCtrl  = false;\r\n\r\n    el.addEventListener(\"keydown\", (e)=>{\r\n        if (e.key === \"Shift\")   ATON._kModShift = true;\r\n        if (e.key === \"Control\") ATON._kModCtrl  = true;\r\n        \r\n        ATON.fireEvent(\"KeyPress\", e.key);\r\n        //ATON.fireEvent(\"KeyPress/\"+e.key);\r\n    }, false);\r\n\r\n    el.addEventListener(\"keyup\", (e)=>{\r\n        if (e.key === \"Shift\")   ATON._kModShift = false;\r\n        if (e.key === \"Control\") ATON._kModCtrl  = false;\r\n\r\n        ATON.fireEvent(\"KeyUp\", e.key);\r\n        //ATON.fireEvent(\"KeyUp/\"+e.key);\r\n    }, false);\r\n\r\n    // Defaults\r\n    ATON.on(\"KeyPress\", (k)=>{\r\n\r\n        if (k==='+'){\r\n            let f = ATON.Nav.getFOV() + 1.0;\r\n            ATON.Nav.setFOV(f);\r\n        }\r\n        if (k==='-'){\r\n            let f = ATON.Nav.getFOV() - 1.0;\r\n            ATON.Nav.setFOV(f);\r\n        }\r\n\r\n        if (k==='PageUp'){\r\n            let r = ATON.SUI.mainSelector.scale.x + 0.02;\r\n            ATON.SUI.setSelectorRadius(r);\r\n        }\r\n        if (k==='PageDown'){\r\n            let r = ATON.SUI.mainSelector.scale.x - 0.02;\r\n            r = Math.max(r, 0.01);\r\n            ATON.SUI.setSelectorRadius(r); \r\n        }\r\n    });\r\n\r\n    // Default semantic highlight\r\n    ATON.on(\"SemanticNodeLeave\", (semid)=>{\r\n        let S = ATON.getSemanticNode(semid);\r\n        if (S) S.restoreDefaultMaterial();\r\n    });\r\n    ATON.on(\"SemanticNodeHover\", (semid)=>{\r\n        let S = ATON.getSemanticNode(semid);\r\n        if (S) S.highlight();\r\n    });\r\n            \r\n};\r\n\r\nATON._onResize = ()=>{\r\n    ATON.Nav._camera.aspect = window.innerWidth / window.innerHeight;\r\n    ATON.Nav._camera.updateProjectionMatrix();\r\n\r\n    ATON._renderer.setSize( window.innerWidth, window.innerHeight );\r\n    console.log(\"onResize\");\r\n};\r\n\r\nATON._onMouseWheel = (e)=>{\r\n    e.preventDefault();\r\n\r\n    ATON.fireEvent(\"MouseWheel\", e.deltaY);\r\n};\r\n\r\nATON.focusOn3DView = ()=>{\r\n    ATON._renderer.domElement.focus();\r\n};\r\n\r\n// Default retarget from screen coordinates (eg.: on double tap)\r\nATON.defaultDoubleTapFromScreenCoords = (e)=>{\r\n    ATON._updateScreenMove(e);\r\n    ATON._handleQueryScene();\r\n\r\n    let bFPtrans = ATON.Nav.isFirstPerson() || ATON.Nav.isDevOri();\r\n\r\n    // When first-person mode, teleport (non immersive)\r\n    if (ATON._queryDataScene && bFPtrans){\r\n        let P = ATON._queryDataScene.p;\r\n        let N = ATON._queryDataScene.n;\r\n        \r\n        if (N.y > 0.7){\r\n            let currDir = ATON.Nav._vDir;\r\n            let feye = new THREE.Vector3(P.x, P.y+ATON.userHeight, P.z);\r\n            let ftgt = new THREE.Vector3(\r\n                feye.x + currDir.x,\r\n                feye.y + currDir.y,\r\n                feye.z + currDir.z,\r\n            );\r\n\r\n            let POV = new ATON.POV().setPosition(feye).setTarget(ftgt);\r\n\r\n            ATON.Nav.requestPOV(POV, 0.5);\r\n        }\r\n        return;\r\n    }\r\n\r\n    // In orbit mode, focus on selected SemNode...\r\n    let hsn = ATON.getSemanticNode(ATON._hoveredSemNode);\r\n    if (ATON._queryDataSem && hsn){\r\n        ATON.Nav.requestPOVbyNode( hsn, 0.3);\r\n        return;\r\n    }\r\n    // ...or perform standard retarget on picket surface point\r\n    if (ATON._queryDataScene){\r\n        ATON.Nav.requestRetarget(ATON._queryDataScene.p, /*ATON._queryDataScene.n*/undefined, 0.3);\r\n    }\r\n\r\n    // TODO: go POV in sight if any (panorama only mode)\r\n}\r\n\r\nATON.toggleFullScreen = (b)=>{\r\n    if (b === undefined){\r\n        screenfull.toggle();\r\n        return;\r\n        }\r\n\r\n    if (b) screenfull.request();\r\n};\r\n\r\n\r\n//============================================================================\r\n// ATON init routines\r\n//============================================================================\r\n/**\r\nMain ATON initialization, it will take care of all sub-components initialization, device profiling and much more\r\n@example\r\nATON.realize()\r\n*/\r\nATON.realize = ()=>{\r\n    console.log(\"realize\");\r\n\r\n    ATON.Utils.init();\r\n    ATON.Utils.profileDevice();\r\n    \r\n    //THREE.Object3D.DefaultUp = new THREE.Vector3(0,0,1); // mismatches WebXR y-up\r\n\r\n    // Timing\r\n    ATON._clock = new THREE.Clock(true);\r\n\r\n    let wglopts = {\r\n        //canvas: document.getElementById(\"idView\"),\r\n        antialias: true, //ATON.device.isMobile? false : true,\r\n        alpha: true,\r\n        //pecision: \"lowp\"\r\n    };\r\n\r\n    ATON._renderer = new THREE.WebGLRenderer(wglopts);\r\n    ATON._renderer.setSize( window.innerWidth, window.innerHeight );\r\n\r\n    ATON._stdpxd = 1.0;\r\n    //ATON._renderer.setPixelRatio( window.devicePixelRatio? window.devicePixelRatio : 1.0 );\r\n    ATON._renderer.setPixelRatio( ATON._stdpxd );\r\n    \r\n    ATON._renderer.outputEncoding = THREE.sRGBEncoding;\r\n    //console.log(ATON._renderer.getPixelRatio());\r\n\r\n    ATON._renderer.setAnimationLoop( ATON._onFrame );\r\n    //ATON._bDirtyLP = false;\r\n\r\n    ATON._maxAnisotropy = 4; //ATON._renderer.capabilities.getMaxAnisotropy();\r\n    console.log(ATON._renderer.capabilities);\r\n\r\n    THREE.Cache.enabled = true;\r\n\r\n    ATON.userHeight = 1.6;\r\n \r\n    document.body.appendChild( ATON._renderer.domElement );\r\n    //console.log(ATON._renderer);\r\n\r\n    ATON.EventHub.init();\r\n    ATON.MatHub.init();\r\n\r\n    //ATON._setupLoadManager();\r\n    ATON._assetsManager = {};\r\n    ATON._aLoader = new THREE.GLTFLoader(/*ATON._loadManager*/);\r\n    ATON._dracoLoader = new THREE.DRACOLoader();\r\n    ATON._dracoLoader.setDecoderPath( ATON.PATH_DRACO_LIB );\r\n    ATON._aLoader.setDRACOLoader( ATON._dracoLoader );\r\n    ATON._numReqLoad = 0;\r\n\r\n    // Periods (TODO:)\r\n    //ATON.periods = [];\r\n\r\n    ATON._lps = []; // lightprobes\r\n\r\n    ATON.initGraphs();\r\n    ATON.SceneHub.init();\r\n\r\n    // Init nav system\r\n    ATON.Nav.init();\r\n\r\n    // XR\r\n    ATON.XR.init();\r\n\r\n    // Spatial UI\r\n    ATON.SUI.init();\r\n\r\n    // VRoadcast\r\n    ATON.VRoadcast.init();\r\n\r\n    // Semantic Factory\r\n    ATON.SemFactory.init();\r\n\r\n    // Query / picked data\r\n    ATON._queryDataScene = undefined;\r\n    ATON._queryDataSem   = undefined;\r\n    ATON._queryDataUI    = undefined;\r\n\r\n    ATON._hoveredSemNode = undefined;\r\n    ATON._hoveredUI      = undefined;\r\n\r\n    ATON._bQuerySemOcclusion = true; // TODO: implement\r\n    ATON._bQueryNormals  = true;\r\n    ATON._bPauseQuery    = false;\r\n\r\n    // Basis (future support)\r\n/*\r\n    ATON._basisLoader = new BasisTextureLoader();\r\n    ATON._basisLoader.setTranscoderPath( ATON.PATH_BASIS_LIB );\r\n    ATON._basisLoader.detectSupport( ATON._renderer );\r\n    \r\n    // Register BasisTextureLoader for .basis extension.\r\n    THREE.DefaultLoadingManager.addHandler( /\\.basis$/, ATON._basisLoader );\r\n*/\r\n\r\n\r\n    // Mouse/Touch screen coords\r\n    ATON._screenPointerCoords = new THREE.Vector2(0.0,0.0);\r\n\r\n    // Ray casters\r\n    ATON._rcScene = new THREE.Raycaster();\r\n    ATON._rcScene.layers.set(ATON.NTYPES.SCENE);\r\n    ATON._rcSemantics = new THREE.Raycaster();\r\n    ATON._rcSemantics.layers.set(ATON.NTYPES.SEM);\r\n    ATON._rcUI = new THREE.Raycaster();\r\n    ATON._rcUI.layers.set(ATON.NTYPES.UI);\r\n\r\n    ATON._registerRCS();\r\n\r\n    ATON._setupBaseListeners();\r\n\r\n    ATON.focusOn3DView();\r\n};\r\n\r\nATON.renderPause = ()=>{\r\n    ATON._renderer.setAnimationLoop( undefined );\r\n};\r\nATON.renderResume = ()=>{\r\n    ATON._renderer.setAnimationLoop( ATON._onFrame );\r\n};\r\n\r\nATON._setupLoadManager = ()=>{\r\n    ATON._loadManager = new THREE.LoadingManager();\r\n    ATON._loadManager.onStart = ( url, itemsLoaded, itemsTotal )=>{\r\n\t    console.log( 'Started loading file: ' + url + '.\\nLoaded ' + itemsLoaded + ' of ' + itemsTotal + ' files.' );\r\n        ATON.fireEvent(\"NodeRequestFired\", url);\r\n    };\r\n\r\n    ATON._loadManager.onLoad = ()=>{\r\n\t    console.log( 'Loading complete!');\r\n        ATON.fireEvent(\"AllNodeRequestsCompleted\");\r\n    };\r\n\r\n    ATON._loadManager.onProgress = ( url, itemsLoaded, itemsTotal )=>{\r\n\t    //console.log( 'Loading file: ' + url + '.\\nLoaded ' + itemsLoaded + ' of ' + itemsTotal + ' files.' );\r\n    };\r\n\r\n    ATON._loadManager.onError = ( url )=>{\r\n\t    console.log( 'There was an error loading ' + url );\r\n    };\r\n};\r\n\r\n/**\r\nSet the default pixel density (standard is 1.0)\r\n@example\r\nATON.setDefaultPixelDensity(0.5)\r\n*/\r\nATON.setDefaultPixelDensity = (d)=>{\r\n    ATON._stdpxd = d;\r\n    ATON._renderer.setPixelRatio( d );\r\n};\r\n\r\n/**\r\nReset pixel density to default\r\n*/\r\nATON.resetPixelDensity = ()=>{\r\n    ATON._renderer.setPixelRatio( ATON._stdpxd );\r\n};\r\n\r\n\r\n//============================================================================\r\n// Scene-graphs\r\n//============================================================================\r\nATON.snodes   = {}; // Visible scene-graph\r\nATON.semnodes = {}; // Semantics graph\r\nATON.uinodes  = {}; // UI graph\r\n\r\n// Visible scene-graph\r\nATON.createSceneNode = (id)=>{\r\n    return new ATON.Node(id, ATON.NTYPES.SCENE);\r\n};\r\nATON.getSceneNode = (id)=>{ \r\n    if (id === undefined) return undefined;    \r\n    return ATON.snodes[id];\r\n};\r\nATON.getOrCreateSceneNode = (id)=>{\r\n    let N = ATON.getSceneNode(id);\r\n    if (N !== undefined) return N;\r\n    return ATON.createSceneNode(id);\r\n};\r\n\r\nATON.getRootScene = ()=>{\r\n    return ATON._rootVisible;\r\n};\r\n\r\n// Semantics, shape descriptors\r\nATON.createSemanticNode = (id)=>{\r\n    return new ATON.Node(id, ATON.NTYPES.SEM);\r\n};\r\nATON.getSemanticNode = (id)=>{\r\n    if (id === undefined) return undefined; \r\n    return ATON.semnodes[id];\r\n};\r\nATON.getOrCreateSemanticNode = (id)=>{\r\n    let S = ATON.getSemanticNode(id);\r\n    if (S !== undefined) return S;\r\n    return ATON.createSemanticNode(id);\r\n};\r\n\r\nATON.getRootSemantics = ()=>{\r\n    return ATON._rootSem;\r\n};\r\n\r\n// UI graph\r\nATON.createUINode = (id)=>{\r\n    return new ATON.Node(id, ATON.NTYPES.UI);\r\n};\r\nATON.getUINode = (id)=>{\r\n    if (id === undefined) return undefined; \r\n    return ATON.uinodes[id];\r\n};\r\nATON.getRootUI = ()=>{\r\n    return ATON._rootUI;\r\n};\r\n\r\n// Asset loading routines\r\nATON._assetReqNew = (url)=>{\r\n    ATON._numReqLoad++;\r\n    ATON.fireEvent(\"NodeRequestFired\", url);\r\n};\r\nATON._assetReqComplete = (url)=>{\r\n    ATON.fireEvent(\"NodeRequestCompleted\", url);\r\n    ATON._numReqLoad--;\r\n\r\n    if (ATON._numReqLoad <= 0){\r\n\r\n        ATON.fireEvent(\"AllNodeRequestsCompleted\");\r\n        //ATON.updateLightProbes();\r\n\r\n        //ATON.getRootScene().assignLightProbesByProximity();\r\n\r\n        //ATON._bDirtyLP = true;\r\n\r\n        // FIXME: dirty\r\n\r\n        setTimeout( ()=>{\r\n            let p = ATON._rootVisible.getBound().center;\r\n            if (p) ATON._mMainPano.position.set(p.x, p.y, p.z);\r\n            ATON.updateLightProbes();\r\n            console.log(\"LPs updated.\");\r\n        }, 1000);\r\n\r\n    }\r\n};\r\n\r\n\r\nATON.initGraphs = ()=>{\r\n    // Global root\r\n    ATON._mainRoot = new THREE.Scene();\r\n    ATON._mainRoot.background = new THREE.Color( 0.7,0.7,0.7 );\r\n\r\n    // visible scene-graph\r\n    ATON._rootVisibleGlobal = new THREE.Group();\r\n    ATON._mainRoot.add(ATON._rootVisibleGlobal);\r\n\r\n    ATON._rootVisible = ATON.createSceneNode().setAsRoot();\r\n    ATON._rootVisibleGlobal.add(ATON._rootVisible);\r\n\r\n\r\n    // semantics graph\r\n    ATON._rootSem = ATON.createSemanticNode().setAsRoot();\r\n    ATON._mainRoot.add(ATON._rootSem);\r\n\r\n    // UI graph\r\n    ATON._rootUI = ATON.createUINode().setAsRoot();\r\n    ATON._mainRoot.add(ATON._rootUI);\r\n\r\n    // Uniform lighting\r\n    ATON.ambLight = new THREE.AmbientLight( new THREE.Color(1,1,1) /*ATON._mainRoot.background*/ );\r\n    ATON._rootVisibleGlobal.add(ATON.ambLight);\r\n};\r\n\r\nATON.setBackgroundColor = (bg)=>{\r\n    ATON._mainRoot.background = bg;\r\n};\r\n\r\n//==============================================================\r\n// LightProbes\r\n//==============================================================\r\nATON.addLightProbe = (LP)=>{\r\n    ATON._lps.push(LP);\r\n};\r\n\r\n// Update ALL lightprobes\r\nATON.updateLightProbes = ()=>{\r\n\r\n    for (let i in ATON._lps) ATON._lps[i].update();\r\n\r\n    // FIXME: indirect LP based on first LP (for now)\r\n    if (ATON._lps[0]){\r\n        if (ATON._indLP) ATON._mainRoot.remove(ATON._indLP);\r\n\r\n        ATON._indLP = THREE.LightProbeGenerator.fromCubeRenderTarget( ATON._renderer, ATON._lps[0]._prevCCtarget );\r\n        ATON._mainRoot.add( ATON._indLP );\r\n    }\r\n\r\n    //for (let i in ATON._lps) ATON._lps[i].update();\r\n\r\n    ATON._rootVisible.traverse((o) => {\r\n        if (o.userData.LP !== undefined){\r\n            o.material.envMap = o.userData.LP.getEnvTex();\r\n            //o.material.combine = THREE.AddOperation;\r\n            //o.material.envMapIntensity = 5.0;\r\n        }\r\n    });\r\n\r\n};\r\n\r\n//==============================================================\r\n// Panorama\r\n//==============================================================\r\nATON.setMainPanorama = (path)=>{\r\n\r\n    let tpano = new THREE.TextureLoader().load(path);\r\n    tpano.encoding = THREE.sRGBEncoding;\r\n\r\n    if (ATON._matMainPano !== undefined){\r\n        ATON._matMainPano.map = tpano;\r\n        //ATON._matMainPano.emissive = tpano;\r\n        return;\r\n    }\r\n\r\n    // First time: create it\r\n    ATON._gMainPano = new THREE.SphereBufferGeometry( 1.0, 30,30 );\r\n    ATON.setMainPanoramaRadius(ATON.Nav.STD_FAR * 0.9);\r\n\r\n    ATON._matMainPano = new THREE.MeshBasicMaterial({ \r\n        map: tpano, \r\n        //emissive: tpano,\r\n        //castShadow: false,\r\n        //receiveShadow: false,\r\n        fog: false,\r\n        depthTest: false,\r\n        depthWrite: false,\r\n        //depthFunc: THREE.AlwaysDepth,\r\n        //side: THREE.DoubleSide\r\n    });\r\n\r\n    ATON._mMainPano = new THREE.Mesh(ATON._gMainPano, ATON._matMainPano);\r\n    ATON._mMainPano.frustumCulled = false;\r\n    ATON._mMainPano.onAfterRender = ()=>{\r\n        //if (ATON._numReqLoad > 0) return;\r\n        ATON._mMainPano.position.copy(ATON.Nav._currPOV.pos);\r\n    };\r\n\r\n    ATON._rootVisibleGlobal.add(ATON._mMainPano);\r\n};\r\n\r\nATON.setMainPanoramaRadius = (r)=>{\r\n    if (ATON._gMainPano === undefined) return;\r\n    ATON._gMainPano.scale( -r,r,r );\r\n};\r\n\r\n//==============================================================\r\n// Update routines\r\n//==============================================================\r\nATON._onFrame = ()=>{\r\n    // TODO: add pause render\r\n\r\n    let dt = ATON._clock.getDelta();\r\n\r\n    ATON._fps = 1.0 / dt;\r\n    ATON._dt  = dt;\r\n    //console.log(ATON._fps);\r\n    \r\n    ATON.Nav._bControlChange = false;\r\n    ATON.Nav._controls.update(dt);\r\n\r\n    ATON._renderer.render( ATON._mainRoot, ATON.Nav._camera );\r\n\r\n/*\r\n    if (ATON.Nav._bControlChange){\r\n        }\r\n    else {\r\n        //ATON._handleScreenPick();\r\n        }\r\n*/\r\n\r\n    if (ATON.XR.isPresenting()){\r\n        ATON.XR.update();\r\n    }\r\n\r\n    //if (!ATON.device.isMobile || !ATON.XR.isPresenting()) \r\n    if (!ATON._bPauseQuery) ATON._handleQueries();\r\n\r\n    // Navigation system\r\n    ATON.Nav.update();\r\n\r\n    // VRoadcast\r\n    ATON.VRoadcast.update();\r\n\r\n    //console.log(ATON._clock.elapsedTime);\r\n\r\n    // UI\r\n    ATON.SUI.update();\r\n\r\n    ATON.fireEvent(\"frame\");\r\n};\r\n\r\nATON._updateScreenMove = (e)=>{\r\n    e.preventDefault();\r\n\r\n    if (ATON.Nav._mode === ATON.Nav.MODE_DEVORI){\r\n        ATON._screenPointerCoords.x = 0.0;\r\n        ATON._screenPointerCoords.y = 0.0;\r\n        return;\r\n    }\r\n\r\n\tATON._screenPointerCoords.x = ( e.clientX / window.innerWidth ) * 2 - 1;\r\n\tATON._screenPointerCoords.y = -( e.clientY / window.innerHeight ) * 2 + 1;\r\n\r\n    //console.log(ATON._screenPointerCoords);\r\n};\r\n\r\n//==============================================================\r\n// Query rountines\r\n//==============================================================\r\nATON._registerRCS = ()=>{\r\n    ATON._rcRR = 0;\r\n    ATON._rcHandlers = [];\r\n\r\n    ATON._rcHandlers.push( ATON._handleQueryScene );\r\n    ATON._rcHandlers.push( ATON._handleQuerySemantics );\r\n    ATON._rcHandlers.push( ATON._handleQueryUI );\r\n};\r\n\r\nATON._handleQueries = ()=>{\r\n    if (ATON.Nav.isTransitioning()) return; // do not query during POV transitions\r\n\r\n    // round-robin\r\n    //ATON._rcRR = (ATON._rcRR+1) % 2;\r\n    //ATON._rcHandlers[ATON._rcRR]();\r\n\r\n    ATON._handleQueryScene();\r\n    ATON._handleQuerySemantics();\r\n    ATON._handleQueryUI();\r\n};\r\n\r\n// Ray casting visible scenegraph\r\nATON._handleQueryScene = ()=>{\r\n    if (ATON.XR.isPresenting()){\r\n        ATON._rcScene.set( ATON.XR.getControllerWorldLocation(0), ATON.XR.getControllerWorldDirection(0) );\r\n    }\r\n    else \r\n        ATON._rcScene.setFromCamera( ATON._screenPointerCoords, ATON.Nav._camera );\r\n\r\n    ATON._hitsScene = [];\r\n    //ATON._rcScene.intersectObjects( ATON._rootVisible.children, true, ATON._hitsScene );\r\n    ATON._rcScene.intersectObjects( ATON._mainRoot.children, true, ATON._hitsScene );\r\n\r\n    //ATON._hitsOperator(ATON._hits);\r\n\r\n    // Process hits\r\n    let hitsnum = ATON._hitsScene.length;\r\n    if (hitsnum <= 0){\r\n        ATON._queryDataScene = undefined;\r\n        return;\r\n    }\r\n\r\n    let h = ATON._hitsScene[0];\r\n\r\n    ATON._queryDataScene = {};\r\n    ATON._queryDataScene.p = h.point;\r\n    ATON._queryDataScene.d = h.distance;\r\n    ATON._queryDataScene.o = h.object;\r\n    \r\n    //console.log(ATON._queryDataScene.o);\r\n\r\n    // Normals\r\n    if (!ATON._bQueryNormals) return;\r\n    if (h.face === null) return;\r\n    if (h.face.normal === undefined) return;\r\n\r\n    ATON._queryDataScene.matrixWorld = new THREE.Matrix3().getNormalMatrix( h.object.matrixWorld );\r\n    ATON._queryDataScene.n = h.face.normal.clone().applyMatrix3( ATON._queryDataScene.matrixWorld ).normalize();\r\n};\r\n\r\nATON.getSceneQueriedPoint = ()=>{\r\n    if (ATON._queryDataScene === undefined) return undefined;\r\n    return ATON._queryDataScene.p;\r\n};\r\nATON.getSceneQueriedDistance = ()=>{\r\n    if (ATON._queryDataScene === undefined) return undefined;\r\n    return ATON._queryDataScene.d;\r\n};\r\nATON.getSceneQueriedNormal = ()=>{\r\n    if (ATON._queryDataScene === undefined) return undefined;\r\n    return ATON._queryDataScene.n;\r\n};\r\n\r\n\r\n// Ray casting semantic-graph\r\nATON._handleQuerySemantics = ()=>{\r\n    if (ATON.XR.isPresenting()){\r\n        ATON._rcSemantics.set( ATON.XR.getControllerWorldLocation(0), ATON.XR.getControllerWorldDirection(0) );\r\n    }\r\n    else \r\n        ATON._rcSemantics.setFromCamera( ATON._screenPointerCoords, ATON.Nav._camera );\r\n\r\n    ATON._hitsSem = [];\r\n    ATON._rcSemantics.intersectObjects( ATON._mainRoot.children, true, ATON._hitsSem );\r\n\r\n    // Process hits\r\n    let hitsnum = ATON._hitsSem.length;\r\n    if (hitsnum <= 0){\r\n        ATON._queryDataSem = undefined;\r\n\r\n        if (ATON._hoveredSemNode){\r\n            ATON.fireEvent(\"SemanticNodeLeave\", ATON._hoveredSemNode);\r\n            let S = ATON.getSemanticNode(ATON._hoveredSemNode);\r\n            if (S && S.onLeave) S.onLeave();\r\n        }\r\n        \r\n        ATON._hoveredSemNode = undefined;\r\n        return;\r\n    }\r\n\r\n    let h = ATON._hitsSem[0];\r\n\r\n    // Occlusion\r\n    if (ATON._bQuerySemOcclusion && ATON._queryDataScene){\r\n        if (ATON._queryDataScene.d < h.distance){\r\n\r\n            ATON._queryDataSem = undefined;\r\n\r\n            if (ATON._hoveredSemNode){\r\n                ATON.fireEvent(\"SemanticNodeLeave\", ATON._hoveredSemNode);\r\n                let S = ATON.getSemanticNode(ATON._hoveredSemNode);\r\n                if (S && S.onLeave) S.onLeave();\r\n            }\r\n\r\n            ATON._hoveredSemNode = undefined;\r\n            return;\r\n        }\r\n    }\r\n\r\n    ATON._queryDataSem = {};\r\n    ATON._queryDataSem.p = h.point;\r\n    ATON._queryDataSem.d = h.distance;\r\n    ATON._queryDataSem.o = h.object;\r\n    ATON._queryDataSem.list = []; // holds sem-nodes parental list\r\n\r\n    // traverse parents\r\n    let L = ATON._queryDataSem.list;\r\n    let sp = h.object.parent;\r\n    while (sp){\r\n        if (sp.nid && sp.nid !== ATON.ROOT_NID) L.push(sp.nid);\r\n        sp = sp.parent;\r\n    }\r\n\r\n    let hsn = L[0];\r\n    if (hsn){\r\n        if (ATON._hoveredSemNode !== hsn){\r\n            if (ATON._hoveredSemNode){\r\n                ATON.fireEvent(\"SemanticNodeLeave\", ATON._hoveredSemNode);\r\n                let S = ATON.getSemanticNode(ATON._hoveredSemNode);\r\n                if (S && S.onLeave) S.onLeave();\r\n            }\r\n\r\n            ATON._hoveredSemNode = hsn;\r\n            ATON.fireEvent(\"SemanticNodeHover\", hsn);\r\n            let S = ATON.getSemanticNode(hsn);\r\n            if (S && S.onHover) S.onHover();\r\n        }\r\n    }\r\n\r\n    //console.log(L);\r\n};\r\n\r\nATON._handleQueryUI = ()=>{\r\n    if (ATON.XR.isPresenting()){\r\n        ATON._rcUI.set( ATON.XR.getControllerWorldLocation(0), ATON.XR.getControllerWorldDirection(0) );\r\n    }\r\n    else \r\n        ATON._rcUI.setFromCamera( ATON._screenPointerCoords, ATON.Nav._camera );\r\n\r\n    ATON._hitsUI = [];\r\n    ATON._rcUI.intersectObjects( ATON._mainRoot.children, true, ATON._hitsUI );\r\n\r\n    // Process hits\r\n    let hitsnum = ATON._hitsUI.length;\r\n    if (hitsnum <= 0){\r\n        ATON._queryDataUI = undefined;\r\n\r\n        if (ATON._hoveredUI){\r\n            ATON.fireEvent(\"UINodeLeave\", ATON._hoveredUI);\r\n            let S = ATON.getUINode(ATON._hoveredUI);\r\n            if (S && S.onLeave) S.onLeave();\r\n        }\r\n        \r\n        ATON._hoveredUI = undefined;\r\n        return;\r\n    }\r\n\r\n    let h = ATON._hitsUI[0];\r\n\r\n    // Occlusion\r\n    if (ATON._queryDataScene){\r\n        if (ATON._queryDataScene.d < h.distance){\r\n\r\n            ATON._queryDataUI = undefined;\r\n\r\n            if (ATON._hoveredUI){\r\n                ATON.fireEvent(\"SemanticNodeLeave\", ATON._hoveredUI);\r\n                let S = ATON.getUINode(ATON._hoveredUI);\r\n                if (S && S.onLeave) S.onLeave();\r\n            }\r\n\r\n            ATON._hoveredUI = undefined;\r\n            return;\r\n        }\r\n    }\r\n\r\n    ATON._queryDataUI = {};\r\n    ATON._queryDataUI.p = h.point;\r\n    ATON._queryDataUI.d = h.distance;\r\n    ATON._queryDataUI.o = h.object;\r\n    ATON._queryDataUI.list = []; // holds ui-nodes parental list\r\n\r\n    // traverse parents\r\n    let L = ATON._queryDataUI.list;\r\n    let sp = h.object.parent;\r\n    while (sp){\r\n        if (sp.nid && sp.nid !== ATON.ROOT_NID) L.push(sp.nid);\r\n        sp = sp.parent;\r\n    }\r\n\r\n    let hui = L[0];\r\n    if (hui){\r\n        if (ATON._hoveredUI !== hui){\r\n            if (ATON._hoveredUI){\r\n                ATON.fireEvent(\"UINodeLeave\", ATON._hoveredUI);\r\n                let S = ATON.getUINode(ATON._hoveredUI);\r\n                if (S && S.onLeave) S.onLeave();\r\n            }\r\n\r\n            ATON._hoveredUI = hui;\r\n            ATON.fireEvent(\"UINodeHover\", hui);\r\n            let S = ATON.getUINode(hui);\r\n            if (S && S.onHover) S.onHover();\r\n        }\r\n    }\r\n};\r\n\r\n\r\nexport default ATON;\r\n\r\n\r\n"]}