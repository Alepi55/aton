{"version":3,"sources":["ATON.node.js","ATON.pov.js","ATON.lightprobe.js","ATON.eventhub.js","ATON.mathub.js","ATON.utils.js","ATON.scenehub.js","ATON.nav.js","ATON.xr.js","ATON.sui.button.js","ATON.sui.js","ATON.avatar.js","ATON.vroadcast.js","ATON.semfactory.js","ATON.fe.js","ATON.js"],"names":["Node","THREE","Group","id","type","traverse","o","isMesh","geometry","LP","userData","undefined","update","material","envMap","getEnvTex","ATON","NTYPES","SCENE","bPickable","_rootG","_rootVisible","_nodes","snodes","SEM","_rootSem","semnodes","UI","_rootUI","uinodes","as","kwords","_bCloneOnLoadHit","castShadow","receiveShadow","onHover","onLeave","onSelect","ROOT_NID","nid","name","b","kw","K","split","k","c","children","C","addKeywords","s","description","visible","layers","disable","enable","hide","show","enablePicking","disablePicking","M","cMat","matSTD","matHL","setMaterial","f","opacity","envtex","Utils","assignLightProbeToMesh","_lps","length","Vector3","cLP","Box3","setFromObject","getCenter","mdist","i","d","distanceToSquared","pos","clone","p","parent","removeChild","dispose","remove","num","node","N","add","bb","bs","Sphere","getBoundingSphere","x","y","z","position","copy","set","sx","sy","sz","scale","rx","ry","rz","rotation","quaternion","Nav","_qOri","url","onComplete","_assetsManager","then","modelVisitor","console","log","_assetReqNew","P","Promise","resolve","reject","_aLoader","load","data","model","scene","_assetReqComplete","err","filename","exportNode","h","POV","povlist","target","up","STD_UPVECTOR","fov","STD_FOV","nextPOV","prevPOV","push","kwarray","pov","LightProbe","res","near","far","_res","_near","_far","STD_FAR","_envtex","_prevCCtarget","_pmremGenerator","PMREMGenerator","_renderer","CCtarget","WebGLCubeRenderTarget","format","RGBEFormat","generateMipmaps","minFilter","LinearMipmapLinearFilter","encoding","sRGBEncoding","CC","CubeCamera","_rootVisibleGlobal","texture","EventHub","evLocal","evNetwork","on","fireEvent","clearEventHandlers","evtname","ehList","handler","handlerLocal","handlerNetwork","evhLocal","VRoadcast","bReplicate","executeHandlers","MatHub","materials","colors","addDefaults","_loader","MaterialLoader","white","Color","black","green","yellow","red","blue","orange","sem","darksem","fullyTransparent","MeshBasicMaterial","transparent","depthWrite","selector","color","flatShading","controllerRay","semanticShape","semanticShapeHL","semanticShapeEdit","mat","jsonfile","addMaterial","device","geomUnitSphere","SphereBufferGeometry","exporter","GLTFExporter","_dlink","document","createElement","style","display","body","appendChild","textureLoader","TextureLoader","window","isSecureContext","isMobile","test","navigator","userAgent","substr","isXRsupported","xr","isSessionSupported","filepath","lastIndexOf","toLowerCase","index","substring","object","updateMatrixWorld","g","applyMatrix4","matrixWorld","toNonIndexed","mergedGeometries","BufferGeometryUtils","mergeBufferGeometries","mergedGeometry","mergeVertices","center","group","mesh","Mesh","parentNode","computeBoundsTree","map","anisotropy","_maxAnisotropy","magFilter","LinearFilter","v","prec","parseFloat","toPrecision","blob","href","URL","createObjectURL","download","click","str","downloadBlob","Blob","jsonobj","downloadText","JSON","stringify","buffer","ext","getFileExtension","bBin","opts","binary","parse","output","ArrayBuffer","downloadArrayBuffer","downloadJSONobj","noLP","BoxBufferGeometry","MeshStandardMaterial","PATH_RES","tex","createSceneNode","metalness","metalnessMap","roughnessMap","normalMap","dx","dz","PlaneBufferGeometry","rotateX","Math","PI","SceneHub","currID","currData","_bEdit","_bLoading","initBaseParsers","reqpath","sid","oncomplete","$","getJSON","parseScene","sobj","_jsonParsers","getSemanticNode","getSceneNode","child","nodes","edges","n","semid","S","SL","sphere","CL","semesh","_convexPoints","environment","env","pano","mainpano","setMainPanorama","PATH_COLLECTION","setMainPanoramaRotation","L","mainlight","direction","setMainLightDirection","_dMainL","intensity","shadows","toggleShadows","lps","lightprobes","auto","_bAutoLP","viewpoints","povs","setHomePOV","setPosition","setTarget","setFOV","setKeywords","keywords","scenegraph","sg","G","getOrCreateSceneNode","removeChildren","urls","Array","isArray","forEach","u","attachTo","shadowcast","setShadowCast","shadowreceive","toYup","setYup","transform","setRotation","setScale","parid","childid","semanticgraph","getOrCreateSemanticNode","createSemanticNode","setDescription","spheres","SemFactory","createSphere","convexshapes","points","createConvexShape","parser","patch","mode","MODE_ADD","O","MODE_DEL","jstr","ajax","PATH_RESTAPI","contentType","dataType","success","r","COSINOIDAL_DIST","cos","POVtransitionDuration","STD_POV_TRANS_DURATION","init","_mode","setOrbitControl","_currPOV","_fromPOV","_reqPOV","homePOV","_tPOVcall","_tPOVprogress","_vDir","Quaternion","_motionAmt","_motionDir","getCurrentEyeLocation","getCurrentDirection","copyCurrentPOV","isTransitioning","isOrbit","MODE_ORBIT","isFirstPerson","MODE_FP","isDevOri","MODE_DEVORI","XR","isPresenting","_cOrbit","_camOrbit","PerspectiveCamera","innerWidth","innerHeight","STD_NEAR","enableAll","OrbitControls","domElement","rotateSpeed","STD_ROT_SPEED_ORBIT","enablePan","enableDamping","screenSpacePanning","enableZoom","minDistance","maxDistance","addEventListener","_bControlChange","_controls","_camera","syncCurrCamera","setFirstPersonControl","_cFirstPerson","_camFP","STD_ROT_SPEED_FP","setDeviceOrientationControl","_screenPointerCoords","_cDevOri","_camDevOri","DeviceOrientationControls","alphaOffset","setMotionAmount","setMotionDirection","stop","cam","updateProjectionMatrix","getFOV","syncCurrPOV","getCamera","getWorldPosition","getWorldQuaternion","getWorldDirection","ctrl","handlePOV","handleXRtransition","handlePOVtransition","handleMotion","controller0","negate","fv","multiplyScalar","_dt","_clock","elapsedTime","lerpVectors","MathUtils","lerp","_currPos","_fromPos","_reqPos","tgt","subVectors","normalize","FP_EPS","requestPOV","duration","requestPOVbyBound","T","E","radius","requestPOVbyNode","getBound","requestRetarget","point","normal","distanceTo","computeDefaultHome","dv","sceneBS","getRootScene","eye","computeAndRequestDefaultHome","requestHome","scope","reorder","enabled","deviceOrientation","screenOrientation","absolute","alphaOffsetDevice","alphaOffsetScreen","onDeviceOrientationChangeEvent","zee","euler","q0","q1","event","onDeviceOrientationAbsoluteChangeEvent","onScreenOrientationChangeEvent","orientation","setObjectQuaternion","Euler","sqrt","alpha","beta","gamma","orient","setFromEuler","multiply","setFromAxisAngle","connect","disconnect","removeEventListener","getDirection","degToRad","iOSOrientationPermission","DeviceOrientationEvent","requestPermission","permissionState","catch","error","webkitCompassHeading","getDirectionMap","setReferenceSpaceType","setFramebufferScaleFactor","_bPresenting","currSession","rig","gControllers","controller0pos","controller1pos","controller0dir","controller1dir","defaultSelectHandler","_queryDataScene","userHeight","STD_TELEP_DURATION","_hoveredUI","H","getUINode","session","onSessionEnded","setSession","getController","controller1","e","gamepad","gp","pose","hasPosition","_handleUISelection","setRefSpaceLocation","setupControllersUI","requestSession","optionalFeatures","onSessionStarted","end","raytick","CylinderBufferGeometry","translate","raylen","createUINode","getControllerGrip","Button","uiid","baseColor","switchColor","_bSwitched","container","ThreeMeshUI","Block","width","height","padding","borderRadius","backgroundColor","backgroundOpacity","fontFamily","fontTexture","justifyContent","alignContent","uiText","Text","content","fontSize","fontColor","_trigger","PlaneGeometry","SUI","STD_BTN_SIZE","text","mainSelector","getMaterial","setSelectorRadius","gPoints","buildInfoNode","bShowInfo","_labelScale","_labelScaleVR","infoNodeText","getSelectorRadius","setMainSelectorModel","path","bUseStdMat","infoNode","attachToRoot","infoContainer","getInfoNode","createToolbar","buttonlist","cont","m","button","_bPauseQuery","_queryDataSem","orientToCamera","Avatar","uid","userid","username","message","bTalking","_tStateCall","_tStateDur","_tProgress","_currState","_tgtState","realize","avaMats","avatars","SphereGeometry","usermaterial","getAvatarMaterialByUID","smesh","usermeshnode","setCloneOnLoadHit","userlabelnode","labelcontainer","ucolorsdark","usernametext","usermessagetext","A","msg","D","cs","ts","slerp","handleStateTransition","address","location","origin","initMaterials","socket","_connected","_numUsers","avatarList","avaGroup","setInterval","sendState","USER_STATE_FREQ","_lastStateSent","enableChatLog","_elChat","getNumUsers","ucolors","ucolorhex","MM","sock","emit","REPLICATED_EVT","evhNetwork","isConnected","requestSceneEnter","sceneid","protocol","secure","rejectUnauthorized","io","connected","_registerSocketHandlers","_onConnected","setUsername","_username","append","setMessage","_msg","scrollTop","scrollHeight","touchAvatar","decodeState","requestStateTransition","uname","encodeState","Float32Array","binData","Int8Array","w","a8","a","cpov","lastPos","lastOri","dPos","dOri","angleTo","THRES_STATE_POS","THRES_STATE_ORI","getAvatar","loadRepresentation","clearAllAvatars","bConvexBuilding","convexPoints","convexNode","currConvexMesh","currSemNode","currMaterial","_numShapes","numPoints","geom","ConvexBufferGeometry","currSemesh","setVectorPrecision","setDefaultAndHighlightMaterials","offset","addConvexPoint","Object3D","FE","PATH_RES_ICONS","_bPopup","bPopupBlurBG","_bReqHome","urlParams","URLSearchParams","search","_uiSetupBase","ddens","get","setDefaultPixelDensity","_kModShift","reqstr","PATH_RESTAPI_SCENE","uiAddButton","toggleFullScreen","isConnectionSecure","toggle","popupClose","html","idcontainer","icon","onPress","iconurl","iconid","endsWith","slice","htmlcode","addClass","removeClass","uiSwitchButton","popupQR","screenfull","isFullscreen","popupVRC","attr","inputid","value","val","regReplace","RegExp","replace","auLib","switch","Audio","loop","htmlcontent","stopPropagation","fadeIn","setPixelRatio","render","_mainRoot","resetPixelDensity","fadeOut","focusOn3DView","popupShow","QRCode","getElementById","keypress","keycode","keyCode","which","RAD2DEG","DEG2RAD","PATH_MODS","PATH_THREE","PATH_DRACO_LIB","PATH_BASIS_LIB","PATH_MODELS","PATH_SCENES","SHADOWS_NEAR","SHADOWS_FAR","SHADOWS_SIZE","SHADOWS_RES","setPathCollection","setPathScenes","_setupBaseListeners","el","_onResize","_updateScreenMove","_onMouseWheel","Hammer","srcEvent","_handleQueries","defaultDoubleTapFromScreenCoords","_kModCtrl","key","max","aspect","setSize","preventDefault","deltaY","focus","_handleQueryScene","bFPtrans","currDir","feye","ftgt","hsn","_hoveredSemNode","profileDevice","Clock","WebGLRenderer","antialias","preserveDrawingBuffer","_stdpxd","outputEncoding","setAnimationLoop","_onFrame","capabilities","getMaxAnisotropy","Cache","GLTFLoader","_dracoLoader","DRACOLoader","setDecoderPath","setDRACOLoader","_numReqLoad","_bShadowsFixedBound","initGraphs","_queryDataUI","_bQuerySemOcclusion","_bQueryNormals","Vector2","_rcScene","Raycaster","_rcSemantics","_rcUI","renderPause","renderResume","_setupLoadManager","_loadManager","LoadingManager","onStart","itemsLoaded","itemsTotal","onLoad","onProgress","onError","getRootSemantics","getRootUI","shadowMap","shadow","camera","left","right","bottom","top","updateDirShadows","addLightProbe","setNear","assignLightProbesByProximity","setTimeout","_mMainPano","updateLightProbes","Scene","background","setAsRoot","ambLight","AmbientLight","setBackgroundColor","bg","setNeutralAmbientLight","_indLP","LightProbeGenerator","fromCubeRenderTarget","tpano","_matMainPano","_gMainPano","fog","depthTest","frustumCulled","setMainPanoramaRadius","onAfterRender","DirectionalLight","_dMainLtgt","_dMainLpos","_dMainLdir","PCFSoftShadowMap","mapSize","_updateEnvironment","dt","getDelta","_fps","clientX","clientY","_registerRCS","_rcRR","_rcHandlers","_handleQuerySemantics","_handleQueryUI","hitsnum","getControllerWorldLocation","getControllerWorldDirection","setFromCamera","_hitsScene","intersectObjects","distance","face","Matrix3","getNormalMatrix","applyMatrix3","getSceneQueriedPoint","getSceneQueriedDistance","getSceneQueriedNormal","_hitsSem","list","sp","_hitsUI","hui"],"mappings":"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","file":"ATON.min.js","sourceRoot":"..\\src","sourcesContent":["/*\r\n    ATON Node Class\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n//import Period from \"./ATON.period.js\";\r\n\r\n\r\n/**\r\nClass representing an ATON node.\r\nConstructor allows to create different types (scene nodes, semantic nodes and UI nodes)\r\n@class Node\r\n@example \r\nlet myNode = new ATON.Node(\"someID\")\r\n*/\r\nclass Node extends THREE.Group {\r\n\r\nconstructor(id, type){\r\n    super();\r\n\r\n    this.type = type? type : ATON.NTYPES.SCENE;\r\n    \r\n    this.bPickable = true;\r\n\r\n    if (this.type === ATON.NTYPES.SCENE){\r\n        this._rootG = ATON._rootVisible;\r\n        this._nodes = ATON.snodes;\r\n        //this.period = undefined; // TODO: assign period object (read-only, centralized) - NOT USED FOR NOW\r\n    }\r\n    if (this.type === ATON.NTYPES.SEM){\r\n        this._rootG = ATON._rootSem;\r\n        this._nodes = ATON.semnodes;\r\n        //this.period = undefined;\r\n    }\r\n\r\n    if (this.type === ATON.NTYPES.UI){\r\n        this._rootG = ATON._rootUI;\r\n        this._nodes = ATON.uinodes;\r\n    }\r\n\r\n    // Register\r\n    this.as(id);\r\n\r\n    this.kwords = undefined;\r\n\r\n    this._bCloneOnLoadHit = true;\r\n\r\n    // Shadows\r\n    this.castShadow    = false;\r\n    this.receiveShadow = false;\r\n\r\n    // Local handlers\r\n    this.onHover  = undefined;\r\n    this.onLeave  = undefined;\r\n    this.onSelect = undefined;\r\n}\r\n\r\n/**\r\n(Re)assign node ID\r\n@param {string} id - the new ID\r\n@example\r\nmyNode.as(\"newID\")\r\n*/\r\nas(id){\r\n    if (id === undefined) return;\r\n    if (id === ATON.ROOT_NID) return;\r\n\r\n    this._nodes[id] = this;\r\n    this.nid  = id;\r\n    this.name = id;\r\n\r\n    return this;\r\n}\r\n\r\nsetAsRoot(){\r\n    this._nodes[ATON.ROOT_NID] = this;\r\n    this.nid = ATON.ROOT_NID;\r\n\r\n    return this;\r\n}\r\n\r\nsetCloneOnLoadHit(b){\r\n    this._bCloneOnLoadHit = b;\r\n    return this;\r\n}\r\n\r\n/**\r\nAdd keyword(s) to this node. Keywords are also recursively added into the sub-graph\r\n@param {string} kw - the keyword or comma-separated list of keywords\r\n@example\r\nmyNode.addKeywords(\"heritage,reconstruction\");\r\n*/\r\naddKeywords(kw){\r\n    let K = kw.split(\",\");\r\n\r\n    if (this.kwords === undefined) this.kwords = {};\r\n    for (let k in K) this.kwords[ K[k] ] = true;\r\n\r\n    // recurse into ATON nodes\r\n    for (let c in this.children){\r\n        let C = this.children[c];\r\n        if (C.type !== undefined) C.addKeywords(kw);\r\n    }\r\n\r\n    return this;\r\n}\r\n\r\n/**\r\nReturns true if this node has specific keyword\r\n@param {string} kw - the keyword\r\n@returns {boolean}\r\n@example\r\nif (myNode.hasKeyword(\"heritage\")){ ... }\r\n*/\r\nhasKeyword(kw){\r\n    if (this.kwords === undefined) return;\r\n    return (this.kwords[kw] !== undefined);\r\n}\r\n\r\n/**\r\nSet custom description (string) to the node\r\n@param {string} s - content\r\n@example\r\nmyNode.setDescription(\"This is a small description\");\r\n*/\r\nsetDescription(s){\r\n    this.userData.description = s;\r\n    return this;\r\n}\r\n\r\n/**\r\nGet node description (string) if any\r\n@returns {string}\r\n@example\r\nlet desc = myNode.getDescription();\r\n*/\r\ngetDescription(){\r\n    return this.userData.description;\r\n}\r\n\r\n/**\r\nHide this node (and sub-graph), also invisible to queries (ray casting, picking)\r\n@example\r\nmyNode.hide()\r\n*/\r\nhide(){ \r\n    this.visible = false;\r\n    this.traverse((o) => { o.layers.disable(this.type); });\r\n}\r\n\r\n/**\r\nShow this node (and sub-graph). If pickable, becomes sensible to queries (ray casting)\r\n@example\r\nmyNode.show()\r\n*/\r\nshow(){ \r\n    this.visible = true;\r\n    if (this.bPickable) this.traverse((o) => { o.layers.enable(this.type); });\r\n    return this;\r\n}\r\n\r\n/**\r\nToggle node visibility. If visible, becomes invisible, and viceversa.\r\n@example\r\nmyNode.toggle()\r\n*/\r\ntoggle(b){\r\n    if (b === undefined){\r\n        if (this.visible) return this.hide();\r\n        else return this.show();\r\n    }\r\n\r\n    if (b) return this.show();\r\n    else return this.hide();\r\n}\r\n\r\n/**\r\nDisable this node for runtime queries (ray casters). Useful for instance on vegetation, etc...\r\n@example\r\nmyNode.load(\"somevegetation.gltf\").disablePicking()\r\n*/\r\ndisablePicking(){\r\n    this.bPickable = false;\r\n    this.traverse((o) => { o.layers.disable(this.type); });\r\n    return this;  \r\n}\r\n\r\n/**\r\nEnable this node for runtime queries (ray casters)\r\n@example\r\nmyNode.enablePicking()\r\n*/\r\nenablePicking(){\r\n    this.bPickable = true;\r\n    this.traverse((o) => { o.layers.enable(this.type); });\r\n    return this;\r\n}\r\n\r\nsetPickable(b){\r\n    if (b) this.enablePicking();\r\n    else this.disablePicking();\r\n\r\n    return this;\r\n}\r\n\r\n/**\r\nSet cascading material. Note this applies to this node and all children (even all those still loading)\r\n@param {THREE.Material} M - the Material\r\n@example\r\nmyNode.setMaterial( new THREE.MeshBasicMaterial({ transparent: true, opacity: 0.2, wireframe: true }) )\r\n*/\r\nsetMaterial(M){\r\n    this.userData.cMat = M;\r\n\r\n    this.traverse((o) => {\r\n        if (o.isMesh){\r\n            this.userData.cMat = M;\r\n            o.material = M;\r\n            //o.material.needsUpdate = true;\r\n            }\r\n    });\r\n\r\n    return this;\r\n}\r\n\r\n/** \r\nGet cascading material\r\n@returns {THREE.Material}\r\n*/\r\ngetMaterial(){\r\n    return this.userData.cMat;\r\n}\r\n\r\n// Set default and highlight materials\r\nsetDefaultAndHighlightMaterials(matSTD, matHL){\r\n    this.userData.matSTD = matSTD;\r\n    this.userData.matHL  = matHL;\r\n\r\n    return this;\r\n}\r\nhighlight(){\r\n    if (this.userData.matHL) this.setMaterial(this.userData.matHL);\r\n    return this;\r\n}\r\nrestoreDefaultMaterial(){\r\n    if (this.userData.matSTD) this.setMaterial(this.userData.matSTD);\r\n    return this;\r\n}\r\n\r\n// Set cascading opacity\r\nsetOpacity(f){\r\n    this.traverse((o) => {\r\n        if (o.isMesh){\r\n            o.material.opacity = f;\r\n            //o.material.needsUpdate = true;\r\n        }\r\n    });\r\n\r\n    return this;\r\n}\r\n\r\n// FIXME: not working\r\nsetShadowCast(b){\r\n    this.castShadow = b;\r\n\r\n    this.traverse((o) => {\r\n        if (o.isMesh){\r\n            o.castShadow = b;\r\n        }\r\n    });\r\n\r\n    return this;\r\n};\r\nsetShadowReceive(b){\r\n    this.receiveShadow = b;\r\n\r\n    this.traverse((o) => {\r\n        if (o.isMesh){\r\n            o.receiveShadow = b;\r\n        }\r\n    });\r\n\r\n    return this;\r\n};\r\n\r\nsetEnvMap(envtex){\r\n    this.traverse((o) => {\r\n        if (o.isMesh){\r\n\t\t\to.material.envMap  = envtex;\r\n\t\t\t//o.material.combine = THREE.MultiplyOperation;\r\n            //o.material.needsUpdate = true;\r\n        }\r\n    });\r\n\r\n    return this;\r\n}\r\n\r\nassignLightProbe(LP){\r\n    this.traverse((o) => {\r\n        if (o.isMesh && o.geometry) ATON.Utils.assignLightProbeToMesh(LP, o);\r\n    });\r\n\r\n    return this;\r\n}\r\n\r\n// (re)assign LPs for each mesh depending on proximity\r\nassignLightProbesByProximity(){\r\n    if (ATON._lps.length === 0) return this;\r\n\r\n    this.traverse((o) => {\r\n        if (o.isMesh && o.geometry){\r\n            let c = new THREE.Vector3();\r\n            let bbox = new THREE.Box3().setFromObject(o).getCenter(c);\r\n\r\n            let cLP   = undefined;\r\n            let mdist = undefined;\r\n\r\n            for (let i in ATON._lps){\r\n                let LP = ATON._lps[i];\r\n                let d = c.distanceToSquared(LP.pos);\r\n\r\n                if (cLP === undefined || d < mdist){\r\n                    mdist = d;\r\n                    cLP = LP;\r\n                }\r\n            }\r\n\r\n            if (cLP) ATON.Utils.assignLightProbeToMesh(cLP, o);\r\n        }\r\n    });\r\n\r\n    return this;\r\n};\r\n\r\n// Find & update all LPs under this subgraph\r\n// FIXME: not working\r\nupdateLightProbes = ()=>{\r\n    this.traverse((o) => {\r\n        if (o.isMesh && o.geometry){\r\n            let LP = o.userData.LP;\r\n\r\n            if (LP !== undefined){\r\n                LP.update();\r\n                o.material.envMap = LP.getEnvTex();\r\n                //o.material.envMapIntensity = 5.0;\r\n                //console.log(\"x\");\r\n            }\r\n        }\r\n    });\r\n\r\n    return this;\r\n};\r\n\r\n// Deep clone\r\nduplicate(){\r\n    let C = this.clone();\r\n\r\n    C.traverse((o)=>{\r\n        if (o.isMesh){\r\n            o.material = o.material.clone();\r\n        }\r\n    });\r\n\r\n    return C;\r\n}\r\n\r\n\r\n// FIXME: xxx\r\ndelete(){\r\n    let p = this.parent;\r\n\r\n    if (p !== undefined && p.nid !== undefined) p.removeChild( this );\r\n}\r\n\r\nremoveChild(c){\r\n    if (c === undefined) return;\r\n\r\n    let nid = c.nid;\r\n    if (c.nid !== undefined) this._nodes[c.nid] = undefined;\r\n\r\n    c.parent = undefined;\r\n\r\n    c.traverse((o) => {\r\n        if (o.geometry) o.geometry.dispose();\r\n        if (o.material) o.material.dispose();\r\n    });\r\n\r\n    this.remove(c);\r\n\r\n    return this;\r\n}\r\n/**\r\nDelete all children of this node\r\n*/\r\nremoveChildren(){\r\n    let num = this.children.length;\r\n    for (let i=(num-1); i>=0; i--) this.removeChild(this.children[i]);\r\n\r\n    return this;\r\n}\r\n\r\n\r\n/**\r\nAttach this node to parent by providing ID (string) or node object\r\n@param {string|Node} node - the parent node\r\n@example\r\nmyNode.attachTo(\"someGroupID\")\r\n@example\r\nmyNode.attachTo(myParentGroup)\r\n*/\r\nattachTo(node){\r\n    let N = (typeof node === 'string')? this._nodes[node] : node;\r\n    if (N){\r\n        N.add(this);\r\n        if (N.userData.cMat) this.userData.cMat = N.userData.cMat;\r\n        }\r\n    return N;\r\n}\r\n\r\n/**\r\nAttach this node to main root. This is usually mandatory in order to visualize the node and all its descendants.\r\nDepending on node type this will be the scene root (visible scene-graph), the semantic-graph root or UI root\r\n@example\r\nmyNode.attachToRoot()\r\n*/\r\nattachToRoot(){\r\n    this._rootG.add(this);\r\n    if (this._rootG.userData.cMat) this.userData.cMat = this._rootG.userData.cMat;\r\n    return this._rootG;\r\n}\r\n\r\n/**\r\nReturn bounding sphere of this node\r\n@returns {THREE.Sphere}\r\n@example\r\nlet bs = myNode.getBound()\r\n*/\r\ngetBound(){\r\n    let bb = new THREE.Box3().setFromObject( this );\r\n    let bs = new THREE.Sphere();\r\n    bb.getBoundingSphere(bs);\r\n\r\n    return bs;\r\n}\r\n\r\n/**\r\nSet location (translation) of this node\r\n@example\r\nmyNode.setPosition(1.0,3.0,0.0)\r\n@example\r\nmyNode.setPosition( new THREE.Vector3(1.0,3.0,0.0) )\r\n*/\r\nsetPosition(x,y,z){\r\n    if (x instanceof THREE.Vector3) this.position.copy(x);\r\n    else this.position.set(x,y,z);\r\n\r\n    return this;\r\n}\r\n\r\n/**\r\nSet scale of this node\r\n@example\r\nmyNode.setScale(3.0,2.0,1.0)\r\n@example\r\nmyNode.setScale(2.0)\r\n@example\r\nmyNode.setScale( new THREE.Vector3(3.0,2.0,1.0) )\r\n*/\r\nsetScale(sx,sy,sz){\r\n    if (sx instanceof THREE.Vector3) this.scale.copy(sx);\r\n    else {\r\n        if (sy === undefined){ sy = sx; sz = sx; }\r\n        this.scale.set(sx,sy,sz);\r\n        }\r\n    \r\n    return this;\r\n}\r\n\r\n/**\r\nSet rotation of this node (Euler rx,ry,rz) in radians\r\n@example\r\nmyNode.setRotation(3.0,2.0,1.0)\r\n@example\r\nmyNode.setRotation( new THREE.Vector3(3.0,2.0,1.0) )\r\n*/\r\nsetRotation(rx,ry,rz){\r\n    if (rx instanceof THREE.Vector3) this.rotation.copy(rx);\r\n    else this.rotation.set(rx,ry,rz);\r\n    \r\n    return this;\r\n}\r\n/**\r\nOrient this node to current camera\r\n*/\r\norientToCamera(){\r\n    this.quaternion.copy( ATON.Nav._qOri );\r\n    return this;\r\n}\r\n\r\nsetYup(){\r\n    this.rotation.set(-1.57079632679,0.0,0.0);\r\n    return this;  \r\n}\r\n\r\n/**\r\nLoad a 3D model under this node, with optional onComplete handler.\r\nNote the system will take care of loading the resources in background, and will manage duplicate requests to same resources avoiding waste of bandwidth\r\n@param {string} url - the url of the 3D model\r\n@param {function} onComplete - the optional handler to be fired on completion\r\n@example\r\nmyNode.load(\"mymodel.gltf\", ()=>{ console.log(\"completed!\") })\r\n*/\r\nload(url, onComplete){\r\n    if (url === undefined) return this;\r\n\r\n    let N = this;\r\n\r\n    // [C] Promise already requested\r\n    if ( N._bCloneOnLoadHit && ATON._assetsManager[url] !== undefined ){\r\n        ATON._assetsManager[url].then(( o ) =>{\r\n            let C = o.clone();\r\n\r\n            ATON.Utils.modelVisitor(N, C); // check\r\n            N.add( C );\r\n\r\n            if (onComplete) onComplete();\r\n        });\r\n\r\n        console.log(\"HIT!\");\r\n        return N;\r\n    }\r\n\r\n    // Fire request\r\n    if (N.type === ATON.NTYPES.SCENE) ATON._assetReqNew(url);\r\n\r\n    let P = new Promise( ( resolve, reject ) => {\r\n        ATON._aLoader.load( url, (data)=>{\r\n            let model = data.scene || data.scene[0];\r\n\r\n            // Visit loaded model\r\n            ATON.Utils.modelVisitor(N, model);\r\n\r\n            N.add( model );\r\n\r\n            resolve(model);\r\n            console.log(\"Model \"+url+\" loaded\");\r\n            \r\n            if (N.type === ATON.NTYPES.SCENE) ATON._assetReqComplete(url);\r\n\r\n            if (onComplete) onComplete();\r\n        },\r\n        undefined,\r\n        (err)=>{\r\n            console.log(err);\r\n            //reject(model);\r\n\r\n            if (N.type === ATON.NTYPES.SCENE) ATON._assetReqComplete(url);\r\n            if (onComplete) onComplete();\r\n        });\r\n\r\n/*\r\n        ATON._aLoader.load( url+\"__LOD2-d.gltf\", (data)=>{\r\n            let model = data.scene || data.scene[0];\r\n            ATON._modelVisitor(model);\r\n\r\n            let C = new THREE.Vector3();\r\n            let bb = new THREE.Box3().setFromObject( model ).getCenter(C);\r\n            model.position.set(-C.x,-C.y,-C.z);\r\n\r\n            let lod = new THREE.LOD();\r\n            lod.position.set(C.x,C.y,C.z);\r\n            lod.matrixAutoUpdate = true;\r\n            lod.addLevel(model, 40.0);\r\n            N.add(lod);\r\n\r\n            //N.add( model );\r\n\r\n            resolve(model);\r\n            console.log(\"ATON model \"+url+\" loaded\");\r\n\r\n            ATON._aLoader.load( url+\"__LOD1-d.gltf\", (data2)=>{\r\n                let model2 = data2.scene || data2.scene[0];\r\n                ATON._modelVisitor(model2);\r\n\r\n                model2.position.set(-C.x,-C.y,-C.z);\r\n                \r\n                lod.addLevel(model2, 0.0);\r\n            });\r\n            \r\n            ATON._assetReqComplete(url);\r\n        });\r\n*/\r\n    });\r\n\r\n    // Register\r\n    if (N._bCloneOnLoadHit) ATON._assetsManager[url] = P;\r\n\r\n    return this;\r\n}\r\n\r\nexportAs( filename ){\r\n    ATON.Utils.exportNode(this, filename);\r\n\r\n    return this;\r\n}\r\n\r\nsetOnHover( h ){\r\n    this.onHover = f;\r\n    return this;\r\n}\r\nsetOnLeave( h ){\r\n    this.onLeave = f;\r\n    return this;\r\n}\r\nsetOnSelect( h ){\r\n    this.onSelect = f;\r\n    return this;\r\n}\r\n\r\n// Assign a period to this node\r\n// TODO: \r\n/*\r\nsetPeriod(p){\r\n    if (this.type === ATON.NTYPES.UI) return this; // not on UI nodes\r\n\r\n    let P = (typeof p === 'string')? ATON.periods[p] : p;\r\n    if (P === undefined) return this;\r\n\r\n    this.period = P;\r\n    return this;\r\n}\r\n\r\nfilterByPeriodID(id){\r\n    if (this.period === undefined) return this;\r\n\r\n    if (this.period.id !== id){\r\n        this.hide();\r\n        return this;\r\n        }\r\n    else {\r\n        this.show();\r\n        return this;\r\n    }\r\n\r\n    this.traverse((o) => {\r\n        if (o.period){\r\n            if (o.period.id === id) this.show();\r\n            else this.hide();\r\n        }\r\n    });\r\n\r\n    return this;\r\n}\r\n*/\r\n\r\n}\r\n\r\nexport default Node;","/*\r\n    ATON Viewpoint Class\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\n/**\r\nClass representing a Viewpoint (POV) in the 3D space, abstracting from device used (mobile, desktop or immersive XR).\r\nConstructor allows to assign the POV a unique ID (`string`)\r\n@class POV\r\n@example \r\nnew ATON.POV(\"myView\")\r\n*/\r\nclass POV {\r\n\r\nconstructor(id){\r\n    // Register\r\n    if (id !== undefined){\r\n        ATON.Nav.povlist[id] = this;\r\n        this.id = id;\r\n    }\r\n\r\n    this.pos    = new THREE.Vector3(1,0,0);\r\n    this.target = new THREE.Vector3(0,0,0);\r\n    this.up     = ATON.STD_UPVECTOR;\r\n    this.fov    = ATON.Nav.STD_FOV;\r\n\r\n    this.kwords = undefined;\r\n\r\n    this.nextPOV = undefined;\r\n    this.prevPOV = undefined;\r\n}\r\n\r\n/**\r\nSet eye position\r\n@example\r\nnew ATON.POV(\"myView\").setPosition(2.0,6.0,1.5)\r\n@example\r\nmypov.setPosition( new THREE.Vector3(2.0,6.0,1.5) )\r\n*/\r\nsetPosition(x,y,z){\r\n    if (x instanceof THREE.Vector3) this.pos.copy(x);\r\n    else this.pos.set(x,y,z);\r\n\r\n    return this;\r\n}\r\n\r\n/**\r\nSet target position\r\n@example\r\nnew ATON.POV(\"myView\").setTarget(8.0,6.0,1.5)\r\n@example\r\nmypov.setTarget( new THREE.Vector3(8.0,6.0,1.5) ).setPosition(2.0,6.0,1.5)\r\n*/\r\nsetTarget(x,y,z){\r\n    if (x instanceof THREE.Vector3) this.target.copy(x);\r\n    else this.target.set(x,y,z);\r\n\r\n    return this;\r\n}\r\n\r\n/**\r\nSet field of view (FOV) in degrees\r\n@param {number} f\r\n@example\r\nnew ATON.POV(\"myView\").setFOV(70.0)\r\n*/\r\nsetFOV(f){\r\n    this.fov = f;\r\n\r\n    return this;\r\n}\r\n\r\n/**\r\nAdd a keyword to this viewpoint\r\n@param {string} kw - the keyword\r\n@example\r\nnew ATON.POV(\"myView\").addKeyword(\"heritage\")\r\n*/\r\naddKeyword(kw){\r\n    if (this.kwords === undefined) this.kwords = [];\r\n    this.kwords.push(kw);\r\n\r\n    return this;\r\n}\r\n\r\nsetKeywords(kwarray){\r\n    this.kwords = kwarray;\r\n    return this;\r\n}\r\n\r\n/**\r\nSet an optional next POV\r\n@param {POV} pov - the next POV\r\n*/\r\nsetNextPOV(pov){\r\n    if (!pov) return;\r\n    this.nextPOV = pov;\r\n\r\n    return this;\r\n}\r\n\r\n/**\r\nSet an optional previous POV\r\n@param {POV} pov - the previous POV\r\n*/\r\nsetPrevPOV(pov){\r\n    if (!pov) return;\r\n    this.prevPOV = pov;\r\n\r\n    return this;\r\n}\r\n\r\n}\r\n\r\nexport default POV;","/*\r\n    ATON Light Probe Class\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\n/**\r\nClass representing a light probe (LP), can be static or updated at runtime\r\n@class LightProbe\r\n@param {number} res - Resolution in pixel of lightprobe (default 64)\r\n@param {number} near - Capture near (default 1m)\r\n@param {number} far - Capture far (default 1Km)\r\n@example \r\nlet LP = new ATON.LightProbe()\r\n*/\r\nclass LightProbe {\r\n\r\nconstructor(res, near, far){\r\n    this.pos = new THREE.Vector3(0,0,0);\r\n\r\n    this._res  = (res !== undefined)?  res  : 64;\r\n    this._near = (near !== undefined)? near : 1.0;\r\n    this._far  = (far !== undefined)?  far  : ATON.Nav.STD_FAR;\r\n/*\r\n    this._LPtarget0 = undefined;\r\n    this._LPtarget1 = undefined;\r\n\r\n    this._LP0 = undefined;\r\n    this._LP1 = undefined;\r\n\r\n    this._flipLP = false;\r\n*/\r\n    this._envtex = undefined;\r\n    this._prevCCtarget = undefined;\r\n\r\n    this._pmremGenerator = new THREE.PMREMGenerator(ATON._renderer);\r\n\r\n    //this.realize();\r\n}\r\n\r\n/*\r\nrealize(){\r\n    this._LPtarget0 = new THREE.WebGLCubeRenderTarget( this._res, {\r\n        format: THREE.RGBFormat,\r\n        generateMipmaps: true,\r\n        minFilter: THREE.LinearMipmapLinearFilter,\r\n        encoding: THREE.sRGBEncoding // prevent the material's shader from recompiling every frame\r\n    });\r\n\r\n    this._LPtarget1 = new THREE.WebGLCubeRenderTarget( this._res, {\r\n        format: THREE.RGBFormat,\r\n        generateMipmaps: true,\r\n        minFilter: THREE.LinearMipmapLinearFilter,\r\n        encoding: THREE.sRGBEncoding\r\n    });\r\n\r\n    this._LP0 = new THREE.CubeCamera( this._near, this._far, this._LPtarget0 );\r\n    this._LP1 = new THREE.CubeCamera( this._near, this._far, this._LPtarget1 );\r\n\r\n    return this;\r\n}\r\n*/\r\n\r\n/**\r\nSet LP position\r\n@example\r\nLP.setPosition(2.0,6.0,1.5)\r\n@example\r\nLP.setPosition( new THREE.Vector3(2.0,6.0,1.5) )\r\n*/\r\nsetPosition(x,y,z){\r\n    if (x instanceof THREE.Vector3) this.pos.copy(x);\r\n    else this.pos.set(x,y,z);\r\n\r\n    //if (this._LP0) this._LP0.position.copy(this.pos);\r\n    //if (this._LP1) this._LP1.position.copy(this.pos);\r\n\r\n    return this;\r\n}\r\n\r\nsetNear(near){\r\n    this._near = near;\r\n    return this;\r\n}\r\nsetFar(far){ \r\n    this._far = far;\r\n    return this;\r\n}\r\n\r\n/**\r\nUpdate LP capture. Typically called when all 3D models are loaded and arranged into the scene.\r\nCan be called at runtime or whenever there is some change in the 3D scene\r\n@example\r\nLP.update()\r\n*/\r\nupdate(){\r\n    if (this._envtex) this._envtex.dispose();\r\n    if (this._prevCCtarget) this._prevCCtarget.dispose();\r\n\r\n    let CCtarget = new THREE.WebGLCubeRenderTarget( this._res, {\r\n        format: THREE.RGBEFormat,\r\n        generateMipmaps: true,\r\n        minFilter: THREE.LinearMipmapLinearFilter,\r\n        encoding: THREE.sRGBEncoding // prevent the material's shader from recompiling every frame\r\n    });\r\n\r\n    let CC = new THREE.CubeCamera( this._near, this._far, CCtarget );\r\n    CC.position.copy(this.pos);\r\n\r\n    CC.update( ATON._renderer, ATON._rootVisibleGlobal );\r\n\r\n    this._envtex = CCtarget.texture;\r\n    \r\n/*\r\n    console.log(CC);\r\n    console.log(CCtarget);\r\n\r\n    let CCtargetX = new THREE.WebGLCubeRenderTarget( this._res, {\r\n        format: THREE.RGBFormat,\r\n        //generateMipmaps: true,\r\n        minFilter: THREE.LinearMipmapLinearFilter,\r\n        encoding: THREE.sRGBEncoding\r\n    });\r\n\r\n    let CCX = new THREE.CubeCamera( this._near, this._far, CCtargetX );\r\n    CCX.position.copy(this.pos);\r\n\r\n    CCX.update( ATON._renderer, ATON._rootVisible );\r\n    this._envtex = this._pmremGenerator.fromCubemap(CCtargetX.texture).texture;\r\n*/\r\n\r\n    this._prevCCtarget = CCtarget;\r\n\r\n\r\n/*\r\n    if (this._LP0 === undefined || this._LP1 === undefined) return this;\r\n\r\n    this._flipLP = !this._flipLP;\r\n    //ATON._flipLP = !ATON._flipLP;\r\n\r\n    if (this._flipLP){\r\n        this._LP0.update( ATON._renderer, ATON._mainRoot );\r\n        this._envtex = this._LPtarget0.texture;\r\n    }\r\n    else {\r\n        this._LP1.update( ATON._renderer, ATON._mainRoot );\r\n        this._envtex = this._LPtarget1.texture;\r\n    }\r\n*/\r\n    return this;\r\n}\r\n\r\n\r\ngetEnvTex(){\r\n    return this._envtex;\r\n}\r\n\r\nassignToNode(N){\r\n    if (N === undefined) return;\r\n    //TODO:\r\n}\r\n\r\n}\r\n\r\nexport default LightProbe;","/*\r\n    ATON Event Hub\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\n/**\r\nATON Event Hub\r\n@namespace EventHub\r\n*/\r\nlet EventHub = {};\r\n\r\n/**\r\nInitializes the component\r\n*/\r\nEventHub.init = ()=>{\r\n\r\n    EventHub.evLocal   = {};\r\n    EventHub.evNetwork = {};\r\n\r\n    // Expose\r\n    ATON.on                 = EventHub.on;\r\n    ATON.fireEvent          = EventHub.fireEvent;\r\n    ATON.clearEventHandlers = EventHub.clearEventHandlers\r\n};\r\n\r\n/**\r\nClear all event handlers for a given event\r\n@param {string} evtname - event name\r\n*/\r\nEventHub.clearEventHandlers = (evtname)=>{\r\n    //let evHandlers = (bNetwork)? EventHub.evNetwork : EventHub.evLocal;\r\n\r\n    EventHub.evLocal[evtname]   = [];\r\n    EventHub.evNetwork[evtname] = [];\r\n};\r\n\r\n// Execute all handlers from list with given data\r\nEventHub.executeHandlers = (ehList, data)=>{\r\n    if (!ehList) return;\r\n\r\n    for (let h = 0; h < ehList.length; h++) {\r\n        let handler = ehList[h];\r\n        if (handler) handler(data);\r\n    }\r\n};\r\n\r\n/**\r\nSubscribe to a given event, with local handler and optional network handler\r\n@param {string} evtname - event name\r\n@param {function} handlerLocal - local event handler\r\n@param {function} handlerNetwork - optional network (see VRoadcast) event handler\r\n@example\r\nATON.EventHub.on(\"myEvent\", function(data){ console.log(\"received local event\"); })\r\n*/\r\nEventHub.on = (evtname, handlerLocal, handlerNetwork)=>{\r\n    // Local event (default)\r\n    if (handlerLocal !== undefined){\r\n        let evhLocal = EventHub.evLocal;\r\n\r\n        if (evhLocal[evtname] === undefined) evhLocal[evtname] = []; // First time (event not registered)\r\n        evhLocal[evtname].push(handlerLocal);\r\n    }\r\n\r\n    // Received event (network)\r\n    if (handlerNetwork !== undefined){\r\n        ATON.VRoadcast.on(evtname, handlerNetwork);\r\n    }\r\n\r\n};\r\n\r\n/**\r\nFire a local (and optionally network) event, with data\r\n@param {string} evtname - event name\r\n@param {object} data - object containing data to be transmitted with this event\r\n@param {bool} bReplicate - if true, it will replicate (broadcast) the event to other connected peers in the same scene (see VRoadcast)\r\n@example\r\nATON.EventHub.on(\"myEvent\", function(data){ console.log(\"received local event\"); })\r\n*/\r\nEventHub.fireEvent = (evtname, data, bReplicate)=>{\r\n    let ehList = EventHub.evLocal[evtname];\r\n    EventHub.executeHandlers(ehList, data);\r\n\r\n    if (!bReplicate) return;\r\n    ATON.VRoadcast.fireEvent(evtname, data);\r\n};\r\n\r\nexport default EventHub;","/*\r\n    ATON Materials Hub\r\n    Centralized material manager\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\n/**\r\nATON Material Hub\r\n@namespace MatHub\r\n*/\r\nlet MatHub = {};\r\n\r\nMatHub.init = ()=>{\r\n    MatHub.materials = {};\r\n    MatHub.colors    = {};\r\n\r\n    MatHub.addDefaults();\r\n\r\n    MatHub._loader = new THREE.MaterialLoader();\r\n};\r\n\r\nMatHub.addDefaults = ()=>{\r\n\r\n    // Colors\r\n    MatHub.colors.white  = new THREE.Color(1,1,1);\r\n    MatHub.colors.black  = new THREE.Color(0,0,0);\r\n    MatHub.colors.green  = new THREE.Color(0,1,0);\r\n    MatHub.colors.yellow = new THREE.Color(1,1,0);\r\n    MatHub.colors.red    = new THREE.Color(1,0,0);\r\n    MatHub.colors.blue   = new THREE.Color(0,0,1);\r\n    MatHub.colors.orange = new THREE.Color(1,0.5,0);\r\n    \r\n    MatHub.colors.sem     = new THREE.Color(0,0,1);\r\n    MatHub.colors.darksem = new THREE.Color(0,0,0.1);\r\n\r\n    // Materials\r\n    MatHub.materials.fullyTransparent = new THREE.MeshBasicMaterial({ \r\n        transparent: true, \r\n        depthWrite: false, \r\n        opacity: 0.0\r\n    });\r\n    \r\n    // Selector\r\n    MatHub.materials.selector = new THREE.MeshBasicMaterial({\r\n        color: MatHub.colors.green,\r\n        transparent: true, \r\n        opacity: 0.2, \r\n        flatShading: true\r\n    });\r\n\r\n    // XR/VR ray\r\n    MatHub.materials.controllerRay = new THREE.MeshBasicMaterial({ \r\n        color: MatHub.colors.white, \r\n        transparent: true, \r\n        opacity: 0.2,\r\n        depthWrite: false,\r\n        flatShading: true\r\n    });\r\n\r\n    // Semantic shapes\r\n    MatHub.materials.semanticShape = new THREE.MeshBasicMaterial({ \r\n        color: MatHub.colors.sem, \r\n        transparent: true,\r\n        depthWrite: false, \r\n        opacity: 0.1,\r\n        flatShading: true\r\n    });\r\n    MatHub.materials.semanticShapeHL = new THREE.MeshBasicMaterial({ \r\n        color: MatHub.colors.sem, \r\n        transparent: true,\r\n        depthWrite: false, \r\n        opacity: 0.3,\r\n        flatShading: true\r\n    });\r\n    MatHub.materials.semanticShapeEdit = new THREE.MeshBasicMaterial({ \r\n        color: MatHub.colors.orange, \r\n        transparent: true,\r\n        depthWrite: false, \r\n        opacity: 0.2,\r\n        flatShading: true\r\n    });\r\n};\r\n\r\nMatHub.addMaterial = (id, mat)=>{\r\n    if (MatHub.materials[id]){\r\n        console.log(\"MatHub: material \"+id+\" already registered\");\r\n        return;\r\n    }\r\n\r\n    MatHub.materials[id] = mat;\r\n};\r\n\r\nMatHub.loadMaterial = (id, jsonfile)=>{\r\n    MatHub._loader.load(jsonfile, (mat)=>{\r\n        MatHub.addMaterial(id, mat);\r\n    },\r\n    undefined,\r\n    (err)=>{\r\n        console.log(err);\r\n    });\r\n};\r\n\r\nMatHub.getMaterial = (id)=>{\r\n    return MatHub.materials[id];\r\n};\r\n\r\nexport default MatHub;","/*\r\n    ATON Utils\r\n    various utilities for device profiling, graph visiting, etc.\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\nlet Utils = {};\r\n\r\n\r\nUtils.init = ()=>{\r\n    // read-only object to inspect device capabilities\r\n    ATON.device = {};\r\n\r\n    Utils.geomUnitSphere = new THREE.SphereBufferGeometry( 1.0, 16, 16 );\r\n\r\n    // Export/Download utils\r\n    Utils.exporter = new THREE.GLTFExporter();\r\n    Utils._dlink = document.createElement('a');\r\n    Utils._dlink.style.display = 'none';\r\n    document.body.appendChild( Utils._dlink ); // Firefox workaround, see #6594\r\n\r\n    Utils.textureLoader = new THREE.TextureLoader();\r\n};\r\n\r\nUtils.isConnectionSecure = ()=>{\r\n    return window.isSecureContext;\r\n}\r\n\r\nUtils.isMobile = ()=>{\r\n    return ATON.device.isMobile;\r\n}\r\n\r\n// Profile device capabilities\r\nUtils.profileDevice = ()=>{\r\n\r\n    // Detect mobile\r\n    ATON.device.isMobile = false;\r\n    let detectMobile = ()=>{\r\n        if(/(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|ipad|iris|kindle|Android|Silk|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(navigator.userAgent)\r\n        || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(navigator.userAgent.substr(0,4))){\r\n            return true;\r\n            }\r\n\r\n        return false;\r\n    };\r\n\r\n    ATON.device.isMobile = detectMobile();\r\n\r\n    // XR\r\n    ATON.device.isXRsupported = false;\r\n    if ( 'xr' in navigator ){\r\n\t    navigator.xr.isSessionSupported( 'immersive-vr' ).then( function ( b ){\r\n            if (b){\r\n                ATON.device.isXRsupported = true;\r\n                console.log(\"WebXR supported\");\r\n                }\r\n            else {\r\n                ATON.device.isXRsupported = false;\r\n                console.log(\"WebXR NOT supported\");\r\n                }\r\n\t\t});\r\n    }\r\n};\r\n\r\n// Path utils\r\nUtils.getFileExtension = ( filepath )=>{\r\n\treturn filepath.substr(filepath.lastIndexOf('.')+1).toLowerCase();\r\n};\r\n\r\nUtils.getBaseFolder = ( filepath )=>{\r\n    var index  = filepath.lastIndexOf( '/' );\r\n    if ( index !== -1 ) return filepath.substring( 0, index + 1 );\r\n    \r\n    return '';\r\n};\r\n\r\nUtils.mergeObject = ( object )=>{\r\n    object.updateMatrixWorld( true );\r\n\r\n    const geometry = [];\r\n    object.traverse( c => {\r\n        if ( c.isMesh ){\r\n            const g = c.geometry;\r\n            g.applyMatrix4( c.matrixWorld );\r\n            geometry.push( g.toNonIndexed() );\r\n        }\r\n\r\n    });\r\n\r\n    const mergedGeometries = THREE.BufferGeometryUtils.mergeBufferGeometries( geometry, false );\r\n    const mergedGeometry   = THREE.BufferGeometryUtils.mergeVertices( mergedGeometries ).center();\r\n\r\n    const group = new THREE.Group();\r\n    const mesh = new THREE.Mesh( mergedGeometry );\r\n    group.add( mesh );\r\n    return group;\r\n};\r\n\r\n// Helper visitor routine\r\nUtils.modelVisitor = (parentNode, model)=>{\r\n    if (!model) return this;\r\n\r\n    //model = Utils.mergeObject(model);\r\n    \r\n    let N = parentNode;\r\n    let type = N.type; // Differentiate visit depending on node type\r\n\r\n    model.traverse( ( o ) => {\r\n\r\n        if (N.bPickable !== undefined){\r\n            if (N.bPickable) o.layers.enable(type);\r\n            else o.layers.disable(type);\r\n        }\r\n\r\n        if (o.isMesh){\r\n            //let numVertices = o.geometry.attributes.position.count;\r\n            //console.log(numVertices);\r\n\r\n            if (type === ATON.NTYPES.SCENE){\r\n                // TODO: \r\n                o.castShadow    = true; //N.castShadow;\r\n                o.receiveShadow = true; //N.receiveShadow;\r\n\r\n                // Build accelerated ray casting\r\n                if (o.geometry){\r\n                    o.geometry.computeBoundsTree();\r\n                    console.log(\"Computed BVH\");\r\n                }\r\n\r\n                // Ensure mipmapping is correct\r\n                if ( o.material.map !== null){\r\n                    //console.log(object.material.map);\r\n                    \r\n                    // Why do I have to do this?\r\n                    //o.material.map.generateMipmaps = false;\r\n                    o.material.map.anisotropy = ATON._maxAnisotropy;\r\n                    o.material.map.minFilter  = THREE.LinearMipmapLinearFilter;\r\n                    o.material.map.magFilter  = THREE.LinearFilter;\r\n                    //o.material.map.needsUpdate = true;\r\n                }\r\n            }\r\n\r\n            if (type === ATON.NTYPES.SEM){\r\n                o.material = ATON.MatHub.materials.semanticShape;\r\n            }\r\n\r\n            // Cascading material\r\n            if (N.userData.cMat){\r\n                o.material = N.userData.cMat;\r\n                //o.material.needsUpdate = true;\r\n            }\r\n        }\r\n    });\r\n};\r\n\r\nUtils.setVectorPrecision = (v, prec)=>{\r\n    v.x = parseFloat( v.x.toPrecision(prec) );\r\n    v.y = parseFloat( v.y.toPrecision(prec) );\r\n    v.z = parseFloat( v.z.toPrecision(prec) );\r\n    \r\n    return v;\r\n};\r\n\r\n// Export routines\r\nUtils.downloadBlob = (blob, filename)=>{\r\n    if (filename === undefined) return;\r\n\r\n    Utils._dlink.href = URL.createObjectURL( blob );\r\n    Utils._dlink.download = filename;\r\n    Utils._dlink.click();\r\n};\r\n\r\n// Download text ASCII data\r\nUtils.downloadText = ( str, filename )=>{\r\n    Utils.downloadBlob( new Blob( [ str ], { type: 'text/plain' } ), filename );\r\n};\r\n\r\n// Download json object\r\nUtils.downloadJSONobj = (jsonobj, filename)=>{\r\n    Utils.downloadText( JSON.stringify(jsonobj), filename );\r\n};\r\n\r\nUtils.downloadArrayBuffer = ( buffer, filename )=>{\r\n    Utils.downloadBlob( new Blob( [ buffer ], { type: 'application/octet-stream' } ), filename );\r\n};\r\n\r\n// Export ATON node (gltf or glb)\r\nUtils.exportNode = (node, filename)=>{\r\n    let ext = Utils.getFileExtension(filename);\r\n    if (ext.length < 1) return;\r\n\r\n    let bBin = (ext === \"glb\")? true : false;\r\n\r\n    let opts = {\r\n        //trs: true, // Export position, rotation and scale instead of matrix per node. Default is false\r\n        binary: bBin, // Export in binary (.glb) format, returning an ArrayBuffer. Default is false\r\n        //onlyVisible: false,\r\n        //truncateDrawRange: true\r\n    };\r\n\r\n    Utils.exporter.parse( node, ( output )=>{\r\n        if ( output instanceof ArrayBuffer ){\r\n            Utils.downloadArrayBuffer( output, filename);\r\n        }\r\n        else {\r\n            console.log( output );\r\n            Utils.downloadJSONobj(output, filename);\r\n        }\r\n    }, opts);\r\n};\r\n\r\nUtils.assignLightProbeToMesh = (LP, mesh)=>{\r\n    if (LP === undefined || mesh === undefined) return;\r\n\r\n    if (mesh.noLP) return;\r\n\r\n    mesh.userData.LP = LP;\r\n    //LP.update();\r\n    //mesh.material.envMap = LP.getEnvTex();\r\n    \r\n    //mesh.material.combine = THREE.MultiplyOperation;\r\n    //mesh.material.needsUpdate = true;\r\n\r\n    //console.log(mesh.userData);\r\n};\r\n\r\nUtils.createATONCube = (id)=>{\r\n    let g = new THREE.BoxBufferGeometry( 1,1,1 );\r\n\r\n    let mat = new THREE.MeshStandardMaterial();\r\n\r\n    Utils.textureLoader.load((ATON.PATH_RES+\"models/aton-cube.jpg\"), (tex)=>{\r\n        tex.encoding = THREE.sRGBEncoding;\r\n        mat.map = tex;\r\n    });\r\n\r\n    let N = ATON.createSceneNode(id);\r\n    N.add( new THREE.Mesh(g) );\r\n    N.setMaterial(mat);\r\n\r\n    N.enablePicking();\r\n    return N;\r\n};\r\n\r\n\r\nUtils.createATONCubePBR = (id)=>{\r\n    let g = new THREE.BoxBufferGeometry( 1,1,1 );\r\n\r\n    let mat = new THREE.MeshStandardMaterial();\r\n    mat.metalness = 1.0;\r\n\r\n    Utils.textureLoader.load((ATON.PATH_RES+\"models/aton-cube.jpg\"), (tex)=>{\r\n        tex.encoding = THREE.sRGBEncoding;\r\n        mat.map = tex;\r\n    });\r\n\r\n    Utils.textureLoader.load((ATON.PATH_RES+\"models/aton-cube-pbr.jpg\"), (tex)=>{\r\n        tex.encoding = THREE.sRGBEncoding;\r\n        mat.metalnessMap = tex;\r\n        mat.roughnessMap = tex;\r\n    });\r\n\r\n    Utils.textureLoader.load((ATON.PATH_RES+\"models/aton-cube-nrm.png\"), (tex)=>{\r\n        tex.encoding = THREE.sRGBEncoding;\r\n        mat.normalMap = tex;\r\n\r\n        //mat.bumpMap.anisotropy = ATON._maxAnisotropy;\r\n        //mat.bumpMap.minFilter  = THREE.LinearMipmapLinearFilter;\r\n        //mat.bumpMap.magFilter  = THREE.LinearFilter;\r\n    });\r\n\r\n    let N = ATON.createSceneNode(id);\r\n    N.add( new THREE.Mesh(g) );\r\n    N.setMaterial(mat);\r\n\r\n    N.enablePicking();\r\n    return N;\r\n};\r\n\r\n\r\nUtils.createGround = (texture, dx,dz)=>{\r\n    if (dx === undefined) dx = 1.0;\r\n    if (dz === undefined) dz = 1.0;\r\n\r\n    let g = new THREE.PlaneBufferGeometry( dx, dz );\r\n\r\n    let mat = new THREE.MeshStandardMaterial();\r\n    if (texture !== undefined) Utils.textureLoader.load(texture, (tex)=>{\r\n        tex.encoding = THREE.sRGBEncoding;\r\n        mat.map = tex;\r\n    });\r\n\r\n    let N = ATON.createSceneNode().rotateX(-Math.PI * 0.5);\r\n    N.add( new THREE.Mesh(g, mat) );\r\n    N.enablePicking();\r\n\r\n    return N;\r\n};\r\n\r\n\r\nexport default Utils;","/*\r\n    ATON Scene Hub\r\n    scene JSON routines\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\n/**\r\nATON Scene Hub\r\n@namespace SceneHub\r\n*/\r\nlet SceneHub = {};\r\n\r\nSceneHub.MODE_ADD = 0;\r\nSceneHub.MODE_DEL = 1;\r\n\r\n/**\r\nInitializes the component\r\n*/\r\nSceneHub.init = ()=>{\r\n    SceneHub.currID   = undefined; // Scene ID (sid)\r\n    SceneHub.currData = undefined; // holds compact object describing our ATON scene\r\n    SceneHub._bEdit   = false;     // edit mode (client can modify json on the server)\r\n\r\n    SceneHub._bLoading = false;\r\n\r\n    SceneHub.initBaseParsers();\r\n};\r\n\r\n/**\r\nThis enables/disables edit mode - i.e. changes to the scene are sent to server and become persistent\r\n@param {bool} b - true or false\r\n@example\r\nATON.SceneHub.setEditMode(true)\r\n*/\r\nSceneHub.setEditMode = (b)=>{\r\n    SceneHub._bEdit = b;\r\n    console.log(\"Edit mode:\"+b);\r\n};\r\n\r\n\r\n/**\r\n    Loads a scene by providing JSON path\r\n    @param {string} reqpath - JSON url\r\n    @param {string} sid - Scene ID\r\n    @param {function} oncomplete - Function to be called on complete\r\n    @example\r\n        ATON.SceneHub.load(\"http://path/to/scene.json\", \"sample\", ()=>{ console.log(\"Done!\"); });\r\n*/\r\nSceneHub.load = (reqpath, sid, oncomplete)=>{\r\n    //let args = reqpath.split(',');\r\n\r\n    SceneHub._bLoading = true;\r\n    console.log(\"Loading Scene: \"+sid);\r\n\r\n    return $.getJSON( reqpath, ( data )=>{\r\n        SceneHub.currData  = data;\r\n        SceneHub.currID    = sid; //scenejson.substring(scenejson.lastIndexOf('/')+1);\r\n        SceneHub._bLoading = false;\r\n\r\n        //console.log(ATON.currScene);\r\n\r\n        SceneHub.parseScene(data);\r\n\r\n        if (oncomplete) oncomplete();\r\n        ATON.fireEvent(\"SceneJSONLoaded\", sid);\r\n    });\r\n};\r\n\r\nSceneHub.parseScene = (sobj)=>{\r\n    sobj = (sobj === undefined)? SceneHub.currData : sobj;\r\n    if (sobj === undefined) return;\r\n\r\n    for (let k in sobj)\r\n        if (SceneHub._jsonParsers[k]) SceneHub._jsonParsers[k]( sobj[k] );\r\n};\r\n\r\nSceneHub.getJSONchildren = (nid, type)=>{\r\n    if (type === undefined) type = ATON.NTYPES.SCENE;\r\n\r\n    let P = undefined;\r\n    let children = [];\r\n\r\n    if (type === ATON.NTYPES.SEM)   P = ATON.getSemanticNode(nid);\r\n    if (type === ATON.NTYPES.SCENE) P = ATON.getSceneNode(nid);\r\n\r\n    if (P === undefined) return undefined;\r\n\r\n    for (let c in P.children){\r\n        let child = P.children[c];\r\n\r\n        if (child.nid !== undefined) children.push( child.nid );\r\n        }\r\n\r\n    return children;\r\n};\r\n\r\nSceneHub.getJSONgraphEdges = (type)=>{\r\n    if (type === undefined) type = ATON.NTYPES.SCENE;\r\n    let nodes = ATON.snodes;\r\n    \r\n    if (type === ATON.NTYPES.SEM) nodes = ATON.semnodes;\r\n    if (type === ATON.NTYPES.UI)  nodes = ATON.uinodes;\r\n\r\n    let edges = {};\r\n\r\n    for (let n in nodes){\r\n        let N = nodes[n];\r\n\r\n        //if (N && N.children) edges[n] = SceneHub.getJSONchildren(n, type);\r\n\r\n        let E = {};\r\n        if (N.parent && N.parent.nid){\r\n            //edges.push([N.parent.nid, N.nid]);\r\n            if (edges[N.parent.nid] === undefined) edges[N.parent.nid] = [];\r\n            edges[N.parent.nid].push(N.nid);\r\n            //edges[N.parent.nid].filter((v,i) => edges[N.parent.nid].indexOf(v) === i);\r\n        }\r\n    }\r\n\r\n    //console.log(edges);\r\n    return edges;\r\n};\r\n\r\nSceneHub.getJSONsemanticSpheresList = (semid)=>{\r\n    let S = ATON.getSemanticNode(semid);\r\n    if (S === undefined) return undefined;\r\n\r\n    let SL = [];\r\n\r\n    for (let s in S.children){\r\n        let sphere = S.children[s];\r\n        if (sphere.type){\r\n            SL.push([\r\n                parseFloat(sphere.position.x.toPrecision(3)), \r\n                parseFloat(sphere.position.y.toPrecision(3)), \r\n                parseFloat(sphere.position.z.toPrecision(3)), \r\n                parseFloat(sphere.scale.x.toPrecision(3))\r\n            ]);\r\n        }\r\n    }\r\n\r\n    return SL;\r\n};\r\n\r\nSceneHub.getJSONsemanticConvexShapes = (semid)=>{\r\n    let S = ATON.getSemanticNode(semid);\r\n    if (S === undefined) return undefined;\r\n\r\n    let CL = [];\r\n\r\n    for (let s in S.children){\r\n        let semesh = S.children[s];\r\n        if (semesh.userData._convexPoints){\r\n            CL.push(semesh.userData._convexPoints);\r\n        }\r\n    }\r\n\r\n    //console.log(CL);\r\n    \r\n    return CL;\r\n};\r\n\r\n// Top-level scene-JSON parsers\r\nSceneHub.initBaseParsers = ()=>{\r\n    SceneHub._jsonParsers = {};\r\n\r\n    // Environment\r\n    SceneHub._jsonParsers.environment = (env)=>{\r\n\r\n        let pano = env.mainpano;\r\n        if (env.mainpano){\r\n            if (pano.url) ATON.setMainPanorama(ATON.PATH_COLLECTION+pano.url);\r\n            if (pano.rotation) ATON.setMainPanoramaRotation(pano.rotation);\r\n        }\r\n\r\n        let L = env.mainlight;\r\n        if (L){\r\n            if (L.direction) ATON.setMainLightDirection( new THREE.Vector3(L.direction[0],L.direction[1],L.direction[2]) );\r\n\r\n            if (ATON._dMainL){\r\n                if (L.color)     ATON._dMainL.color = new THREE.Color(L.color[0],L.color[1],L.color[2]);\r\n                if (L.intensity) ATON._dMainL.intensity = L.intensity;\r\n\r\n                if (L.shadows) ATON.toggleShadows(L.shadows);\r\n            }\r\n        }\r\n\r\n        let lps = env.lightprobes;\r\n        if (lps){\r\n            if (lps.auto) ATON._bAutoLP = true;\r\n        }\r\n\r\n    };\r\n\r\n    // Viewpoints\r\n    SceneHub._jsonParsers.viewpoints = (povs)=>{\r\n        if (povs === undefined) return;\r\n\r\n        for (let p in povs){\r\n            let pov = povs[p];\r\n            \r\n            if (p === \"home\"){\r\n                ATON.Nav.setHomePOV( \r\n                    new ATON.POV()\r\n                    .setPosition(pov.position[0],pov.position[1],pov.position[2])\r\n                    .setTarget(pov.target[0],pov.target[1],pov.target[2])\r\n                    .setFOV(pov.fov)\r\n                    .setKeywords(pov.keywords)\r\n                );\r\n            }\r\n            else {\r\n                new ATON.POV(p)\r\n                .setPosition(pov.position)\r\n                .setTarget(pov.target)\r\n                .setFOV(pov.fov)\r\n                .setKeywords(pov.keywords);\r\n            }\r\n        }\r\n    };\r\n\r\n    // Visible scene-graph\r\n    SceneHub._jsonParsers.scenegraph = (sg)=>{\r\n        if (sg === undefined) return;\r\n\r\n        let nodes = sg.nodes;\r\n        let edges = sg.edges;\r\n\r\n        // nodes\r\n        for (let nid in nodes){\r\n            let N = nodes[nid]; // JSON node\r\n\r\n            //let G = ATON.createSceneNode(nid); // ATON node\r\n            let G = ATON.getOrCreateSceneNode(nid).removeChildren();\r\n            \r\n            // load models by urls list\r\n            let urls = N.urls;\r\n            if (urls){\r\n                if (Array.isArray(urls)){\r\n                    urls.forEach(u => {\r\n                        ATON.createSceneNode().load(ATON.PATH_COLLECTION+u).attachTo(G);\r\n                    });\r\n                }\r\n                else {\r\n                    G.load(ATON.PATH_COLLECTION+urls);\r\n                }\r\n            }\r\n\r\n            // FIXME: not working\r\n            if (N.shadowcast)    G.setShadowCast(N.shadowcast);\r\n            if (N.shadowreceive) G.setShadowCast(N.shadowreceive);\r\n\r\n            if (N.toYup) G.setYup();\r\n\r\n            // Keywords\r\n            if (N.keywords) G.kwords = N.keywords;\r\n\r\n            // Transform node\r\n            let transform = N.transform;\r\n            if (transform){\r\n                if (transform.position) G.setPosition(transform.position[0],transform.position[1],transform.position[2]);\r\n                if (transform.rotation) G.setRotation(transform.rotation[0],transform.rotation[1],transform.rotation[2]);\r\n                if (transform.scale)    G.setScale(transform.scale[0],transform.scale[1],transform.scale[2]);\r\n            }\r\n        }\r\n\r\n        // Build graph through relationships\r\n        for (let parid in edges){\r\n            let children = edges[parid];\r\n\r\n            let P = ATON.getSceneNode(parid);\r\n\r\n            if (P !== undefined){\r\n                for (let c in children){\r\n                    let childid = children[c];\r\n                    let C = ATON.getSceneNode(childid);\r\n                    if (C !== undefined) C.attachTo(P);\r\n                }\r\n            }\r\n        }\r\n/*\r\n        for (let e = 0; e < edges.length; e++){\r\n            let E = edges[e];\r\n\r\n            let from = E[0];\r\n            let to   = E[1];\r\n\r\n            if (from && to){\r\n                let child = ATON.getSceneNode(to);\r\n                if (child) child.attachTo(from);\r\n            }\r\n        }\r\n*/\r\n    };\r\n\r\n    // Semantic scene-graph\r\n    SceneHub._jsonParsers.semanticgraph = (sg)=>{\r\n        if (sg === undefined) return;\r\n\r\n        let nodes = sg.nodes;\r\n        let edges = sg.edges;\r\n\r\n        // nodes\r\n        for (let nid in nodes){\r\n            let N = nodes[nid]; // JSON node\r\n\r\n            //let G = ATON.createSemanticNode(nid);\r\n            let G = ATON.getOrCreateSemanticNode(nid).removeChildren();\r\n            \r\n            // load shapes by urls list\r\n            let urls = N.urls;\r\n            if (urls){\r\n                if (Array.isArray(urls)){\r\n                    urls.forEach(u => {\r\n                        ATON.createSemanticNode().load(ATON.PATH_COLLECTION+u).attachTo(G);\r\n                    });\r\n                }\r\n                else {\r\n                    G.load(ATON.PATH_COLLECTION+urls);\r\n                }\r\n            }\r\n\r\n            if (N.toYup) G.setYup();\r\n\r\n            if (N.description) G.setDescription(N.description);\r\n\r\n            // Keywords\r\n            if (N.keywords) G.kwords = N.keywords;\r\n\r\n            // Sphere [x,y,z, r]\r\n            let spheres = N.spheres;\r\n            if (Array.isArray(spheres)){\r\n                for (let s in spheres){\r\n                    let S = spheres[s];\r\n                    ATON.SemFactory.createSphere(nid, new THREE.Vector3(S[0],S[1],S[2]), S[3]);\r\n                }\r\n            }\r\n\r\n            let convexshapes = N.convexshapes;\r\n            if (Array.isArray(convexshapes)){\r\n                for (let s in convexshapes){\r\n                    let S = convexshapes[s];\r\n\r\n                    let points = [];\r\n                    for (let i=0; i<S.length; i+=3){\r\n                        let p = new THREE.Vector3(S[i],S[i+1],S[i+2]);\r\n                        points.push(p);\r\n                    }\r\n\r\n                    ATON.SemFactory.createConvexShape(nid, points);\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        // Build relationships\r\n        for (let parid in edges){\r\n            let children = edges[parid];\r\n\r\n            let P = ATON.getSemanticNode(parid);\r\n\r\n            if (P !== undefined){\r\n                for (let c in children){\r\n                    let childid = children[c];\r\n                    let C = ATON.getSemanticNode(childid);\r\n                    if (C !== undefined) C.attachTo(P);\r\n                }\r\n            }\r\n        }\r\n/*\r\n        for (let e = 0; e < edges.length; e++){\r\n            let E = edges[e];\r\n\r\n            let from = E[0];\r\n            let to   = E[1];\r\n\r\n            if (from && to){\r\n                let child = ATON.getSemanticNode(to);\r\n                if (child) child.attachTo(from);\r\n            }\r\n        }\r\n*/\r\n    };\r\n\r\n};\r\n\r\n// Adds custom scene parser to extend JSON scene\r\n// parser(k){ ... }\r\nSceneHub.addSceneParser = (k, parser)=>{\r\n    SceneHub._jsonParsers[k] = parser;\r\n};\r\n\r\n// [C] Sends JSON edit to server node\r\n// previously used: https://tools.ietf.org/html/rfc6902\r\nSceneHub.sendEdit = (patch, mode, onComplete)=>{\r\n    if (SceneHub._bLoading || !SceneHub._bEdit) return;\r\n    if (patch === undefined) return;\r\n    if (mode === undefined) mode = SceneHub.MODE_ADD;\r\n\r\n    let sid = SceneHub.currID;\r\n\r\n    let O = {};\r\n    O.sid  = sid;\r\n    O.data = patch;\r\n    O.mode = (mode === SceneHub.MODE_DEL)? \"DEL\" : \"ADD\";\r\n\r\n    let jstr = JSON.stringify(O);\r\n    //console.log(jstr);\r\n\r\n    $.ajax({\r\n        url: ATON.PATH_RESTAPI+\"edit/scene\",\r\n        type:\"POST\",\r\n        data: jstr,\r\n        contentType:\"application/json; charset=utf-8\",\r\n        dataType:\"json\",\r\n\r\n        // Update local scene JSON\r\n        // TODO: improve traffic by applying patch to local json, and NOT by receiving entire JSON \r\n        success: (r)=>{\r\n            if (r === undefined) return;\r\n            //console.log(r);\r\n            SceneHub.currData = r;\r\n            //console.log(ATON.currSceneHub.data);\r\n\r\n            if (onComplete) onComplete();\r\n        }\r\n    });\r\n};\r\n\r\n\r\nexport default SceneHub;","/*\r\n    ATON Navigation system\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\nconst COSINOIDAL_DIST = function(x){ return (1.0 - Math.cos(x * Math.PI)) / 2.0; };\r\n\r\n/**\r\nATON Navigation system\r\n@namespace Nav\r\n*/\r\nlet Nav = {};\r\n\r\n// Consts\r\nNav.STD_FOV  = 50.0;\r\nNav.STD_NEAR = 0.05;\r\nNav.STD_FAR  = 1000.0;\r\n\r\nNav.FP_EPS = 0.01;\r\nNav.STD_ROT_SPEED_ORBIT = 0.4;\r\nNav.STD_ROT_SPEED_FP    = -0.3;\r\nNav.STD_POV_TRANS_DURATION = 2.0;\r\n\r\n// Non-immersive navigation controls\r\nNav.MODE_ORBIT  = 0;\r\nNav.MODE_FP     = 1;\r\nNav.MODE_DEVORI = 2;\r\n\r\n\r\nNav.POVtransitionDuration = Nav.STD_POV_TRANS_DURATION;\r\n\r\n\r\n\r\n/**\r\nInitialize nav system\r\n*/\r\nNav.init = ()=>{\r\n    Nav._mode = undefined;\r\n\r\n    // Setup controls\r\n    //Nav._camera = new THREE.PerspectiveCamera( Nav.STD_FOV, window.innerWidth / window.innerHeight, Nav.STD_NEAR, Nav.STD_FAR );\r\n    //Nav._camera.layers.enableAll();\r\n    //Nav._controls = new THREE.OrbitControls( Nav._camera, ATON._renderer.domElement);\r\n    Nav.setOrbitControl();\r\n\r\n    // POV data\r\n    Nav._currPOV = new ATON.POV(); // holds current viewpoint data (eye, target, etc...)\r\n    Nav._fromPOV = new ATON.POV(); // initial POV when requesting a transition\r\n    Nav._reqPOV  = new ATON.POV(); // requested POV for transition\r\n\r\n    Nav.homePOV = undefined; //new ATON.POV();\r\n\r\n    Nav._tPOVcall = -1.0;\r\n    Nav._tPOVprogress = 0.0;\r\n\r\n    Nav.povlist = {}; // This will handle registered POVs\r\n\r\n    // World direction and orientation (quat)\r\n    // consistent within standard and immersive XR\r\n    Nav._vDir = new THREE.Vector3(1,0,0);\r\n    Nav._qOri = new THREE.Quaternion();\r\n\r\n    // Motion\r\n    Nav._motionAmt = 0.0;\r\n    Nav._motionDir = new THREE.Vector3(0,1,0);\r\n};\r\n\r\n/**\r\nGet current eye location, consistent within standard and immersive XR sessions.\r\n@returns {THREE.Vector3}\r\n@example\r\nlet p = ATON.Nav.getCurrentEyeLocation();\r\n*/\r\nNav.getCurrentEyeLocation = ()=>{\r\n    return Nav._currPOV.pos;\r\n};\r\n\r\n/**\r\nGet current view direction (normalized). Consistent within standard and immersive XR sessions.\r\n@returns {THREE.Vector3}\r\n@example\r\nlet d = ATON.Nav.getCurrentDirection();\r\n*/\r\nNav.getCurrentDirection = ()=>{\r\n    return Nav._vDir;\r\n};\r\n\r\n/**\r\nGrab current POV and return a copy.\r\n@returns {POV}\r\n@example\r\nlet pov = ATON.Nav.copyCurrentPOV();\r\n*/\r\nNav.copyCurrentPOV = ()=>{\r\n    let pov = new ATON.POV();\r\n    pov.pos.copy(Nav._currPOV.pos);\r\n    pov.target.copy(Nav._currPOV.target);\r\n    pov.fov = Nav._currPOV.fov;\r\n\r\n    return pov;\r\n};\r\n\r\n/**\r\nReturn true if the navigation system is currently performing a transition\r\n@returns {boolean}\r\n*/\r\nNav.isTransitioning = ()=>{\r\n    if (Nav._tPOVcall >= 0.0) return true;\r\n    return false;\r\n};\r\n\r\n/**\r\nReturn true if the navigation system is in Orbit mode\r\n@returns {boolean}\r\n*/\r\nNav.isOrbit = ()=>{ return (Nav._mode === Nav.MODE_ORBIT); };\r\n\r\n/**\r\nReturn true if the navigation system is in First-person mode\r\n@returns {boolean}\r\n*/\r\nNav.isFirstPerson = ()=>{ return (Nav._mode === Nav.MODE_FP); };\r\n\r\n/**\r\nReturn true if the navigation system is in Device-orientation mode\r\n@returns {boolean}\r\n*/\r\nNav.isDevOri = ()=>{ return (Nav._mode === Nav.MODE_DEVORI); };\r\n\r\n/**\r\nSet Orbit navigation mode (default)\r\n*/\r\nNav.setOrbitControl = ()=>{\r\n    if (ATON.XR.isPresenting()) return;\r\n\r\n    Nav._mode = Nav.MODE_ORBIT;\r\n\r\n    // One-time setup\r\n    if (Nav._cOrbit === undefined){\r\n        Nav._camOrbit = new THREE.PerspectiveCamera( Nav.STD_FOV, window.innerWidth / window.innerHeight, Nav.STD_NEAR, Nav.STD_FAR );\r\n        Nav._camOrbit.layers.enableAll();\r\n\r\n        Nav._cOrbit = new THREE.OrbitControls( Nav._camOrbit, ATON._renderer.domElement);\r\n\r\n        let C = Nav._cOrbit;\r\n\r\n        C.rotateSpeed   = Nav.STD_ROT_SPEED_ORBIT;\r\n        C.enablePan     = true;\r\n        \r\n        C.enableDamping = false;\r\n        //C.dampingFactor = 0.1;\r\n        \r\n        C.screenSpacePanning = true;\r\n        \r\n        C.enableZoom  = true;\r\n        C.minDistance = 0.03;\r\n        C.maxDistance = 1000.0;\r\n\r\n        C.addEventListener(\"change\", () => { Nav._bControlChange = true; });\r\n    }\r\n\r\n    Nav._controls = Nav._cOrbit;\r\n    //Nav._controls.target.copy(Nav._camera.position);\r\n    Nav._camera = Nav._camOrbit;\r\n    \r\n    Nav._controls.update();\r\n    if (Nav._currPOV) Nav.syncCurrCamera();\r\n};\r\n\r\n/**\r\nSet First-Person navigation mode\r\n*/\r\nNav.setFirstPersonControl = ()=>{\r\n    if (ATON.XR.isPresenting()) return;\r\n\r\n    Nav._mode = Nav.MODE_FP;\r\n\r\n    // One-time setup\r\n    if (Nav._cFirstPerson === undefined){\r\n        Nav._camFP = new THREE.PerspectiveCamera( Nav.STD_FOV, window.innerWidth / window.innerHeight, Nav.STD_NEAR, Nav.STD_FAR );\r\n        Nav._camFP.layers.enableAll();\r\n\r\n        Nav._cFirstPerson = new THREE.OrbitControls( Nav._camFP, ATON._renderer.domElement);\r\n\r\n        let C = Nav._cFirstPerson;\r\n\r\n        C.enableZoom  = false;\r\n        C.enablePan   = false;\r\n        C.rotateSpeed = Nav.STD_ROT_SPEED_FP;\r\n        \r\n        C.enableDamping = false;\r\n        //C.dampingFactor = 0.1;\r\n        \r\n        //C.screenSpacePanning = true;\r\n\r\n        C.target.copy(Nav._camera.position);\r\n\r\n        C.minDistance = 0.05;\r\n        C.maxDistance = 0.05;\r\n    }\r\n\r\n    Nav._controls = Nav._cFirstPerson;\r\n    //Nav._controls.target.copy(Nav._camera.position);\r\n    Nav._camera = Nav._camFP;\r\n\r\n    Nav._controls.update();\r\n    if (Nav._currPOV) Nav.syncCurrCamera();\r\n/*\r\n    if (Nav._controls) ATON._controls.dispose();\r\n    ATON._controls = new THREE.FirstPersonControls( ATON._camera, ATON._renderer.domElement);\r\n    ATON._controls.lookSpeed = 0.1;\r\n    ATON._controls.movementSpeed = 10;\r\n    ATON._controls.noFly = true;\r\n    ATON._controls.lookVertical = false;\r\n\r\n    //ATON._camera.position.set( 20.0, 5.0, 0 );\r\n    ATON._controls.lookAt(0,4,0);\r\n\r\n    ATON._controls.update();\r\n    console.log(ATON._controls);\r\n*/\r\n};\r\n\r\n/**\r\nSet device-orientation navigation mode\r\n*/\r\nNav.setDeviceOrientationControl = ()=>{\r\n    if (!ATON.Utils.isMobile()) return;\r\n\r\n    Nav._mode = Nav.MODE_DEVORI;\r\n    ATON._screenPointerCoords.set(0.0,0.0);\r\n\r\n    // One-time setup\r\n    if (Nav._cDevOri === undefined){\r\n        Nav._camDevOri = new THREE.PerspectiveCamera( Nav.STD_FOV, window.innerWidth / window.innerHeight, Nav.STD_NEAR, Nav.STD_FAR );\r\n        Nav._camDevOri.layers.enableAll();\r\n\r\n        Nav._cDevOri = new THREE.DeviceOrientationControls(Nav._camDevOri, ATON._renderer.domElement);\r\n        //Nav._cDevOri = new Nav.DeviceOrientationControls(Nav._camDevOri, ATON._renderer.domElement);\r\n\r\n        Nav._cDevOri.alphaOffset = 0.0; //The alpha offset in radians\r\n    }\r\n\r\n    Nav._controls = Nav._cDevOri;\r\n    Nav._camera   = Nav._camDevOri;\r\n\r\n    Nav._controls.update();\r\n    if (Nav._currPOV) Nav.syncCurrCamera();\r\n};\r\n\r\n/**\r\nSet a motion amount\r\n@param {number} f - the motion amount\r\n@example\r\nATON.Nav.setMotionAmount(0.1);\r\n*/\r\nNav.setMotionAmount = (f)=>{\r\n    Nav._motionAmt = f;\r\n};\r\n\r\n/**\r\nSet a motion direction\r\n@param {THREE.Vector3} f - the motion direction\r\n@example\r\nATON.Nav.setMotionDirection( new THREE.Vector(1,0,0) );\r\n*/\r\nNav.setMotionDirection = (v)=>{\r\n    Nav._motionDir.copy(v);\r\n}\r\n\r\n/**\r\nStop current motion\r\n*/\r\nNav.stop = ()=>{\r\n    Nav._motionAmt = 0.0;\r\n    //TODO: stop any transition\r\n};\r\n\r\n/**\r\nSet field-of-view (FoV) in degrees\r\n@param {number} f\r\n@example\r\nATON.Nav.setFOV(30.0);\r\n*/\r\nNav.setFOV = (f)=>{\r\n    if (ATON.XR.isPresenting()) return; // skip for immersive sessions\r\n\r\n    Nav._currPOV.fov = f;\r\n\r\n    let cam = Nav._camera;\r\n    cam.fov = f;\r\n    cam.updateProjectionMatrix();\r\n};\r\n\r\n/**\r\nGet current field-of-view (FoV) in degrees\r\n@returns {number}\r\n*/\r\nNav.getFOV = ()=>{\r\n    return Nav._currPOV.fov;\r\n};\r\n\r\n\r\n// Retrieve currPOV from camera and controls\r\nNav.syncCurrPOV = ()=>{\r\n    if (ATON.XR.isPresenting()){\r\n        \r\n        let C = ATON._renderer.xr.getCamera(Nav._camera);\r\n        C.getWorldPosition( Nav._currPOV.pos );\r\n        C.getWorldQuaternion( Nav._qOri );\r\n        C.getWorldDirection( Nav._vDir );\r\n        //console.log(Nav._hmdPos);\r\n\r\n        //ATON.XR.hmdPos.copy(Nav._currPOV.pos);\r\n        //ATON.XR.hmdDir.copy(Nav._vDir);\r\n        \r\n        //ATON._renderer.xr.getCamera(Nav._camera);\r\n        //ATON._renderer.xr.getCamera(Nav._camera).getWorldDirection(Nav._vDir);\r\n        //Nav._camera.getWorldDirection(Nav._vDir);\r\n        \r\n        //Nav._currPOV.pos.copy(Nav._camera.position);\r\n        return;\r\n    }\r\n\r\n    let ctrl  = Nav._controls;\r\n    let cam   = Nav._camera;\r\n\r\n    cam.getWorldDirection(Nav._vDir);\r\n    cam.getWorldQuaternion(Nav._qOri);\r\n\r\n    if (Nav._mode === Nav.MODE_DEVORI){\r\n        Nav._currPOV.pos.copy(cam.position);\r\n        return;\r\n    }\r\n\r\n    if (Nav._mode === Nav.MODE_FP){\r\n        Nav._currPOV.pos.copy(ctrl.target);\r\n\r\n        Nav._currPOV.target.x = Nav._currPOV.pos.x + Nav._vDir.x; //ctrl.target.x - cam.position.x;\r\n        Nav._currPOV.target.y = Nav._currPOV.pos.y + Nav._vDir.y; //ctrl.target.y - cam.position.y;\r\n        Nav._currPOV.target.z = Nav._currPOV.pos.z + Nav._vDir.z; //ctrl.target.z - cam.position.z;\r\n        return;\r\n    }\r\n    \r\n    Nav._currPOV.pos.copy(cam.position);\r\n    Nav._currPOV.target.copy(ctrl.target);\r\n};\r\n\r\n// After syncCurrPOV and before updateCamera, we maniuplate currPOV\r\n//==================================================================================\r\nNav.handlePOV = ()=>{\r\n    //console.log(Nav._currPOV.pos);\r\n\r\n    if (ATON.XR.isPresenting()) Nav.handleXRtransition();\r\n    else Nav.handlePOVtransition();\r\n\r\n    Nav.handleMotion();\r\n\r\n    //if (ATON.XR.isPresenting()) console.log(ATON._renderer.xr);\r\n\r\n    // Handle constraints\r\n\r\n};\r\n\r\nNav.handleMotion = ()=>{\r\n    if (Nav.isTransitioning()) return;\r\n\r\n    if (Nav._motionAmt != 0.0){\r\n\r\n        //if ()\r\n\r\n\r\n        if (ATON.XR.controller0 && ATON.XR.controller0.visible){\r\n            ATON.XR.controller0.getWorldDirection(Nav._motionDir);\r\n            Nav._motionDir.negate();\r\n            }\r\n        else Nav._motionDir.copy(Nav._vDir);\r\n\r\n        let fv = Nav._motionDir.clone();\r\n        fv.multiplyScalar(Nav._motionAmt * ATON._dt);\r\n\r\n        Nav._currPOV.pos.add(fv);\r\n        Nav._currPOV.target.add(fv); // check if needed\r\n    }\r\n};\r\n\r\nNav.handlePOVtransition = ()=>{\r\n    if (Nav._tPOVcall < 0.0) return;\r\n\r\n    if (Nav.POVtransitionDuration <= 0.0) Nav._tPOVprogress = 1.0;\r\n    else Nav._tPOVprogress = (ATON._clock.elapsedTime - Nav._tPOVcall) / Nav.POVtransitionDuration;\r\n\r\n    // End\r\n    if (Nav._tPOVprogress >= 1.0){\r\n\r\n        Nav._tPOVcall = -1.0;\r\n        //Nav._controls.enabled = true;\r\n\r\n        Nav._currPOV.pos.copy(Nav._reqPOV.pos);\r\n        Nav._currPOV.target.copy(Nav._reqPOV.target);\r\n        Nav._currPOV.fov = Nav._reqPOV.fov;\r\n\r\n        ATON.fireEvent(\"POVTransitionCompleted\", Nav._reqPOV.id);\r\n        return;\r\n    }\r\n\r\n    Nav._tPOVprogress = COSINOIDAL_DIST(Nav._tPOVprogress);\r\n\r\n    Nav._currPOV.pos.lerpVectors(Nav._fromPOV.pos, Nav._reqPOV.pos, Nav._tPOVprogress);\r\n    Nav._currPOV.target.lerpVectors(Nav._fromPOV.target, Nav._reqPOV.target, Nav._tPOVprogress);\r\n\r\n    if (!Nav._fromPOV.fov || !Nav._reqPOV.fov) return;\r\n    Nav._currPOV.fov = THREE.MathUtils.lerp(Nav._fromPOV.fov, Nav._reqPOV.fov, Nav._tPOVprogress);\r\n\r\n    //console.log(Nav._camera);\r\n\r\n    Nav._camera.fov = Nav._currPOV.fov;\r\n    Nav._camera.updateProjectionMatrix();\r\n};\r\n\r\n// Immersive XR transitions\r\nNav.handleXRtransition = ()=>{\r\n    if (Nav._tPOVcall < 0.0) return;\r\n\r\n    if (Nav.POVtransitionDuration <= 0.0) Nav._tPOVprogress = 1.0;\r\n    else Nav._tPOVprogress = (ATON._clock.elapsedTime - Nav._tPOVcall) / Nav.POVtransitionDuration;\r\n\r\n    // End\r\n    if (Nav._tPOVprogress >= 1.0){\r\n\r\n        Nav._tPOVcall = -1.0;\r\n        //Nav._controls.enabled = true;\r\n\r\n        //ATON.XR.setRefSpaceLocation(Nav._reqXRpos);\r\n\r\n        console.log(\"XR height\"+ATON.XR._currPos.y);\r\n        console.log(\"HMD height\"+Nav._currPOV.pos.y);\r\n\r\n        ATON.fireEvent(\"POVTransitionCompleted\", Nav._reqPOV.id);\r\n        return;\r\n    }\r\n\r\n    ATON.XR._currPos.lerpVectors(ATON.XR._fromPos, ATON.XR._reqPos, Nav._tPOVprogress);\r\n    //ATON.XR._currPos.lerpVectors(Nav._fromPOV.pos, Nav._reqPOV.pos, Nav._tPOVprogress);\r\n\r\n};\r\n\r\n// Update internal camera from currPOV \r\nNav.syncCurrCamera = ()=>{\r\n    let ctrl  = Nav._controls;\r\n    let cam   = Nav._camera;\r\n    \r\n    let pos = Nav._currPOV.pos;\r\n    let tgt = Nav._currPOV.target;\r\n\r\n    // We are in VR\r\n    if (ATON.XR.isPresenting()){\r\n        ///let vrcam = ATON.XR.rig;\r\n        ///vrcam.position.copy(pos);\r\n        \r\n        ///ATON.XR.setRefSpaceLocation(pos);\r\n\r\n        //let C = ATON._renderer.xr.getCamera(cam);\r\n        //C.getWorldDirection(Nav._vDir);\r\n        return;\r\n    }\r\n\r\n    if (Nav._mode === Nav.MODE_DEVORI){\r\n        cam.position.copy(pos);\r\n        return;\r\n    }\r\n\r\n    // Common controls\r\n    //let d = new THREE.Vector3();\r\n    Nav._vDir.subVectors(tgt, pos);\r\n    Nav._vDir.normalize();\r\n\r\n    if (Nav._mode === Nav.MODE_FP){\r\n        ctrl.target.copy(pos);\r\n\r\n        cam.position.x = ctrl.target.x - (Nav._vDir.x * Nav.FP_EPS);\r\n        cam.position.y = ctrl.target.y - (Nav._vDir.y * Nav.FP_EPS);\r\n        cam.position.z = ctrl.target.z - (Nav._vDir.z * Nav.FP_EPS);\r\n    }\r\n    else {\r\n        cam.position.copy(pos);\r\n        ctrl.target.copy(tgt);\r\n    }\r\n};\r\n\r\n// Main update routine\r\nNav.update = ()=>{\r\n\r\n    //Nav._bXR = ATON.XR.isPresenting();\r\n\r\n    Nav.syncCurrPOV();\r\n    Nav.handlePOV();\r\n    Nav.syncCurrCamera();\r\n};\r\n\r\n\r\n/**\r\nRequest transition to viewpoint (POV)\r\n@param {POV} pov - the target POV\r\n@param {number} duration - duration of transition in seconds (optional), otherwise use standard duration\r\n@example\r\nATON.Nav.requestPOV( myTargetPOV );\r\n*/\r\nNav.requestPOV = (pov, duration)=>{\r\n    if (ATON._tPOVcall >= 0.0) return; // already requested\r\n\r\n    ATON.fireEvent(\"POVTransitionRequested\", pov.id);\r\n\r\n    if (duration !== undefined) Nav.POVtransitionDuration = duration;\r\n    \r\n    //Nav._controls.enabled = false;\r\n\r\n    Nav._tPOVcall = ATON._clock.elapsedTime;\r\n    \r\n    if (ATON.XR.isPresenting()){\r\n        Nav._reqPOV.pos.copy(pov.pos? pov.pos : Nav._currPOV.pos);\r\n        Nav._fromPOV.pos.copy(Nav._currPOV.pos);\r\n\r\n        ATON.XR._reqPos.copy(pov.pos? pov.pos : Nav._currPOV.pos);\r\n        ATON.XR._fromPos.copy(ATON.XR._currPos);\r\n    }\r\n    else {\r\n        Nav._reqPOV.pos.copy(pov.pos? pov.pos : Nav._currPOV.pos);\r\n        Nav._reqPOV.target.copy( pov.target? pov.target : Nav._currPOV.target);\r\n        Nav._reqPOV.fov = pov.fov? pov.fov : Nav._currPOV.fov;\r\n\r\n        Nav._fromPOV.pos.copy(Nav._currPOV.pos);\r\n        Nav._fromPOV.target.copy(Nav._currPOV.target);\r\n        Nav._fromPOV.fov = Nav._currPOV.fov;\r\n    }\r\n};\r\n\r\n\r\nNav.requestPOVbyBound = (bs, duration)=>{\r\n    if (bs === undefined) return;\r\n\r\n    let T = new THREE.Vector3();\r\n    let E = new THREE.Vector3();\r\n\r\n    T.copy(bs.center);\r\n    \r\n    let r = bs.radius * 2.5;\r\n    E.x = T.x - (r * Nav._vDir.x);\r\n    E.y = T.y - (r * Nav._vDir.y);\r\n    E.z = T.z - (r * Nav._vDir.z);\r\n\r\n    let pov = new ATON.POV().setPosition(E).setTarget(T);    \r\n    Nav.requestPOV(pov, duration);\r\n};\r\n\r\n/**\r\nRequest transition to specific ATON Node\r\n@param {Node} n - the target ATON Node\r\n@param {number} duration - duration of transition in seconds (optional), otherwise use standard duration\r\n@example\r\nATON.Nav.requestPOVbyNode( myNode );\r\n*/\r\nNav.requestPOVbyNode = (n, duration)=>{\r\n    if (n === undefined) return;\r\n    \r\n    let bs = n.getBound();\r\n\r\n    Nav.requestPOVbyBound(bs,duration);\r\n};\r\n\r\nNav.requestRetarget = (point, normal, duration)=>{\r\n    let M = new THREE.Vector3();\r\n    if (normal === undefined){\r\n        M.lerpVectors(point, Nav._currPOV.pos, 0.8);\r\n    }\r\n    else {\r\n        let d = point.distanceTo(Nav._currPOV.pos);\r\n        d *= 0.5;\r\n        M.x = point.x + (normal.x * d);\r\n        M.y = point.y + (normal.y * d);\r\n        M.z = point.z + (normal.z * d);\r\n    }\r\n\r\n    let pov = new ATON.POV().setPosition(M).setTarget(point).setFOV(Nav._currPOV.fov);\r\n    console.log(pov);\r\n    \r\n    Nav.requestPOV(pov, duration);\r\n};\r\n\r\n\r\n/**\r\nCompute a default home, depending on visibile bounding sphere. Typically called after all assets are loaded\r\n@param {THREE.Vector3} dv - the normalized offset direction (optional)\r\n@example\r\nATON.Nav.computeDefaultHome();\r\n*/\r\nNav.computeDefaultHome = (dv)=>{\r\n    if (dv === undefined) dv = new THREE.Vector3(1,0.7,1);\r\n\r\n    let sceneBS = ATON.getRootScene().getBound();\r\n\r\n    let eye = new THREE.Vector3(\r\n        sceneBS.center.x + (sceneBS.radius * dv.x * 1.5), \r\n        sceneBS.center.y + (sceneBS.radius * dv.y * 1.5), \r\n        sceneBS.center.z + (sceneBS.radius * dv.z * 1.5)\r\n    );\r\n\r\n    Nav.homePOV = new ATON.POV().setPosition(eye).setTarget(sceneBS.center);\r\n};\r\n\r\n/** \r\nSet the home viewpoint (POV)\r\n@param {POV} pov - the home POV\r\n*/\r\nNav.setHomePOV = (pov)=>{\r\n    Nav.homePOV = pov;\r\n};\r\n\r\nNav.computeAndRequestDefaultHome = (duration, dv)=>{\r\n    Nav.computeDefaultHome(dv);\r\n    Nav.requestPOV(Nav.homePOV, duration);\r\n};\r\n\r\n/** \r\nRequest home viewpoint\r\n@param {number} duration - transition duration\r\n*/\r\nNav.requestHome = (duration)=>{\r\n    Nav.requestPOV(Nav.homePOV, duration);\r\n};\r\n\r\n\r\n/*\r\nMobile devori (modified for absolute compass - UNSTABLE)\r\nauthor richt / http://richt.me\r\nauthor WestLangley / http://github.com/WestLangley\r\nW3C Device Orientation control (http://w3c.github.io/deviceorientation/spec-source-orientation.html)\r\n*/\r\nNav.DeviceOrientationControls = function ( object ) {\r\n    let scope = this;\r\n\r\n    this.object = object;\r\n    this.object.rotation.reorder( 'YXZ' );\r\n    this.enabled = true;\r\n\r\n    this.deviceOrientation = {};\r\n    this.screenOrientation = 0;\r\n\r\n    this.alphaOffset = 0; // radians\r\n    this.absolute = false;\r\n    this.alphaOffsetDevice = undefined;\r\n    this.alphaOffsetScreen = undefined;\r\n\r\n    let onDeviceOrientationChangeEvent = function ( event ) {\r\n        if(scope.absolute) return;\r\n        scope.deviceOrientation = event;\r\n    };\r\n\r\n    let onDeviceOrientationAbsoluteChangeEvent = function ( event ) {\r\n        scope.deviceOrientation = event;\r\n        scope.absolute = true;\r\n    };\r\n\r\n    let onScreenOrientationChangeEvent = function () {\r\n        scope.screenOrientation = window.orientation || 0;\r\n    };\r\n\r\n    // The angles alpha, beta and gamma form a set of intrinsic Tait-Bryan angles of type Z-X'-Y''\r\n    let setObjectQuaternion = function () {\r\n        let zee = new THREE.Vector3( 0, 0, 1 );\r\n        let euler = new THREE.Euler();\r\n\r\n        let q0 = new THREE.Quaternion();\r\n        let q1 = new THREE.Quaternion( - Math.sqrt( 0.5 ), 0, 0, Math.sqrt( 0.5 ) ); // - PI/2 around the x-axis\r\n\r\n        return function ( quaternion, alpha, beta, gamma, orient ) {\r\n            euler.set( beta, alpha, - gamma, 'YXZ' ); // 'ZXY' for the device, but 'YXZ' for us\r\n            quaternion.setFromEuler( euler ); // orient the device\r\n            quaternion.multiply( q1 ); // camera looks out the back of the device, not the top\r\n            quaternion.multiply( q0.setFromAxisAngle( zee, - orient ) ); // adjust for screen orientation\r\n        };\r\n\r\n    }();\r\n\r\n    this.connect = function () {\r\n        onScreenOrientationChangeEvent(); // run once on load\r\n\r\n        window.addEventListener( 'orientationchange', onScreenOrientationChangeEvent, false );\r\n        window.addEventListener( 'deviceorientation', onDeviceOrientationChangeEvent, false );\r\n        window.addEventListener( 'deviceorientationabsolute', onDeviceOrientationAbsoluteChangeEvent, false );\r\n\r\n        scope.enabled = true;\r\n    };\r\n\r\n    this.disconnect = function () {\r\n        window.removeEventListener( 'orientationchange', onScreenOrientationChangeEvent, false );\r\n        window.removeEventListener( 'deviceorientation', onDeviceOrientationChangeEvent, false );\r\n        window.removeEventListener( 'deviceorientationabsolute', onDeviceOrientationAbsoluteChangeEvent, false );\r\n\r\n        scope.enabled = false;\r\n    };\r\n\r\n    this.update = function () {\r\n        if ( scope.enabled === false ) return;\r\n\r\n        let device;\r\n        device = scope.deviceOrientation;\r\n\r\n        if ( device ) {\r\n            let alpha = this.getDirection() ? THREE.Math.degToRad( this.getDirection() ) + scope.alphaOffset : 0; // Z\r\n            let beta = device.beta ? THREE.Math.degToRad( device.beta ) : 0; // X'\r\n\r\n            let gamma = device.gamma ? THREE.Math.degToRad( device.gamma ) : 0; // Y''\r\n            let orient = scope.screenOrientation ? THREE.Math.degToRad( scope.screenOrientation ) : 0; // O\r\n\r\n            setObjectQuaternion( scope.object.quaternion, alpha, beta, gamma, orient );\r\n        }\r\n\r\n    };\r\n\r\n    this.dispose = ()=>{\r\n        scope.disconnect();\r\n    };\r\n\r\n    this.iOSOrientationPermission = ()=>{\r\n        if (typeof DeviceOrientationEvent.requestPermission === 'function') {\r\n            DeviceOrientationEvent.requestPermission().then(permissionState => {\r\n                if (permissionState === 'granted') {\r\n\r\n                }\r\n\r\n                console.log(permissionState);\r\n            }).catch(console.error);\r\n        }\r\n    }\r\n\r\n    this.getDirection = ()=>{\r\n        return (typeof scope.deviceOrientation.webkitCompassHeading != \"undefined\") ? scope.deviceOrientation.webkitCompassHeading : scope.deviceOrientation.alpha;\r\n    }\r\n\r\n    this.getDirectionMap = ()=>{\r\n        return (typeof scope.deviceOrientation.webkitCompassHeading != \"undefined\") ? (360 - scope.deviceOrientation.webkitCompassHeading) : scope.deviceOrientation.alpha;\r\n    }\r\n\r\n    this.connect();\r\n};\r\n\r\n\r\nexport default Nav;","/*\r\n    ATON immersive XR module\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\n/**\r\nATON Immersive XR\r\n@namespace XR\r\n*/\r\nlet XR = {};\r\n\r\nXR.STD_TELEP_DURATION = 0.03;\r\n\r\n/**\r\nInitializes XR component\r\n*/\r\nXR.init = ()=>{\r\n    ATON._renderer.xr.enabled = true;\r\n    ATON._renderer.xr.setReferenceSpaceType( 'local' );\r\n    \r\n    if (ATON.device.isMobile) ATON._renderer.xr.setFramebufferScaleFactor(0.5); // WebXR density\r\n\r\n    XR._bPresenting = false;\r\n    XR.currSession = null;\r\n\r\n    XR.rig = new THREE.Group();\r\n    //XR.rig.position.set(0,0,0);\r\n    XR.rig.add( ATON.Nav._camera );\r\n    ATON._rootUI.add(XR.rig);\r\n\r\n    //XR.hmdOri = new THREE.Quaternion();\r\n    //XR.hmdPos = new THREE.Vector3();\r\n\r\n    XR._currPos = XR.rig.position; //new THREE.Vector3();\r\n    XR._fromPos = new THREE.Vector3();\r\n    XR._reqPos  = new THREE.Vector3();\r\n\r\n    XR.gControllers = undefined;\r\n\r\n    XR.controller0pos = new THREE.Vector3();\r\n    XR.controller1pos = new THREE.Vector3();\r\n    XR.controller0dir = new THREE.Vector3();\r\n    XR.controller1dir = new THREE.Vector3();\r\n\r\n    // test\r\n    ATON.on(\"XRselectStart\", (c)=>{\r\n        XR.defaultSelectHandler(c);\r\n    });\r\n    ATON.on(\"XRselectEnd\", (c)=>{\r\n        //ATON.Nav.stop();\r\n        //console.log(\"Sel end \"+c);\r\n    });\r\n};\r\n\r\n/**\r\nReturn true if we are presenting (immersive mode)\r\n@returns {boolean}\r\n*/\r\nXR.isPresenting = ()=>{\r\n    return XR._bPresenting;\r\n};\r\n\r\n\r\nXR.defaultSelectHandler = (c)=>{\r\n\r\n    if (ATON._queryDataScene){\r\n        let P = ATON._queryDataScene.p;\r\n        let N = ATON._queryDataScene.n;\r\n\r\n        //P.y += 0.8; // with 'local': half user height\r\n\r\n        // FIXME: height offset needed for \"local\", fill this automatically\r\n        if (N.y > 0.7) ATON.Nav.requestPOV( new ATON.POV().setPosition(P.x, P.y + ATON.userHeight, P.z), XR.STD_TELEP_DURATION );\r\n    }\r\n    \r\n    //ATON.Nav.setMotionAmount(3.0);\r\n};\r\n\r\nXR._handleUISelection = ()=>{\r\n    if (ATON._hoveredUI === undefined) return false;\r\n\r\n    let H = ATON.getUINode(ATON._hoveredUI);\r\n    if (H && H.onSelect) H.onSelect();\r\n    \r\n    return true;\r\n}\r\n\r\n\r\n/**\r\nSet reference-space location (not the actual HMD camera location).\r\nThis can be used to move around the user, given a proper locomotion technique\r\n@param {THREE.Vector3} p - the new location of reference space\r\n*/\r\nXR.setRefSpaceLocation = (p)=>{\r\n    XR.rig.position.copy(p);\r\n};\r\n\r\n// On XR session started\r\nXR.onSessionStarted = ( session )=>{\r\n\tsession.addEventListener( 'end', XR.onSessionEnded );\r\n\r\n\tATON._renderer.xr.setSession( session );\r\n\tXR.currSession = session;\r\n\r\n    XR.controller0 = ATON._renderer.xr.getController(0);\r\n    XR.controller1 = ATON._renderer.xr.getController(1);\r\n\r\n    //console.log(XR.controller0);\r\n\r\n    // Controller 0\r\n    if (XR.controller0){\r\n        XR.controller0.visible = false;\r\n\r\n        XR.controller0.addEventListener( 'connected', (e) => {\r\n            XR.controller0.gamepad = e.data.gamepad;\r\n            //console.log(XR.controller0.gamepad);\r\n\r\n            let gp = XR.controller0.gamepad;\r\n            if (gp.pose && gp.pose.hasPosition) XR.controller0.visible = true;\r\n        });\r\n\r\n        XR.controller0.addEventListener( 'selectstart', ()=>{\r\n            if (XR._handleUISelection()) return;\r\n\r\n            ATON.fireEvent(\"XRselectStart\", 0);\r\n        });\r\n        XR.controller0.addEventListener( 'selectend', ()=>{ \r\n            ATON.fireEvent(\"XRselectEnd\", 0);\r\n        });\r\n    }\r\n\r\n    // Controller 1\r\n    if (XR.controller1){\r\n        XR.controller1.visible = false;\r\n\r\n        XR.controller1.addEventListener( 'connected', (e) => {\r\n            //XR.controller1.visible = true;\r\n            XR.controller1.gamepad = e.data.gamepad;\r\n            \r\n            let gp = XR.controller1.gamepad;\r\n            if (gp.pose && gp.pose.hasPosition) XR.controller1.visible = true;\r\n        });\r\n\r\n        XR.controller1.addEventListener( 'selectstart',  ()=>{\r\n            //if (XR._handleUISelection()) return;\r\n        \r\n            ATON.fireEvent(\"XRselectStart\", 1);\r\n        });\r\n        XR.controller1.addEventListener( 'selectend',  ()=>{ \r\n            ATON.fireEvent(\"XRselectEnd\", 1);\r\n        });\r\n    }\r\n\r\n    XR.setRefSpaceLocation(ATON.Nav._currPOV.pos);\r\n\r\n    XR._bPresenting = true;\r\n    console.log(\"XR now presenting\");\r\n\r\n    XR.setupControllersUI();\r\n\r\n    ATON.fireEvent(\"XRmode\", true);\r\n\r\n    //console.log(session);\r\n};\r\n\r\n// On XR session terminated\r\nXR.onSessionEnded = ( /*event*/ )=>{\r\n    XR.currSession.removeEventListener( 'end', XR.onSessionEnded );\r\n    XR.currSession = null;\r\n\r\n    XR._bPresenting = false;\r\n    //XR.rig.position.set(0.0,0.0,0.0);\r\n    XR.setRefSpaceLocation( new THREE.Vector3(0,0,0) );\r\n\r\n    ATON.fireEvent(\"XRmode\", false);\r\n\r\n    console.log(\"Quit XR\");\r\n};\r\n\r\n/**\r\nToggle immersive mode\r\n*/\r\nXR.toggle = ()=>{\r\n    if (!ATON.device.isXRsupported) return;\r\n\r\n    // Enter XR\r\n    if (XR.currSession === null){\r\n        let sessionInit = { \r\n            optionalFeatures: [\r\n                \"local\",\r\n                //\"local-floor\" \r\n                ///\"bounded-floor\"\r\n            ]\r\n        };\r\n        navigator.xr.requestSession( 'immersive-vr', sessionInit ).then( XR.onSessionStarted );\r\n        //console.log(navigator.xr);\r\n    }\r\n    // Exit XR\r\n    else {\r\n        XR.currSession.end();\r\n    }\r\n};\r\n\r\nXR.setupControllersUI = ()=>{\r\n    if (XR.gControllers) return; // already set\r\n\r\n    let raytick = 0.003;\r\n    let raylen  = 5.0;\r\n    var geometry = new THREE.CylinderBufferGeometry( raytick,raytick, raylen, 4 );\r\n    geometry.rotateX( -Math.PI / 2 );\r\n    geometry.translate(0,0,-(raylen*0.5));\r\n\r\n    var mesh = new THREE.Mesh( geometry, ATON.MatHub.materials.controllerRay );\r\n\r\n    XR.controller0.add( mesh.clone() );\r\n    //XR.controller1.add( mesh.clone() );\r\n\r\n    XR.gControllers = ATON.createUINode();\r\n    XR.gControllers.add( XR.controller0 );\r\n    XR.gControllers.add( XR.controller1 );\r\n\r\n    XR.controller0.visible = false;\r\n    XR.controller1.visible = false;\r\n\r\n    XR.gControllers.disablePicking();\r\n\r\n    XR.rig.add(XR.gControllers);\r\n};\r\n\r\n// Not working\r\nXR.getControllerSpace = (i)=>{\r\n   if (i === 1) XR.getControllerGrip(1);\r\n   else XR.getControllerGrip(0);\r\n};\r\n\r\n/**\r\nGet controller world location\r\n@param {number} i - the controller ID (0 or 1)\r\n@returns {THREE.Vector3}\r\n*/\r\nXR.getControllerWorldLocation = (i)=>{\r\n    if (i === 1) return XR.controller1pos;\r\n    else return XR.controller0pos;\r\n};\r\n\r\n/**\r\nGet controller world direction\r\n@param {number} i - the controller ID (0 or 1)\r\n@returns {THREE.Vector3}\r\n*/\r\nXR.getControllerWorldDirection = (i)=>{\r\n    if (i === 1) return XR.controller1dir;\r\n    else return XR.controller0dir;\r\n};\r\n\r\nXR.update = ()=>{\r\n    if (XR.controller0.visible){\r\n        XR.controller0.getWorldPosition(XR.controller0pos);\r\n        XR.controller0.getWorldDirection(XR.controller0dir);\r\n        XR.controller0dir.negate();\r\n    }\r\n    if (XR.controller1.visible){\r\n        XR.controller1.getWorldPosition(XR.controller1pos);\r\n        XR.controller1.getWorldDirection(XR.controller1dir);\r\n        XR.controller1dir.negate(); \r\n    }\r\n};\r\n\r\n\r\nexport default XR;","/*\r\n    ATON spatial UI Button class\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\nimport Node from \"./ATON.node.js\";\r\n\r\nexport default class Button extends Node {\r\n    constructor(uiid){\r\n        super(uiid, ATON.NTYPES.UI);\r\n\r\n        this.baseColor   = ATON.MatHub.colors.black;\r\n        this.switchColor = ATON.MatHub.colors.green;\r\n\r\n        this._bSwitched = false;\r\n\r\n        this.container = new ThreeMeshUI.Block({\r\n            width: 0.1,\r\n            height: 0.1,\r\n            padding: 0.01,\r\n            borderRadius: 0.02,\r\n            backgroundColor: this.baseColor,\r\n            backgroundOpacity: 0.5,\r\n\r\n            fontFamily: ATON.PATH_RES+\"fonts/custom-msdf.json\",\r\n            fontTexture: ATON.PATH_RES+\"fonts/custom.png\",\r\n\r\n            justifyContent: 'center',\r\n            alignContent: 'center'\r\n        });\r\n        this.add(this.container);\r\n\r\n        this.uiText = new ThreeMeshUI.Text({ \r\n            content: \"button\",\r\n            fontSize: 0.02,\r\n            fontColor: ATON.MatHub.colors.white\r\n        });\r\n        this.container.add(this.uiText);\r\n\r\n        this._trigger = new THREE.Mesh( \r\n            new THREE.PlaneGeometry( ATON.SUI.STD_BTN_SIZE*0.9, ATON.SUI.STD_BTN_SIZE*0.9, 2 ), \r\n            ATON.MatHub.materials.fullyTransparent\r\n        );\r\n        this._trigger.position.set(0,0,0.002);\r\n\r\n        this.add( this._trigger );\r\n\r\n        this.onHover = ()=>{\r\n            this.container.set({ \r\n                backgroundOpacity: 0.8\r\n            });\r\n        };\r\n        this.onLeave = ()=>{\r\n            this.container.set({ \r\n                backgroundOpacity: 0.5 \r\n            });\r\n        };\r\n\r\n        this.enablePicking();\r\n    }\r\n\r\n    setBaseColor(c){\r\n        this.baseColor = c;\r\n        if (!this._bSwitched) this.container.set({ backgroundColor: this.baseColor });\r\n        return this;\r\n    }\r\n    setSwitchColor(c){\r\n        this.switchColor = c;\r\n        if (this._bSwitched) this.container.set({ backgroundColor: this.switchColor });\r\n        return this;\r\n    }\r\n\r\n    setText(text){\r\n        this.uiText.set({ content: text });\r\n        return this;\r\n    }\r\n\r\n    switch(b){\r\n        this._bSwitched = b;\r\n        if (b) this.container.set({ backgroundColor: this.switchColor });\r\n        else this.container.set({ backgroundColor: this.baseColor });\r\n        \r\n        return this;\r\n    }\r\n\r\n    setIcon(url){\r\n        ATON.Utils.textureLoader.load(url, (texture) => {\r\n\r\n            this._trigger.material = new THREE.MeshStandardMaterial({\r\n                map: texture,\r\n                transparent: true,\r\n                depthWrite: false\r\n            });\r\n/*\r\n            this.container.set({ \r\n                backgroundTexture: texture,\r\n                backgroundOpacity: 1.0,\r\n                backgroundColor: undefined \r\n            });\r\n*/\r\n            this.uiText.position.set(0,-0.035,0);\r\n        });\r\n\r\n        return this;\r\n    }\r\n\r\n}","/*\r\n    ATON spatial UI\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\nimport Button from \"./ATON.sui.button.js\";\r\n\r\n\r\n/**\r\nATON Spatial UI\r\n@namespace SUI\r\n*/\r\nlet SUI = {};\r\n\r\nSUI.STD_BTN_SIZE = 0.1;\r\n\r\nSUI.Button = Button;\r\n\r\n\r\n/**\r\nInitializes Spatial UI module\r\n*/\r\nSUI.init = ()=>{\r\n    SUI.mainSelector   = ATON.createUINode();\r\n    //SUI.secondSelector = ATON.createUINode();\r\n\r\n    //SUI._uiSelGeom = new THREE.SphereGeometry( 0.1, 16, 16 );\r\n    SUI.mainSelector.add( new THREE.Mesh( ATON.Utils.geomUnitSphere, ATON.MatHub.getMaterial(\"selector\") ));\r\n    SUI.mainSelector.disablePicking();\r\n\r\n    SUI.setSelectorRadius(0.05);\r\n    SUI.mainSelector.visible = false;\r\n\r\n    ATON._rootUI.add(SUI.mainSelector);\r\n\r\n    SUI.gPoints = ATON.createUINode();\r\n    ATON._rootUI.add(SUI.gPoints);\r\n\r\n    SUI.buildInfoNode();\r\n    SUI.bShowInfo = true;\r\n\r\n    SUI._labelScale   = ATON.Utils.isMobile()? 1.2 : 1.0;\r\n    SUI._labelScaleVR = 2.0;\r\n\r\n    ATON.on( \"SemanticNodeHover\", (semid)=>{\r\n        if (!SUI.bShowInfo) return;\r\n        SUI.infoNodeText.set({ content: semid });\r\n    });\r\n/*\r\n    ATON.on(\"UINodeHover\", (uiid)=>{\r\n        console.log(\"Hover UI node: \"+uiid);\r\n    });\r\n    ATON.on(\"UINodeLeave\", (uiid)=>{\r\n        console.log(\"Leave UI node: \"+uiid);\r\n    });\r\n*/\r\n};\r\n\r\nSUI.setSelectorRadius = (r)=>{\r\n    SUI.mainSelector.scale.set(r,r,r);\r\n};\r\nSUI.getSelectorRadius = ()=>{\r\n    return SUI.mainSelector.scale.x;\r\n};\r\n\r\nSUI.setMainSelectorModel = (path, bUseStdMat)=>{\r\n    if (path === undefined) return;\r\n\r\n    SUI.mainSelector.removeChildren();\r\n\r\n    SUI.mainSelector.load(path).disablePicking();\r\n    if (bUseStdMat) SUI.mainSelector.setMaterial( ATON.MatHub.getMaterial(\"selector\") );\r\n};\r\n\r\nSUI.buildInfoNode = ()=>{\r\n    SUI.infoNode = ATON.createUINode();\r\n    SUI.infoNode.attachToRoot();\r\n\r\n    SUI.infoContainer = new ThreeMeshUI.Block({\r\n        width: 0.15,\r\n        height: 0.05, //0.07,\r\n        padding: 0.01,\r\n        borderRadius: 0.02,\r\n        //backgroundColor: ATON.MatHub.colors.darksem,\r\n        //backgroundOpacity: 0.2,\r\n\r\n        fontFamily: ATON.PATH_RES+\"fonts/custom-msdf.json\", //ATON.PATH_MODS+'three-mesh-ui/examples/assets/Roboto-msdf.json',\r\n        fontTexture: ATON.PATH_RES+\"fonts/custom.png\", //ATON.PATH_MODS+'three-mesh-ui/examples/assets/Roboto-msdf.png',\r\n\r\n        alignContent: 'center', // could be 'center' or 'left'\r\n        justifyContent: 'center', // could be 'center' or 'start'\r\n    });\r\n    SUI.infoNode.add(SUI.infoContainer);\r\n\r\n    SUI.infoNodeText = new ThreeMeshUI.Text({ \r\n        content: \"Info\",\r\n        fontSize: 0.02,\r\n        fontColor: ATON.MatHub.colors.white\r\n    });\r\n    SUI.infoContainer.add(SUI.infoNodeText);\r\n    //SUI.infoNode.scale.set(0.07,0.07,0.07);\r\n};\r\n\r\nSUI.getInfoNode = ()=>{\r\n    return SUI.infoNode;\r\n};\r\n\r\nSUI.createToolbar = (buttonlist, color)=>{\r\n    let T = ATON.createUINode();\r\n\r\n    let num = buttonlist.length;\r\n    let padding = SUI.STD_BTN_SIZE * 0.3;\r\n\r\n    let cont = new ThreeMeshUI.Block({\r\n        width: (SUI.STD_BTN_SIZE * num) + padding,\r\n        height: SUI.STD_BTN_SIZE + padding,\r\n        padding: 0.01,\r\n        borderRadius: 0.02,\r\n        backgroundColor: color? color : ATON.MatHub.colors.black,\r\n        backgroundOpacity: 0.3,\r\n\r\n        fontFamily: ATON.PATH_RES+\"fonts/custom-msdf.json\", //ATON.PATH_MODS+'three-mesh-ui/examples/assets/Roboto-msdf.json',\r\n        fontTexture: ATON.PATH_RES+\"fonts/custom.png\", //ATON.PATH_MODS+'three-mesh-ui/examples/assets/Roboto-msdf.png',\r\n\r\n        alignContent: 'center', // could be 'center' or 'left'\r\n        justifyContent: 'center', // could be 'center' or 'start'\r\n    });\r\n    //cont.position.set(0,0,0);\r\n\r\n    let m = (num*0.5) * SUI.STD_BTN_SIZE;\r\n    m -= (SUI.STD_BTN_SIZE*0.5);\r\n\r\n    for (let i=0; i<num; i++){\r\n        let button = buttonlist[i];\r\n        button.position.set((i*SUI.STD_BTN_SIZE)-m, 0.0, 0.01);\r\n        cont.add(button);\r\n    }\r\n\r\n    T.add(cont);\r\n    return T;\r\n};\r\n\r\n// Main update routine\r\nSUI.update = ()=>{\r\n    if (ATON.Nav.isTransitioning() || ATON._bPauseQuery){\r\n        SUI.infoNode.visible = false;\r\n        return;\r\n    }\r\n\r\n    ThreeMeshUI.update();\r\n\r\n    if (ATON._queryDataScene){\r\n        SUI.mainSelector.visible = true;\r\n        SUI.mainSelector.position.copy(ATON._queryDataScene.p);    \r\n    }\r\n    else {\r\n        SUI.mainSelector.visible = false;\r\n    }\r\n\r\n    // InfoNode (semantics)\r\n    if (ATON._queryDataSem){\r\n\r\n        if (ATON.XR._bPresenting){\r\n            SUI.infoNode.position.copy(ATON.XR.controller0pos); //.lerpVectors(ATON._queryDataSem.p, ATON.XR.controller0pos, 0.8);\r\n            SUI.infoNode.setScale(SUI._labelScaleVR);\r\n        }\r\n        else {\r\n            SUI.infoNode.position.lerpVectors(ATON._queryDataSem.p, ATON.Nav._currPOV.pos, 0.2);\r\n            SUI.infoNode.setScale(ATON._queryDataSem.d * SUI._labelScale);\r\n        }\r\n        SUI.infoNode.orientToCamera();\r\n\r\n        if (SUI.bShowInfo) SUI.infoNode.visible = true;\r\n        SUI.mainSelector.visible = false;\r\n    }\r\n    else {\r\n        SUI.infoNode.visible = false;\r\n    }\r\n\r\n};\r\n\r\nexport default SUI;","/*\r\n    ATON Avatar Class\r\n    used in VRoadcast system\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\nimport Node from \"./ATON.node.js\";\r\n\r\nexport default class Avatar extends Node {\r\n\r\nconstructor(uid){\r\n    super(undefined /*uid*/, ATON.NTYPES.UI);\r\n\r\n    this.userid   = uid;\r\n    this.username = \"User #\"+uid;\r\n    this.message  = \"...\";\r\n    this.bTalking = false;\r\n\r\n    this._tStateCall = -1.0;\r\n    this._tStateDur  = 0.1;\r\n    this._tProgress  = 0.0;\r\n\r\n    this._currState  = {};\r\n    this._currState.position   = new THREE.Vector3();\r\n    this._currState.quaternion = new THREE.Quaternion();\r\n\r\n    this._tgtState = undefined;\r\n\r\n    //console.log(this);\r\n\r\n    this.realize();\r\n}\r\n\r\ngetAvatarMaterialByUID(uid){\r\n    //if (uid === undefined) return 0;\r\n\r\n    let avaMats = ATON.MatHub.materials.avatars;\r\n    let mi = (uid % avaMats.length); //uid? (uid % avaMats.length) : 0;\r\n    \r\n    return avaMats[mi];\r\n}\r\n\r\nrealize(){\r\n    // build minimal representation\r\n    let g = new THREE.SphereGeometry( 0.2, 16, 16 );\r\n\r\n    this.usermaterial = this.getAvatarMaterialByUID(this.userid);\r\n\r\n    let smesh = new THREE.Mesh( g, this.usermaterial );\r\n\r\n    this.usermeshnode = ATON.createUINode();\r\n    this.usermeshnode.add(smesh);\r\n    this.usermeshnode.setMaterial(this.usermaterial);\r\n\r\n    // CHECK / FIXME: this is to avoid cloning of the same mesh when using same representation for all avatars\r\n    this.usermeshnode.setCloneOnLoadHit(false);\r\n\r\n    // Build Label\r\n    this.userlabelnode = ATON.createUINode();\r\n    this.labelcontainer = new ThreeMeshUI.Block({\r\n        width: 0.7,\r\n        height: 0.25,\r\n        padding: 0.03,\r\n        borderRadius: 0.05,\r\n        backgroundColor: ATON.VRoadcast.ucolorsdark[this.userid % ATON.VRoadcast.ucolorsdark.length],\r\n\r\n        fontFamily: ATON.PATH_RES+\"fonts/custom-msdf.json\", //ATON.PATH_MODS+'three-mesh-ui/examples/assets/Roboto-msdf.json',\r\n        fontTexture: ATON.PATH_RES+\"fonts/custom.png\" //ATON.PATH_MODS+'three-mesh-ui/examples/assets/Roboto-msdf.png',\r\n\r\n        //alignContent: 'right', // could be 'center' or 'left'\r\n        //justifyContent: 'end', // could be 'center' or 'start'\r\n    });\r\n\r\n    this.userlabelnode.position.y = 0.4;\r\n    this.userlabelnode.add(this.labelcontainer);\r\n\r\n    // username text\r\n    this.usernametext = new ThreeMeshUI.Text({ \r\n        content: \"User #\"+this.userid,\r\n        fontSize: 0.09,\r\n        fontColor: ATON.MatHub.colors.white //ATON.VRoadcast.ucolors[this.userid % ATON.VRoadcast.ucolors.length]\r\n    });\r\n    this.usernametext.position.y = 0.0;\r\n\r\n    // message text\r\n    this.usermessagetext = new ThreeMeshUI.Text({ \r\n        content: \"\\nHello World!\",\r\n        fontSize: 0.03,\r\n        fontColor: ATON.MatHub.colors.white\r\n    });\r\n    this.usermessagetext.position.y = -0.03;\r\n\r\n    this.labelcontainer.add(this.usernametext);\r\n    this.labelcontainer.add(this.usermessagetext);\r\n    \r\n    this.add(this.usermeshnode);\r\n    this.add(this.userlabelnode);\r\n};\r\n\r\n// Loads custom avatar representation (3D model)\r\nloadRepresentation(url){\r\n    let A = this;\r\n\r\n    if (A.usermeshnode.children[0] !== undefined){\r\n        A.usermeshnode.remove(A.usermeshnode.children[0]);\r\n    }\r\n\r\n    A.usermeshnode.load(url); //.setMaterial(A.usermaterial);\r\n\r\n    return this;\r\n}\r\n\r\nsetUsername(username){\r\n    this.username = username;\r\n\r\n    this.usernametext.set({ \r\n        content: username\r\n    });\r\n\r\n    return this;\r\n}\r\n\r\nsetMessage(msg){\r\n    this.message = msg;\r\n\r\n    // TODO: check for text length\r\n    this.usermessagetext.set({ \r\n        content: \"\\n\"+msg\r\n    });\r\n\r\n    return this;\r\n}\r\n\r\nrequestStateTransition(S){\r\n    if (this._tStateCall >= 0.0) return; // already requested\r\n\r\n    this._tStateCall = ATON._clock.elapsedTime;\r\n\r\n    this._currState.position.copy(this.position);\r\n    this._currState.quaternion.copy(this.quaternion);\r\n\r\n    this._tgtState = S;\r\n    \r\n    //this._sDistance = this.position.distanceTo(S.position);\r\n}\r\n\r\nhandleStateTransition(){\r\n    if (this._tStateCall < 0.0) return;\r\n\r\n    let D = this._tStateDur; //(this._sDistance * this._tStateDur);\r\n\r\n    if (D <= 0.0) this._tProgress = 1.0;\r\n    else this._tProgress = (ATON._clock.elapsedTime - this._tStateCall) / D;\r\n\r\n    let cs = this._currState;\r\n    let ts = this._tgtState;\r\n\r\n    // End\r\n    if (this._tProgress >= 1.0){\r\n        this._tStateCall = -1.0;\r\n\r\n        this.position.copy(ts.position);\r\n        //this.quaternion.copy(ts.quaternion);\r\n        this.usermeshnode.quaternion.copy(ts.quaternion);\r\n\r\n        return;\r\n    }\r\n\r\n    this.position.lerpVectors(cs.position, ts.position, this._tProgress);\r\n    this.usermeshnode.quaternion.slerp(ts.quaternion, this._tProgress);\r\n    //THREE.Quaternion.slerp( cs.quaternion, ts.quaternion, this.usermeshnode.quaternion, this._tProgress);\r\n}\r\n\r\nupdate(){\r\n    this.handleStateTransition();\r\n\r\n    let cam  = ATON.Nav._camera;\r\n    let eye = ATON.Nav._currPOV.pos;\r\n    if (cam === undefined || eye === undefined) return;\r\n\r\n    //this.userlabelnode.lookAt( eye );\r\n\r\n    //this.userlabelnode.setRotationFromMatrix(cam.matrix); // quaternion.setFromRotationMatrix( cam.matrix );\r\n    //this.userlabelnode.rotation.copy(cam.rotation);\r\n\r\n    this.userlabelnode.orientToCamera(); //quaternion.copy( ATON.Nav._qOri );\r\n\r\n/*\r\n    this.userlabelnode.rotation.y = Math.atan2(\r\n        ( cam.position.x - this.userlabelnode.position.x ),\r\n        ( cam.position.z - this.userlabelnode.position.z )\r\n    );\r\n*/\r\n    //this.userlabelnode.matrix.copy( cam.matrix );\r\n}\r\n\r\n\r\n};","/*\r\n    ATON VRoadcast\r\n    real-time collaborative networking\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\nimport Avatar from \"./ATON.avatar.js\";\r\n\r\n/**\r\nATON VRoadcast component\r\n@namespace VRoadcast\r\n*/\r\nlet VRoadcast = {};\r\n\r\nVRoadcast.USER_STATE_FREQ = 0.25; // sec\r\nVRoadcast.REPLICATED_EVT = \"EREP\";\r\n\r\n// Thresholds state sending\r\nVRoadcast.THRES_STATE_POS = 0.01;\r\nVRoadcast.THRES_STATE_ORI = 0.08; // radians\r\n\r\nVRoadcast.Avatar = Avatar;\r\n\r\n\r\n/**\r\nInitialize the component\r\n*/\r\nVRoadcast.init = ()=>{\r\n    VRoadcast.address = window.location.origin;\r\n\r\n    VRoadcast.initMaterials();\r\n\r\n    VRoadcast.socket = undefined;\r\n    VRoadcast._connected = false;\r\n\r\n    VRoadcast.uid = undefined; // my userID (0,1,....)\r\n    VRoadcast._numUsers = 0;\r\n\r\n    VRoadcast.avatarList = [];\r\n\r\n    VRoadcast.avaGroup = ATON.createUINode(\"avatars\"); // holds all avatars representations\r\n    VRoadcast.avaGroup.attachToRoot();\r\n\r\n    // send own state with given freq\r\n    window.setInterval( VRoadcast.sendState, VRoadcast.USER_STATE_FREQ*1000.0 );\r\n    VRoadcast._lastStateSent = undefined;\r\n\r\n    console.log(\"VRoadcast initialized\");\r\n    VRoadcast.enableChatLog();\r\n};\r\n\r\nVRoadcast.enableChatLog = ()=>{\r\n    VRoadcast._elChat = $(\"<div></div>\").text(\"\");\r\n};\r\n\r\nVRoadcast.getNumUsers = ()=>{\r\n    return VRoadcast._numUsers;\r\n};\r\n\r\n// Register materials (avatars/users)\r\nVRoadcast.initMaterials = ()=>{\r\n\r\n    VRoadcast.ucolors = [];\r\n    VRoadcast.ucolors.push( new THREE.Color(1,0,0) );\r\n    VRoadcast.ucolors.push( new THREE.Color(1,1,0) );\r\n    VRoadcast.ucolors.push( new THREE.Color(0,1,0) );\r\n    VRoadcast.ucolors.push( new THREE.Color(0,1,1) );\r\n    VRoadcast.ucolors.push( new THREE.Color(0,0,1) );\r\n    VRoadcast.ucolors.push( new THREE.Color(1,0,1) );\r\n\r\n    VRoadcast.ucolorsdark = [];\r\n    VRoadcast.ucolorsdark.push( new THREE.Color(0.2,0.0,0.0) );\r\n    VRoadcast.ucolorsdark.push( new THREE.Color(0.2,0.2,0.0) );\r\n    VRoadcast.ucolorsdark.push( new THREE.Color(0.0,0.2,0.0) );\r\n    VRoadcast.ucolorsdark.push( new THREE.Color(0.0,0.2,0.2) );\r\n    VRoadcast.ucolorsdark.push( new THREE.Color(0.0,0.0,0.2) );\r\n    VRoadcast.ucolorsdark.push( new THREE.Color(0.2,0.0,0.2) );\r\n\r\n    VRoadcast.ucolorhex = [];\r\n    VRoadcast.ucolorhex.push(\"#F00\");\r\n    VRoadcast.ucolorhex.push(\"#FF0\");\r\n    VRoadcast.ucolorhex.push(\"#0F0\");\r\n    VRoadcast.ucolorhex.push(\"#0FF\");\r\n    VRoadcast.ucolorhex.push(\"#00F\");\r\n    VRoadcast.ucolorhex.push(\"#F0F\");\r\n\r\n    let MM = ATON.MatHub.materials;\r\n    MM.avatars = [];\r\n\r\n    let mat = new THREE.MeshBasicMaterial({\r\n        color: VRoadcast.ucolors[0], \r\n        transparent: true, \r\n        opacity: 0.4, \r\n        depthWrite: false,\r\n        flatShading: true\r\n    });\r\n\r\n    MM.avatars.push(mat);\r\n\r\n    for (let c=1; c<VRoadcast.ucolors.length; c++){\r\n        let M = mat.clone();\r\n        M.color = VRoadcast.ucolors[c];\r\n\r\n        MM.avatars.push(M);\r\n    }\r\n};\r\n\r\n/**\r\nFire a replicated event (network)\r\n@param {string} evtname - the event name\r\n@param {object} data - object containing data to be transmitted with this event\r\n\r\n@example\r\nATON.VRoadcast.fireEvent(\"test\", 42);\r\n*/\r\nVRoadcast.fireEvent = (evtname, data)=>{\r\n    if (!VRoadcast._connected) return;\r\n    let sock = VRoadcast.socket;\r\n\r\n    if (sock) sock.emit(VRoadcast.REPLICATED_EVT, {e: evtname, d: data});\r\n    //else ATON.on(\"VRC_Connected\", ()=>{ sock.on(evtname, onReceive); });\r\n};\r\n\r\n/**\r\nSubscribe to a given network event, through given handler\r\n@param {string} evtname - the event name\r\n@param {function} handler - network event handler (how we handle incoming event)\r\n\r\n@example\r\nATON.VRoadcast.on(\"test\", function(data){ console.log(\"Received: \"+data); });\r\n*/\r\nVRoadcast.on = (evtname, handler)=>{\r\n    if (handler === undefined) return;\r\n\r\n    let evhNetwork = ATON.EventHub.evNetwork;\r\n\r\n    if (evhNetwork[evtname] === undefined) evhNetwork[evtname] = []; // First time (event not registered)\r\n    evhNetwork[evtname].push(handler);\r\n};\r\n\r\n/**\r\nReturn true if VRoadcast is connected to the service\r\n@returns {boolean}\r\n*/\r\nVRoadcast.isConnected = ()=>{\r\n    return VRoadcast._connected;\r\n};\r\n\r\n/**\r\nRequest enter in a given scene\r\n@param {string} sceneid - the scene id (sid)\r\n@example\r\nATON.VRoadcast.requestSceneEnter(\"testscene\");\r\n*/\r\nVRoadcast.requestSceneEnter = (sceneid)=>{\r\n    if (!VRoadcast.socket) return;\r\n    if (sceneid === undefined) sceneid = ATON.SceneHub.currID;\r\n\r\n    if (sceneid === undefined){\r\n        console.log(\"VRC ERROR: current scene ID is undefined\");\r\n        return;\r\n    }\r\n\r\n    VRoadcast.socket.emit(\"SENTER\", sceneid );\r\n};\r\n\r\n/**\r\nConnect to VRoadcast service\r\n@param {string} address - the address of the service (optional). Default is same server where main service is running\r\n@example\r\nATON.VRoadcast.connect();\r\n*/\r\nVRoadcast.connect = (address)=>{\r\n    if (VRoadcast._connected) return;\r\n    if (address) VRoadcast.address = address;\r\n\r\n    let opts = {};\r\n\r\n    // Secure connection\r\n    if (window.location.protocol === \"https:\"){\r\n        opts.path = '/svrc/socket.io';\r\n        opts.secure = true;\r\n        opts.rejectUnauthorized = false;\r\n        //opts.transports = ['websocket'], \r\n        //opts.upgrade = false \r\n    }\r\n    else {\r\n        opts.path = '/vrc/socket.io';\r\n    }\r\n\r\n    VRoadcast.socket = io.connect(VRoadcast.address, opts); //, { 'force new connection': true });\r\n\r\n    if (VRoadcast.socket === undefined) return;\r\n    VRoadcast._connected = VRoadcast.socket.connected;\r\n\r\n    VRoadcast._registerSocketHandlers();\r\n};\r\n\r\nVRoadcast.disconnect = ()=>{\r\n    if (VRoadcast.socket === undefined) return;\r\n\r\n    VRoadcast.socket.disconnect();\r\n    VRoadcast._connected = false;\r\n};\r\n\r\n\r\nVRoadcast._onConnected = ()=>{\r\n    //\r\n};\r\n\r\nVRoadcast.setUsername = (username)=>{\r\n    VRoadcast._username = username;\r\n    if (VRoadcast.socket === undefined) return;\r\n    if (VRoadcast.uid === undefined) return;\r\n\r\n    if (VRoadcast._elChat) VRoadcast._elChat.append(\"<i>Your username is now: \"+username+\"</i><br>\");\r\n    VRoadcast.socket.emit(\"UNAME\", username);\r\n};\r\nVRoadcast.setMessage = (msg)=>{\r\n    VRoadcast._msg = msg;\r\n    if (VRoadcast.socket === undefined) return;\r\n    if (VRoadcast.uid === undefined) return;\r\n\r\n    if (VRoadcast._elChat){\r\n        VRoadcast._elChat.append(\"<span style='color:\"+VRoadcast.ucolorhex[VRoadcast.uid%6]+\"'><b>YOU</b>: \"+msg+\"</span><br>\");\r\n        VRoadcast._elChat.scrollTop(VRoadcast._elChat.scrollHeight);\r\n    }\r\n\r\n    VRoadcast.socket.emit(\"UMSG\", msg);\r\n};\r\n\r\n\r\n// Handle incoming server msgs\r\nVRoadcast._registerSocketHandlers = ()=>{\r\n\r\n    // We connected to server\r\n    VRoadcast.socket.on('connect', ()=>{\r\n        VRoadcast._connected = true;\r\n\r\n        // Request enter in scene node (room)\r\n        if (ATON.SceneHub.currID !== undefined) VRoadcast.requestSceneEnter();\r\n        \r\n        console.log(\"VRC connected, entering scene: \"+ATON.SceneHub.currID);\r\n        ATON.fireEvent(\"VRC_Connected\");\r\n\r\n        VRoadcast._onConnected();\r\n    });\r\n\r\n    VRoadcast.socket.on('disconnect', ()=>{\r\n        VRoadcast._connected = false;\r\n        VRoadcast.uid = undefined;\r\n\r\n        VRoadcast.avaGroup.hide();\r\n\r\n        if (VRoadcast._elChat) VRoadcast._elChat.append(\"<i>YOU disconnected from VRoadcast service</i><br>\");\r\n\r\n        console.log(\"VRC disconnected!\");\r\n        ATON.fireEvent(\"VRC_Disconnected\");\r\n    });\r\n\r\n    // Incoming replicated event\r\n    VRoadcast.socket.on(VRoadcast.REPLICATED_EVT, (data)=>{\r\n        let evtname = data.e;\r\n        let d = data.d;\r\n\r\n        let ehList = ATON.EventHub.evNetwork[evtname];\r\n        ATON.EventHub.executeHandlers(ehList, d);\r\n    });\r\n\r\n    VRoadcast.socket.on('ID', (data)=>{\r\n        console.log(\"Your ID is \" + data);\r\n        VRoadcast.uid = data;\r\n\r\n        if (VRoadcast._elChat) VRoadcast._elChat.append(\"<i>Your ID is #\"+data+\"</i><br>\");\r\n\r\n        ATON.fireEvent(\"VRC_IDassigned\", data);\r\n    });\r\n\r\n    VRoadcast.socket.on('UENTER', (data)=>{\r\n        let uid = data;\r\n        //if (uid === VRoadcast.uid) return; // myself\r\n\r\n        console.log(\"User #\" +uid+\" entered the scene\");\r\n        if (VRoadcast._elChat) VRoadcast._elChat.append(\"<i>User #\"+uid+\" entered the scene</i><br>\");\r\n\r\n        VRoadcast.touchAvatar(uid);\r\n    });\r\n\r\n    VRoadcast.socket.on('ULEAVE', (data)=>{\r\n        let uid = data;\r\n        if (uid === undefined) return;\r\n        \r\n        let A = VRoadcast.avatarList[uid];\r\n        if (A) A.hide();\r\n\r\n        console.log(\"User #\" +uid+\" left the scene\");\r\n        if (VRoadcast._elChat) VRoadcast._elChat.append(\"<i>User #\"+uid+\" left the scene</i><br>\");\r\n\r\n        if (VRoadcast._numUsers>0) VRoadcast._numUsers--;\r\n    });\r\n\r\n    VRoadcast.socket.on('USTATE', (data)=>{\r\n        let S = VRoadcast.decodeState(data);\r\n\r\n        let uid = S.userid;\r\n        let A = VRoadcast.touchAvatar(uid);\r\n\r\n        //A.position.copy(S.position);\r\n        //A.quaternion.copy(S.quaternion);\r\n        A.requestStateTransition(S);\r\n    });\r\n\r\n    VRoadcast.socket.on('UNAME', (data)=>{\r\n        let uid   = data.uid;\r\n        let uname = data.name;\r\n\r\n        if (uid === undefined) return;\r\n\r\n        let A = VRoadcast.touchAvatar(uid);\r\n        A.setUsername(uname);\r\n\r\n        console.log(\"User #\" +uid+\" changed username to: \"+uname);\r\n        if (VRoadcast._elChat) VRoadcast._elChat.append(\"<i>User #\"+uid+\" changed username to: \"+uname+\"</i><br>\");\r\n    });\r\n\r\n    VRoadcast.socket.on('UMSG', (data)=>{\r\n        let uid = data.uid;\r\n        let msg = data.msg;\r\n\r\n        if (uid === undefined) return;\r\n\r\n        let A = VRoadcast.touchAvatar(uid);\r\n        A.setMessage(msg);\r\n\r\n        console.log(\"User #\" +uid+\": \"+msg);\r\n        if (VRoadcast._elChat) VRoadcast._elChat.append(\"<span style='color:\"+VRoadcast.ucolorhex[uid%6]+\"'><b>\"+A.username+\"</b>: \"+msg+\"</span><br>\");\r\n    });\r\n};\r\n\r\n// Encode state\r\nVRoadcast.encodeState = (S)=>{\r\n    if (!S) return;\r\n\r\n    let A = new Float32Array(6); // make sufficient room\r\n    A[0] = S.position.x;\r\n    A[1] = S.position.y;\r\n    A[2] = S.position.z;\r\n\r\n    // Convert to byte array, we use last float storage (4 bytes)\r\n    var binData = new Int8Array(A.buffer);\r\n\r\n    binData[16] = (S.quaternion.x * 128.0);\r\n    binData[17] = (S.quaternion.y * 128.0);\r\n    binData[18] = (S.quaternion.z * 128.0);\r\n    binData[19] = (S.quaternion.w * 128.0);\r\n\r\n    binData[20] = S.userid;\r\n\r\n    //binData[21] = parseInt(S.rank);\r\n\r\n    return binData;\r\n}\r\n\r\n// Decode state\r\nVRoadcast.decodeState = (binData)=>{\r\n    let S = {};\r\n    S.userid = binData[20];\r\n\r\n    // First decode quat\r\n    S.quaternion = new THREE.Quaternion(\r\n        binData[16] / 128.0,\r\n        binData[17] / 128.0,\r\n        binData[18] / 128.0,\r\n        binData[19] / 128.0\r\n    );\r\n\r\n    // Now decode floats\r\n    let a8 = new Int8Array(16);\r\n    for (var i=0; i<16; i++) a8[i] = binData[i];\r\n    let A = new Float32Array(a8.buffer);\r\n\r\n    S.position = new THREE.Vector3(A[0],A[1],A[2]);\r\n\r\n    //S.scale = A[3];\r\n\r\n    return S;\r\n}\r\n\r\n\r\n// Update\r\nVRoadcast.update = ()=>{\r\n\r\n    // State interpolation\r\n    for (let a=0; a<VRoadcast.avatarList.length; a++){\r\n        let A = VRoadcast.avatarList[a];\r\n        if (A && A.visible){\r\n            A._tStateDur = VRoadcast.USER_STATE_FREQ;\r\n            A.update();\r\n        }\r\n    }\r\n};\r\n\r\nVRoadcast.sendState = ()=>{\r\n    if (VRoadcast.uid === undefined) return;\r\n    if (!VRoadcast.socket || !VRoadcast._connected) return;\r\n    \r\n    let cpov = ATON.Nav._currPOV;\r\n    if (!cpov) return;\r\n\r\n    //console.log(cpov);\r\n\r\n    let S = {};\r\n    S.position = new THREE.Vector3();\r\n    S.quaternion = new THREE.Quaternion();\r\n\r\n    S.position.copy(cpov.pos);\r\n    S.quaternion.copy(ATON.Nav._qOri);\r\n    S.userid = VRoadcast.uid;\r\n\r\n    // Save bandwidth\r\n    if (VRoadcast._lastStateSent !== undefined){\r\n        let lastPos = VRoadcast._lastStateSent.position;\r\n        let lastOri = VRoadcast._lastStateSent.quaternion;\r\n\r\n        let dPos = lastPos.distanceToSquared(cpov.pos);\r\n        let dOri = lastOri.angleTo(ATON.Nav._qOri);\r\n\r\n        if ( dPos < VRoadcast.THRES_STATE_POS && dOri < VRoadcast.THRES_STATE_ORI) return;\r\n    }\r\n\r\n    // Encode and send\r\n    let binData = VRoadcast.encodeState(S);\r\n    VRoadcast.socket.emit(\"USTATE\", binData/*.buffer*/ );\r\n    VRoadcast._lastStateSent = S;\r\n\r\n    //console.log(\"State sent\");\r\n};\r\n\r\n\r\n// Avatars\r\nVRoadcast.getAvatar = (uid)=>{\r\n    return VRoadcast.avatarList[uid];\r\n};\r\n\r\nVRoadcast.touchAvatar = (uid)=>{\r\n\r\n    // First time\r\n    if (VRoadcast.avatarList[uid] === undefined){\r\n        let A = new VRoadcast.Avatar(uid);\r\n        A.attachTo(VRoadcast.avaGroup);\r\n        \r\n        A.loadRepresentation(ATON.PATH_RES+\"models/vrc/head.gltf\");\r\n        //console.log(VRoadcast.avaGroup);\r\n\r\n        VRoadcast.avatarList[uid] = A;\r\n\r\n        //console.log(VRoadcast.avatarList);\r\n        //console.log(ATON.MatHub.materials.avatars);\r\n        //console.log(A);\r\n        VRoadcast._numUsers++;\r\n    }\r\n\r\n    let A = VRoadcast.avatarList[uid];\r\n    A.show();\r\n\r\n    return A;\r\n}\r\n\r\nVRoadcast.clearAllAvatars = ()=>{\r\n    for (let i in VRoadcast.avatarList){\r\n        let A = VRoadcast.avatarList[i];\r\n        A.hide();\r\n        //A.dispose();\r\n    }\r\n};\r\n\r\nexport default VRoadcast;","/*\r\n    ATON Semantic shapes factory\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\n/**\r\nATON Semantic Factory\r\n@namespace SemFactory\r\n*/\r\nlet SemFactory = {};\r\n\r\nSemFactory.init = ()=>{\r\n    SemFactory.bConvexBuilding = false;\r\n    SemFactory.convexPoints = [];\r\n    //SemFactory.convexMeshes = [];\r\n    SemFactory.convexNode   = undefined; // keeps track of current convex semnode\r\n    SemFactory.currConvexMesh = undefined;\r\n    \r\n    // Temp sem node to hold developing convex mesh\r\n    SemFactory.currSemNode = ATON.createSemanticNode();\r\n    SemFactory.currSemNode.disablePicking();\r\n    SemFactory.currSemNode.attachToRoot();\r\n\r\n    SemFactory.currMaterial = ATON.MatHub.getMaterial(\"semanticShape\"); // current sem material we are using\r\n\r\n    SemFactory._numShapes = 0; // counter of shapes produced\r\n};\r\n\r\n\r\n// Current material\r\nSemFactory.resetMaterial = ()=>{\r\n    SemFactory.currMaterial = ATON.MatHub.getMaterial(\"semanticShape\");\r\n};\r\n\r\nSemFactory.setMaterial = (m)=>{\r\n    if (m === undefined) return;\r\n    SemFactory.currMaterial = m;\r\n};\r\n\r\n\r\n// Convex shapes\r\n// NOTE: if semid exists, add mesh under the same id\r\nSemFactory.addConvexPoint = (/*semid,*/ p)=>{\r\n\r\n    SemFactory.convexPoints.push(p);\r\n    let numPoints = SemFactory.convexPoints.length;\r\n\r\n    // Spatial UI\r\n    let M = new THREE.Mesh( ATON.Utils.geomUnitSphere, ATON.MatHub.getMaterial(\"semanticShapeEdit\"));\r\n    M.position.copy(p);\r\n    M.scale.set(0.01,0.01,0.01);\r\n    ATON.SUI.gPoints.add( M );\r\n\r\n    if (numPoints < 4) return false;\r\n\r\n    // lets build convex shape\r\n    let geom   = new THREE.ConvexBufferGeometry( SemFactory.convexPoints );\r\n    let semesh = new THREE.Mesh( geom, ATON.MatHub.getMaterial(\"semanticShapeEdit\") );\r\n\r\n    //let numMeshes = SemFactory.convexMeshes.length;\r\n\r\n    // First time: create semnode and add it to current sem group\r\n    if (!SemFactory.bConvexBuilding){\r\n        //if (semid === undefined) semid = \"sem\"+SemFactory._numShapes;\r\n\r\n        //SemFactory.convexNode = ATON.getSemanticNode(semid) || ATON.createSemanticNode(semid);\r\n        //SemFactory.convexNode = ATON.createSemanticNode();\r\n        //SemFactory.convexNode.add(semesh);\r\n        SemFactory.currSemNode.add(semesh);\r\n        \r\n        // Store\r\n        semesh.userData._convexPoints = [];\r\n        for (let i=0; i<numPoints; i++){\r\n            //semesh.userData._convexPoints.push( ATON.Utils.setVectorPrecision(SemFactory.convexPoints[i],3) );\r\n\r\n            ATON.Utils.setVectorPrecision(SemFactory.convexPoints[i],4);\r\n            semesh.userData._convexPoints.push(SemFactory.convexPoints[i].x);\r\n            semesh.userData._convexPoints.push(SemFactory.convexPoints[i].y);\r\n            semesh.userData._convexPoints.push(SemFactory.convexPoints[i].z);\r\n        }\r\n\r\n        SemFactory.currConvexMesh = semesh;\r\n        SemFactory.bConvexBuilding = true;\r\n    }\r\n\r\n    // keep updating current semantic geometry\r\n    else {\r\n        let currSemesh = SemFactory.currConvexMesh;\r\n        currSemesh.geometry.dispose();\r\n        currSemesh.geometry = geom;\r\n\r\n        //currSemesh.userData._convexPoints.push( ATON.Utils.setVectorPrecision(p,3) );\r\n\r\n        ATON.Utils.setVectorPrecision(p,4);\r\n        currSemesh.userData._convexPoints.push( p.x );\r\n        currSemesh.userData._convexPoints.push( p.y );\r\n        currSemesh.userData._convexPoints.push( p.z );\r\n    }\r\n\r\n    return true;\r\n};\r\n\r\nSemFactory.stopCurrentConvex = ()=>{\r\n    SemFactory.convexPoints = [];\r\n    SemFactory.bConvexBuilding = false;\r\n\r\n    SemFactory.currSemNode.removeChildren();\r\n    ATON.SUI.gPoints.removeChildren();\r\n};\r\n\r\nSemFactory.getCurrentConvexShape = ()=>{\r\n    return SemFactory.currSemNode\r\n};\r\n\r\nSemFactory.completeConvexShape = (semid)=>{\r\n    SemFactory.convexPoints = [];\r\n    SemFactory.bConvexBuilding = false;\r\n\r\n    //if (SemFactory.convexNode === undefined) return undefined;\r\n    //if (SemFactory.currConvexMesh === undefined) return undefined;\r\n    if (SemFactory.currSemNode === undefined) return;\r\n\r\n    if (semid === undefined) semid = \"sem\"+SemFactory._numShapes;\r\n\r\n    let S = ATON.getSemanticNode(semid) || ATON.createSemanticNode(semid);\r\n    \r\n    S.add(SemFactory.currSemNode.children[0]);\r\n    S.setMaterial( SemFactory.currMaterial );\r\n    S.setDefaultAndHighlightMaterials(SemFactory.currMaterial, ATON.MatHub.materials.semanticShapeHL);\r\n    S.enablePicking();\r\n\r\n    SemFactory.currSemNode.removeChildren();\r\n\r\n/*\r\n    SemFactory.convexNode = ATON.getSemanticNode(semid) || ATON.createSemanticNode(semid);\r\n    SemFactory.convexNode.add(SemFactory.currConvexMesh);\r\n\r\n    SemFactory.convexNode.setMaterial( SemFactory.currMaterial );\r\n    SemFactory.convexNode.setDefaultMaterial(SemFactory.currMaterial);\r\n    SemFactory.convexNode.enablePicking();\r\n*/\r\n    SemFactory._numShapes++;\r\n\r\n    //console.log(SemFactory.convexNode);\r\n    //console.log(SemFactory.convexNode.userData._convexPoints);\r\n\r\n    //return SemFactory.convexNode;\r\n\r\n    // Spatial UI\r\n    ATON.SUI.gPoints.removeChildren();\r\n\r\n    return S;\r\n};\r\n\r\nSemFactory.createConvexShape = (semid, points)=>{\r\n    let geom   = new THREE.ConvexBufferGeometry( points );\r\n    let semesh = new THREE.Mesh( geom, SemFactory.currMaterial );\r\n\r\n    semesh.userData._convexPoints = [];\r\n    for (let i=0; i<points.length; i++){\r\n        let p = points[i];\r\n        ATON.Utils.setVectorPrecision(p,4);\r\n\r\n        semesh.userData._convexPoints.push( p.x );\r\n        semesh.userData._convexPoints.push( p.y );\r\n        semesh.userData._convexPoints.push( p.z );\r\n        }\r\n\r\n    let S = ATON.getOrCreateSemanticNode(semid);\r\n    S.add(semesh);\r\n    S.setDefaultAndHighlightMaterials(SemFactory.currMaterial, ATON.MatHub.materials.semanticShapeHL);\r\n\r\n    S.enablePicking();\r\n\r\n    return S;\r\n};\r\n\r\nSemFactory.addSurfaceConvexPoint = (/*semid,*/ offset)=>{\r\n    if (!ATON._queryDataScene) return false;\r\n\r\n    if (offset === undefined) offset = 0.02;\r\n\r\n    let p = ATON._queryDataScene.p;\r\n    let n = ATON._queryDataScene.n;\r\n    p.x += (n.x * offset);\r\n    p.y += (n.y * offset);\r\n    p.z += (n.z * offset);\r\n\r\n    SemFactory.addConvexPoint(p);\r\n    return p;\r\n};\r\n\r\n\r\n// Spherical semantic shapes\r\n// NOTE: if semid exists, add mesh under the same id\r\nSemFactory.createSphere = (semid, location, radius)=>{\r\n    if (location === undefined) return undefined;\r\n    if (radius === undefined) return undefined;\r\n\r\n/*\r\n    if (ATON.getSemanticNode(semid)){\r\n        console.log(\"ERROR SemFactory: semantic node \"+semid+\" already exists.\");\r\n        return false;\r\n    }\r\n*/\r\n    if (semid === undefined) semid = \"sem\"+SemFactory._numShapes;\r\n\r\n    let S = ATON.getOrCreateSemanticNode(semid);\r\n\r\n    //let g = new THREE.SphereGeometry( 1.0, 16, 16 );\r\n    let M = new THREE.Mesh( ATON.Utils.geomUnitSphere, SemFactory.currMaterial );\r\n    \r\n    // Note: we add multiple spheres to the same <semid> node\r\n    let sphere = new THREE.Object3D();\r\n    sphere.position.copy(location);\r\n    sphere.scale.set(radius, radius, radius);\r\n    sphere.add(M);\r\n\r\n    S.add( sphere );\r\n    S.enablePicking();\r\n    S.setDefaultAndHighlightMaterials(SemFactory.currMaterial, ATON.MatHub.materials.semanticShapeHL);\r\n\r\n    //SemFactory.currParent.add( S );\r\n\r\n    SemFactory._numShapes++;\r\n\r\n    return S;\r\n};\r\n\r\nSemFactory.createSurfaceSphere = (semid)=>{\r\n    if (!ATON._queryDataScene) return undefined;\r\n\r\n    let p = ATON._queryDataScene.p;\r\n    let r = ATON.SUI.getSelectorRadius();\r\n\r\n    return SemFactory.createSphere(semid, p,r);\r\n};\r\n\r\nexport default SemFactory;","/*\r\n    ATON Front-end blueprint\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\n/**\r\nATON Front-end routines\r\n@namespace FE\r\n*/\r\nlet FE = {};\r\n\r\n\r\nFE.realize = ()=>{\r\n    FE.PATH_RES_ICONS = ATON.PATH_RES+\"icons/\";\r\n\r\n    FE._bPopup = false;     // showing popup\r\n    FE.bPopupBlurBG = 0.25; // blur 3D content on popup show, 0.0 to disable\r\n\r\n    FE._bReqHome = false;   // auto-compute home\r\n\r\n    FE.urlParams = new URLSearchParams(window.location.search);\r\n\r\n    FE._uiSetupBase();\r\n\r\n    ATON.realize();\r\n\r\n    // built-in base front-end parameters\r\n    let ddens = ATON.FE.urlParams.get('d');\r\n    if (ddens && ddens>0.0) ATON.setDefaultPixelDensity(ddens);\r\n};\r\n\r\n// Add basic spinning loader\r\nFE.addBasicLoaderEvents = ()=>{\r\n    ATON.on(\"NodeRequestFired\", ()=>{ $(\"#idLoader\").show(); });\r\n    ATON.on(\"AllNodeRequestsCompleted\", ()=>{ \r\n        $(\"#idLoader\").hide();\r\n        \r\n        //console.log(ATON.Nav.homePOV);\r\n\r\n        if (FE._bReqHome) return;\r\n\r\n        if (ATON.Nav.homePOV === undefined){\r\n            ATON.Nav.computeAndRequestDefaultHome(0.5);\r\n        }\r\n        else {\r\n            ATON.Nav.requestHome(0.5);\r\n        }\r\n\r\n        FE._bReqHome = true;\r\n    });\r\n};\r\n\r\nFE.useMouseWheelToScaleSelector = (f)=>{\r\n\r\n    if (f === undefined) f = 0.001;\r\n\r\n    ATON.on(\"MouseWheel\", (d)=>{\r\n        if (ATON.Nav._controls.enableZoom === undefined) return;\r\n\r\n        if (ATON._kModShift){\r\n            ATON.Nav._controls.enableZoom = false;\r\n\r\n            let r = ATON.SUI.mainSelector.scale.x;\r\n            r += (-d*f);\r\n            if (r > 0.0001) ATON.SUI.setSelectorRadius(r);\r\n        }\r\n        else {\r\n            ATON.Nav._controls.enableZoom = true;\r\n        }\r\n    });\r\n};\r\n\r\nFE.loadSceneID = (sid)=>{\r\n    if (sid === undefined) return;\r\n\r\n    let reqstr = ATON.PATH_RESTAPI_SCENE + sid;\r\n    if (ATON.SceneHub._bEdit) reqstr += \",edit\";\r\n\r\n    ATON.SceneHub.load(reqstr, sid);\r\n    console.log(reqstr);\r\n};\r\n\r\n\r\n\r\n// HTML UI\r\n//=======================================\r\n// Sample basic UI setup\r\nFE.uiBasicSetup = ()=>{\r\n    FE.uiAddButton(\"idTopToolbar\",\"fullscreen\", ATON.toggleFullScreen );\r\n    if (ATON.Utils.isConnectionSecure()) FE.uiAddButton(\"idTopToolbar\",\"vr\", ATON.XR.toggle );\r\n\r\n    FE.uiAddButton(\"idBottomToolbar\",\"home\", ()=>{ ATON.Nav.requestHome(0.1); });\r\n};\r\n\r\nFE._uiSetupBase = ()=>{\r\n    $(\"#idPopup\").click( FE.popupClose );\r\n    $(\"#idLoader\").html(\"<img src='\"+ATON.PATH_RES+\"loader.png'>\");\r\n};\r\n\r\n// Add Generic button to a specific div container\r\nFE.uiAddButton = (idcontainer, icon, onPress)=>{\r\n    let iconurl;\r\n    let iconid;\r\n\r\n    if (icon.endsWith(\".png\")){\r\n        iconurl = icon;\r\n        iconid  = icon.slice(0,-4);\r\n    }\r\n    else {\r\n        iconurl = FE.PATH_RES_ICONS+icon+\".png\";\r\n        iconid  = icon;\r\n    }\r\n\r\n    let htmlcode = \"<button id='btn-\"+iconid+\"' type='button' class='atonBTN'><img src='\"+iconurl+\"'></button>\";\r\n    $(\"#\"+idcontainer).append(htmlcode);\r\n\r\n    if (onPress) $(\"#btn-\"+iconid).click( onPress );\r\n};\r\n\r\nFE.uiSwitchButton = (iconid, b)=>{\r\n    if (b) $(\"#btn-\"+iconid).addClass(\"switchedON\");\r\n    else $(\"#btn-\"+iconid).removeClass(\"switchedON\");\r\n};\r\n\r\nFE.uiAddButtonHome = (idcontainer)=>{\r\n    FE.uiAddButton(idcontainer, \"home\", ()=>{ \r\n        ATON.Nav.requestHome(0.3);\r\n    });\r\n};\r\n\r\nFE.uiAddButtonFirstPerson = (idcontainer)=>{\r\n    FE.uiAddButton(idcontainer, \"fp\", ()=>{\r\n        if (ATON.Nav.isFirstPerson()){\r\n            ATON.Nav.setOrbitControl();\r\n            FE.uiSwitchButton(\"fp\",false);\r\n        }\r\n        else {\r\n            ATON.Nav.setFirstPersonControl();\r\n            FE.uiSwitchButton(\"fp\",true);\r\n        }\r\n    });\r\n};\r\nFE.uiAddButtonVR = (idcontainer)=>{\r\n    if (!ATON.Utils.isConnectionSecure()) return;\r\n    FE.uiAddButton(idcontainer, \"vr\", ATON.XR.toggle );\r\n};\r\nFE.uiAddButtonDeviceOrientation = (idcontainer)=>{\r\n    if (!ATON.Utils.isConnectionSecure()) return;\r\n    if (!ATON.Utils.isMobile()) return;\r\n\r\n    FE.uiAddButton(idcontainer,\"devori\", ()=>{\r\n        if (ATON.Nav.isDevOri()){\r\n            ATON.Nav.setOrbitControl();\r\n            FE.uiSwitchButton(\"devori\",false);\r\n        }\r\n        else {\r\n            ATON.Nav.setDeviceOrientationControl();\r\n            FE.uiSwitchButton(\"devori\",true);\r\n        }\r\n    });\r\n};\r\n\r\nFE.uiAddButtonQR = (idcontainer)=>{\r\n    FE.uiAddButton(idcontainer,\"qr\", FE.popupQR );\r\n};\r\n\r\nFE.uiAddButtonFullScreen = (idcontainer)=>{\r\n    FE.uiAddButton(idcontainer, \"fullscreen\", ()=>{\r\n        ATON.toggleFullScreen();\r\n        screenfull.isFullscreen? FE.uiSwitchButton(\"fullscreen\",false) : FE.uiSwitchButton(\"fullscreen\",true);\r\n    });\r\n};\r\n\r\nFE.uiAddButtonVRC = (idcontainer)=>{\r\n    FE.uiAddButton(idcontainer, \"vrc\", ()=>{\r\n        if (ATON.VRoadcast.isConnected()){\r\n            FE.popupVRC();\r\n        }\r\n        else {\r\n            ATON.VRoadcast.connect();\r\n        }\r\n    });\r\n\r\n    ATON.on(\"VRC_IDassigned\", (uid)=>{\r\n        $(\"#btn-vrc\").addClass(\"atonVRCu\"+(uid%6));\r\n    });\r\n\r\n    ATON.on(\"VRC_Disconnected\", ()=>{\r\n        $(\"#btn-vrc\").attr(\"class\",\"atonBTN\");\r\n    });\r\n};\r\n\r\n// Attach ID validator to given input field\r\nFE.uiAttachInputFilterID = (inputid)=>{\r\n    $(\"#\"+inputid).on('keyup change input', ()=>{\r\n        let value = $(\"#\"+inputid).val();\r\n        let regReplace = new RegExp('[^A-Za-z-_]', 'ig');\r\n        $(\"#\"+inputid).val( value.replace(regReplace, '') );\r\n\r\n    });\r\n};\r\n\r\nFE.setupBasicUISounds = ()=>{\r\n    FE.auLib = {};\r\n\r\n    FE.auLib.switch = new Audio(ATON.PATH_RES+\"audio/switch.wav\");\r\n    FE.auLib.switch.loop = false;\r\n};\r\n\r\n\r\n// Popups\r\n//===================================================================\r\nFE.popupShow = (htmlcontent)=>{\r\n    if (FE._bPopup) return false;\r\n\r\n    $('#idPopup').html(\"<div class='atonPopup' id='idPopupContent'>\"+htmlcontent+\"</div>\");\r\n    $('#idPopupContent').click((e)=>{ e.stopPropagation(); });\r\n    $('#idPopup').fadeIn();\r\n\r\n    FE._bPopup = true;\r\n\r\n    if (FE.bPopupBlurBG > 0.0){\r\n        ATON._renderer.setPixelRatio( FE.bPopupBlurBG );\r\n        ATON._renderer.render( ATON._mainRoot, ATON.Nav._camera );\r\n    }\r\n\r\n    ATON._bPauseQuery = true;\r\n    //ATON.renderPause();\r\n\r\n    $(\"#idTopToolbar\").hide();\r\n    $(\"#idBottomToolbar\").hide();\r\n\r\n    return true;\r\n};\r\n\r\nFE.popupClose = ()=>{\r\n    FE._bPopup = false;\r\n\r\n    //ATON.renderResume();\r\n    if (FE.bPopupBlurBG > 0.0) ATON.resetPixelDensity();\r\n\r\n    $(\"#idPopup\").fadeOut();\r\n    //$(\"#idPopup\").empty();\r\n\r\n    ATON._bPauseQuery = false;\r\n\r\n    $(\"#idTopToolbar\").show();\r\n    $(\"#idBottomToolbar\").show();\r\n\r\n    ATON.focusOn3DView();\r\n};\r\n\r\nFE.popupQR = ()=>{\r\n    let htmlcontent = \"<h1>Share</h1>\";\r\n    htmlcontent += \"<div class='atonQRcontainer' id='idQRcode'></div><br><br>\";\r\n\r\n    if ( !ATON.FE.popupShow(htmlcontent) ) return;\r\n\r\n    let url = window.location.href;\r\n    new QRCode(document.getElementById(\"idQRcode\"), url);\r\n};\r\n\r\nFE.popupVRC = ()=>{\r\n    let htmlcontent = \"\";\r\n    //htmlcontent += \"<h1>VRoadcast</h1>\";\r\n    htmlcontent += \"<div id='idChatBox' style='width:100%; height:150px; text-align:left;' class='scrollableY'></div>\";\r\n\r\n    htmlcontent += \"<input id='idVRCusername' type='text' size='10' placeholder='username...'>\";\r\n    htmlcontent += \"<input id='idVRCmsg' type='text' placeholder='message...'>\";\r\n    htmlcontent += \"<button type='button' class='atonBTN atonBTN-red' id='idVRCdisconnect' style='width:100%'>DISCONNECT</div>\";\r\n\r\n    if ( !ATON.FE.popupShow(htmlcontent) ) return;\r\n\r\n    $(\"#idChatBox\").append(ATON.VRoadcast._elChat);\r\n\r\n    $(\"#idVRCmsg\").keypress((e)=>{\r\n        let keycode = (e.keyCode ? e.keyCode : e.which);\r\n        if(keycode == '13'){\r\n            let str = $(\"#idVRCmsg\").val();\r\n            ATON.VRoadcast.setMessage( str );\r\n            $(\"#idVRCmsg\").val(\"\");\r\n            //$(\"#idChatBox:first-child\").scrollTop( $(\"#idChatBox:first-child\").height() );\r\n        }\r\n    });\r\n\r\n    $(\"#idVRCusername\").keypress((e)=>{\r\n        let keycode = (e.keyCode ? e.keyCode : e.which);\r\n        if(keycode == '13'){\r\n            let str = $(\"#idVRCusername\").val();\r\n            ATON.VRoadcast.setUsername( str );\r\n            //$(\"#idVRCusername\").hide();\r\n        }\r\n    });\r\n\r\n    $(\"#idVRCdisconnect\").click(()=>{\r\n        ATON.VRoadcast.disconnect();\r\n        ATON.FE.popupClose();\r\n    });\r\n\r\n};\r\n\r\n\r\nexport default FE;","/*!\r\n    @preserve\r\n\r\n \tATON\r\n\r\n \t@author Bruno Fanini\r\n\tVHLab, CNR ISPC\r\n\r\n==================================================================================*/\r\n\r\n'use strict';\r\n\r\n/**\r\n@namespace ATON\r\n*/\r\nlet ATON = {};\r\nwindow.ATON = ATON;\r\n\r\n// Import\r\nimport Node from \"./ATON.node.js\";\r\nimport POV from \"./ATON.pov.js\";\r\n//import Period from \"./ATON.period.js\";\r\nimport LightProbe from \"./ATON.lightprobe.js\";\r\n\r\nimport EventHub from \"./ATON.eventhub.js\";\r\nimport MatHub from \"./ATON.mathub.js\";\r\nimport Utils from \"./ATON.utils.js\";\r\nimport SceneHub from \"./ATON.scenehub.js\";\r\nimport Nav from \"./ATON.nav.js\";\r\nimport XR from \"./ATON.xr.js\";\r\nimport SUI from \"./ATON.sui.js\";\r\nimport VRoadcast from \"./ATON.vroadcast.js\";\r\nimport SemFactory from \"./ATON.semfactory.js\";\r\nimport FE from \"./ATON.fe.js\";\r\n\r\n// Classes\r\nATON.Node       = Node;\r\nATON.POV        = POV;\r\nATON.LightProbe = LightProbe;\r\n//ATON.Period = Period;\r\n\r\n// NS\r\nATON.EventHub   = EventHub;\r\nATON.Utils      = Utils;\r\nATON.SceneHub   = SceneHub;\r\nATON.MatHub     = MatHub;\r\nATON.Nav        = Nav;\r\nATON.XR         = XR;\r\nATON.SUI        = SUI;\r\nATON.VRoadcast  = VRoadcast;\r\nATON.SemFactory = SemFactory;\r\nATON.FE         = FE;\r\n\r\n//==============================================================\r\n// Consts\r\n//==============================================================\r\nATON.STD_UPVECTOR = new THREE.Vector3(0,1,0);\r\nATON.ROOT_NID = \".\"; // reserved node ID for graph-roots\r\n\r\nATON.RAD2DEG = (180.0 / Math.PI);\r\nATON.DEG2RAD = (Math.PI / 180.0);\r\n\r\n// Node types\r\nATON.NTYPES = {};\r\n// 1 and 2 are reserved\r\nATON.NTYPES.SCENE  = 3;\r\nATON.NTYPES.SEM    = 4;\r\nATON.NTYPES.UI     = 5;\r\n\r\n// Folders\r\nATON.PATH_RESTAPI       = window.location.origin + \"/api/\";\r\nATON.PATH_RESTAPI_SCENE = ATON.PATH_RESTAPI + \"scene/\";\r\nATON.PATH_MODS          = window.location.origin + \"/mods/\";\r\nATON.PATH_THREE         = ATON.PATH_MODS + \"three/\";\r\nATON.PATH_DRACO_LIB     = ATON.PATH_THREE+\"examples/js/libs/draco/\";\r\nATON.PATH_BASIS_LIB     = ATON.PATH_THREE+\"examples/js/libs/basis/\";\r\n\r\nATON.PATH_COLLECTION = window.location.origin + \"/collection/\";\r\nATON.PATH_MODELS     = ATON.PATH_COLLECTION + \"models/\";\r\nATON.PATH_SCENES     = window.location.origin + \"/scenes/\";\r\nATON.PATH_RES        = window.location.origin + \"/res/\";\r\n\r\nATON.SHADOWS_NEAR = 0.1;\r\nATON.SHADOWS_FAR  = 50.0;\r\nATON.SHADOWS_SIZE = 15.0;\r\nATON.SHADOWS_RES  = 1024; // 512\r\n\r\n/**\r\nSet path collection (3D models, audio, panoramas, ...)\r\n@param {string} path - path\r\n*/\r\nATON.setPathCollection = (path)=>{\r\n    ATON.PATH_COLLECTION = window.location.origin + path;\r\n    ATON.PATH_MODELS     = ATON.PATH_COLLECTION+\"models/\";\r\n};\r\n\r\n/**\r\nSet path scenes\r\n@param {string} path - path\r\n*/\r\nATON.setPathScenes = (path)=>{\r\n    ATON.PATH_SCENES = window.location.origin + path;\r\n};\r\n\r\n\r\nATON._setupBaseListeners = ()=>{\r\n    let el = ATON._renderer.domElement;\r\n\r\n    window.addEventListener( 'resize', ATON._onResize, false );\r\n    el.addEventListener( 'mousemove', ATON._updateScreenMove, false );\r\n    ///el.addEventListener('dblclick', ATON._doubleTap, false);\r\n\r\n    el.addEventListener('mousedown', (e)=>{\r\n        if (e.button === 1) ATON.fireEvent(\"MouseMidButton\");      // middle-click\r\n        if (e.button === 2) ATON.fireEvent(\"MouseRightButton\");    // right-click\r\n    });\r\n\r\n    el.addEventListener( 'wheel', ATON._onMouseWheel, false );\r\n\r\n\r\n    // Touch events\r\n    Hammer(el).on(\"doubletap\", (e)=>{\r\n        ATON.fireEvent(\"DoubleTap\", e.srcEvent);\r\n        //console.log(e.srcEvent);\r\n    });\r\n\r\n    Hammer(el).on(\"tap\", (e)=>{\r\n        ATON._updateScreenMove(e.srcEvent);\r\n        ATON._handleQueries();\r\n\r\n        ATON.fireEvent(\"Tap\", e.srcEvent);\r\n        //console.log(e.srcEvent);\r\n\r\n        // UI selection\r\n        if (ATON._hoveredUI === undefined) return;\r\n        let H = ATON.getUINode(ATON._hoveredUI);\r\n        if (H && H.onSelect) H.onSelect();\r\n    });\r\n\r\n    ATON.on(\"DoubleTap\", (e)=>{\r\n        //console.log(e);\r\n        ATON.defaultDoubleTapFromScreenCoords(e);\r\n    });\r\n\r\n    //ATON.on(\"Tap\", (e)=>{\r\n        //console.log(e);\r\n    //});\r\n\r\n\r\n    // Keyboard\r\n    ATON._kModShift = false;\r\n    ATON._kModCtrl  = false;\r\n\r\n    el.addEventListener(\"keydown\", (e)=>{\r\n        if (e.key === \"Shift\")   ATON._kModShift = true;\r\n        if (e.key === \"Control\") ATON._kModCtrl  = true;\r\n        \r\n        ATON.fireEvent(\"KeyPress\", e.key);\r\n        //ATON.fireEvent(\"KeyPress/\"+e.key);\r\n    }, false);\r\n\r\n    el.addEventListener(\"keyup\", (e)=>{\r\n        if (e.key === \"Shift\")   ATON._kModShift = false;\r\n        if (e.key === \"Control\") ATON._kModCtrl  = false;\r\n\r\n        ATON.fireEvent(\"KeyUp\", e.key);\r\n        //ATON.fireEvent(\"KeyUp/\"+e.key);\r\n    }, false);\r\n\r\n    // Defaults\r\n    ATON.on(\"KeyPress\", (k)=>{\r\n\r\n        if (k==='+'){\r\n            let f = ATON.Nav.getFOV() + 1.0;\r\n            ATON.Nav.setFOV(f);\r\n        }\r\n        if (k==='-'){\r\n            let f = ATON.Nav.getFOV() - 1.0;\r\n            ATON.Nav.setFOV(f);\r\n        }\r\n\r\n        if (k==='PageUp'){\r\n            let r = ATON.SUI.mainSelector.scale.x + 0.02;\r\n            ATON.SUI.setSelectorRadius(r);\r\n        }\r\n        if (k==='PageDown'){\r\n            let r = ATON.SUI.mainSelector.scale.x - 0.02;\r\n            r = Math.max(r, 0.01);\r\n            ATON.SUI.setSelectorRadius(r); \r\n        }\r\n    });\r\n\r\n    // Default semantic highlight\r\n/*\r\n    ATON.on(\"SemanticNodeLeave\", (semid)=>{\r\n        let S = ATON.getSemanticNode(semid);\r\n        if (S) S.restoreDefaultMaterial();\r\n    });\r\n    ATON.on(\"SemanticNodeHover\", (semid)=>{\r\n        let S = ATON.getSemanticNode(semid);\r\n        if (S) S.highlight();\r\n    });\r\n*/          \r\n};\r\n\r\nATON._onResize = ()=>{\r\n    ATON.Nav._camera.aspect = window.innerWidth / window.innerHeight;\r\n    ATON.Nav._camera.updateProjectionMatrix();\r\n\r\n    ATON._renderer.setSize( window.innerWidth, window.innerHeight );\r\n    console.log(\"onResize\");\r\n};\r\n\r\nATON._onMouseWheel = (e)=>{\r\n    e.preventDefault();\r\n\r\n    ATON.fireEvent(\"MouseWheel\", e.deltaY);\r\n};\r\n\r\nATON.focusOn3DView = ()=>{\r\n    ATON._renderer.domElement.focus();\r\n};\r\n\r\n// Default retarget from screen coordinates (eg.: on double tap)\r\nATON.defaultDoubleTapFromScreenCoords = (e)=>{\r\n    ATON._updateScreenMove(e);\r\n    ATON._handleQueryScene();\r\n\r\n    let bFPtrans = ATON.Nav.isFirstPerson() || ATON.Nav.isDevOri();\r\n\r\n    // When first-person mode, teleport (non immersive)\r\n    if (ATON._queryDataScene && bFPtrans){\r\n        let P = ATON._queryDataScene.p;\r\n        let N = ATON._queryDataScene.n;\r\n        \r\n        if (N.y > 0.7){\r\n            let currDir = ATON.Nav._vDir;\r\n            let feye = new THREE.Vector3(P.x, P.y+ATON.userHeight, P.z);\r\n            let ftgt = new THREE.Vector3(\r\n                feye.x + currDir.x,\r\n                feye.y + currDir.y,\r\n                feye.z + currDir.z,\r\n            );\r\n\r\n            let POV = new ATON.POV().setPosition(feye).setTarget(ftgt);\r\n\r\n            ATON.Nav.requestPOV(POV, 0.5);\r\n        }\r\n        return;\r\n    }\r\n\r\n    // In orbit mode, focus on selected SemNode...\r\n    let hsn = ATON.getSemanticNode(ATON._hoveredSemNode);\r\n    if (ATON._queryDataSem && hsn){\r\n        ATON.Nav.requestPOVbyNode( hsn, 0.3);\r\n        return;\r\n    }\r\n    // ...or perform standard retarget on picket surface point\r\n    if (ATON._queryDataScene){\r\n        ATON.Nav.requestRetarget(ATON._queryDataScene.p, /*ATON._queryDataScene.n*/undefined, 0.3);\r\n    }\r\n\r\n    // TODO: go POV in sight if any (panorama only mode)\r\n}\r\n\r\n/**\r\nToggle fullscreen\r\n*/\r\nATON.toggleFullScreen = ()=>{\r\n    screenfull.toggle();\r\n/*\r\n    if (b === undefined){\r\n        screenfull.toggle();\r\n        return;\r\n    }\r\n\r\n    if (b) screenfull.request();\r\n*/\r\n};\r\n\r\n\r\n//============================================================================\r\n// ATON init routines\r\n//============================================================================\r\n/**\r\nMain ATON initialization, it will take care of all sub-components initialization, device profiling and much more\r\n@example\r\nATON.realize()\r\n*/\r\nATON.realize = ()=>{\r\n    console.log(\"realize\");\r\n\r\n    ATON.Utils.init();\r\n    ATON.Utils.profileDevice();\r\n    \r\n    //THREE.Object3D.DefaultUp = new THREE.Vector3(0,0,1); // mismatches WebXR y-up\r\n\r\n    // Timing\r\n    ATON._clock = new THREE.Clock(true);\r\n\r\n    let wglopts = {\r\n        //canvas: document.getElementById(\"idView\"),\r\n        antialias: true, //ATON.device.isMobile? false : true,\r\n        alpha: true,\r\n        //pecision: \"mediump\"\r\n        preserveDrawingBuffer: true\r\n    };\r\n\r\n    ATON._renderer = new THREE.WebGLRenderer(wglopts);\r\n    ATON._renderer.setSize( window.innerWidth, window.innerHeight );\r\n    //console.log(ATON._renderer);\r\n\r\n    ATON._stdpxd = 1.0; //window.devicePixelRatio? (window.devicePixelRatio) : 1.0;\r\n    ATON._renderer.setPixelRatio( ATON._stdpxd );\r\n    console.log(ATON._stdpxd);\r\n    \r\n    ATON._renderer.outputEncoding = THREE.sRGBEncoding;\r\n    //console.log(ATON._renderer.getPixelRatio());\r\n\r\n    ATON._renderer.setAnimationLoop( ATON._onFrame );\r\n    //ATON._bDirtyLP = false;\r\n\r\n    ATON._maxAnisotropy = ATON._renderer.capabilities.getMaxAnisotropy();\r\n    console.log(ATON._renderer.capabilities);\r\n\r\n    THREE.Cache.enabled = true;\r\n\r\n    ATON.userHeight = 1.7;\r\n \r\n    document.body.appendChild( ATON._renderer.domElement );\r\n    //console.log(ATON._renderer);\r\n\r\n    ATON.EventHub.init();\r\n    ATON.MatHub.init();\r\n\r\n    //ATON._setupLoadManager();\r\n    ATON._assetsManager = {};\r\n    ATON._aLoader = new THREE.GLTFLoader(/*ATON._loadManager*/);\r\n    ATON._dracoLoader = new THREE.DRACOLoader();\r\n    ATON._dracoLoader.setDecoderPath( ATON.PATH_DRACO_LIB );\r\n    ATON._aLoader.setDRACOLoader( ATON._dracoLoader );\r\n    ATON._numReqLoad = 0;\r\n\r\n    // Periods (TODO:)\r\n    //ATON.periods = [];\r\n\r\n    ATON._lps = []; // lightprobes\r\n    ATON._bAutoLP = false;\r\n    //ATON._dirtyLPs = true;\r\n    ATON._bShadowsFixedBound = false;\r\n\r\n    ATON.initGraphs();\r\n    ATON.SceneHub.init();\r\n\r\n    // Init nav system\r\n    ATON.Nav.init();\r\n\r\n    // XR\r\n    ATON.XR.init();\r\n\r\n    // Spatial UI\r\n    ATON.SUI.init();\r\n\r\n    // VRoadcast\r\n    ATON.VRoadcast.init();\r\n\r\n    // Semantic Factory\r\n    ATON.SemFactory.init();\r\n\r\n    // Query / picked data\r\n    ATON._queryDataScene = undefined;\r\n    ATON._queryDataSem   = undefined;\r\n    ATON._queryDataUI    = undefined;\r\n\r\n    ATON._hoveredSemNode = undefined;\r\n    ATON._hoveredUI      = undefined;\r\n\r\n    ATON._bQuerySemOcclusion = true;\r\n    ATON._bQueryNormals  = true;\r\n    ATON._bPauseQuery    = false;\r\n\r\n    //window.setInterval(()=>{ if (!ATON._bPauseQuery) ATON._handleQueries(); }, 500 );\r\n\r\n    // Basis (future support)\r\n/*\r\n    ATON._basisLoader = new BasisTextureLoader();\r\n    ATON._basisLoader.setTranscoderPath( ATON.PATH_BASIS_LIB );\r\n    ATON._basisLoader.detectSupport( ATON._renderer );\r\n    \r\n    // Register BasisTextureLoader for .basis extension.\r\n    THREE.DefaultLoadingManager.addHandler( /\\.basis$/, ATON._basisLoader );\r\n*/\r\n\r\n\r\n    // Mouse/Touch screen coords\r\n    ATON._screenPointerCoords = new THREE.Vector2(0.0,0.0);\r\n\r\n    // Ray casters\r\n    ATON._rcScene = new THREE.Raycaster();\r\n    ATON._rcScene.layers.set(ATON.NTYPES.SCENE);\r\n    ATON._rcSemantics = new THREE.Raycaster();\r\n    ATON._rcSemantics.layers.set(ATON.NTYPES.SEM);\r\n    ATON._rcUI = new THREE.Raycaster();\r\n    ATON._rcUI.layers.set(ATON.NTYPES.UI);\r\n\r\n    //ATON._registerRCS(); // not used for now\r\n\r\n    ATON._setupBaseListeners();\r\n\r\n    ATON.focusOn3DView();\r\n};\r\n\r\n/**\r\nPause rendering\r\n*/\r\nATON.renderPause = ()=>{\r\n    ATON._renderer.setAnimationLoop( undefined );\r\n};\r\n\r\n/**\r\nResume rendering (if paused)\r\n*/\r\nATON.renderResume = ()=>{\r\n    ATON._renderer.setAnimationLoop( ATON._onFrame );\r\n};\r\n\r\nATON._setupLoadManager = ()=>{\r\n    ATON._loadManager = new THREE.LoadingManager();\r\n    ATON._loadManager.onStart = ( url, itemsLoaded, itemsTotal )=>{\r\n\t    console.log( 'Started loading file: ' + url + '.\\nLoaded ' + itemsLoaded + ' of ' + itemsTotal + ' files.' );\r\n        ATON.fireEvent(\"NodeRequestFired\", url);\r\n    };\r\n\r\n    ATON._loadManager.onLoad = ()=>{\r\n\t    console.log( 'Loading complete!');\r\n        ATON.fireEvent(\"AllNodeRequestsCompleted\");\r\n    };\r\n\r\n    ATON._loadManager.onProgress = ( url, itemsLoaded, itemsTotal )=>{\r\n\t    //console.log( 'Loading file: ' + url + '.\\nLoaded ' + itemsLoaded + ' of ' + itemsTotal + ' files.' );\r\n    };\r\n\r\n    ATON._loadManager.onError = ( url )=>{\r\n\t    console.log( 'There was an error loading ' + url );\r\n    };\r\n};\r\n\r\n/**\r\nSet the default pixel density (standard is 1.0)\r\n@example\r\nATON.setDefaultPixelDensity(0.5)\r\n*/\r\nATON.setDefaultPixelDensity = (d)=>{\r\n    ATON._stdpxd = d;\r\n    ATON._renderer.setPixelRatio( d );\r\n};\r\n\r\n/**\r\nReset pixel density to default\r\n*/\r\nATON.resetPixelDensity = ()=>{\r\n    ATON._renderer.setPixelRatio( ATON._stdpxd );\r\n};\r\n\r\n\r\n//============================================================================\r\n// Scene-graphs\r\n//============================================================================\r\nATON.snodes   = {}; // Visible scene-graph\r\nATON.semnodes = {}; // Semantics graph\r\nATON.uinodes  = {}; // UI graph\r\n\r\n// Visible scene-graph\r\n//=============================================\r\n/**\r\nCreate a scene node (visible scene-graph)\r\n@param {string} id - a string representing unique ID of the node (optional)\r\n@returns {Node}\r\n*/\r\nATON.createSceneNode = (id)=>{\r\n    return new ATON.Node(id, ATON.NTYPES.SCENE);\r\n};\r\n\r\n/**\r\nGet a previously created scene node (visible scene-graph)\r\n@param {string} id - the node ID\r\n@returns {Node}\r\n*/\r\nATON.getSceneNode = (id)=>{ \r\n    if (id === undefined) return undefined;    \r\n    return ATON.snodes[id];\r\n};\r\n\r\n/**\r\nGet or create a scene node (visible scene-graph)\r\n@param {string} id - the node ID\r\n@returns {Node}\r\n*/\r\nATON.getOrCreateSceneNode = (id)=>{\r\n    let N = ATON.getSceneNode(id);\r\n    if (N !== undefined) return N;\r\n    return ATON.createSceneNode(id);\r\n};\r\n\r\n/**\r\nGet root (visible scene-graph)\r\n@returns {Node}\r\n*/\r\nATON.getRootScene = ()=>{\r\n    return ATON._rootVisible;\r\n};\r\n\r\n// Semantics, shape descriptors\r\n//=============================================\r\n\r\n/**\r\nCreate a semantic node\r\n@param {string} id - a string representing unique ID of the node (optional)\r\n@returns {Node}\r\n*/\r\nATON.createSemanticNode = (id)=>{\r\n    return new ATON.Node(id, ATON.NTYPES.SEM);\r\n};\r\n\r\n/**\r\nGet a previously created semantic node\r\n@param {string} id - the node ID\r\n@returns {Node}\r\n*/\r\nATON.getSemanticNode = (id)=>{\r\n    if (id === undefined) return undefined; \r\n    return ATON.semnodes[id];\r\n};\r\n\r\n/**\r\nGet or create a semantic node\r\n@param {string} id - the node ID\r\n@returns {Node}\r\n*/\r\nATON.getOrCreateSemanticNode = (id)=>{\r\n    let S = ATON.getSemanticNode(id);\r\n    if (S !== undefined) return S;\r\n    return ATON.createSemanticNode(id);\r\n};\r\n\r\n/**\r\nGet root of semantic graph\r\n@returns {Node}\r\n*/\r\nATON.getRootSemantics = ()=>{\r\n    return ATON._rootSem;\r\n};\r\n\r\n// UI graph\r\n//=============================================\r\n\r\n/**\r\nCreate a UI node\r\n@param {string} id - a string representing unique ID of the node (optional)\r\n@returns {Node}\r\n*/\r\nATON.createUINode = (id)=>{\r\n    return new ATON.Node(id, ATON.NTYPES.UI);\r\n};\r\n\r\n/**\r\nGet a previously created UI node\r\n@param {string} id - the node ID\r\n@returns {Node}\r\n*/\r\nATON.getUINode = (id)=>{\r\n    if (id === undefined) return undefined; \r\n    return ATON.uinodes[id];\r\n};\r\n\r\n/**\r\nGet root of UI graph\r\n@returns {Node}\r\n*/\r\nATON.getRootUI = ()=>{\r\n    return ATON._rootUI;\r\n};\r\n\r\n// Asset loading routines\r\nATON._assetReqNew = (url)=>{\r\n    ATON._numReqLoad++;\r\n    ATON.fireEvent(\"NodeRequestFired\", url);\r\n};\r\nATON._assetReqComplete = (url)=>{\r\n    ATON.fireEvent(\"NodeRequestCompleted\", url);\r\n    ATON._numReqLoad--;\r\n\r\n    if (ATON._numReqLoad <= 0){\r\n        ATON.fireEvent(\"AllNodeRequestsCompleted\");\r\n\r\n        // Bounds\r\n        let c = ATON._rootVisible.getBound().center;\r\n        let r = ATON._rootVisible.getBound().radius;\r\n\r\n        if (ATON._renderer.shadowMap.enabled){\r\n            ATON._rootVisible.traverse((o) => {\r\n                if (o.isMesh){\r\n                    o.castShadow = true;\r\n                    o.receiveShadow = true;\r\n                }\r\n            });\r\n\r\n            // TODO: experimental\r\n            if (ATON._bShadowsFixedBound){\r\n                ATON.SHADOWS_SIZE = r*1.5;\r\n\r\n                ATON._dMainL.shadow.camera.left   = -ATON.SHADOWS_SIZE;\r\n                ATON._dMainL.shadow.camera.right  = ATON.SHADOWS_SIZE;\r\n                ATON._dMainL.shadow.camera.bottom = -ATON.SHADOWS_SIZE;\r\n                ATON._dMainL.shadow.camera.top    = ATON.SHADOWS_SIZE;\r\n\r\n                ATON.updateDirShadows(c);\r\n            }\r\n        }\r\n\r\n        if (ATON._bAutoLP){\r\n            if (ATON._lps[0] === undefined) ATON.addLightProbe( new ATON.LightProbe().setPosition(c).setNear(r) );\r\n            else {\r\n                ATON._lps[0].setPosition(c.x, c.y, c.z).setNear(r);\r\n            }\r\n            console.log(\"Auto LP\");\r\n        }\r\n\r\n        ATON.getRootScene().assignLightProbesByProximity();\r\n\r\n        //ATON._bDirtyLP = true;\r\n\r\n        // FIXME: dirty\r\n        setTimeout( ()=>{\r\n            if (c && ATON._mMainPano) ATON._mMainPano.position.copy(c);\r\n            ATON.updateLightProbes();\r\n        }, 1000);\r\n\r\n    }\r\n};\r\n\r\n\r\nATON.initGraphs = ()=>{\r\n    // Global root\r\n    ATON._mainRoot = new THREE.Scene();\r\n    ATON._mainRoot.background = new THREE.Color( 0.7,0.7,0.7 );\r\n\r\n    // visible scene-graph\r\n    ATON._rootVisibleGlobal = new THREE.Group();\r\n    ATON._mainRoot.add(ATON._rootVisibleGlobal);\r\n\r\n    ATON._rootVisible = ATON.createSceneNode().setAsRoot();\r\n    ATON._rootVisibleGlobal.add(ATON._rootVisible);\r\n\r\n\r\n    // semantics graph\r\n    ATON._rootSem = ATON.createSemanticNode().setAsRoot();\r\n    ATON._mainRoot.add(ATON._rootSem);\r\n\r\n    // UI graph\r\n    ATON._rootUI = ATON.createUINode().setAsRoot();\r\n    ATON._mainRoot.add(ATON._rootUI);\r\n\r\n    // Uniform lighting\r\n    ATON.ambLight = new THREE.AmbientLight( new THREE.Color(1,1,1) /*ATON._mainRoot.background*/ );\r\n    ATON._rootVisibleGlobal.add(ATON.ambLight);\r\n};\r\n\r\nATON.setBackgroundColor = (bg)=>{\r\n    ATON._mainRoot.background = bg;\r\n};\r\n\r\n//==============================================================\r\n// LightProbes\r\n//==============================================================\r\nATON.setNeutralAmbientLight = (a)=>{\r\n    ATON.ambLight.color = new THREE.Color( a,a,a );\r\n};\r\n\r\n/**\r\nAdd a LightProbe to the scene\r\n@param {LightProbe} LP - the light probe being added \r\n*/\r\nATON.addLightProbe = (LP)=>{\r\n    if (ATON._lps.length === 0) ATON.setNeutralAmbientLight(0.1);\r\n\r\n    ATON._lps.push(LP);\r\n};\r\n\r\n/**\r\nUpdate all LightProbes in the scene\r\n*/\r\nATON.updateLightProbes = ()=>{\r\n    if (ATON._lps.length === 0) return;\r\n\r\n    for (let i in ATON._lps) ATON._lps[i].update();\r\n\r\n    // FIXME: indirect LP based on first LP (for now)\r\n    if (ATON._lps[0]){\r\n        if (ATON._indLP) ATON._mainRoot.remove(ATON._indLP);\r\n\r\n        ATON._indLP = THREE.LightProbeGenerator.fromCubeRenderTarget( ATON._renderer, ATON._lps[0]._prevCCtarget );\r\n        ATON._mainRoot.add( ATON._indLP );\r\n    }\r\n\r\n    //for (let i in ATON._lps) ATON._lps[i].update();\r\n\r\n    ATON._rootVisible.traverse((o) => {\r\n        let LP = o.userData.LP;\r\n        if (LP !== undefined && LP instanceof ATON.LightProbe){\r\n            o.material.envMap = LP.getEnvTex();\r\n            //o.material.combine = THREE.AddOperation;\r\n            //o.material.envMapIntensity = 5.0;\r\n        }\r\n    });\r\n\r\n    console.log(\"LPs updated.\");\r\n};\r\n\r\n//==============================================================\r\n// Environment\r\n//==============================================================\r\n\r\n/**\r\nSet the main panorama (360)\r\n@param {string} path - url to equirectangular image\r\n@example\r\nATON.setMainPanorama(\"my/pano.jpg\");\r\n*/\r\nATON.setMainPanorama = (path)=>{\r\n\r\n    let tpano = new THREE.TextureLoader().load(path);\r\n    tpano.encoding = THREE.sRGBEncoding;\r\n\r\n    if (ATON._matMainPano !== undefined){\r\n        ATON._matMainPano.map = tpano;\r\n        //ATON._matMainPano.emissive = tpano;\r\n        return;\r\n    }\r\n\r\n    // First time: create it\r\n    ATON._gMainPano = new THREE.SphereBufferGeometry( 1.0, 30,30 );\r\n\r\n    ATON._matMainPano = new THREE.MeshBasicMaterial({ \r\n        map: tpano, \r\n        //emissive: tpano,\r\n        //castShadow: false,\r\n        //receiveShadow: false,\r\n        fog: false,\r\n        depthTest: false,\r\n        depthWrite: false,\r\n        //depthFunc: THREE.AlwaysDepth,\r\n        //side: THREE.DoubleSide\r\n    });\r\n\r\n    ATON._mMainPano = new THREE.Mesh(ATON._gMainPano, ATON._matMainPano);\r\n    ATON._mMainPano.frustumCulled = false;\r\n    ATON.setMainPanoramaRadius(ATON.Nav.STD_FAR * 0.9);\r\n\r\n    ATON._mMainPano.onAfterRender = ()=>{\r\n        //if (ATON._numReqLoad > 0) return;\r\n        ATON._mMainPano.position.copy(ATON.Nav._currPOV.pos);\r\n    };\r\n\r\n    ATON._rootVisibleGlobal.add(ATON._mMainPano);\r\n};\r\n\r\n\r\nATON.setMainPanoramaRadius = (r)=>{\r\n    if (ATON._gMainPano === undefined) return;\r\n    ATON._gMainPano.scale( -r,r,r );\r\n};\r\n\r\n/**\r\nSet main panorama rotation (radians) around up vector\r\n@param {number} r - rotation\r\n@example\r\nATON.setMainPanoramaRotation(1.5);\r\n*/\r\nATON.setMainPanoramaRotation = (r)=>{\r\n    if (ATON._mMainPano === undefined) return;\r\n    ATON._mMainPano.rotation.set( 0,r,0 );\r\n};\r\n\r\n/**\r\nSet and activate main directional light\r\n@param {THREE.Vector3} v - light direction\r\n@example\r\nATON.setMainLightDirection( new THREE.Vector(0.1,-1.0,0.0) );\r\n*/\r\nATON.setMainLightDirection = (v)=>{\r\n\r\n    let d = v.clone();\r\n\r\n    d.x *= ATON.SHADOWS_FAR * 0.5;\r\n    d.y *= ATON.SHADOWS_FAR * 0.5;\r\n    d.z *= ATON.SHADOWS_FAR * 0.5;\r\n\r\n    if (ATON._dMainL === undefined){\r\n        ATON._dMainL = new THREE.DirectionalLight( new THREE.Color(1,1,1), 1.0 );\r\n        ATON._dMainL.castShadow = false;\r\n\r\n        ATON._dMainLtgt = new THREE.Object3D();\r\n        ATON._rootVisibleGlobal.add(ATON._dMainLtgt);\r\n        ATON._dMainL.target = ATON._dMainLtgt;\r\n\r\n        ATON.setNeutralAmbientLight(0.1);\r\n\r\n        ATON._rootVisibleGlobal.add(ATON._dMainL);\r\n        ATON._dMainLpos = new THREE.Vector3();\r\n    }\r\n\r\n    ATON._dMainLdir = d;\r\n\r\n    ATON._dMainL.position.set(-d.x,-d.y,-d.z);\r\n};\r\n\r\nATON.toggleShadows = (b)=>{\r\n    if (ATON._dMainL === undefined) return;\r\n\r\n    if (b){\r\n        ATON._dMainL.castShadow = true;\r\n        ATON._renderer.shadowMap.enabled = true;\r\n\r\n        //ATON._renderer.shadowMap.type    = THREE.BasicShadowMap;\r\n        //ATON._renderer.shadowMap.type    = THREE.PCFShadowMap;\r\n        ATON._renderer.shadowMap.type    = THREE.PCFSoftShadowMap; // bleeding\r\n        //ATON._renderer.shadowMap.type    = THREE.VSMShadowMap;\r\n\r\n        ATON._dMainL.shadow.mapSize.width  = ATON.SHADOWS_RES;\r\n        ATON._dMainL.shadow.mapSize.height = ATON.SHADOWS_RES;\r\n        ATON._dMainL.shadow.camera.near    = ATON.SHADOWS_NEAR;\r\n        ATON._dMainL.shadow.camera.far     = ATON.SHADOWS_FAR;\r\n        //ATON._dMainL.shadow.bias = 0.0001;\r\n\r\n        ATON._dMainL.shadow.camera.left   = -ATON.SHADOWS_SIZE;\r\n        ATON._dMainL.shadow.camera.right  = ATON.SHADOWS_SIZE;\r\n        ATON._dMainL.shadow.camera.bottom = -ATON.SHADOWS_SIZE;\r\n        ATON._dMainL.shadow.camera.top    = ATON.SHADOWS_SIZE;\r\n\r\n        ATON._rootVisible.traverse((o) => {\r\n            if (o.isMesh){\r\n                o.castShadow = true;\r\n                o.receiveShadow = true;\r\n            }\r\n        });\r\n\r\n        if (ATON._bShadowsFixedBound){\r\n            let c = ATON._rootVisible.getBound().center;\r\n            ATON.updateDirShadows(c);\r\n        }\r\n\r\n        console.log(\"Shadows ON\");\r\n    }\r\n    else {\r\n        ATON._dMainL.castShadow = false;\r\n        ATON._renderer.shadowMap.enabled = false;\r\n        console.log(\"Shadows OFF\");\r\n    }\r\n};\r\n\r\nATON.updateDirShadows = (p)=>{\r\n    if (ATON._dMainLdir === undefined) return;\r\n\r\n    if (p === undefined) p = ATON.Nav.getCurrentEyeLocation();\r\n\r\n    ATON._dMainLpos.x = p.x + (ATON.Nav._vDir.x * ATON.SHADOWS_SIZE);\r\n    ATON._dMainLpos.y = p.y + (ATON.Nav._vDir.y * ATON.SHADOWS_SIZE);\r\n    ATON._dMainLpos.z = p.z + (ATON.Nav._vDir.z * ATON.SHADOWS_SIZE);\r\n\r\n    ATON._dMainL.position.set(\r\n        ATON._dMainLpos.x - ATON._dMainLdir.x, \r\n        ATON._dMainLpos.y - ATON._dMainLdir.y, \r\n        ATON._dMainLpos.z - ATON._dMainLdir.z\r\n    );\r\n    ATON._dMainLtgt.position.copy(ATON._dMainLpos);\r\n};\r\n\r\nATON._updateEnvironment = ()=>{\r\n    if (!ATON._renderer.shadowMap.enabled) return;\r\n    if (ATON._bShadowsFixedBound) return;\r\n\r\n    ATON.updateDirShadows();\r\n};\r\n\r\n//==============================================================\r\n// Update routines\r\n//==============================================================\r\nATON._onFrame = ()=>{\r\n    // TODO: add pause render\r\n\r\n    let dt = ATON._clock.getDelta();\r\n\r\n    ATON._fps = 1.0 / dt;\r\n    ATON._dt  = dt;\r\n    \r\n    ATON.Nav._bControlChange = false;\r\n    ATON.Nav._controls.update(dt);\r\n\r\n    ATON._renderer.render( ATON._mainRoot, ATON.Nav._camera );\r\n\r\n/*\r\n    if (ATON.Nav._bControlChange){\r\n        }\r\n    else {\r\n        //ATON._handleScreenPick();\r\n        }\r\n*/\r\n\r\n    if (ATON.XR._bPresenting) ATON.XR.update();\r\n\r\n    // Spatial queries\r\n    ATON._handleQueries();\r\n\r\n    // Navigation system\r\n    ATON.Nav.update();\r\n\r\n    // VRoadcast\r\n    ATON.VRoadcast.update();\r\n\r\n    // UI\r\n    ATON.SUI.update();\r\n\r\n    // Environment/lighting\r\n    ATON._updateEnvironment();\r\n\r\n    ATON.fireEvent(\"frame\");\r\n};\r\n\r\nATON._updateScreenMove = (e)=>{\r\n    e.preventDefault();\r\n\r\n    if (ATON.Nav._mode === ATON.Nav.MODE_DEVORI){\r\n        ATON._screenPointerCoords.x = 0.0;\r\n        ATON._screenPointerCoords.y = 0.0;\r\n        return;\r\n    }\r\n\r\n\tATON._screenPointerCoords.x = ( e.clientX / window.innerWidth ) * 2 - 1;\r\n\tATON._screenPointerCoords.y = -( e.clientY / window.innerHeight ) * 2 + 1;\r\n\r\n    //console.log(ATON._screenPointerCoords);\r\n};\r\n\r\n//==============================================================\r\n// Query rountines\r\n//==============================================================\r\nATON._registerRCS = ()=>{\r\n    ATON._rcRR = 0;\r\n    ATON._rcHandlers = [];\r\n\r\n    ATON._rcHandlers.push( ATON._handleQueryScene );\r\n    ATON._rcHandlers.push( ATON._handleQuerySemantics );\r\n    ATON._rcHandlers.push( ATON._handleQueryUI );\r\n};\r\n\r\nATON._handleQueries = ()=>{\r\n    if (ATON._bPauseQuery) return;\r\n    if (ATON._numReqLoad > 0) return;\r\n    if (ATON.Nav.isTransitioning()) return; // do not query during POV transitions\r\n    //if (ATON.device.isMobile || !ATON.XR.isPresenting()) return; \r\n\r\n    // round-robin\r\n    //ATON._rcRR = (ATON._rcRR+1) % 2;\r\n    //ATON._rcHandlers[ATON._rcRR]();\r\n\r\n    ATON._handleQueryScene();\r\n    ATON._handleQuerySemantics();\r\n    ATON._handleQueryUI();\r\n};\r\n\r\n// Ray casting visible scenegraph\r\nATON._handleQueryScene = ()=>{\r\n    if (ATON.XR.isPresenting()){\r\n        ATON._rcScene.set( ATON.XR.getControllerWorldLocation(0), ATON.XR.getControllerWorldDirection(0) );\r\n    }\r\n    else \r\n        ATON._rcScene.setFromCamera( ATON._screenPointerCoords, ATON.Nav._camera );\r\n\r\n    ATON._hitsScene = [];\r\n    //ATON._rcScene.intersectObjects( ATON._rootVisible.children, true, ATON._hitsScene );\r\n    ATON._rcScene.intersectObjects( ATON._mainRoot.children, true, ATON._hitsScene );\r\n\r\n    //ATON._hitsOperator(ATON._hits);\r\n\r\n    // Process hits\r\n    let hitsnum = ATON._hitsScene.length;\r\n    if (hitsnum <= 0){\r\n        ATON._queryDataScene = undefined;\r\n        return;\r\n    }\r\n\r\n    let h = ATON._hitsScene[0];\r\n\r\n    ATON._queryDataScene = {};\r\n    ATON._queryDataScene.p = h.point;\r\n    ATON._queryDataScene.d = h.distance;\r\n    ATON._queryDataScene.o = h.object;\r\n    \r\n    //console.log(ATON._queryDataScene.o);\r\n\r\n    // Normals\r\n    if (!ATON._bQueryNormals) return;\r\n    if (h.face === null) return;\r\n    if (h.face.normal === undefined) return;\r\n\r\n    ATON._queryDataScene.matrixWorld = new THREE.Matrix3().getNormalMatrix( h.object.matrixWorld );\r\n    ATON._queryDataScene.n = h.face.normal.clone().applyMatrix3( ATON._queryDataScene.matrixWorld ).normalize();\r\n};\r\n\r\n/**\r\nGet location of current queried point (if any) on visible scene.\r\nIf no point is queried, return undefined\r\n@returns {THREE.Vector3}\r\n@example\r\nlet p = ATON.getSceneQueriedPoint()\r\n*/\r\nATON.getSceneQueriedPoint = ()=>{\r\n    if (ATON._queryDataScene === undefined) return undefined;\r\n    return ATON._queryDataScene.p;\r\n};\r\n\r\n/**\r\nGet distance to queried location (if any) on visible scene.\r\nIf no point is queried, return undefined\r\n@returns {number}\r\n@example\r\nlet d = ATON.getSceneQueriedDistance()\r\n*/\r\nATON.getSceneQueriedDistance = ()=>{\r\n    if (ATON._queryDataScene === undefined) return undefined;\r\n    return ATON._queryDataScene.d;\r\n};\r\n\r\n/**\r\nGet queried location normal (if any) on visible scene.\r\nIf no point is queried, return undefined\r\n@returns {THREE.Vector3}\r\n@example\r\nlet n = ATON.getSceneQueriedNormal()\r\n*/\r\nATON.getSceneQueriedNormal = ()=>{\r\n    if (ATON._queryDataScene === undefined) return undefined;\r\n    return ATON._queryDataScene.n;\r\n};\r\n\r\n\r\n// Ray casting semantic-graph\r\nATON._handleQuerySemantics = ()=>{\r\n    if (ATON.XR.isPresenting()){\r\n        ATON._rcSemantics.set( ATON.XR.getControllerWorldLocation(0), ATON.XR.getControllerWorldDirection(0) );\r\n    }\r\n    else \r\n        ATON._rcSemantics.setFromCamera( ATON._screenPointerCoords, ATON.Nav._camera );\r\n\r\n    ATON._hitsSem = [];\r\n    ATON._rcSemantics.intersectObjects( ATON._mainRoot.children, true, ATON._hitsSem );\r\n\r\n    // Process hits\r\n    let hitsnum = ATON._hitsSem.length;\r\n    if (hitsnum <= 0){\r\n        ATON._queryDataSem = undefined;\r\n\r\n        if (ATON._hoveredSemNode){\r\n            ATON.fireEvent(\"SemanticNodeLeave\", ATON._hoveredSemNode);\r\n            let S = ATON.getSemanticNode(ATON._hoveredSemNode);\r\n            if (S && S.onLeave) S.onLeave();\r\n        }\r\n        \r\n        ATON._hoveredSemNode = undefined;\r\n        return;\r\n    }\r\n\r\n    let h = ATON._hitsSem[0];\r\n\r\n    // Occlusion\r\n    if (ATON._bQuerySemOcclusion && ATON._queryDataScene){\r\n        if (ATON._queryDataScene.d < h.distance){\r\n\r\n            ATON._queryDataSem = undefined;\r\n\r\n            if (ATON._hoveredSemNode){\r\n                ATON.fireEvent(\"SemanticNodeLeave\", ATON._hoveredSemNode);\r\n                let S = ATON.getSemanticNode(ATON._hoveredSemNode);\r\n                if (S && S.onLeave) S.onLeave();\r\n            }\r\n\r\n            ATON._hoveredSemNode = undefined;\r\n            return;\r\n        }\r\n    }\r\n\r\n    ATON._queryDataSem = {};\r\n    ATON._queryDataSem.p = h.point;\r\n    ATON._queryDataSem.d = h.distance;\r\n    ATON._queryDataSem.o = h.object;\r\n    ATON._queryDataSem.list = []; // holds sem-nodes parental list\r\n\r\n    // traverse parents\r\n    let L = ATON._queryDataSem.list;\r\n    let sp = h.object.parent;\r\n    while (sp){\r\n        if (sp.nid && sp.nid !== ATON.ROOT_NID) L.push(sp.nid);\r\n        sp = sp.parent;\r\n    }\r\n\r\n    let hsn = L[0];\r\n    if (hsn){\r\n        if (ATON._hoveredSemNode !== hsn){\r\n            if (ATON._hoveredSemNode){\r\n                ATON.fireEvent(\"SemanticNodeLeave\", ATON._hoveredSemNode);\r\n                let S = ATON.getSemanticNode(ATON._hoveredSemNode);\r\n                if (S && S.onLeave) S.onLeave();\r\n            }\r\n\r\n            ATON._hoveredSemNode = hsn;\r\n            ATON.fireEvent(\"SemanticNodeHover\", hsn);\r\n            let S = ATON.getSemanticNode(hsn);\r\n            if (S && S.onHover) S.onHover();\r\n        }\r\n    }\r\n\r\n    //console.log(L);\r\n};\r\n\r\nATON._handleQueryUI = ()=>{\r\n    if (ATON.XR.isPresenting()){\r\n        ATON._rcUI.set( ATON.XR.getControllerWorldLocation(0), ATON.XR.getControllerWorldDirection(0) );\r\n    }\r\n    else \r\n        ATON._rcUI.setFromCamera( ATON._screenPointerCoords, ATON.Nav._camera );\r\n\r\n    ATON._hitsUI = [];\r\n    ATON._rcUI.intersectObjects( ATON._mainRoot.children, true, ATON._hitsUI );\r\n\r\n    // Process hits\r\n    let hitsnum = ATON._hitsUI.length;\r\n    if (hitsnum <= 0){\r\n        ATON._queryDataUI = undefined;\r\n\r\n        if (ATON._hoveredUI){\r\n            ATON.fireEvent(\"UINodeLeave\", ATON._hoveredUI);\r\n            let S = ATON.getUINode(ATON._hoveredUI);\r\n            if (S && S.onLeave) S.onLeave();\r\n        }\r\n        \r\n        ATON._hoveredUI = undefined;\r\n        return;\r\n    }\r\n\r\n    let h = ATON._hitsUI[0];\r\n\r\n    // Occlusion\r\n    if (ATON._queryDataScene){\r\n        if (ATON._queryDataScene.d < h.distance){\r\n\r\n            ATON._queryDataUI = undefined;\r\n\r\n            if (ATON._hoveredUI){\r\n                ATON.fireEvent(\"SemanticNodeLeave\", ATON._hoveredUI);\r\n                let S = ATON.getUINode(ATON._hoveredUI);\r\n                if (S && S.onLeave) S.onLeave();\r\n            }\r\n\r\n            ATON._hoveredUI = undefined;\r\n            return;\r\n        }\r\n    }\r\n\r\n    ATON._queryDataUI = {};\r\n    ATON._queryDataUI.p = h.point;\r\n    ATON._queryDataUI.d = h.distance;\r\n    ATON._queryDataUI.o = h.object;\r\n    ATON._queryDataUI.list = []; // holds ui-nodes parental list\r\n\r\n    // traverse parents\r\n    let L = ATON._queryDataUI.list;\r\n    let sp = h.object.parent;\r\n    while (sp){\r\n        if (sp.nid && sp.nid !== ATON.ROOT_NID) L.push(sp.nid);\r\n        sp = sp.parent;\r\n    }\r\n\r\n    let hui = L[0];\r\n    if (hui){\r\n        if (ATON._hoveredUI !== hui){\r\n            if (ATON._hoveredUI){\r\n                ATON.fireEvent(\"UINodeLeave\", ATON._hoveredUI);\r\n                let S = ATON.getUINode(ATON._hoveredUI);\r\n                if (S && S.onLeave) S.onLeave();\r\n            }\r\n\r\n            ATON._hoveredUI = hui;\r\n            ATON.fireEvent(\"UINodeHover\", hui);\r\n            let S = ATON.getUINode(hui);\r\n            if (S && S.onHover) S.onHover();\r\n        }\r\n    }\r\n};\r\n\r\n\r\nexport default ATON;\r\n\r\n\r\n"]}