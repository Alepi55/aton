{"version":3,"sources":["ATON.node.js","ATON.pov.js","ATON.lightprobe.js","ATON.eventhub.js","ATON.mathub.js","ATON.utils.js","ATON.scenehub.js","ATON.audiohub.js","ATON.nav.js","ATON.xr.js","ATON.sui.button.js","ATON.sui.label.js","ATON.sui.js","ATON.avatar.js","ATON.vroadcast.js","ATON.semfactory.js","ATON.fe.js","ATON.mediarec.js","ATON.js"],"names":["Node","THREE","Group","id","type","traverse","o","isMesh","geometry","LP","userData","undefined","update","material","envMap","getEnvTex","ATON","NTYPES","SCENE","bPickable","_rootG","_rootVisible","_nodes","snodes","SEM","_rootSem","semnodes","UI","_rootUI","uinodes","as","kwords","_bCloneOnLoadHit","castShadow","receiveShadow","onHover","onLeave","onSelect","ROOT_NID","nid","name","b","kw","K","split","k","trim","length","c","children","C","addKeywords","s","description","au","audio","visible","layers","disable","enable","hide","show","enablePicking","disablePicking","M","cMat","matSTD","matHL","setMaterial","f","opacity","envtex","Utils","assignLightProbeToMesh","_lps","Vector3","cLP","Box3","setFromObject","getCenter","mdist","i","d","distanceToSquared","pos","clone","p","parent","removeChild","dispose","remove","num","node","N","add","bb","bs","Sphere","getBoundingSphere","x","y","z","position","copy","set","sx","sy","sz","scale","rx","ry","rz","rotation","quaternion","Nav","_qOri","url","onComplete","_assetsManager","then","modelVisitor","console","log","_assetReqNew","P","Promise","resolve","reject","_aLoader","load","data","model","scene","_assetReqComplete","err","filename","exportNode","h","POV","target","up","STD_UPVECTOR","fov","STD_FOV","nextPOV","prevPOV","povlist","pov","LightProbe","res","near","far","_res","_near","_far","STD_FAR","_envtex","_prevCCtarget","_pmremGenerator","PMREMGenerator","_renderer","CCtarget","WebGLCubeRenderTarget","format","RGBEFormat","generateMipmaps","minFilter","LinearMipmapLinearFilter","encoding","sRGBEncoding","CC","CubeCamera","_rootVisibleGlobal","texture","EventHub","evLocal","evNetwork","on","fireEvent","clearEventHandlers","evtname","ehList","handler","handlerLocal","handlerNetwork","evhLocal","push","VRoadcast","bReplicate","executeHandlers","MatHub","materials","colors","addDefaults","_loader","MaterialLoader","white","Color","black","green","yellow","red","blue","orange","sem","darksem","fullyTransparent","MeshBasicMaterial","transparent","depthWrite","selector","color","flatShading","controllerRay","measurement","depthTest","semanticShape","semanticShapeHL","semanticShapeEdit","mat","jsonfile","addMaterial","device","geomUnitSphere","SphereBufferGeometry","exporterGLTF","exporterOBJ","_dlink","document","createElement","style","display","body","appendChild","textureLoader","TextureLoader","prefix","Math","random","toString","substr","window","location","href","isSecureContext","isMobile","test","navigator","userAgent","xrSupported","xr","isSessionSupported","filepath","lastIndexOf","toLowerCase","index","substring","startsWith","endpoint","obj","onReceive","onFail","$","ajax","xhrFields","withCredentials","JSON","stringify","contentType","dataType","success","fail","object","updateMatrixWorld","g","applyMatrix4","matrixWorld","toNonIndexed","mergedGeometries","BufferGeometryUtils","mergeBufferGeometries","mergedGeometry","mergeVertices","center","group","mesh","Mesh","parentNode","computeBoundsTree","map","anisotropy","_maxAnisotropy","magFilter","LinearFilter","v","prec","parseFloat","toPrecision","blob","URL","createObjectURL","download","click","str","downloadBlob","Blob","jsonobj","downloadText","buffer","ext","getFileExtension","bBin","opts","binary","GLTFExporter","parse","output","ArrayBuffer","downloadArrayBuffer","downloadJSONobj","OBJExporter","size","img","Image","_camera","aspect","updateProjectionMatrix","setSize","render","_mainRoot","b64img","domElement","toDataURL","src","replace","_onResize","noLP","BoxBufferGeometry","MeshStandardMaterial","PATH_RES","tex","createSceneNode","metalness","metalnessMap","roughnessMap","normalMap","dx","dz","PlaneBufferGeometry","rotateX","PI","SceneHub","currID","currData","_bEdit","_bLoading","initBaseParsers","reqpath","sid","oncomplete","getJSON","parseScene","sobj","_jsonParsers","getSemanticNode","getSceneNode","child","nodes","edges","n","semid","S","SL","sphere","CL","semesh","_convexPoints","environment","env","pano","mainpano","setMainPanorama","PATH_COLLECTION","setMainPanoramaRotation","L","mainlight","direction","setMainLightDirection","_dMainL","intensity","shadows","toggleShadows","lps","lightprobes","auto","setAutoLP","navmode","setNavMode","measurements","m","measure","points","A","B","SUI","addMeasurementPoint","viewpoints","povs","setHomePOV","setPosition","setTarget","setFOV","scenegraph","sg","G","getOrCreateSceneNode","removeChildren","urls","Array","isArray","forEach","u","attachTo","shadowcast","setShadowCast","shadowreceive","toYup","setYup","keywords","transform","setRotation","setScale","parid","childid","semanticgraph","getOrCreateSemanticNode","createSemanticNode","setDescription","setAudio","spheres","SemFactory","createSphere","convexshapes","createConvexShape","parser","patch","mode","MODE_ADD","O","MODE_DEL","jstr","PATH_RESTAPI","r","AudioHub","_listener","AudioListener","AudioLoader","COSINOIDAL_DIST","cos","POVtransitionDuration","STD_POV_TRANS_DURATION","init","_mode","_rotSpeedOrbit","_rotSpeedFP","_inertia","_bControl","_bInteracting","_prevMode","setOrbitControl","_currPOV","_fromPOV","_reqPOV","homePOV","_tPOVcall","_tPOVprogress","_vDir","Quaternion","_motionAmt","_motionDir","getCurrentEyeLocation","getCurrentDirection","copyCurrentPOV","addPOV","isTransitioning","setUserControl","_controls","enabled","_cOrbit","_cFirstPerson","toggleUserControl","isUserControlEnabled","isOrbit","MODE_ORBIT","isFirstPerson","MODE_FP","isDevOri","MODE_DEVORI","setFirstPersonControl","setDeviceOrientationControl","restorePreviousNavMode","XR","isPresenting","_camOrbit","PerspectiveCamera","innerWidth","innerHeight","STD_NEAR","enableAll","OrbitControls","rotateSpeed","enablePan","enableDamping","dampingFactor","screenSpacePanning","enableZoom","minDistance","maxDistance","addEventListener","syncCurrCamera","_camFP","_screenPointerCoords","_cDevOri","_camDevOri","DeviceOrientationControls","alphaOffset","setMotionAmount","setMotionDirection","stop","cam","getFOV","syncCurrPOV","getCamera","getWorldPosition","getWorldQuaternion","getWorldDirection","ctrl","handlePOV","handleXRtransition","handlePOVtransition","handleMotion","controller0","negate","fv","multiplyScalar","_dt","_clock","elapsedTime","lerpVectors","MathUtils","lerp","_currPos","_fromPos","_reqPos","tgt","subVectors","normalize","FP_EPS","requestPOV","duration","requestPOVbyBound","T","E","radius","requestPOVbyNode","getBound","requestRetarget","point","normal","distanceTo","computeDefaultHome","dv","sceneBS","getRootScene","eye","computeAndRequestDefaultHome","requestHome","scope","reorder","deviceOrientation","screenOrientation","absolute","alphaOffsetDevice","alphaOffsetScreen","onDeviceOrientationChangeEvent","zee","euler","q0","q1","event","onDeviceOrientationAbsoluteChangeEvent","onScreenOrientationChangeEvent","orientation","setObjectQuaternion","Euler","sqrt","alpha","beta","gamma","orient","setFromEuler","multiply","setFromAxisAngle","connect","disconnect","removeEventListener","getDirection","degToRad","iOSOrientationPermission","DeviceOrientationEvent","requestPermission","permissionState","catch","error","webkitCompassHeading","getDirectionMap","setReferenceSpaceType","setFramebufferScaleFactor","_bPresenting","currSession","_sessionType","rig","gControllers","controller0pos","controller1pos","controller0dir","controller1dir","_lastPosR","_lastPosL","gpad0","gpad1","_urlHand","HAND_R","defaultSelectHandler","uid","rh","getUINode","lh","avMats","avatars","am","_queryDataScene","userHeight","STD_TELEP_DURATION","teleportOnQueriedPoint","FE","playAudioFromSemanticNode","_hoveredSemNode","_hoveredUI","H","_handleUISelection","setupControllerUI","controller1","HAND_L","session","onSessionEnded","MediaRec","stopMediaStreaming","setSession","C0","getController","C1","e","handedness","_setupControllerL","_setupControllerR","setRefSpaceLocation","requestSession","optionalFeatures","onSessionStarted","end","raytick","rhand","lhand","createUINode","CylinderBufferGeometry","translate","raylen","getControllerGrip","prev","lengthSq","_deltaMotionController","Button","uiid","baseColor","switchColor","_bSwitched","container","ThreeMeshUI","Block","width","height","padding","borderRadius","backgroundColor","backgroundOpacity","fontFamily","PATH_FONT_JSON","fontTexture","PATH_FONT_TEX","justifyContent","alignContent","uiText","Text","content","fontSize","fontColor","_trigger","PlaneGeometry","STD_BTN_SIZE","text","Label","mainSelector","getMaterial","setSelectorRadius","gMeasures","_prevMPoint","_measLabels","gPoints","buildInfoNode","bShowInfo","_labelScale","_labelScaleVR","infoNodeText","_selectorRad","getSelectorRadius","setSelectorModel","path","bUseStdMat","infoNode","attachToRoot","infoContainer","getInfoNode","createToolbar","buttonlist","cont","button","mstr","max","gLine","BufferGeometry","setFromPoints","Line","setBaseColor","setTextColor","setText","R","_updateMeasurements","ml","orientToCamera","_bPauseQuery","_queryDataSem","_bStreamFocus","ss","Avatar","userid","username","message","_auTalk","_bPlayingAudio","_auChunks","_tStateCall","_tProgress","_tFocCall","_currFocusPos","_tgtFocusPos","_currState","_tgtState","realize","avaMats","SphereGeometry","usermaterial","getAvatarMaterialByUID","smesh","usermeshnode","setCloneOnLoadHit","userauinode","Sprite","uspritemats","userfpnode","ufocmats","userlabelnode","labelcontainer","usernametext","ucolors","usermessagetext","_focNodes","focGroup","msg","vol","fp","_tgtFocusRad","D","USER_STATE_FREQ","t","cs","ts","slerp","handleStateTransition","handleFocusTransition","avol","shift","Audio","play","onended","setTalkVolume","address","origin","initMaterials","socket","_connected","_username","_numUsers","avatarList","avaGroup","setInterval","sendState","_lastStateSent","enableChatLog","_elChat","getNumUsers","ucolorsdark","ucolorhex","MM","texAUI","smat","SpriteMaterial","sizeAttenuation","texFocP","sock","emit","REPLICATED_EVT","evhNetwork","isConnected","requestSceneEnter","sceneid","protocol","secure","rejectUnauthorized","io","connected","_registerSocketHandlers","_onConnected","setUsername","append","setMessage","_msg","scrollTop","scrollHeight","touchAvatar","decodeState","requestStateTransition","requestFocus","uname","getUsername","audioURL","setBuffer","setLoop","encodeState","Float32Array","binData","Int8Array","w","a8","a","setFocusStreaming","cpov","getSceneQueriedPoint","fx","fy","fz","lastPos","lastOri","dPos","dOri","angleTo","THRES_STATE_POS","THRES_STATE_ORI","getAvatar","loadRepresentation","clearAllAvatars","bConvexBuilding","convexPoints","convexNode","currConvexMesh","currSemNode","currMaterial","_numShapes","numPoints","geom","ConvexBufferGeometry","currSemesh","setVectorPrecision","setDefaultAndHighlightMaterials","offset","addConvexPoint","Object3D","PATH_RES_ICONS","_bPopup","bPopupBlurBG","_userAuth","_auSemNode","_auSemNodePlaying","_bReqHome","urlParams","URLSearchParams","search","_uiSetupBase","ddens","get","setDefaultPixelDensity","_kModShift","reqstr","PATH_RESTAPI_SCENE","uiAddButton","toggleFullScreen","isConnectionSecure","toggle","popupClose","html","idcontainer","icon","onPress","iconurl","iconid","endsWith","slice","htmlcode","addClass","removeClass","uiSwitchButton","isAudioRecording","startMediaStreaming","popupQR","screenfull","isFullscreen","popupVRC","checkAuth","attr","popupUser","inputid","value","val","regReplace","RegExp","auLib","switch","loop","getAudio","htmlcontent","cssClasses","clstr","htcont","stopPropagation","fadeIn","setPixelRatio","resetPixelDensity","fadeOut","focusOn3DView","popupShow","QRCode","getElementById","cover","takeScreenshot","parseInt","postJSON","keypress","keycode","keyCode","which","setEditMode","goToURL","password","_bAudioRecording","_bStreaming","recorder","reset","mediaDevices","_ds","_streamChunk","auStreamInterval","getUserMedia","video","channelCount","echoCancellation","stream","RecordRTC","mimeType","auType","bitsPerSecond","auBitsPerSecond","audioBitsPerSecond","sampleRate","desiredSampRate","disableLogs","numberOfAudioChannels","onFinish","stopRecording","getDataURL","b64","compress","rblob","_auAVGvolume","realizeAudioRecorder","startRecording","getBlob","reader","FileReader","readAsDataURL","onloadend","base64data","result","_stopRecAndSend","RAD2DEG","DEG2RAD","PATH_MODS","PATH_THREE","PATH_DRACO_LIB","PATH_BASIS_LIB","PATH_MODELS","PATH_SCENES","SHADOWS_NEAR","SHADOWS_FAR","SHADOWS_SIZE","SHADOWS_RES","setPathCollection","setPathScenes","_setupBaseListeners","el","_updateScreenMove","_onMouseWheel","Hammer","srcEvent","_handleQueries","defaultDoubleTapFromScreenCoords","_kModCtrl","key","preventDefault","deltaY","focus","_handleQueryScene","bFPtrans","currDir","feye","ftgt","hsn","profileDevice","Clock","WebGLRenderer","antialias","preserveDrawingBuffer","_stdpxd","outputEncoding","setAnimationLoop","_onFrame","capabilities","getMaxAnisotropy","Cache","canvas","outline","border","GLTFLoader","_dracoLoader","DRACOLoader","setDecoderPath","setDRACOLoader","_numReqLoad","_bAutoLP","_bShadowsFixedBound","initGraphs","_queryDataUI","_bQuerySemOcclusion","_bQueryNormals","Vector2","_rcScene","Raycaster","_rcSemantics","_rcUI","renderPause","renderResume","_setupLoadManager","_loadManager","LoadingManager","onStart","itemsLoaded","itemsTotal","onLoad","onProgress","onError","getRootSemantics","getRootUI","shadowMap","shadow","camera","left","right","bottom","top","updateDirShadows","addLightProbe","setNear","assignLightProbesByProximity","setTimeout","_mMainPano","updateLightProbes","Scene","background","setAsRoot","ambLight","AmbientLight","setBackgroundColor","bg","setNeutralAmbientLight","_indLP","LightProbeGenerator","fromCubeRenderTarget","tpano","_matMainPano","_gMainPano","fog","frustumCulled","setMainPanoramaRadius","onAfterRender","DirectionalLight","_dMainLtgt","_dMainLpos","_dMainLdir","PCFSoftShadowMap","mapSize","_updateEnvironment","dt","getDelta","_fps","_bControlChange","clientX","clientY","_registerRCS","_rcRR","_rcHandlers","_handleQuerySemantics","_handleQueryUI","hitsnum","getControllerWorldLocation","getControllerWorldDirection","setFromCamera","_hitsScene","intersectObjects","distance","face","Matrix3","getNormalMatrix","applyMatrix3","getSceneQueriedDistance","getSceneQueriedNormal","_hitsSem","list","sp","_hitsUI","hui"],"mappings":"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","file":"ATON.min.js","sourceRoot":"..\\src","sourcesContent":["/*\r\n    ATON Node Class\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n//import Period from \"./ATON.period.js\";\r\n\r\n\r\n/**\r\nClass representing an ATON node.\r\nConstructor allows to create different types (scene nodes, semantic nodes and UI nodes)\r\n@class Node\r\n@example \r\nlet myNode = new ATON.Node(\"someID\")\r\n*/\r\nclass Node extends THREE.Group {\r\n\r\nconstructor(id, type){\r\n    super();\r\n\r\n    this.type = type? type : ATON.NTYPES.SCENE;\r\n    \r\n    this.bPickable = true;\r\n\r\n    if (this.type === ATON.NTYPES.SCENE){\r\n        this._rootG = ATON._rootVisible;\r\n        this._nodes = ATON.snodes;\r\n        //this.period = undefined; // TODO: assign period object (read-only, centralized) - NOT USED FOR NOW\r\n    }\r\n    if (this.type === ATON.NTYPES.SEM){\r\n        this._rootG = ATON._rootSem;\r\n        this._nodes = ATON.semnodes;\r\n        //this.period = undefined;\r\n    }\r\n\r\n    if (this.type === ATON.NTYPES.UI){\r\n        this._rootG = ATON._rootUI;\r\n        this._nodes = ATON.uinodes;\r\n    }\r\n\r\n    // Register\r\n    this.as(id);\r\n\r\n    this.kwords = undefined;\r\n\r\n    this._bCloneOnLoadHit = true;\r\n\r\n    // Shadows\r\n    this.castShadow    = false;\r\n    this.receiveShadow = false;\r\n\r\n    // Local handlers\r\n    this.onHover  = undefined;\r\n    this.onLeave  = undefined;\r\n    this.onSelect = undefined;\r\n}\r\n\r\n/**\r\n(Re)assign node ID\r\n@param {string} id - the new ID\r\n@example\r\nmyNode.as(\"newID\")\r\n*/\r\nas(id){\r\n    if (id === undefined) return;\r\n    if (id === ATON.ROOT_NID) return;\r\n\r\n    this._nodes[id] = this;\r\n    this.nid  = id;\r\n    this.name = id;\r\n\r\n    return this;\r\n}\r\n\r\nsetAsRoot(){\r\n    this._nodes[ATON.ROOT_NID] = this;\r\n    this.nid = ATON.ROOT_NID;\r\n\r\n    return this;\r\n}\r\n\r\nsetCloneOnLoadHit(b){\r\n    this._bCloneOnLoadHit = b;\r\n    return this;\r\n}\r\n\r\n/**\r\nAdd keyword(s) to this node. Keywords are also recursively added into the sub-graph\r\n@param {string} kw - the keyword or comma-separated list of keywords\r\n@example\r\nmyNode.addKeywords(\"heritage,reconstruction\");\r\n*/\r\naddKeywords(kw){\r\n    let K = kw.split(\",\");\r\n\r\n    if (this.kwords === undefined) this.kwords = {};\r\n    for (let k in K){\r\n        let kw = K[k].trim();\r\n        if (kw.length > 0) this.kwords[kw] = true;\r\n    }\r\n\r\n    // recurse into ATON nodes\r\n    for (let c in this.children){\r\n        let C = this.children[c];\r\n        if (C.type !== undefined) C.addKeywords(kw);\r\n    }\r\n\r\n    return this;\r\n}\r\n\r\n/**\r\nReturns true if this node has specific keyword\r\n@param {string} kw - the keyword\r\n@returns {boolean}\r\n@example\r\nif (myNode.hasKeyword(\"heritage\")){ ... }\r\n*/\r\nhasKeyword(kw){\r\n    if (this.kwords === undefined) return;\r\n    return (this.kwords[kw] !== undefined);\r\n}\r\n\r\n/**\r\nSet custom description (string) to the node\r\n@param {string} s - content\r\n@example\r\nmyNode.setDescription(\"This is a small description\");\r\n*/\r\nsetDescription(s){\r\n    this.userData.description = s;\r\n    return this;\r\n}\r\n\r\n/**\r\nGet node description (string) if any\r\n@returns {string}\r\n@example\r\nlet desc = myNode.getDescription();\r\n*/\r\ngetDescription(){\r\n    return this.userData.description;\r\n}\r\n\r\nsetAudio(au){\r\n    this.userData.audio = au;\r\n    return this;\r\n}\r\n\r\ngetAudio(){\r\n    return this.userData.audio;\r\n}\r\n\r\n/**\r\nHide this node (and sub-graph), also invisible to queries (ray casting, picking)\r\n@example\r\nmyNode.hide()\r\n*/\r\nhide(){ \r\n    this.visible = false;\r\n    this.traverse((o) => { o.layers.disable(this.type); });\r\n}\r\n\r\n/**\r\nShow this node (and sub-graph). If pickable, becomes sensible to queries (ray casting)\r\n@example\r\nmyNode.show()\r\n*/\r\nshow(){ \r\n    this.visible = true;\r\n    if (this.bPickable) this.traverse((o) => { o.layers.enable(this.type); });\r\n    return this;\r\n}\r\n\r\n/**\r\nToggle node visibility. If visible, becomes invisible, and viceversa.\r\n@example\r\nmyNode.toggle()\r\n*/\r\ntoggle(b){\r\n    if (b === undefined){\r\n        if (this.visible) return this.hide();\r\n        else return this.show();\r\n    }\r\n\r\n    if (b) return this.show();\r\n    else return this.hide();\r\n}\r\n\r\n/**\r\nDisable this node for runtime queries (ray casters). Useful for instance on vegetation, etc...\r\n@example\r\nmyNode.load(\"somevegetation.gltf\").disablePicking()\r\n*/\r\ndisablePicking(){\r\n    this.bPickable = false;\r\n    this.traverse((o) => { o.layers.disable(this.type); });\r\n    return this;  \r\n}\r\n\r\n/**\r\nEnable this node for runtime queries (ray casters)\r\n@example\r\nmyNode.enablePicking()\r\n*/\r\nenablePicking(){\r\n    this.bPickable = true;\r\n    this.traverse((o) => { o.layers.enable(this.type); });\r\n    return this;\r\n}\r\n\r\nsetPickable(b){\r\n    if (b) this.enablePicking();\r\n    else this.disablePicking();\r\n\r\n    return this;\r\n}\r\n\r\n/**\r\nSet cascading material. Note this applies to this node and all children (even all those still loading)\r\n@param {THREE.Material} M - the Material\r\n@example\r\nmyNode.setMaterial( new THREE.MeshBasicMaterial({ transparent: true, opacity: 0.2, wireframe: true }) )\r\n*/\r\nsetMaterial(M){\r\n    this.userData.cMat = M;\r\n\r\n    this.traverse((o) => {\r\n        if (o.isMesh){\r\n            this.userData.cMat = M;\r\n            o.material = M;\r\n            //o.material.needsUpdate = true;\r\n            }\r\n    });\r\n\r\n    return this;\r\n}\r\n\r\n/** \r\nGet cascading material\r\n@returns {THREE.Material}\r\n*/\r\ngetMaterial(){\r\n    return this.userData.cMat;\r\n}\r\n\r\n// Set default and highlight materials\r\nsetDefaultAndHighlightMaterials(matSTD, matHL){\r\n    this.userData.matSTD = matSTD;\r\n    this.userData.matHL  = matHL;\r\n\r\n    return this;\r\n}\r\nhighlight(){\r\n    if (this.userData.matHL) this.setMaterial(this.userData.matHL);\r\n    return this;\r\n}\r\nrestoreDefaultMaterial(){\r\n    if (this.userData.matSTD) this.setMaterial(this.userData.matSTD);\r\n    return this;\r\n}\r\n\r\n// Set cascading opacity\r\nsetOpacity(f){\r\n    this.traverse((o) => {\r\n        if (o.isMesh){\r\n            o.material.opacity = f;\r\n            //o.material.needsUpdate = true;\r\n        }\r\n    });\r\n\r\n    return this;\r\n}\r\n\r\n// FIXME: not working\r\nsetShadowCast(b){\r\n    this.castShadow = b;\r\n\r\n    this.traverse((o) => {\r\n        if (o.isMesh){\r\n            o.castShadow = b;\r\n        }\r\n    });\r\n\r\n    return this;\r\n};\r\nsetShadowReceive(b){\r\n    this.receiveShadow = b;\r\n\r\n    this.traverse((o) => {\r\n        if (o.isMesh){\r\n            o.receiveShadow = b;\r\n        }\r\n    });\r\n\r\n    return this;\r\n};\r\n\r\nsetEnvMap(envtex){\r\n    this.traverse((o) => {\r\n        if (o.isMesh){\r\n\t\t\to.material.envMap  = envtex;\r\n\t\t\t//o.material.combine = THREE.MultiplyOperation;\r\n            //o.material.needsUpdate = true;\r\n        }\r\n    });\r\n\r\n    return this;\r\n}\r\n\r\nassignLightProbe(LP){\r\n    this.traverse((o) => {\r\n        if (o.isMesh && o.geometry) ATON.Utils.assignLightProbeToMesh(LP, o);\r\n    });\r\n\r\n    return this;\r\n}\r\n\r\n// (re)assign LPs for each mesh depending on proximity\r\nassignLightProbesByProximity(){\r\n    if (ATON._lps.length === 0) return this;\r\n\r\n    this.traverse((o) => {\r\n        if (o.isMesh && o.geometry){\r\n            let c = new THREE.Vector3();\r\n            let bbox = new THREE.Box3().setFromObject(o).getCenter(c);\r\n\r\n            let cLP   = undefined;\r\n            let mdist = undefined;\r\n\r\n            for (let i in ATON._lps){\r\n                let LP = ATON._lps[i];\r\n                let d = c.distanceToSquared(LP.pos);\r\n\r\n                if (cLP === undefined || d < mdist){\r\n                    mdist = d;\r\n                    cLP = LP;\r\n                }\r\n            }\r\n\r\n            if (cLP) ATON.Utils.assignLightProbeToMesh(cLP, o);\r\n        }\r\n    });\r\n\r\n    return this;\r\n};\r\n\r\n// Find & update all LPs under this subgraph\r\n// FIXME: not working\r\nupdateLightProbes = ()=>{\r\n    this.traverse((o) => {\r\n        if (o.isMesh && o.geometry){\r\n            let LP = o.userData.LP;\r\n\r\n            if (LP !== undefined){\r\n                LP.update();\r\n                o.material.envMap = LP.getEnvTex();\r\n                //o.material.envMapIntensity = 5.0;\r\n                //console.log(\"x\");\r\n            }\r\n        }\r\n    });\r\n\r\n    return this;\r\n};\r\n\r\n// Deep clone\r\nduplicate(){\r\n    let C = this.clone();\r\n\r\n    C.traverse((o)=>{\r\n        if (o.isMesh){\r\n            o.material = o.material.clone();\r\n        }\r\n    });\r\n\r\n    return C;\r\n}\r\n\r\n\r\n// FIXME: xxx\r\ndelete(){\r\n    let p = this.parent;\r\n\r\n    if (p !== undefined && p.nid !== undefined) p.removeChild( this );\r\n}\r\n\r\nremoveChild(c){\r\n    if (c === undefined) return;\r\n\r\n    let nid = c.nid;\r\n    if (c.nid !== undefined) this._nodes[c.nid] = undefined;\r\n\r\n    c.parent = undefined;\r\n\r\n    c.traverse((o) => {\r\n        if (o.geometry) o.geometry.dispose();\r\n        if (o.material) o.material.dispose();\r\n    });\r\n\r\n    this.remove(c);\r\n\r\n    return this;\r\n}\r\n/**\r\nDelete all children of this node\r\n*/\r\nremoveChildren(){\r\n    let num = this.children.length;\r\n    for (let i=(num-1); i>=0; i--) this.removeChild(this.children[i]);\r\n\r\n    return this;\r\n}\r\n\r\n\r\n/**\r\nAttach this node to parent by providing ID (string) or node object\r\n@param {string|Node} node - the parent node\r\n@example\r\nmyNode.attachTo(\"someGroupID\")\r\n@example\r\nmyNode.attachTo(myParentGroup)\r\n*/\r\nattachTo(node){\r\n    let N = (typeof node === 'string')? this._nodes[node] : node;\r\n    if (N){\r\n        N.add(this);\r\n        if (N.userData.cMat) this.userData.cMat = N.userData.cMat;\r\n        }\r\n    return N;\r\n}\r\n\r\n/**\r\nAttach this node to main root. This is usually mandatory in order to visualize the node and all its descendants.\r\nDepending on node type this will be the scene root (visible scene-graph), the semantic-graph root or UI root\r\n@example\r\nmyNode.attachToRoot()\r\n*/\r\nattachToRoot(){\r\n    this._rootG.add(this);\r\n    if (this._rootG.userData.cMat) this.userData.cMat = this._rootG.userData.cMat;\r\n    return this._rootG;\r\n}\r\n\r\n/**\r\nReturn bounding sphere of this node\r\n@returns {THREE.Sphere}\r\n@example\r\nlet bs = myNode.getBound()\r\n*/\r\ngetBound(){\r\n    let bb = new THREE.Box3().setFromObject( this );\r\n    let bs = new THREE.Sphere();\r\n    bb.getBoundingSphere(bs);\r\n\r\n    return bs;\r\n}\r\n\r\n/**\r\nSet location (translation) of this node\r\n@example\r\nmyNode.setPosition(1.0,3.0,0.0)\r\n@example\r\nmyNode.setPosition( new THREE.Vector3(1.0,3.0,0.0) )\r\n*/\r\nsetPosition(x,y,z){\r\n    if (x instanceof THREE.Vector3) this.position.copy(x);\r\n    else this.position.set(x,y,z);\r\n\r\n    return this;\r\n}\r\n\r\n/**\r\nSet scale of this node\r\n@example\r\nmyNode.setScale(3.0,2.0,1.0)\r\n@example\r\nmyNode.setScale(2.0)\r\n@example\r\nmyNode.setScale( new THREE.Vector3(3.0,2.0,1.0) )\r\n*/\r\nsetScale(sx,sy,sz){\r\n    if (sx instanceof THREE.Vector3) this.scale.copy(sx);\r\n    else {\r\n        if (sy === undefined){ sy = sx; sz = sx; }\r\n        this.scale.set(sx,sy,sz);\r\n        }\r\n    \r\n    return this;\r\n}\r\n\r\n/**\r\nSet rotation of this node (Euler rx,ry,rz) in radians\r\n@example\r\nmyNode.setRotation(3.0,2.0,1.0)\r\n@example\r\nmyNode.setRotation( new THREE.Vector3(3.0,2.0,1.0) )\r\n*/\r\nsetRotation(rx,ry,rz){\r\n    if (rx instanceof THREE.Vector3) this.rotation.copy(rx);\r\n    else this.rotation.set(rx,ry,rz);\r\n    \r\n    return this;\r\n}\r\n/**\r\nOrient this node to current camera\r\n*/\r\norientToCamera(){\r\n    this.quaternion.copy( ATON.Nav._qOri );\r\n    return this;\r\n}\r\n\r\nsetYup(){\r\n    this.rotation.set(-1.57079632679,0.0,0.0);\r\n    return this;  \r\n}\r\n\r\n/**\r\nLoad a 3D model under this node, with optional onComplete handler.\r\nNote the system will take care of loading the resources in background, and will manage duplicate requests to same resources avoiding waste of bandwidth\r\n@param {string} url - the url of the 3D model\r\n@param {function} onComplete - the optional handler to be fired on completion\r\n@example\r\nmyNode.load(\"mymodel.gltf\", ()=>{ console.log(\"completed!\") })\r\n*/\r\nload(url, onComplete){\r\n    if (url === undefined) return this;\r\n\r\n    let N = this;\r\n\r\n    // [C] Promise already requested\r\n    if ( N._bCloneOnLoadHit && ATON._assetsManager[url] !== undefined ){\r\n        ATON._assetsManager[url].then(( o ) =>{\r\n            let C = o.clone();\r\n\r\n            ATON.Utils.modelVisitor(N, C); // check\r\n            N.add( C );\r\n\r\n            if (onComplete) onComplete();\r\n        });\r\n\r\n        console.log(\"HIT!\");\r\n        return N;\r\n    }\r\n\r\n    // Fire request\r\n    if (N.type === ATON.NTYPES.SCENE) ATON._assetReqNew(url);\r\n\r\n    let P = new Promise( ( resolve, reject ) => {\r\n        ATON._aLoader.load( url, (data)=>{\r\n            let model = data.scene || data.scene[0];\r\n\r\n            // Visit loaded model\r\n            ATON.Utils.modelVisitor(N, model);\r\n\r\n            N.add( model );\r\n\r\n            resolve(model);\r\n            console.log(\"Model \"+url+\" loaded\");\r\n            \r\n            if (N.type === ATON.NTYPES.SCENE) ATON._assetReqComplete(url);\r\n\r\n            if (onComplete) onComplete();\r\n        },\r\n        undefined,\r\n        (err)=>{\r\n            console.log(err);\r\n            //reject(model);\r\n\r\n            if (N.type === ATON.NTYPES.SCENE) ATON._assetReqComplete(url);\r\n            if (onComplete) onComplete();\r\n        });\r\n\r\n/*\r\n        ATON._aLoader.load( url+\"__LOD2-d.gltf\", (data)=>{\r\n            let model = data.scene || data.scene[0];\r\n            ATON._modelVisitor(model);\r\n\r\n            let C = new THREE.Vector3();\r\n            let bb = new THREE.Box3().setFromObject( model ).getCenter(C);\r\n            model.position.set(-C.x,-C.y,-C.z);\r\n\r\n            let lod = new THREE.LOD();\r\n            lod.position.set(C.x,C.y,C.z);\r\n            lod.matrixAutoUpdate = true;\r\n            lod.addLevel(model, 40.0);\r\n            N.add(lod);\r\n\r\n            //N.add( model );\r\n\r\n            resolve(model);\r\n            console.log(\"ATON model \"+url+\" loaded\");\r\n\r\n            ATON._aLoader.load( url+\"__LOD1-d.gltf\", (data2)=>{\r\n                let model2 = data2.scene || data2.scene[0];\r\n                ATON._modelVisitor(model2);\r\n\r\n                model2.position.set(-C.x,-C.y,-C.z);\r\n                \r\n                lod.addLevel(model2, 0.0);\r\n            });\r\n            \r\n            ATON._assetReqComplete(url);\r\n        });\r\n*/\r\n    });\r\n\r\n    // Register\r\n    if (N._bCloneOnLoadHit) ATON._assetsManager[url] = P;\r\n\r\n    return this;\r\n}\r\n\r\nexportAs( filename ){\r\n    ATON.Utils.exportNode(this, filename);\r\n\r\n    return this;\r\n}\r\n\r\nsetOnHover( h ){\r\n    this.onHover = f;\r\n    return this;\r\n}\r\nsetOnLeave( h ){\r\n    this.onLeave = f;\r\n    return this;\r\n}\r\nsetOnSelect( h ){\r\n    this.onSelect = f;\r\n    return this;\r\n}\r\n\r\n// Assign a period to this node\r\n// TODO: \r\n/*\r\nsetPeriod(p){\r\n    if (this.type === ATON.NTYPES.UI) return this; // not on UI nodes\r\n\r\n    let P = (typeof p === 'string')? ATON.periods[p] : p;\r\n    if (P === undefined) return this;\r\n\r\n    this.period = P;\r\n    return this;\r\n}\r\n\r\nfilterByPeriodID(id){\r\n    if (this.period === undefined) return this;\r\n\r\n    if (this.period.id !== id){\r\n        this.hide();\r\n        return this;\r\n        }\r\n    else {\r\n        this.show();\r\n        return this;\r\n    }\r\n\r\n    this.traverse((o) => {\r\n        if (o.period){\r\n            if (o.period.id === id) this.show();\r\n            else this.hide();\r\n        }\r\n    });\r\n\r\n    return this;\r\n}\r\n*/\r\n\r\n}\r\n\r\nexport default Node;","/*\r\n    ATON Viewpoint Class\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\n/**\r\nClass representing a Viewpoint (POV) in the 3D space, abstracting from device used (mobile, desktop or immersive XR).\r\nConstructor allows to assign the POV a unique ID (`string`)\r\n@class POV\r\n@example \r\nnew ATON.POV(\"myView\")\r\n*/\r\nclass POV {\r\n\r\nconstructor(id){\r\n    this.pos    = new THREE.Vector3(1,0,0);\r\n    this.target = new THREE.Vector3(0,0,0);\r\n    this.up     = ATON.STD_UPVECTOR;\r\n    this.fov    = ATON.Nav.STD_FOV;\r\n\r\n    this.nextPOV = undefined;\r\n    this.prevPOV = undefined;\r\n\r\n    // Register\r\n    this.as(id);\r\n}\r\n\r\n/**\r\n(Re)assign POV ID\r\n@param {string} id - the new ID\r\n@example\r\nmypov.as(\"newID\")\r\n*/\r\nas(id){\r\n    if (id === undefined) return;\r\n\r\n    ATON.Nav.povlist[id] = this;\r\n    this.id = id;\r\n\r\n    return this;\r\n}\r\n\r\n/**\r\nSet eye position\r\n@example\r\nnew ATON.POV(\"myView\").setPosition(2.0,6.0,1.5)\r\n@example\r\nmypov.setPosition( new THREE.Vector3(2.0,6.0,1.5) )\r\n*/\r\nsetPosition(x,y,z){\r\n    if (x instanceof THREE.Vector3) this.pos.copy(x);\r\n    else this.pos.set(x,y,z);\r\n\r\n    return this;\r\n}\r\n\r\n/**\r\nSet target position\r\n@example\r\nnew ATON.POV(\"myView\").setTarget(8.0,6.0,1.5)\r\n@example\r\nmypov.setTarget( new THREE.Vector3(8.0,6.0,1.5) ).setPosition(2.0,6.0,1.5)\r\n*/\r\nsetTarget(x,y,z){\r\n    if (x instanceof THREE.Vector3) this.target.copy(x);\r\n    else this.target.set(x,y,z);\r\n\r\n    return this;\r\n}\r\n\r\n/**\r\nSet field of view (FOV) in degrees\r\n@param {number} f\r\n@example\r\nnew ATON.POV(\"myView\").setFOV(70.0)\r\n*/\r\nsetFOV(f){\r\n    this.fov = f;\r\n\r\n    return this;\r\n}\r\n\r\n/**\r\nAdd keyword(s) to this viewpoint\r\n@param {string} kw - a keyword or comma-separated list of keywords\r\n@example\r\nmypov.addKeywords(\"heritage,architecture\")\r\n*/\r\naddKeywords(kw){\r\n    let K = kw.split(\",\");\r\n\r\n    if (this.kwords === undefined) this.kwords = {};\r\n    for (let k in K){\r\n        let kw = K[k].trim();\r\n        if (kw.length > 0) this.kwords[kw] = true;\r\n    }\r\n\r\n    return this;\r\n}\r\n\r\n/**\r\nReturns true if this viewpoint has specific keyword\r\n@param {string} kw - the keyword\r\n@returns {boolean}\r\n@example\r\nif (myPOV.hasKeyword(\"heritage\")){ ... }\r\n*/\r\nhasKeyword(kw){\r\n    if (this.kwords === undefined) return;\r\n    return (this.kwords[kw] !== undefined);\r\n}\r\n\r\n/**\r\nSet an optional next POV\r\n@param {POV} pov - the next POV\r\n*/\r\nsetNextPOV(pov){\r\n    if (!pov) return;\r\n    this.nextPOV = pov;\r\n\r\n    return this;\r\n}\r\n\r\n/**\r\nSet an optional previous POV\r\n@param {POV} pov - the previous POV\r\n*/\r\nsetPrevPOV(pov){\r\n    if (!pov) return;\r\n    this.prevPOV = pov;\r\n\r\n    return this;\r\n}\r\n\r\n}\r\n\r\nexport default POV;","/*\r\n    ATON Light Probe Class\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\n/**\r\nClass representing a light probe (LP), can be static or updated at runtime\r\n@class LightProbe\r\n@param {number} res - Resolution in pixel of lightprobe (default 64)\r\n@param {number} near - Capture near (default 1m)\r\n@param {number} far - Capture far (default 1Km)\r\n@example \r\nlet LP = new ATON.LightProbe()\r\n*/\r\nclass LightProbe {\r\n\r\nconstructor(res, near, far){\r\n    this.pos = new THREE.Vector3(0,0,0);\r\n\r\n    this._res  = (res !== undefined)?  res  : 64;\r\n    this._near = (near !== undefined)? near : 1.0;\r\n    this._far  = (far !== undefined)?  far  : ATON.Nav.STD_FAR;\r\n/*\r\n    this._LPtarget0 = undefined;\r\n    this._LPtarget1 = undefined;\r\n\r\n    this._LP0 = undefined;\r\n    this._LP1 = undefined;\r\n\r\n    this._flipLP = false;\r\n*/\r\n    this._envtex = undefined;\r\n    this._prevCCtarget = undefined;\r\n\r\n    this._pmremGenerator = new THREE.PMREMGenerator(ATON._renderer);\r\n\r\n    //this.realize();\r\n}\r\n\r\n/*\r\nrealize(){\r\n    this._LPtarget0 = new THREE.WebGLCubeRenderTarget( this._res, {\r\n        format: THREE.RGBFormat,\r\n        generateMipmaps: true,\r\n        minFilter: THREE.LinearMipmapLinearFilter,\r\n        encoding: THREE.sRGBEncoding // prevent the material's shader from recompiling every frame\r\n    });\r\n\r\n    this._LPtarget1 = new THREE.WebGLCubeRenderTarget( this._res, {\r\n        format: THREE.RGBFormat,\r\n        generateMipmaps: true,\r\n        minFilter: THREE.LinearMipmapLinearFilter,\r\n        encoding: THREE.sRGBEncoding\r\n    });\r\n\r\n    this._LP0 = new THREE.CubeCamera( this._near, this._far, this._LPtarget0 );\r\n    this._LP1 = new THREE.CubeCamera( this._near, this._far, this._LPtarget1 );\r\n\r\n    return this;\r\n}\r\n*/\r\n\r\n/**\r\nSet LP position\r\n@example\r\nLP.setPosition(2.0,6.0,1.5)\r\n@example\r\nLP.setPosition( new THREE.Vector3(2.0,6.0,1.5) )\r\n*/\r\nsetPosition(x,y,z){\r\n    if (x instanceof THREE.Vector3) this.pos.copy(x);\r\n    else this.pos.set(x,y,z);\r\n\r\n    //if (this._LP0) this._LP0.position.copy(this.pos);\r\n    //if (this._LP1) this._LP1.position.copy(this.pos);\r\n\r\n    return this;\r\n}\r\n\r\nsetNear(near){\r\n    this._near = near;\r\n    return this;\r\n}\r\nsetFar(far){ \r\n    this._far = far;\r\n    return this;\r\n}\r\n\r\n/**\r\nUpdate LP capture. Typically called when all 3D models are loaded and arranged into the scene.\r\nCan be called at runtime or whenever there is some change in the 3D scene\r\n@example\r\nLP.update()\r\n*/\r\nupdate(){\r\n    if (this._envtex) this._envtex.dispose();\r\n    if (this._prevCCtarget) this._prevCCtarget.dispose();\r\n\r\n    let CCtarget = new THREE.WebGLCubeRenderTarget( this._res, {\r\n        format: THREE.RGBEFormat,\r\n        generateMipmaps: true,\r\n        minFilter: THREE.LinearMipmapLinearFilter,\r\n        encoding: THREE.sRGBEncoding // prevent the material's shader from recompiling every frame\r\n    });\r\n\r\n    let CC = new THREE.CubeCamera( this._near, this._far, CCtarget );\r\n    CC.position.copy(this.pos);\r\n\r\n    CC.update( ATON._renderer, ATON._rootVisibleGlobal );\r\n\r\n    this._envtex = CCtarget.texture;\r\n    \r\n/*\r\n    console.log(CC);\r\n    console.log(CCtarget);\r\n\r\n    let CCtargetX = new THREE.WebGLCubeRenderTarget( this._res, {\r\n        format: THREE.RGBFormat,\r\n        //generateMipmaps: true,\r\n        minFilter: THREE.LinearMipmapLinearFilter,\r\n        encoding: THREE.sRGBEncoding\r\n    });\r\n\r\n    let CCX = new THREE.CubeCamera( this._near, this._far, CCtargetX );\r\n    CCX.position.copy(this.pos);\r\n\r\n    CCX.update( ATON._renderer, ATON._rootVisible );\r\n    this._envtex = this._pmremGenerator.fromCubemap(CCtargetX.texture).texture;\r\n*/\r\n\r\n    this._prevCCtarget = CCtarget;\r\n\r\n\r\n/*\r\n    if (this._LP0 === undefined || this._LP1 === undefined) return this;\r\n\r\n    this._flipLP = !this._flipLP;\r\n    //ATON._flipLP = !ATON._flipLP;\r\n\r\n    if (this._flipLP){\r\n        this._LP0.update( ATON._renderer, ATON._mainRoot );\r\n        this._envtex = this._LPtarget0.texture;\r\n    }\r\n    else {\r\n        this._LP1.update( ATON._renderer, ATON._mainRoot );\r\n        this._envtex = this._LPtarget1.texture;\r\n    }\r\n*/\r\n    return this;\r\n}\r\n\r\n\r\ngetEnvTex(){\r\n    return this._envtex;\r\n}\r\n\r\nassignToNode(N){\r\n    if (N === undefined) return;\r\n    //TODO:\r\n}\r\n\r\n}\r\n\r\nexport default LightProbe;","/*\r\n    ATON Event Hub\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\n/**\r\nATON Event Hub\r\n@namespace EventHub\r\n*/\r\nlet EventHub = {};\r\n\r\n//Initializes the component\r\nEventHub.init = ()=>{\r\n\r\n    EventHub.evLocal   = {};\r\n    EventHub.evNetwork = {};\r\n\r\n    // Expose\r\n    ATON.on                 = EventHub.on;\r\n    ATON.fireEvent          = EventHub.fireEvent;\r\n    ATON.clearEventHandlers = EventHub.clearEventHandlers\r\n};\r\n\r\n/**\r\nClear all event handlers for a given event\r\n@param {string} evtname - event name\r\n*/\r\nEventHub.clearEventHandlers = (evtname)=>{\r\n    EventHub.evLocal[evtname]   = [];\r\n    EventHub.evNetwork[evtname] = [];\r\n};\r\n\r\n// Execute all handlers from list with given data\r\nEventHub.executeHandlers = (ehList, data)=>{\r\n    if (!ehList) return;\r\n\r\n    for (let h = 0; h < ehList.length; h++) {\r\n        let handler = ehList[h];\r\n        if (handler) handler(data);\r\n    }\r\n};\r\n\r\n/**\r\nSubscribe to a given event, with local handler and optional network handler.\r\nThis is also accessible as ATON.on()\r\n@param {string} evtname - event name\r\n@param {function} handlerLocal - local event handler\r\n@param {function} handlerNetwork - optional network (see VRoadcast) event handler\r\n@example\r\nATON.EventHub.on(\"myEvent\", function(data){ console.log(\"received local event\"); })\r\n@example\r\nATON.on(\"myEvent\", function(data){ console.log(\"received local event\"); })\r\n*/\r\nEventHub.on = (evtname, handlerLocal, handlerNetwork)=>{\r\n    // Local event (default)\r\n    if (handlerLocal !== undefined){\r\n        let evhLocal = EventHub.evLocal;\r\n\r\n        if (evhLocal[evtname] === undefined) evhLocal[evtname] = []; // First time (event not registered)\r\n        evhLocal[evtname].push(handlerLocal);\r\n    }\r\n\r\n    // Received event (network)\r\n    if (handlerNetwork !== undefined){\r\n        ATON.VRoadcast.on(evtname, handlerNetwork);\r\n    }\r\n\r\n};\r\n\r\n/**\r\nFire a local (and optionally network) event, with data.\r\nThis is also accessible as ATON.fireEvent()\r\n@param {string} evtname - event name\r\n@param {object} data - object containing data to be transmitted with this event\r\n@param {bool} bReplicate - if true, it will replicate (broadcast) the event to other connected peers in the same scene (see VRoadcast)\r\n@example\r\nATON.EventHub.fireEvent(\"myEvent\", data)\r\n@example\r\nATON.fireEvent(\"myEvent\", data)\r\n*/\r\nEventHub.fireEvent = (evtname, data, bReplicate)=>{\r\n    let ehList = EventHub.evLocal[evtname];\r\n    EventHub.executeHandlers(ehList, data);\r\n\r\n    if (!bReplicate) return;\r\n    ATON.VRoadcast.fireEvent(evtname, data);\r\n};\r\n\r\nexport default EventHub;","/*\r\n    ATON Materials Hub\r\n    Centralized material manager\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\n/**\r\nATON Material Hub\r\n@namespace MatHub\r\n*/\r\nlet MatHub = {};\r\n\r\nMatHub.init = ()=>{\r\n    MatHub.materials = {};\r\n    MatHub.colors    = {};\r\n\r\n    MatHub.addDefaults();\r\n\r\n    MatHub._loader = new THREE.MaterialLoader();\r\n};\r\n\r\nMatHub.addDefaults = ()=>{\r\n\r\n    // Colors\r\n    MatHub.colors.white  = new THREE.Color(1,1,1);\r\n    MatHub.colors.black  = new THREE.Color(0,0,0);\r\n    MatHub.colors.green  = new THREE.Color(0,1,0);\r\n    MatHub.colors.yellow = new THREE.Color(1,1,0);\r\n    MatHub.colors.red    = new THREE.Color(1,0,0);\r\n    MatHub.colors.blue   = new THREE.Color(0,0,1);\r\n    MatHub.colors.orange = new THREE.Color(1,0.5,0);\r\n    \r\n    MatHub.colors.sem     = new THREE.Color(0,0,1);\r\n    MatHub.colors.darksem = new THREE.Color(0,0,0.1);\r\n\r\n    // Materials\r\n    MatHub.materials.fullyTransparent = new THREE.MeshBasicMaterial({ \r\n        transparent: true, \r\n        depthWrite: false, \r\n        opacity: 0.0\r\n    });\r\n    \r\n    // Selector\r\n    MatHub.materials.selector = new THREE.MeshBasicMaterial({\r\n        color: MatHub.colors.green,\r\n        transparent: true,\r\n        depthWrite: false,\r\n        opacity: 0.2, \r\n        flatShading: true\r\n    });\r\n\r\n    // XR/VR ray\r\n    MatHub.materials.controllerRay = new THREE.MeshBasicMaterial({ \r\n        color: MatHub.colors.white, \r\n        transparent: true, \r\n        opacity: 0.2,\r\n        depthWrite: false,\r\n        flatShading: true\r\n    });\r\n\r\n    // Measurements\r\n    MatHub.materials.measurement = new THREE.MeshBasicMaterial({\r\n        color: MatHub.colors.white,\r\n        //linewidth: 5,\r\n        transparent: true,\r\n        depthWrite: false,\r\n        opacity: 0.5, \r\n        depthTest: false,\r\n        flatShading: true\r\n    });\r\n\r\n    // Semantic shapes\r\n    MatHub.materials.semanticShape = new THREE.MeshBasicMaterial({ \r\n        color: MatHub.colors.sem, \r\n        transparent: true,\r\n        depthWrite: false, \r\n        opacity: 0.1,\r\n        flatShading: true\r\n    });\r\n    MatHub.materials.semanticShapeHL = new THREE.MeshBasicMaterial({ \r\n        color: MatHub.colors.sem, \r\n        transparent: true,\r\n        depthWrite: false, \r\n        opacity: 0.3,\r\n        flatShading: true\r\n    });\r\n    MatHub.materials.semanticShapeEdit = new THREE.MeshBasicMaterial({ \r\n        color: MatHub.colors.orange, \r\n        transparent: true,\r\n        depthWrite: false, \r\n        opacity: 0.5,\r\n        flatShading: true\r\n    });\r\n};\r\n\r\nMatHub.addMaterial = (id, mat)=>{\r\n    if (MatHub.materials[id]){\r\n        console.log(\"MatHub: material \"+id+\" already registered\");\r\n        return;\r\n    }\r\n\r\n    MatHub.materials[id] = mat;\r\n};\r\n\r\nMatHub.loadMaterial = (id, jsonfile)=>{\r\n    MatHub._loader.load(jsonfile, (mat)=>{\r\n        MatHub.addMaterial(id, mat);\r\n    },\r\n    undefined,\r\n    (err)=>{\r\n        console.log(err);\r\n    });\r\n};\r\n\r\nMatHub.getMaterial = (id)=>{\r\n    return MatHub.materials[id];\r\n};\r\n\r\nexport default MatHub;","/*\r\n    ATON Utils\r\n    various utilities for device profiling, graph visiting, etc.\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\n/**\r\nATON Utils\r\n@namespace Utils\r\n*/\r\nlet Utils = {};\r\n\r\n\r\nUtils.init = ()=>{\r\n    // read-only object to inspect device capabilities\r\n    ATON.device = {};\r\n\r\n    Utils.geomUnitSphere = new THREE.SphereBufferGeometry( 1.0, 16, 16 );\r\n\r\n    // Export/Download utils\r\n    Utils.exporterGLTF = undefined;\r\n    Utils.exporterOBJ  = undefined;\r\n\r\n    Utils._dlink = document.createElement('a');\r\n    Utils._dlink.style.display = 'none';\r\n    document.body.appendChild( Utils._dlink ); // Firefox workaround, see #6594\r\n\r\n    Utils.textureLoader = new THREE.TextureLoader();\r\n};\r\n\r\nUtils.generateID = (prefix)=>{\r\n    if (prefix === undefined) prefix = \"id\";\r\n    //let currDate = new Date();\r\n    //let ts = currDate.getYear()+\":\"+currDate.getMonth()+\":\"+currDate.getDay()+\":\"+currDate.getHours()+\":\"+currDate.getMinutes() +\":\"+ currDate.getSeconds();\r\n    return prefix+'-' + Math.random().toString(36).substr(2,9);\r\n};\r\n\r\nUtils.goToURL = (url)=>{\r\n    window.location.href = url;\r\n};\r\n\r\n/**\r\nIf current connection is secure\r\n@returns {boolean}\r\n*/\r\nUtils.isConnectionSecure = ()=>{\r\n    return window.isSecureContext;\r\n}\r\n\r\n\r\n// Profile device capabilities\r\nUtils.profileDevice = ()=>{\r\n\r\n    // Detect mobile\r\n    ATON.device.isMobile = false;\r\n    let detectMobile = ()=>{\r\n        if(/(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|ipad|iris|kindle|Android|Silk|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(navigator.userAgent)\r\n        || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(navigator.userAgent.substr(0,4))){\r\n            return true;\r\n            }\r\n\r\n        return false;\r\n    };\r\n\r\n    ATON.device.isMobile = detectMobile();\r\n\r\n    // XR profiling\r\n    ATON.device.xrSupported = {};\r\n    ATON.device.xrSupported['immersive-vr'] = false;\r\n    ATON.device.xrSupported['immersive-ar'] = false;\r\n\r\n    if ( 'xr' in navigator ){\r\n\t    navigator.xr.isSessionSupported( 'immersive-vr' ).then( function ( b ){\r\n            if (b) ATON.device.xrSupported['immersive-vr'] = true;\r\n            else   ATON.device.xrSupported['immersive-vr'] = false;\r\n\r\n            console.log(\"WebXR VR session support: \"+ATON.device.xrSupported['immersive-vr']);\r\n\t\t});\r\n\r\n\t    navigator.xr.isSessionSupported( 'immersive-ar' ).then( function ( b ){\r\n            if (b) ATON.device.xrSupported['immersive-ar'] = true;\r\n            else   ATON.device.xrSupported['immersive-ar'] = false;\r\n\r\n            console.log(\"WebXR AR session support: \"+ATON.device.xrSupported['immersive-ar']);\r\n\t\t});\r\n    }\r\n};\r\n\r\n/**\r\nIf current device is mobile (e.g. smartphone, tablet, Oculus Quest)\r\n@returns {boolean}\r\n*/\r\nUtils.isMobile = ()=>{\r\n    return ATON.device.isMobile;\r\n}\r\n\r\n/**\r\nIf current device supports WebXR immersive VR sessions\r\n@returns {boolean}\r\n*/\r\nUtils.isVRsupported = ()=>{\r\n    return ATON.device.xrSupported['immersive-vr'];\r\n}\r\n\r\n/**\r\nIf current device supports WebXR immersive AR sessions\r\n@returns {boolean}\r\n*/\r\nUtils.isARsupported = ()=>{\r\n    return ATON.device.xrSupported['immersive-ar'];\r\n}\r\n\r\n\r\n// Path utils\r\nUtils.getFileExtension = ( filepath )=>{\r\n\treturn filepath.substr(filepath.lastIndexOf('.')+1).toLowerCase();\r\n};\r\n\r\nUtils.getBaseFolder = ( filepath )=>{\r\n    var index = filepath.lastIndexOf('/');\r\n    if (index !== -1) return filepath.substring( 0, index + 1 );\r\n    \r\n    return '';\r\n};\r\n\r\nUtils.isResourceURL = (s)=>{\r\n    if (s.startsWith(\"http://\"))  return true;\r\n    if (s.startsWith(\"https://\")) return true;\r\n    return false;\r\n};\r\n\r\nUtils.postJSON = (endpoint, obj, onReceive, onFail)=>{\r\n    $.ajax({\r\n        url: endpoint,\r\n        type:\"POST\",\r\n        xhrFields: { withCredentials: true },\r\n        data: JSON.stringify(obj),\r\n        contentType:\"application/json; charset=utf-8\",\r\n        dataType:\"json\",\r\n\r\n        success: (data)=>{\r\n            if (onReceive) onReceive(data);\r\n        }\r\n    }).fail((err)=>{\r\n        console.log(err);\r\n        if (onFail) onFail();\r\n    });\r\n};\r\n\r\n\r\nUtils.mergeObject = ( object )=>{\r\n    object.updateMatrixWorld( true );\r\n\r\n    const geometry = [];\r\n    object.traverse( c => {\r\n        if ( c.isMesh ){\r\n            const g = c.geometry;\r\n            g.applyMatrix4( c.matrixWorld );\r\n            geometry.push( g.toNonIndexed() );\r\n        }\r\n\r\n    });\r\n\r\n    const mergedGeometries = THREE.BufferGeometryUtils.mergeBufferGeometries( geometry, false );\r\n    const mergedGeometry   = THREE.BufferGeometryUtils.mergeVertices( mergedGeometries ).center();\r\n\r\n    const group = new THREE.Group();\r\n    const mesh = new THREE.Mesh( mergedGeometry );\r\n    group.add( mesh );\r\n    return group;\r\n};\r\n\r\n// Helper visitor routine\r\nUtils.modelVisitor = (parentNode, model)=>{\r\n    if (!model) return this;\r\n\r\n    //model = Utils.mergeObject(model);\r\n    \r\n    let N = parentNode;\r\n    let type = N.type; // Differentiate visit depending on node type\r\n\r\n    model.traverse( ( o ) => {\r\n\r\n        if (N.bPickable !== undefined){\r\n            if (N.bPickable) o.layers.enable(type);\r\n            else o.layers.disable(type);\r\n        }\r\n\r\n        if (o.isMesh){\r\n            //let numVertices = o.geometry.attributes.position.count;\r\n            //console.log(numVertices);\r\n\r\n            if (type === ATON.NTYPES.SCENE){\r\n                // TODO: \r\n                o.castShadow    = true; //N.castShadow;\r\n                o.receiveShadow = true; //N.receiveShadow;\r\n\r\n                // Build accelerated ray casting\r\n                if (o.geometry){\r\n                    o.geometry.computeBoundsTree();\r\n                    console.log(\"Computed BVH\");\r\n                }\r\n\r\n                // Ensure mipmapping is correct\r\n                if ( o.material.map !== null){\r\n                    //console.log(object.material.map);\r\n                    \r\n                    // Why do I have to do this?\r\n                    //o.material.map.generateMipmaps = false;\r\n                    o.material.map.anisotropy = ATON._maxAnisotropy;\r\n                    o.material.map.minFilter  = THREE.LinearMipmapLinearFilter;\r\n                    o.material.map.magFilter  = THREE.LinearFilter;\r\n                    //o.material.map.needsUpdate = true;\r\n                }\r\n            }\r\n\r\n            if (type === ATON.NTYPES.SEM){\r\n                o.material = ATON.MatHub.materials.semanticShape;\r\n            }\r\n\r\n            // Cascading material\r\n            if (N.userData.cMat){\r\n                o.material = N.userData.cMat;\r\n                //o.material.needsUpdate = true;\r\n            }\r\n        }\r\n    });\r\n};\r\n\r\nUtils.setVectorPrecision = (v, prec)=>{\r\n    v.x = parseFloat( v.x.toPrecision(prec) );\r\n    v.y = parseFloat( v.y.toPrecision(prec) );\r\n    v.z = parseFloat( v.z.toPrecision(prec) );\r\n    \r\n    return v;\r\n};\r\n\r\n// Export routines\r\nUtils.downloadBlob = (blob, filename)=>{\r\n    if (filename === undefined) return;\r\n\r\n    Utils._dlink.href = URL.createObjectURL( blob );\r\n    Utils._dlink.download = filename;\r\n    Utils._dlink.click();\r\n};\r\n\r\n// Download text ASCII data\r\nUtils.downloadText = ( str, filename )=>{\r\n    Utils.downloadBlob( new Blob( [ str ], { type: 'text/plain' } ), filename );\r\n};\r\n\r\n// Download json object\r\nUtils.downloadJSONobj = (jsonobj, filename)=>{\r\n    Utils.downloadText( JSON.stringify(jsonobj), filename );\r\n};\r\n\r\nUtils.downloadArrayBuffer = ( buffer, filename )=>{\r\n    Utils.downloadBlob( new Blob( [ buffer ], { type: 'application/octet-stream' } ), filename );\r\n};\r\n\r\n// Export ATON node\r\nUtils.exportNode = (node, filename)=>{\r\n    let ext = Utils.getFileExtension(filename);\r\n    if (ext.length < 1) return;\r\n\r\n    // GLTF\r\n    if (ext === \"glb\" || ext === \"gltf\"){\r\n        let bBin = (ext === \"glb\")? true : false;\r\n\r\n        let opts = {\r\n            //trs: true, // Export position, rotation and scale instead of matrix per node. Default is false\r\n            binary: bBin, // Export in binary (.glb) format, returning an ArrayBuffer. Default is false\r\n            //onlyVisible: false,\r\n            //truncateDrawRange: true\r\n        };\r\n\r\n        if (Utils.exporterGLTF === undefined) Utils.exporterGLTF = new THREE.GLTFExporter();\r\n\r\n        Utils.exporterGLTF.parse( node, ( output )=>{\r\n            if ( output instanceof ArrayBuffer ){\r\n                Utils.downloadArrayBuffer( output, filename);\r\n            }\r\n            else {\r\n                console.log( output );\r\n                Utils.downloadJSONobj(output, filename);\r\n            }\r\n        }, opts);\r\n    }\r\n\r\n    // OBJ format\r\n    if (ext === \"obj\"){\r\n        if (Utils.exporterOBJ === undefined) Utils.exporterOBJ = new THREE.OBJExporter();\r\n\r\n        let output = Utils.exporterOBJ.parse(node);\r\n        //console.log(output);\r\n        Utils.downloadText(output, filename);\r\n    }\r\n};\r\n\r\nUtils.takeScreenshot = (size, filename)=>{\r\n    let img = new Image();\r\n\r\n    console.log(\"Screenshot with size:\"+size);\r\n\r\n    ATON.Nav._camera.aspect = 1.0;\r\n    ATON.Nav._camera.updateProjectionMatrix();\r\n    \r\n    ATON._renderer.setSize(size,size);\r\n    ATON._renderer.render( ATON._mainRoot, ATON.Nav._camera );\r\n\r\n    let b64img = ATON._renderer.domElement.toDataURL();\r\n    img.src = b64img;\r\n\r\n    if (filename){\r\n        Utils._dlink.href = b64img.replace(\"image/png\", \"image/octet-stream\");\r\n        Utils._dlink.download = filename;\r\n        Utils._dlink.click();\r\n    }\r\n\r\n    ATON._onResize();\r\n    return img;\r\n};\r\n\r\nUtils.assignLightProbeToMesh = (LP, mesh)=>{\r\n    if (LP === undefined || mesh === undefined) return;\r\n\r\n    if (mesh.noLP) return;\r\n\r\n    mesh.userData.LP = LP;\r\n    //LP.update();\r\n    //mesh.material.envMap = LP.getEnvTex();\r\n    \r\n    //mesh.material.combine = THREE.MultiplyOperation;\r\n    //mesh.material.needsUpdate = true;\r\n\r\n    //console.log(mesh.userData);\r\n};\r\n\r\nUtils.createATONCube = (id)=>{\r\n    let g = new THREE.BoxBufferGeometry( 1,1,1 );\r\n\r\n    let mat = new THREE.MeshStandardMaterial();\r\n\r\n    Utils.textureLoader.load((ATON.PATH_RES+\"models/aton-cube.jpg\"), (tex)=>{\r\n        tex.encoding = THREE.sRGBEncoding;\r\n        mat.map = tex;\r\n    });\r\n\r\n    let N = ATON.createSceneNode(id);\r\n    N.add( new THREE.Mesh(g) );\r\n    N.setMaterial(mat);\r\n\r\n    N.enablePicking();\r\n    return N;\r\n};\r\n\r\n\r\nUtils.createATONCubePBR = (id)=>{\r\n    let g = new THREE.BoxBufferGeometry( 1,1,1 );\r\n\r\n    let mat = new THREE.MeshStandardMaterial();\r\n    mat.metalness = 1.0;\r\n\r\n    Utils.textureLoader.load((ATON.PATH_RES+\"models/aton-cube.jpg\"), (tex)=>{\r\n        tex.encoding = THREE.sRGBEncoding;\r\n        mat.map = tex;\r\n    });\r\n\r\n    Utils.textureLoader.load((ATON.PATH_RES+\"models/aton-cube-pbr.jpg\"), (tex)=>{\r\n        tex.encoding = THREE.sRGBEncoding;\r\n        mat.metalnessMap = tex;\r\n        mat.roughnessMap = tex;\r\n    });\r\n\r\n    Utils.textureLoader.load((ATON.PATH_RES+\"models/aton-cube-nrm.png\"), (tex)=>{\r\n        tex.encoding = THREE.sRGBEncoding;\r\n        mat.normalMap = tex;\r\n\r\n        //mat.bumpMap.anisotropy = ATON._maxAnisotropy;\r\n        //mat.bumpMap.minFilter  = THREE.LinearMipmapLinearFilter;\r\n        //mat.bumpMap.magFilter  = THREE.LinearFilter;\r\n    });\r\n\r\n    let N = ATON.createSceneNode(id);\r\n    N.add( new THREE.Mesh(g) );\r\n    N.setMaterial(mat);\r\n\r\n    N.enablePicking();\r\n    return N;\r\n};\r\n\r\n\r\nUtils.createGround = (texture, dx,dz)=>{\r\n    if (dx === undefined) dx = 1.0;\r\n    if (dz === undefined) dz = 1.0;\r\n\r\n    let g = new THREE.PlaneBufferGeometry( dx, dz );\r\n\r\n    let mat = new THREE.MeshStandardMaterial();\r\n    if (texture !== undefined) Utils.textureLoader.load(texture, (tex)=>{\r\n        tex.encoding = THREE.sRGBEncoding;\r\n        mat.map = tex;\r\n    });\r\n\r\n    let N = ATON.createSceneNode().rotateX(-Math.PI * 0.5);\r\n    N.add( new THREE.Mesh(g, mat) );\r\n    N.enablePicking();\r\n\r\n    return N;\r\n};\r\n\r\n\r\nexport default Utils;","/*\r\n    ATON Scene Hub\r\n    scene JSON routines\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\n/**\r\nATON Scene Hub\r\n@namespace SceneHub\r\n*/\r\nlet SceneHub = {};\r\n\r\nSceneHub.MODE_ADD = 0;\r\nSceneHub.MODE_DEL = 1;\r\n\r\n/**\r\nInitializes the component\r\n*/\r\nSceneHub.init = ()=>{\r\n    SceneHub.currID   = undefined; // Scene ID (sid)\r\n    SceneHub.currData = undefined; // holds compact object describing our ATON scene\r\n    SceneHub._bEdit   = false;     // edit mode (client can modify json on the server)\r\n\r\n    SceneHub._bLoading = false;\r\n\r\n    SceneHub.initBaseParsers();\r\n};\r\n\r\n/**\r\nThis enables/disables edit mode - i.e. changes to the scene are sent to server and become persistent\r\n@param {bool} b - true or false\r\n@example\r\nATON.SceneHub.setEditMode(true)\r\n*/\r\nSceneHub.setEditMode = (b)=>{\r\n    SceneHub._bEdit = b;\r\n    console.log(\"Edit mode:\"+b);\r\n};\r\n\r\n\r\n/**\r\n    Loads a scene by providing JSON path\r\n    @param {string} reqpath - JSON url\r\n    @param {string} sid - Scene ID\r\n    @param {function} oncomplete - Function to be called on complete\r\n    @example\r\n        ATON.SceneHub.load(\"http://path/to/scene.json\", \"sample\", ()=>{ console.log(\"Done!\"); });\r\n*/\r\nSceneHub.load = (reqpath, sid, oncomplete)=>{\r\n    //let args = reqpath.split(',');\r\n\r\n    SceneHub._bLoading = true;\r\n    console.log(\"Loading Scene: \"+sid);\r\n\r\n    return $.getJSON( reqpath, ( data )=>{\r\n        SceneHub.currData  = data;\r\n        SceneHub.currID    = sid; //scenejson.substring(scenejson.lastIndexOf('/')+1);\r\n        SceneHub._bLoading = false;\r\n\r\n        //console.log(ATON.currScene);\r\n\r\n        SceneHub.parseScene(data);\r\n\r\n        if (oncomplete) oncomplete();\r\n        ATON.fireEvent(\"SceneJSONLoaded\", sid);\r\n    });\r\n};\r\n\r\nSceneHub.parseScene = (sobj)=>{\r\n    sobj = (sobj === undefined)? SceneHub.currData : sobj;\r\n    if (sobj === undefined) return;\r\n\r\n    for (let k in sobj)\r\n        if (SceneHub._jsonParsers[k]) SceneHub._jsonParsers[k]( sobj[k] );\r\n};\r\n\r\nSceneHub.getJSONchildren = (nid, type)=>{\r\n    if (type === undefined) type = ATON.NTYPES.SCENE;\r\n\r\n    let P = undefined;\r\n    let children = [];\r\n\r\n    if (type === ATON.NTYPES.SEM)   P = ATON.getSemanticNode(nid);\r\n    if (type === ATON.NTYPES.SCENE) P = ATON.getSceneNode(nid);\r\n\r\n    if (P === undefined) return undefined;\r\n\r\n    for (let c in P.children){\r\n        let child = P.children[c];\r\n\r\n        if (child.nid !== undefined) children.push( child.nid );\r\n        }\r\n\r\n    return children;\r\n};\r\n\r\nSceneHub.getJSONgraphEdges = (type)=>{\r\n    if (type === undefined) type = ATON.NTYPES.SCENE;\r\n    let nodes = ATON.snodes;\r\n    \r\n    if (type === ATON.NTYPES.SEM) nodes = ATON.semnodes;\r\n    if (type === ATON.NTYPES.UI)  nodes = ATON.uinodes;\r\n\r\n    let edges = {};\r\n\r\n    for (let n in nodes){\r\n        let N = nodes[n];\r\n\r\n        //if (N && N.children) edges[n] = SceneHub.getJSONchildren(n, type);\r\n\r\n        let E = {};\r\n        if (N && N.parent && N.parent.nid){\r\n            //edges.push([N.parent.nid, N.nid]);\r\n            if (edges[N.parent.nid] === undefined) edges[N.parent.nid] = [];\r\n            edges[N.parent.nid].push(N.nid);\r\n            //edges[N.parent.nid].filter((v,i) => edges[N.parent.nid].indexOf(v) === i);\r\n        }\r\n    }\r\n\r\n    //console.log(edges);\r\n    return edges;\r\n};\r\n\r\nSceneHub.getJSONsemanticSpheresList = (semid)=>{\r\n    let S = ATON.getSemanticNode(semid);\r\n    if (S === undefined) return undefined;\r\n\r\n    let SL = [];\r\n\r\n    for (let s in S.children){\r\n        let sphere = S.children[s];\r\n        if (sphere.type){\r\n            SL.push([\r\n                parseFloat(sphere.position.x.toPrecision(3)), \r\n                parseFloat(sphere.position.y.toPrecision(3)), \r\n                parseFloat(sphere.position.z.toPrecision(3)), \r\n                parseFloat(sphere.scale.x.toPrecision(3))\r\n            ]);\r\n        }\r\n    }\r\n\r\n    return SL;\r\n};\r\n\r\nSceneHub.getJSONsemanticConvexShapes = (semid)=>{\r\n    let S = ATON.getSemanticNode(semid);\r\n    if (S === undefined) return undefined;\r\n\r\n    let CL = [];\r\n\r\n    for (let s in S.children){\r\n        let semesh = S.children[s];\r\n        if (semesh.userData._convexPoints){\r\n            CL.push(semesh.userData._convexPoints);\r\n        }\r\n    }\r\n\r\n    //console.log(CL);\r\n    \r\n    return CL;\r\n};\r\n\r\n// Top-level scene-JSON parsers\r\nSceneHub.initBaseParsers = ()=>{\r\n    SceneHub._jsonParsers = {};\r\n\r\n    // Environment\r\n    SceneHub._jsonParsers.environment = (env)=>{\r\n\r\n        let pano = env.mainpano;\r\n        if (env.mainpano){\r\n            if (pano.url) ATON.setMainPanorama(ATON.PATH_COLLECTION+pano.url);\r\n            if (pano.rotation) ATON.setMainPanoramaRotation(pano.rotation);\r\n        }\r\n\r\n        let L = env.mainlight;\r\n        if (L){\r\n            if (L.direction) ATON.setMainLightDirection( new THREE.Vector3(L.direction[0],L.direction[1],L.direction[2]) );\r\n\r\n            if (ATON._dMainL){\r\n                if (L.color)     ATON._dMainL.color = new THREE.Color(L.color[0],L.color[1],L.color[2]);\r\n                if (L.intensity) ATON._dMainL.intensity = L.intensity;\r\n\r\n                if (L.shadows) ATON.toggleShadows(L.shadows);\r\n            }\r\n        }\r\n\r\n        let lps = env.lightprobes;\r\n        if (lps){\r\n            if (lps.auto) ATON.setAutoLP(true);\r\n        }\r\n\r\n    };\r\n\r\n    // NavMode\r\n    SceneHub._jsonParsers.navmode = (navmode)=>{\r\n        if (navmode === undefined) return;\r\n\r\n        ATON.Nav.setNavMode(navmode);\r\n    };\r\n\r\n    // Measurements\r\n    SceneHub._jsonParsers.measurements = (M)=>{\r\n        if (M === undefined) return;\r\n\r\n        for (let m in M){\r\n            let measure = M[m];\r\n\r\n            if (measure.points && measure.points.length === 6){\r\n                let A = new THREE.Vector3(\r\n                    parseFloat(measure.points[0]),\r\n                    parseFloat(measure.points[1]),\r\n                    parseFloat(measure.points[2])\r\n                );\r\n                let B = new THREE.Vector3(\r\n                    parseFloat(measure.points[3]),\r\n                    parseFloat(measure.points[4]),\r\n                    parseFloat(measure.points[5])\r\n                );\r\n                ATON.SUI.addMeasurementPoint(A);\r\n                ATON.SUI.addMeasurementPoint(B);\r\n            }\r\n        }\r\n    };\r\n\r\n    // Viewpoints\r\n    SceneHub._jsonParsers.viewpoints = (povs)=>{\r\n        if (povs === undefined) return;\r\n\r\n        for (let p in povs){\r\n            let pov = povs[p];\r\n            \r\n            if (p === \"home\"){\r\n                ATON.Nav.setHomePOV( \r\n                    new ATON.POV()\r\n                    .setPosition(pov.position[0],pov.position[1],pov.position[2])\r\n                    .setTarget(pov.target[0],pov.target[1],pov.target[2])\r\n                    .setFOV(pov.fov)\r\n                );\r\n            }\r\n            else {\r\n                new ATON.POV(p)\r\n                .setPosition(pov.position)\r\n                .setTarget(pov.target)\r\n                .setFOV(pov.fov)\r\n                //.setKeywords(pov.keywords);\r\n            }\r\n        }\r\n    };\r\n\r\n    // Visible scene-graph\r\n    SceneHub._jsonParsers.scenegraph = (sg)=>{\r\n        if (sg === undefined) return;\r\n\r\n        let nodes = sg.nodes;\r\n        let edges = sg.edges;\r\n\r\n        // nodes\r\n        for (let nid in nodes){\r\n            let N = nodes[nid]; // JSON node\r\n\r\n            //let G = ATON.createSceneNode(nid); // ATON node\r\n            let G = ATON.getOrCreateSceneNode(nid).removeChildren();\r\n            \r\n            // load models by urls list\r\n            let urls = N.urls;\r\n            if (urls){\r\n                if (Array.isArray(urls)){\r\n                    urls.forEach(u => {\r\n                        ATON.createSceneNode().load(ATON.PATH_COLLECTION+u).attachTo(G);\r\n                    });\r\n                }\r\n                else {\r\n                    G.load(ATON.PATH_COLLECTION+urls);\r\n                }\r\n            }\r\n\r\n            // FIXME: not working\r\n            if (N.shadowcast)    G.setShadowCast(N.shadowcast);\r\n            if (N.shadowreceive) G.setShadowCast(N.shadowreceive);\r\n\r\n            if (N.toYup) G.setYup();\r\n\r\n            // Keywords\r\n            if (N.keywords) G.kwords = N.keywords;\r\n\r\n            // Transform node\r\n            let transform = N.transform;\r\n            if (transform){\r\n                if (transform.position) G.setPosition(transform.position[0],transform.position[1],transform.position[2]);\r\n                if (transform.rotation) G.setRotation(transform.rotation[0],transform.rotation[1],transform.rotation[2]);\r\n                if (transform.scale)    G.setScale(transform.scale[0],transform.scale[1],transform.scale[2]);\r\n            }\r\n        }\r\n\r\n        // Build graph through relationships\r\n        for (let parid in edges){\r\n            let children = edges[parid];\r\n\r\n            let P = ATON.getSceneNode(parid);\r\n\r\n            if (P !== undefined){\r\n                for (let c in children){\r\n                    let childid = children[c];\r\n                    let C = ATON.getSceneNode(childid);\r\n                    if (C !== undefined) C.attachTo(P);\r\n                }\r\n            }\r\n        }\r\n/*\r\n        for (let e = 0; e < edges.length; e++){\r\n            let E = edges[e];\r\n\r\n            let from = E[0];\r\n            let to   = E[1];\r\n\r\n            if (from && to){\r\n                let child = ATON.getSceneNode(to);\r\n                if (child) child.attachTo(from);\r\n            }\r\n        }\r\n*/\r\n    };\r\n\r\n    // Semantic scene-graph\r\n    SceneHub._jsonParsers.semanticgraph = (sg)=>{\r\n        if (sg === undefined) return;\r\n\r\n        let nodes = sg.nodes;\r\n        let edges = sg.edges;\r\n\r\n        // nodes\r\n        for (let nid in nodes){\r\n            let N = nodes[nid]; // JSON node\r\n\r\n            //let G = ATON.createSemanticNode(nid);\r\n            let G = ATON.getOrCreateSemanticNode(nid).removeChildren();\r\n            \r\n            // load shapes by urls list\r\n            let urls = N.urls;\r\n            if (urls){\r\n                if (Array.isArray(urls)){\r\n                    urls.forEach(u => {\r\n                        ATON.createSemanticNode().load(ATON.PATH_COLLECTION+u).attachTo(G);\r\n                    });\r\n                }\r\n                else {\r\n                    G.load(ATON.PATH_COLLECTION+urls);\r\n                }\r\n            }\r\n\r\n            if (N.toYup) G.setYup();\r\n\r\n            if (N.description) G.setDescription(N.description);\r\n            if (N.audio) G.setAudio(N.audio);\r\n\r\n            // Keywords\r\n            if (N.keywords) G.kwords = N.keywords;\r\n\r\n            // Sphere [x,y,z, r]\r\n            let spheres = N.spheres;\r\n            if (Array.isArray(spheres)){\r\n                for (let s in spheres){\r\n                    let S = spheres[s];\r\n                    ATON.SemFactory.createSphere(nid, new THREE.Vector3(S[0],S[1],S[2]), S[3]);\r\n                }\r\n            }\r\n\r\n            let convexshapes = N.convexshapes;\r\n            if (Array.isArray(convexshapes)){\r\n                for (let s in convexshapes){\r\n                    let S = convexshapes[s];\r\n\r\n                    let points = [];\r\n                    for (let i=0; i<S.length; i+=3){\r\n                        let p = new THREE.Vector3(S[i],S[i+1],S[i+2]);\r\n                        points.push(p);\r\n                    }\r\n\r\n                    ATON.SemFactory.createConvexShape(nid, points);\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        // Build relationships\r\n        for (let parid in edges){\r\n            let children = edges[parid];\r\n\r\n            let P = ATON.getSemanticNode(parid);\r\n\r\n            if (P !== undefined){\r\n                for (let c in children){\r\n                    let childid = children[c];\r\n                    let C = ATON.getSemanticNode(childid);\r\n                    if (C !== undefined) C.attachTo(P);\r\n                }\r\n            }\r\n        }\r\n/*\r\n        for (let e = 0; e < edges.length; e++){\r\n            let E = edges[e];\r\n\r\n            let from = E[0];\r\n            let to   = E[1];\r\n\r\n            if (from && to){\r\n                let child = ATON.getSemanticNode(to);\r\n                if (child) child.attachTo(from);\r\n            }\r\n        }\r\n*/\r\n    };\r\n\r\n};\r\n\r\n// Adds custom scene parser to extend JSON scene\r\n// parser(k){ ... }\r\nSceneHub.addSceneParser = (k, parser)=>{\r\n    SceneHub._jsonParsers[k] = parser;\r\n};\r\n\r\n// [C] Sends JSON edit to server node\r\n// previously used: https://tools.ietf.org/html/rfc6902\r\nSceneHub.sendEdit = (patch, mode, onComplete)=>{\r\n    if (SceneHub._bLoading || !SceneHub._bEdit) return;\r\n    if (patch === undefined) return;\r\n    if (mode === undefined) mode = SceneHub.MODE_ADD;\r\n\r\n    let sid = SceneHub.currID;\r\n\r\n    let O = {};\r\n    O.sid  = sid;\r\n    O.data = patch;\r\n    O.mode = (mode === SceneHub.MODE_DEL)? \"DEL\" : \"ADD\";\r\n\r\n    let jstr = JSON.stringify(O);\r\n    //console.log(jstr);\r\n\r\n    $.ajax({\r\n        url: ATON.PATH_RESTAPI+\"edit/scene\",\r\n        type:\"POST\",\r\n        data: jstr,\r\n        contentType:\"application/json; charset=utf-8\",\r\n        dataType:\"json\",\r\n\r\n        // Update local scene JSON\r\n        // TODO: improve traffic by applying patch to local json, and NOT by receiving entire JSON \r\n        success: (r)=>{\r\n            if (r === undefined) return;\r\n            //console.log(r);\r\n            SceneHub.currData = r;\r\n            //console.log(ATON.currSceneHub.data);\r\n\r\n            if (onComplete) onComplete();\r\n        }\r\n    });\r\n};\r\n\r\n\r\nexport default SceneHub;","/*\r\n    ATON Audio Hub\r\n    Centralized Audio/Soundscape\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\n/**\r\nATON Audio Hub\r\n@namespace AudioHub\r\n*/\r\nlet AudioHub = {};\r\n\r\n// Realize the hub\r\nAudioHub.init = ()=>{\r\n\r\n    AudioHub._listener = new THREE.AudioListener();\r\n    AudioHub._loader   = new THREE.AudioLoader();\r\n};\r\n\r\n\r\nexport default AudioHub;","/*\r\n    ATON Navigation system\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\nconst COSINOIDAL_DIST = function(x){ return (1.0 - Math.cos(x * Math.PI)) / 2.0; };\r\n\r\n/**\r\nATON Navigation system\r\n@namespace Nav\r\n*/\r\nlet Nav = {};\r\n\r\n// Consts\r\nNav.STD_FOV  = 50.0;\r\nNav.STD_NEAR = 0.05;\r\nNav.STD_FAR  = 1000.0;\r\n\r\nNav.FP_EPS = 0.01;\r\nNav.STD_POV_TRANS_DURATION = 2.0;\r\n\r\n// Non-immersive navigation controls\r\nNav.MODE_ORBIT  = 0;\r\nNav.MODE_FP     = 1;\r\nNav.MODE_DEVORI = 2;\r\n\r\n\r\nNav.POVtransitionDuration = Nav.STD_POV_TRANS_DURATION;\r\n\r\n\r\n\r\n\r\n//Initialize nav system\r\nNav.init = ()=>{\r\n    Nav._mode = undefined;\r\n\r\n    Nav._rotSpeedOrbit = 0.4;\r\n    Nav._rotSpeedFP    = -0.2;\r\n    Nav._inertia       = 0.0; //0.05; // 0.0 = disabled\r\n\r\n    Nav._bControl = true; // user control\r\n\r\n    Nav._bInteracting = false;\r\n\r\n    // Setup controls\r\n    //Nav._camera = new THREE.PerspectiveCamera( Nav.STD_FOV, window.innerWidth / window.innerHeight, Nav.STD_NEAR, Nav.STD_FAR );\r\n    //Nav._camera.layers.enableAll();\r\n    //Nav._controls = new THREE.OrbitControls( Nav._camera, ATON._renderer.domElement);\r\n\r\n    Nav._prevMode = undefined;\r\n    Nav.setOrbitControl();\r\n\r\n    // POV data\r\n    Nav._currPOV = new ATON.POV(); // holds current viewpoint data (eye, target, etc...)\r\n    Nav._fromPOV = new ATON.POV(); // initial POV when requesting a transition\r\n    Nav._reqPOV  = new ATON.POV(); // requested POV for transition\r\n\r\n    Nav.homePOV = undefined; //new ATON.POV();\r\n\r\n    Nav._tPOVcall = -1.0;\r\n    Nav._tPOVprogress = 0.0;\r\n\r\n    Nav.povlist = {}; // This will handle registered POVs\r\n\r\n    // World direction and orientation (quat)\r\n    // consistent within standard and immersive XR\r\n    Nav._vDir = new THREE.Vector3(1,0,0);\r\n    Nav._qOri = new THREE.Quaternion();\r\n\r\n    // Motion\r\n    Nav._motionAmt = 0.0;\r\n    Nav._motionDir = new THREE.Vector3(0,1,0);\r\n};\r\n\r\n/**\r\nGet current eye location, consistent within standard and immersive XR sessions.\r\n@returns {THREE.Vector3}\r\n@example\r\nlet p = ATON.Nav.getCurrentEyeLocation();\r\n*/\r\nNav.getCurrentEyeLocation = ()=>{\r\n    return Nav._currPOV.pos;\r\n};\r\n\r\n/**\r\nGet current view direction (normalized). Consistent within standard and immersive XR sessions.\r\n@returns {THREE.Vector3}\r\n@example\r\nlet d = ATON.Nav.getCurrentDirection();\r\n*/\r\nNav.getCurrentDirection = ()=>{\r\n    return Nav._vDir;\r\n};\r\n\r\n/**\r\nGrab current POV and return a copy.\r\n@returns {POV}\r\n@example\r\nlet pov = ATON.Nav.copyCurrentPOV();\r\n*/\r\nNav.copyCurrentPOV = ()=>{\r\n    let pov = new ATON.POV();\r\n    pov.pos.copy(Nav._currPOV.pos);\r\n    pov.target.copy(Nav._currPOV.target);\r\n    pov.fov = Nav._currPOV.fov;\r\n\r\n    return pov;\r\n};\r\n\r\nNav.addPOV = (pov, id)=>{\r\n    if (pov === undefined) return;\r\n\r\n    pov.as(id);\r\n    return pov;\r\n};\r\n\r\n/**\r\nReturn true if the navigation system is currently performing a transition\r\n@returns {boolean}\r\n*/\r\nNav.isTransitioning = ()=>{\r\n    if (Nav._tPOVcall >= 0.0) return true;\r\n    return false;\r\n};\r\n\r\n/**\r\nEnable/disable user navigation control\r\n@param {boolean} b - false to lock controls, true to unlock\r\n*/\r\nNav.setUserControl = (b)=>{\r\n    Nav._bControl = b;\r\n\r\n    if (Nav._controls !== undefined) Nav._controls.enabled = b;\r\n\r\n    if (Nav._cOrbit) Nav._cOrbit.enabled = b;\r\n    if (Nav._cFirstPerson) Nav._cFirstPerson.enabled = b;\r\n};\r\n\r\n/**\r\nToggle user control\r\n*/\r\nNav.toggleUserControl = ()=>{\r\n    Nav.setUserControl(!Nav._bControl);\r\n};\r\n\r\n/**\r\nReturn true if navigation controls are enabled (i.e. the user can control the camera)\r\n@returns {boolean}\r\n*/\r\nNav.isUserControlEnabled = ()=>{\r\n    return Nav._bControl;\r\n};\r\n\r\n/**\r\nReturn true if the navigation system is in Orbit mode\r\n@returns {boolean}\r\n*/\r\nNav.isOrbit = ()=>{ return (Nav._mode === Nav.MODE_ORBIT); };\r\n\r\n/**\r\nReturn true if the navigation system is in First-person mode\r\n@returns {boolean}\r\n*/\r\nNav.isFirstPerson = ()=>{ return (Nav._mode === Nav.MODE_FP); };\r\n\r\n/**\r\nReturn true if the navigation system is in Device-orientation mode\r\n@returns {boolean}\r\n*/\r\nNav.isDevOri = ()=>{ return (Nav._mode === Nav.MODE_DEVORI); };\r\n\r\n/**\r\nSet Navigation mode\r\n@param {number} navmode - navigation mode (0: Orbit, 1: FirstPerson, 2: DeviceOrientation)\r\n*/\r\nNav.setNavMode = (navmode)=>{\r\n    if (navmode === undefined) return;\r\n\r\n    if (navmode === Nav.MODE_ORBIT)  Nav.setOrbitControl();\r\n    if (navmode === Nav.MODE_FP)     Nav.setFirstPersonControl();\r\n    if (navmode === Nav.MODE_DEVORI) Nav.setDeviceOrientationControl();\r\n};\r\n\r\n/**\r\nRestore previously used navigation mode.\r\nIf no previous nav mode is found, defaults to Orbit Control\r\n*/\r\nNav.restorePreviousNavMode = ()=>{\r\n    if (Nav._prevMode === undefined) Nav.setOrbitControl();\r\n\r\n    Nav.setNavMode(Nav._prevMode);\r\n};\r\n\r\n/**\r\nSet Orbit navigation mode (default)\r\n*/\r\nNav.setOrbitControl = ()=>{\r\n    if (ATON.XR.isPresenting()) return;\r\n\r\n    Nav._prevMode = Nav._mode; // store previous nav mode\r\n\r\n    Nav._mode = Nav.MODE_ORBIT;\r\n    Nav._bInteracting = false;\r\n\r\n    // One-time setup\r\n    if (Nav._cOrbit === undefined){\r\n        Nav._camOrbit = new THREE.PerspectiveCamera( Nav.STD_FOV, window.innerWidth / window.innerHeight, Nav.STD_NEAR, Nav.STD_FAR );\r\n        Nav._camOrbit.layers.enableAll();\r\n\r\n        Nav._cOrbit = new THREE.OrbitControls( Nav._camOrbit, ATON._renderer.domElement);\r\n\r\n        let C = Nav._cOrbit;\r\n\r\n        C.rotateSpeed   = Nav._rotSpeedOrbit;\r\n        C.enablePan     = true;\r\n        \r\n        if (Nav._inertia > 0.0){\r\n            C.enableDamping = true;\r\n            C.dampingFactor = Nav._inertia;\r\n        }\r\n        \r\n        C.screenSpacePanning = true;\r\n        \r\n        C.enableZoom  = true;\r\n        C.minDistance = 0.03;\r\n        C.maxDistance = 1000.0;\r\n\r\n        if (!Nav._bControl) C.enabled = false;\r\n\r\n        //C.addEventListener(\"change\", () => { Nav._bChanged = true; });\r\n        C.addEventListener(\"start\",()=>{\r\n            Nav._bInteracting = true;\r\n        });\r\n        C.addEventListener(\"end\",()=>{\r\n            Nav._bInteracting = false;\r\n        });\r\n\r\n    }\r\n\r\n    Nav._controls = Nav._cOrbit;\r\n    //Nav._controls.target.copy(Nav._camera.position);\r\n    Nav._camera = Nav._camOrbit;\r\n    \r\n    Nav._controls.update();\r\n    if (Nav._currPOV) Nav.syncCurrCamera();\r\n};\r\n\r\n/**\r\nSet First-Person navigation mode\r\n*/\r\nNav.setFirstPersonControl = ()=>{\r\n    if (ATON.XR.isPresenting()) return;\r\n\r\n    Nav._prevMode = Nav._mode; // store previous nav mode\r\n\r\n    Nav._mode = Nav.MODE_FP;\r\n    Nav._bInteracting = false;\r\n\r\n    // One-time setup\r\n    if (Nav._cFirstPerson === undefined){\r\n        Nav._camFP = new THREE.PerspectiveCamera( Nav.STD_FOV, window.innerWidth / window.innerHeight, Nav.STD_NEAR, Nav.STD_FAR );\r\n        Nav._camFP.layers.enableAll();\r\n\r\n        Nav._cFirstPerson = new THREE.OrbitControls( Nav._camFP, ATON._renderer.domElement);\r\n\r\n        let C = Nav._cFirstPerson;\r\n\r\n        C.enableZoom  = false;\r\n        C.enablePan   = false;\r\n        C.rotateSpeed = Nav._rotSpeedFP;\r\n        \r\n        if (Nav._inertia > 0.0){\r\n            C.enableDamping = true;\r\n            C.dampingFactor = Nav._inertia;\r\n        }\r\n        \r\n        //C.screenSpacePanning = true;\r\n\r\n        C.target.copy(Nav._camera.position);\r\n\r\n        C.minDistance = 0.05;\r\n        C.maxDistance = 0.05;\r\n\r\n        if (!Nav._bControl) C.enabled = false;\r\n    }\r\n\r\n    Nav._controls = Nav._cFirstPerson;\r\n    //Nav._controls.target.copy(Nav._camera.position);\r\n    Nav._camera = Nav._camFP;\r\n\r\n    Nav._controls.update();\r\n    if (Nav._currPOV) Nav.syncCurrCamera();\r\n/*\r\n    if (Nav._controls) ATON._controls.dispose();\r\n    ATON._controls = new THREE.FirstPersonControls( ATON._camera, ATON._renderer.domElement);\r\n    ATON._controls.lookSpeed = 0.1;\r\n    ATON._controls.movementSpeed = 10;\r\n    ATON._controls.noFly = true;\r\n    ATON._controls.lookVertical = false;\r\n\r\n    //ATON._camera.position.set( 20.0, 5.0, 0 );\r\n    ATON._controls.lookAt(0,4,0);\r\n\r\n    ATON._controls.update();\r\n    console.log(ATON._controls);\r\n*/\r\n};\r\n\r\n/**\r\nSet device-orientation navigation mode\r\n*/\r\nNav.setDeviceOrientationControl = ()=>{\r\n    if (!ATON.Utils.isMobile()) return;\r\n\r\n    Nav._prevMode = Nav._mode; // store previous nav mode\r\n\r\n    Nav._mode = Nav.MODE_DEVORI;\r\n    Nav._bInteracting = false;\r\n    ATON._screenPointerCoords.set(0.0,0.0);\r\n\r\n    // One-time setup\r\n    if (Nav._cDevOri === undefined){\r\n        Nav._camDevOri = new THREE.PerspectiveCamera( Nav.STD_FOV, window.innerWidth / window.innerHeight, Nav.STD_NEAR, Nav.STD_FAR );\r\n        Nav._camDevOri.layers.enableAll();\r\n\r\n        Nav._cDevOri = new THREE.DeviceOrientationControls(Nav._camDevOri, ATON._renderer.domElement);\r\n        //Nav._cDevOri = new Nav.DeviceOrientationControls(Nav._camDevOri, ATON._renderer.domElement);\r\n\r\n        Nav._cDevOri.alphaOffset = 0.0; //The alpha offset in radians\r\n    }\r\n\r\n    Nav._controls = Nav._cDevOri;\r\n    Nav._camera   = Nav._camDevOri;\r\n\r\n    Nav._controls.update();\r\n    if (Nav._currPOV) Nav.syncCurrCamera();\r\n};\r\n\r\n/**\r\nSet a motion amount\r\n@param {number} f - the motion amount\r\n@example\r\nATON.Nav.setMotionAmount(0.1);\r\n*/\r\nNav.setMotionAmount = (f)=>{\r\n    Nav._motionAmt = f;\r\n};\r\n\r\n/**\r\nSet a motion direction\r\n@param {THREE.Vector3} f - the motion direction\r\n@example\r\nATON.Nav.setMotionDirection( new THREE.Vector(1,0,0) );\r\n*/\r\nNav.setMotionDirection = (v)=>{\r\n    Nav._motionDir.copy(v);\r\n}\r\n\r\n/**\r\nStop current motion\r\n*/\r\nNav.stop = ()=>{\r\n    Nav._motionAmt = 0.0;\r\n    //TODO: stop any transition\r\n};\r\n\r\n/**\r\nSet field-of-view (FoV) in degrees\r\n@param {number} f\r\n@example\r\nATON.Nav.setFOV(30.0);\r\n*/\r\nNav.setFOV = (f)=>{\r\n    if (ATON.XR.isPresenting()) return; // skip for immersive sessions\r\n\r\n    Nav._currPOV.fov = f;\r\n\r\n    let cam = Nav._camera;\r\n    cam.fov = f;\r\n    cam.updateProjectionMatrix();\r\n};\r\n\r\n/**\r\nGet current field-of-view (FoV) in degrees\r\n@returns {number}\r\n*/\r\nNav.getFOV = ()=>{\r\n    return Nav._currPOV.fov;\r\n};\r\n\r\n\r\n// Retrieve currPOV from camera and controls\r\nNav.syncCurrPOV = ()=>{\r\n    if (ATON.XR.isPresenting()){\r\n        \r\n        let C = ATON._renderer.xr.getCamera(Nav._camera);\r\n        C.getWorldPosition( Nav._currPOV.pos );\r\n        C.getWorldQuaternion( Nav._qOri );\r\n        C.getWorldDirection( Nav._vDir );\r\n        //console.log(Nav._hmdPos);\r\n\r\n        //ATON.XR.hmdPos.copy(Nav._currPOV.pos);\r\n        //ATON.XR.hmdDir.copy(Nav._vDir);\r\n        \r\n        //ATON._renderer.xr.getCamera(Nav._camera);\r\n        //ATON._renderer.xr.getCamera(Nav._camera).getWorldDirection(Nav._vDir);\r\n        //Nav._camera.getWorldDirection(Nav._vDir);\r\n        \r\n        //Nav._currPOV.pos.copy(Nav._camera.position);\r\n        return;\r\n    }\r\n\r\n    let ctrl  = Nav._controls;\r\n    let cam   = Nav._camera;\r\n\r\n    cam.getWorldDirection(Nav._vDir);\r\n    cam.getWorldQuaternion(Nav._qOri);\r\n\r\n    if (Nav._mode === Nav.MODE_DEVORI){\r\n        Nav._currPOV.pos.copy(cam.position);\r\n        return;\r\n    }\r\n\r\n    if (Nav._mode === Nav.MODE_FP){\r\n        Nav._currPOV.pos.copy(ctrl.target);\r\n\r\n        Nav._currPOV.target.x = Nav._currPOV.pos.x + Nav._vDir.x; //ctrl.target.x - cam.position.x;\r\n        Nav._currPOV.target.y = Nav._currPOV.pos.y + Nav._vDir.y; //ctrl.target.y - cam.position.y;\r\n        Nav._currPOV.target.z = Nav._currPOV.pos.z + Nav._vDir.z; //ctrl.target.z - cam.position.z;\r\n        return;\r\n    }\r\n    \r\n    Nav._currPOV.pos.copy(cam.position);\r\n    Nav._currPOV.target.copy(ctrl.target);\r\n};\r\n\r\n// After syncCurrPOV and before updateCamera, we maniuplate currPOV\r\n//==================================================================================\r\nNav.handlePOV = ()=>{\r\n    //console.log(Nav._currPOV.pos);\r\n\r\n    if (ATON.XR.isPresenting()) Nav.handleXRtransition();\r\n    else Nav.handlePOVtransition();\r\n\r\n    Nav.handleMotion();\r\n\r\n    //if (ATON.XR.isPresenting()) console.log(ATON._renderer.xr);\r\n\r\n    // Handle constraints\r\n\r\n};\r\n\r\nNav.handleMotion = ()=>{\r\n    if (Nav.isTransitioning()) return;\r\n\r\n    if (Nav._motionAmt != 0.0){\r\n\r\n        //if ()\r\n\r\n\r\n        if (ATON.XR.controller0 && ATON.XR.controller0.visible){\r\n            ATON.XR.controller0.getWorldDirection(Nav._motionDir);\r\n            Nav._motionDir.negate();\r\n            }\r\n        else Nav._motionDir.copy(Nav._vDir);\r\n\r\n        let fv = Nav._motionDir.clone();\r\n        fv.multiplyScalar(Nav._motionAmt * ATON._dt);\r\n\r\n        Nav._currPOV.pos.add(fv);\r\n        Nav._currPOV.target.add(fv); // check if needed\r\n    }\r\n};\r\n\r\nNav.handlePOVtransition = ()=>{\r\n    if (Nav._tPOVcall < 0.0) return;\r\n\r\n    if (Nav.POVtransitionDuration <= 0.0) Nav._tPOVprogress = 1.0;\r\n    else Nav._tPOVprogress = (ATON._clock.elapsedTime - Nav._tPOVcall) / Nav.POVtransitionDuration;\r\n\r\n    // End\r\n    if (Nav._tPOVprogress >= 1.0){\r\n\r\n        Nav._tPOVcall = -1.0;\r\n        //Nav._controls.enabled = true;\r\n\r\n        Nav._currPOV.pos.copy(Nav._reqPOV.pos);\r\n        Nav._currPOV.target.copy(Nav._reqPOV.target);\r\n        Nav._currPOV.fov = Nav._reqPOV.fov;\r\n\r\n        ATON.fireEvent(\"POVTransitionCompleted\", Nav._reqPOV.id);\r\n        return;\r\n    }\r\n\r\n    Nav._tPOVprogress = COSINOIDAL_DIST(Nav._tPOVprogress);\r\n\r\n    Nav._currPOV.pos.lerpVectors(Nav._fromPOV.pos, Nav._reqPOV.pos, Nav._tPOVprogress);\r\n    Nav._currPOV.target.lerpVectors(Nav._fromPOV.target, Nav._reqPOV.target, Nav._tPOVprogress);\r\n\r\n    if (!Nav._fromPOV.fov || !Nav._reqPOV.fov) return;\r\n    Nav._currPOV.fov = THREE.MathUtils.lerp(Nav._fromPOV.fov, Nav._reqPOV.fov, Nav._tPOVprogress);\r\n\r\n    //console.log(Nav._camera);\r\n\r\n    Nav._camera.fov = Nav._currPOV.fov;\r\n    Nav._camera.updateProjectionMatrix();\r\n};\r\n\r\n// Immersive XR transitions\r\nNav.handleXRtransition = ()=>{\r\n    if (Nav._tPOVcall < 0.0) return;\r\n\r\n    if (Nav.POVtransitionDuration <= 0.0) Nav._tPOVprogress = 1.0;\r\n    else Nav._tPOVprogress = (ATON._clock.elapsedTime - Nav._tPOVcall) / Nav.POVtransitionDuration;\r\n\r\n    // End\r\n    if (Nav._tPOVprogress >= 1.0){\r\n\r\n        Nav._tPOVcall = -1.0;\r\n        //Nav._controls.enabled = true;\r\n\r\n        //ATON.XR.setRefSpaceLocation(Nav._reqXRpos);\r\n\r\n        console.log(\"XR height\"+ATON.XR._currPos.y);\r\n        console.log(\"HMD height\"+Nav._currPOV.pos.y);\r\n\r\n        ATON.fireEvent(\"POVTransitionCompleted\", Nav._reqPOV.id);\r\n        return;\r\n    }\r\n\r\n    ATON.XR._currPos.lerpVectors(ATON.XR._fromPos, ATON.XR._reqPos, Nav._tPOVprogress);\r\n    //ATON.XR._currPos.lerpVectors(Nav._fromPOV.pos, Nav._reqPOV.pos, Nav._tPOVprogress);\r\n\r\n};\r\n\r\n// Update internal camera from currPOV \r\nNav.syncCurrCamera = ()=>{\r\n    let ctrl  = Nav._controls;\r\n    let cam   = Nav._camera;\r\n    \r\n    let pos = Nav._currPOV.pos;\r\n    let tgt = Nav._currPOV.target;\r\n\r\n    // We are in VR\r\n    if (ATON.XR.isPresenting()){\r\n        ///let vrcam = ATON.XR.rig;\r\n        ///vrcam.position.copy(pos);\r\n        \r\n        ///ATON.XR.setRefSpaceLocation(pos);\r\n\r\n        //let C = ATON._renderer.xr.getCamera(cam);\r\n        //C.getWorldDirection(Nav._vDir);\r\n        return;\r\n    }\r\n\r\n    if (Nav._mode === Nav.MODE_DEVORI){\r\n        cam.position.copy(pos);\r\n        return;\r\n    }\r\n\r\n    // Common controls\r\n    //let d = new THREE.Vector3();\r\n    Nav._vDir.subVectors(tgt, pos);\r\n    Nav._vDir.normalize();\r\n\r\n    if (Nav._mode === Nav.MODE_FP){\r\n        ctrl.target.copy(pos);\r\n\r\n        cam.position.x = ctrl.target.x - (Nav._vDir.x * Nav.FP_EPS);\r\n        cam.position.y = ctrl.target.y - (Nav._vDir.y * Nav.FP_EPS);\r\n        cam.position.z = ctrl.target.z - (Nav._vDir.z * Nav.FP_EPS);\r\n    }\r\n    else {\r\n        cam.position.copy(pos);\r\n        ctrl.target.copy(tgt);\r\n    }\r\n};\r\n\r\n// Main update routine\r\nNav.update = ()=>{\r\n\r\n    //Nav._bXR = ATON.XR.isPresenting();\r\n\r\n    Nav.syncCurrPOV();\r\n    Nav.handlePOV();\r\n    Nav.syncCurrCamera();\r\n};\r\n\r\n\r\n/**\r\nRequest transition to viewpoint (POV)\r\n@param {POV} pov - the target POV\r\n@param {number} duration - duration of transition in seconds (optional), otherwise use standard duration\r\n@example\r\nATON.Nav.requestPOV( myTargetPOV );\r\n*/\r\nNav.requestPOV = (pov, duration)=>{\r\n    if (ATON._tPOVcall >= 0.0) return; // already requested\r\n\r\n    ATON.fireEvent(\"POVTransitionRequested\", pov.id);\r\n\r\n    if (duration !== undefined) Nav.POVtransitionDuration = duration;\r\n    \r\n    //Nav._controls.enabled = false;\r\n\r\n    Nav._tPOVcall = ATON._clock.elapsedTime;\r\n    \r\n    if (ATON.XR.isPresenting()){\r\n        Nav._reqPOV.pos.copy(pov.pos? pov.pos : Nav._currPOV.pos);\r\n        Nav._fromPOV.pos.copy(Nav._currPOV.pos);\r\n\r\n        ATON.XR._reqPos.copy(pov.pos? pov.pos : Nav._currPOV.pos);\r\n        ATON.XR._fromPos.copy(ATON.XR._currPos);\r\n    }\r\n    else {\r\n        Nav._reqPOV.pos.copy(pov.pos? pov.pos : Nav._currPOV.pos);\r\n        Nav._reqPOV.target.copy( pov.target? pov.target : Nav._currPOV.target);\r\n        Nav._reqPOV.fov = pov.fov? pov.fov : Nav._currPOV.fov;\r\n\r\n        Nav._fromPOV.pos.copy(Nav._currPOV.pos);\r\n        Nav._fromPOV.target.copy(Nav._currPOV.target);\r\n        Nav._fromPOV.fov = Nav._currPOV.fov;\r\n    }\r\n};\r\n\r\n\r\nNav.requestPOVbyBound = (bs, duration)=>{\r\n    if (bs === undefined) return;\r\n\r\n    let T = new THREE.Vector3();\r\n    let E = new THREE.Vector3();\r\n\r\n    T.copy(bs.center);\r\n    \r\n    let r = bs.radius * 2.5;\r\n    E.x = T.x - (r * Nav._vDir.x);\r\n    E.y = T.y - (r * Nav._vDir.y);\r\n    E.z = T.z - (r * Nav._vDir.z);\r\n\r\n    let pov = new ATON.POV().setPosition(E).setTarget(T);    \r\n    Nav.requestPOV(pov, duration);\r\n};\r\n\r\n/**\r\nRequest transition to specific ATON Node\r\n@param {Node} n - the target ATON Node\r\n@param {number} duration - duration of transition in seconds (optional), otherwise use standard duration\r\n@example\r\nATON.Nav.requestPOVbyNode( myNode );\r\n*/\r\nNav.requestPOVbyNode = (n, duration)=>{\r\n    if (n === undefined) return;\r\n    \r\n    let bs = n.getBound();\r\n\r\n    Nav.requestPOVbyBound(bs,duration);\r\n};\r\n\r\nNav.requestRetarget = (point, normal, duration)=>{\r\n    let M = new THREE.Vector3();\r\n    if (normal === undefined){\r\n        M.lerpVectors(point, Nav._currPOV.pos, 0.8);\r\n    }\r\n    else {\r\n        let d = point.distanceTo(Nav._currPOV.pos);\r\n        d *= 0.5;\r\n        M.x = point.x + (normal.x * d);\r\n        M.y = point.y + (normal.y * d);\r\n        M.z = point.z + (normal.z * d);\r\n    }\r\n\r\n    let pov = new ATON.POV().setPosition(M).setTarget(point).setFOV(Nav._currPOV.fov);\r\n    console.log(pov);\r\n    \r\n    Nav.requestPOV(pov, duration);\r\n};\r\n\r\n\r\n/**\r\nCompute a default home, depending on visibile bounding sphere. Typically called after all assets are loaded\r\n@param {THREE.Vector3} dv - the normalized offset direction (optional)\r\n@example\r\nATON.Nav.computeDefaultHome();\r\n*/\r\nNav.computeDefaultHome = (dv)=>{\r\n    if (dv === undefined) dv = new THREE.Vector3(1,0.7,1);\r\n\r\n    let sceneBS = ATON.getRootScene().getBound();\r\n\r\n    let eye = new THREE.Vector3(\r\n        sceneBS.center.x + (sceneBS.radius * dv.x * 1.5), \r\n        sceneBS.center.y + (sceneBS.radius * dv.y * 1.5), \r\n        sceneBS.center.z + (sceneBS.radius * dv.z * 1.5)\r\n    );\r\n\r\n    Nav.homePOV = new ATON.POV().setPosition(eye).setTarget(sceneBS.center);\r\n};\r\n\r\n/** \r\nSet the home viewpoint (POV)\r\n@param {POV} pov - the home POV\r\n*/\r\nNav.setHomePOV = (pov)=>{\r\n    Nav.homePOV = pov;\r\n};\r\n\r\nNav.computeAndRequestDefaultHome = (duration, dv)=>{\r\n    Nav.computeDefaultHome(dv);\r\n    Nav.requestPOV(Nav.homePOV, duration);\r\n};\r\n\r\n/** \r\nRequest home viewpoint\r\n@param {number} duration - transition duration\r\n*/\r\nNav.requestHome = (duration)=>{\r\n    Nav.requestPOV(Nav.homePOV, duration);\r\n};\r\n\r\n\r\n/*\r\nMobile devori (modified for absolute compass - UNSTABLE)\r\nauthor richt / http://richt.me\r\nauthor WestLangley / http://github.com/WestLangley\r\nW3C Device Orientation control (http://w3c.github.io/deviceorientation/spec-source-orientation.html)\r\n*/\r\nNav.DeviceOrientationControls = function ( object ) {\r\n    let scope = this;\r\n\r\n    this.object = object;\r\n    this.object.rotation.reorder( 'YXZ' );\r\n    this.enabled = true;\r\n\r\n    this.deviceOrientation = {};\r\n    this.screenOrientation = 0;\r\n\r\n    this.alphaOffset = 0; // radians\r\n    this.absolute = false;\r\n    this.alphaOffsetDevice = undefined;\r\n    this.alphaOffsetScreen = undefined;\r\n\r\n    let onDeviceOrientationChangeEvent = function ( event ) {\r\n        if(scope.absolute) return;\r\n        scope.deviceOrientation = event;\r\n    };\r\n\r\n    let onDeviceOrientationAbsoluteChangeEvent = function ( event ) {\r\n        scope.deviceOrientation = event;\r\n        scope.absolute = true;\r\n    };\r\n\r\n    let onScreenOrientationChangeEvent = function () {\r\n        scope.screenOrientation = window.orientation || 0;\r\n    };\r\n\r\n    // The angles alpha, beta and gamma form a set of intrinsic Tait-Bryan angles of type Z-X'-Y''\r\n    let setObjectQuaternion = function () {\r\n        let zee = new THREE.Vector3( 0, 0, 1 );\r\n        let euler = new THREE.Euler();\r\n\r\n        let q0 = new THREE.Quaternion();\r\n        let q1 = new THREE.Quaternion( - Math.sqrt( 0.5 ), 0, 0, Math.sqrt( 0.5 ) ); // - PI/2 around the x-axis\r\n\r\n        return function ( quaternion, alpha, beta, gamma, orient ) {\r\n            euler.set( beta, alpha, - gamma, 'YXZ' ); // 'ZXY' for the device, but 'YXZ' for us\r\n            quaternion.setFromEuler( euler ); // orient the device\r\n            quaternion.multiply( q1 ); // camera looks out the back of the device, not the top\r\n            quaternion.multiply( q0.setFromAxisAngle( zee, - orient ) ); // adjust for screen orientation\r\n        };\r\n\r\n    }();\r\n\r\n    this.connect = function () {\r\n        onScreenOrientationChangeEvent(); // run once on load\r\n\r\n        window.addEventListener( 'orientationchange', onScreenOrientationChangeEvent, false );\r\n        window.addEventListener( 'deviceorientation', onDeviceOrientationChangeEvent, false );\r\n        window.addEventListener( 'deviceorientationabsolute', onDeviceOrientationAbsoluteChangeEvent, false );\r\n\r\n        scope.enabled = true;\r\n    };\r\n\r\n    this.disconnect = function () {\r\n        window.removeEventListener( 'orientationchange', onScreenOrientationChangeEvent, false );\r\n        window.removeEventListener( 'deviceorientation', onDeviceOrientationChangeEvent, false );\r\n        window.removeEventListener( 'deviceorientationabsolute', onDeviceOrientationAbsoluteChangeEvent, false );\r\n\r\n        scope.enabled = false;\r\n    };\r\n\r\n    this.update = function () {\r\n        if ( scope.enabled === false ) return;\r\n\r\n        let device;\r\n        device = scope.deviceOrientation;\r\n\r\n        if ( device ) {\r\n            let alpha = this.getDirection() ? THREE.Math.degToRad( this.getDirection() ) + scope.alphaOffset : 0; // Z\r\n            let beta = device.beta ? THREE.Math.degToRad( device.beta ) : 0; // X'\r\n\r\n            let gamma = device.gamma ? THREE.Math.degToRad( device.gamma ) : 0; // Y''\r\n            let orient = scope.screenOrientation ? THREE.Math.degToRad( scope.screenOrientation ) : 0; // O\r\n\r\n            setObjectQuaternion( scope.object.quaternion, alpha, beta, gamma, orient );\r\n        }\r\n\r\n    };\r\n\r\n    this.dispose = ()=>{\r\n        scope.disconnect();\r\n    };\r\n\r\n    this.iOSOrientationPermission = ()=>{\r\n        if (typeof DeviceOrientationEvent.requestPermission === 'function') {\r\n            DeviceOrientationEvent.requestPermission().then(permissionState => {\r\n                if (permissionState === 'granted') {\r\n\r\n                }\r\n\r\n                console.log(permissionState);\r\n            }).catch(console.error);\r\n        }\r\n    }\r\n\r\n    this.getDirection = ()=>{\r\n        return (typeof scope.deviceOrientation.webkitCompassHeading != \"undefined\") ? scope.deviceOrientation.webkitCompassHeading : scope.deviceOrientation.alpha;\r\n    }\r\n\r\n    this.getDirectionMap = ()=>{\r\n        return (typeof scope.deviceOrientation.webkitCompassHeading != \"undefined\") ? (360 - scope.deviceOrientation.webkitCompassHeading) : scope.deviceOrientation.alpha;\r\n    }\r\n\r\n    this.connect();\r\n};\r\n\r\n\r\nexport default Nav;","/*\r\n    ATON immersive XR module\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\n/**\r\nATON Immersive XR\r\n@namespace XR\r\n*/\r\nlet XR = {};\r\n\r\nXR.STD_TELEP_DURATION = 0.03;\r\nXR.HAND_R = 0;\r\nXR.HAND_L = 1;\r\n\r\n\r\n//Initializes XR component\r\nXR.init = ()=>{\r\n    ATON._renderer.xr.enabled = true;\r\n    ATON._renderer.xr.setReferenceSpaceType( 'local' );\r\n    \r\n    if (ATON.device.isMobile) ATON._renderer.xr.setFramebufferScaleFactor(0.5); // WebXR density\r\n\r\n    XR._bPresenting = false;\r\n    XR.currSession = null;\r\n    XR._sessionType = \"immersive-vr\";\r\n\r\n    XR.rig = new THREE.Group();\r\n    //XR.rig.position.set(0,0,0);\r\n    XR.rig.add( ATON.Nav._camera );\r\n    ATON._rootUI.add(XR.rig);\r\n\r\n    //XR.hmdOri = new THREE.Quaternion();\r\n    //XR.hmdPos = new THREE.Vector3();\r\n\r\n    XR._currPos = XR.rig.position; //new THREE.Vector3();\r\n    XR._fromPos = new THREE.Vector3();\r\n    XR._reqPos  = new THREE.Vector3();\r\n\r\n    XR.gControllers = undefined;\r\n\r\n    XR.controller0pos = new THREE.Vector3();\r\n    XR.controller1pos = new THREE.Vector3();\r\n    XR.controller0dir = new THREE.Vector3();\r\n    XR.controller1dir = new THREE.Vector3();\r\n\r\n    XR._lastPosR = undefined;\r\n    XR._lastPosL = undefined;\r\n\r\n    XR.gpad0 = undefined;\r\n    XR.gpad1 = undefined;\r\n\r\n    XR._urlHand = ATON.PATH_RES+\"models/hand/hand.glb\";\r\n\r\n    // Base ev\r\n    ATON.on(\"XRselectStart\", (c)=>{\r\n        if (c === XR.HAND_R) XR.defaultSelectHandler(c);\r\n    });\r\n    ATON.on(\"XRselectEnd\", (c)=>{\r\n        //ATON.Nav.stop();\r\n        //console.log(\"Sel end \"+c);\r\n    });\r\n\r\n    ATON.on(\"XRsqueezeStart\", (c)=>{\r\n        console.log(\"Squeeze \"+c);\r\n    });\r\n\r\n    ATON.on(\"VRC_IDassigned\", (uid)=>{\r\n        let rh = ATON.getUINode(\"Rhand\");\r\n        let lh = ATON.getUINode(\"Lhand\");\r\n\r\n        let avMats = ATON.MatHub.materials.avatars;\r\n        let am = avMats[uid % avMats.length];\r\n        if (lh) lh.setMaterial(am);\r\n        if (rh) rh.setMaterial(am);\r\n    });\r\n};\r\n\r\n/**\r\nSet session type\r\n@param {string} type - Can be \"immersive-vr\" or \"immersive-ar\"\r\n*/\r\nXR.setSessionType = (type)=>{\r\n    if (type === undefined) return;\r\n\r\n    XR._sessionType = type;\r\n    console.log(\"Session type: \"+type);\r\n};\r\n\r\n/**\r\nReturn true if we are presenting (immersive mode)\r\n@returns {boolean}\r\n*/\r\nXR.isPresenting = ()=>{\r\n    return XR._bPresenting;\r\n};\r\n\r\n\r\nXR.teleportOnQueriedPoint = ()=>{\r\n    if (ATON._queryDataScene === undefined) return false;\r\n\r\n    let P = ATON._queryDataScene.p;\r\n    let N = ATON._queryDataScene.n;\r\n\r\n    // Surface validation\r\n    if (N.y <= 0.7) return false;\r\n\r\n    // FIXME: height offset needed for \"local\", fill this automatically\r\n    ATON.Nav.requestPOV( new ATON.POV().setPosition(P.x, P.y + ATON.userHeight, P.z), XR.STD_TELEP_DURATION );\r\n\r\n    return true;\r\n};\r\n\r\nXR.defaultSelectHandler = (c)=>{\r\n\r\n    XR.teleportOnQueriedPoint();\r\n\r\n    ATON.FE.playAudioFromSemanticNode(ATON._hoveredSemNode);\r\n    \r\n    //ATON.Nav.setMotionAmount(3.0);\r\n};\r\n\r\nXR._handleUISelection = ()=>{\r\n    if (ATON._hoveredUI === undefined) return false;\r\n\r\n    let H = ATON.getUINode(ATON._hoveredUI);\r\n    if (H && H.onSelect) H.onSelect();\r\n    \r\n    return true;\r\n}\r\n\r\n\r\n/**\r\nSet reference-space location (not the actual HMD camera location).\r\nThis can be used to move around the user, given a proper locomotion technique\r\n@param {THREE.Vector3} p - the new location of reference space\r\n*/\r\nXR.setRefSpaceLocation = (p)=>{\r\n    XR.rig.position.copy(p);\r\n};\r\n\r\n// Right\r\nXR._setupControllerR = (C)=>{\r\n    if (XR.controller0) return;\r\n\r\n    XR.controller0 = C;\r\n    console.log(\"R controller\");\r\n\r\n    // Main trigger\r\n    C.addEventListener( 'selectstart', ()=>{\r\n        if (XR._handleUISelection()) return;\r\n\r\n        ATON.fireEvent(\"XRselectStart\", XR.HAND_R);\r\n    });\r\n    C.addEventListener( 'selectend', ()=>{ \r\n        ATON.fireEvent(\"XRselectEnd\", XR.HAND_R);\r\n    });\r\n\r\n    // Squeeze\r\n    C.addEventListener( 'squeezestart', ()=>{\r\n        ATON.fireEvent(\"XRsqueezeStart\", XR.HAND_R);\r\n    });\r\n    C.addEventListener( 'squeezeend', ()=>{\r\n        ATON.fireEvent(\"XRsqueezeEnd\", XR.HAND_R);\r\n    });\r\n\r\n    XR.setupControllerUI(XR.HAND_R);\r\n    ATON.fireEvent(\"XRcontrollerConnected\", XR.HAND_R);\r\n};\r\n\r\n// Left\r\nXR._setupControllerL = (C)=>{\r\n    if (XR.controller1) return;\r\n\r\n    XR.controller1 = C;\r\n    console.log(\"L controller\");\r\n\r\n    // Main trigger\r\n    C.addEventListener( 'selectstart',  ()=>{\r\n        //if (XR._handleUISelection()) return;\r\n        ATON.fireEvent(\"XRselectStart\", XR.HAND_L);\r\n    });\r\n    C.addEventListener( 'selectend',  ()=>{ \r\n        ATON.fireEvent(\"XRselectEnd\", XR.HAND_L);\r\n    });\r\n\r\n    // Squeeze\r\n    C.addEventListener( 'squeezestart', ()=>{\r\n        ATON.fireEvent(\"XRsqueezeStart\", XR.HAND_L);\r\n    });\r\n    C.addEventListener( 'squeezeend', ()=>{\r\n        ATON.fireEvent(\"XRsqueezeEnd\", XR.HAND_L);\r\n    });\r\n\r\n    XR.setupControllerUI(XR.HAND_L);\r\n    ATON.fireEvent(\"XRcontrollerConnected\", XR.HAND_L);\r\n};\r\n\r\n\r\n// On XR session started\r\nXR.onSessionStarted = ( session )=>{\r\n\tsession.addEventListener( 'end', XR.onSessionEnded );\r\n\r\n    // If any streaming is ongoing, terminate it\r\n    ATON.MediaRec.stopMediaStreaming();\r\n\r\n\tATON._renderer.xr.setSession( session );\r\n\tXR.currSession = session;\r\n\r\n    // get xrRefSpace\r\n    /*\r\n    session.requestReferenceSpace('local').then((refSpace) => {\r\n        xrRefSpace = refSpace.getOffsetReferenceSpace(new XRRigidTransform({x: 0, y: 1.5, z: 0}));\r\n    });\r\n    */\r\n\r\n    let C0 = ATON._renderer.xr.getController(0);\r\n    let C1 = ATON._renderer.xr.getController(1);\r\n\r\n    console.log(C0);\r\n    //ATON.VRoadcast.log(JSON.stringify(C0));\r\n\r\n    // Controller 0\r\n    if (C0){\r\n        C0.visible = false;\r\n\r\n        C0.addEventListener( 'connected', (e) => {\r\n\r\n            //console.log( e.data.handedness );\r\n\r\n            if (e.data.handedness === \"left\") XR._setupControllerL(C0);\r\n            else XR._setupControllerR(C0);\r\n\r\n            //C0.gamepad = e.data.gamepad;\r\n            //console.log(XR.controller0.gamepad);\r\n\r\n            //ATON.VRoadcast.log(JSON.stringify(e));\r\n\r\n            //let gp = C0.gamepad;\r\n            //if (gp.pose && gp.pose.hasPosition) C0.visible = true;\r\n\r\n        });\r\n    }\r\n\r\n    // Controller 1\r\n    if (C1){\r\n        C1.visible = false;\r\n\r\n        C1.addEventListener( 'connected', (e) => {\r\n            //console.log( e.data.handedness );\r\n\r\n            if (e.data.handedness === \"left\") XR._setupControllerL(C1);\r\n            else XR._setupControllerR(C1);\r\n\r\n            //C1.gamepad = e.data.gamepad;\r\n            \r\n            //let gp = C1.gamepad;\r\n            //if (gp.pose && gp.pose.hasPosition) C1.visible = true;\r\n\r\n        });\r\n\r\n    }\r\n\r\n    XR.setRefSpaceLocation(ATON.Nav._currPOV.pos);\r\n\r\n    XR._bPresenting = true;\r\n    console.log(\"XR now presenting\");\r\n\r\n    //XR.setupControllersUI();\r\n\r\n    ATON.fireEvent(\"XRmode\", true);\r\n\r\n    //console.log(session);\r\n};\r\n\r\n// On XR session terminated\r\nXR.onSessionEnded = ( /*event*/ )=>{\r\n    XR.currSession.removeEventListener( 'end', XR.onSessionEnded );\r\n    XR.currSession = null;\r\n\r\n    XR._bPresenting = false;\r\n    //XR.rig.position.set(0.0,0.0,0.0);\r\n    XR.setRefSpaceLocation( new THREE.Vector3(0,0,0) );\r\n\r\n    ATON.fireEvent(\"XRmode\", false);\r\n\r\n    // If any streaming is ongoing, terminate it\r\n    ATON.MediaRec.stopMediaStreaming();\r\n\r\n    console.log(\"Quit XR\");\r\n};\r\n\r\n/**\r\nToggle immersive mode\r\n*/\r\nXR.toggle = ()=>{\r\n    //if (!ATON.device.isXRsupported) return;\r\n    if (!ATON.device.xrSupported[XR._sessionType]) return;\r\n\r\n    // Enter XR\r\n    if (XR.currSession === null){\r\n        let sessionInit = { \r\n            optionalFeatures: [\r\n                \"local\",\r\n                //\"local-floor\" \r\n                ///\"bounded-floor\"\r\n            ]\r\n        };\r\n        navigator.xr.requestSession( XR._sessionType, sessionInit ).then( XR.onSessionStarted );\r\n        //console.log(navigator.xr);\r\n    }\r\n    // Exit XR\r\n    else {\r\n        XR.currSession.end();\r\n    }\r\n};\r\n\r\nXR.setupControllerUI = (h)=>{\r\n    let raytick = 0.003;\r\n    let raylen  = 5.0;\r\n\r\n    let rhand = undefined;\r\n    let lhand = undefined;\r\n\r\n    //console.log(\"Setup controller \"+h);\r\n\r\n    if (XR.gControllers === undefined){\r\n        XR.gControllers = ATON.createUINode();\r\n\r\n        XR.gControllers.disablePicking();\r\n        XR.rig.add(XR.gControllers);\r\n    }\r\n\r\n    // Left\r\n    if (h === XR.HAND_L){\r\n        XR.gControllers.add( XR.controller1 );\r\n\r\n        lhand = ATON.createUINode(\"Lhand\").load(XR._urlHand).setMaterial(ATON.MatHub.materials.controllerRay).setScale(-1,1,1);\r\n        XR.controller1.add(lhand);\r\n    }\r\n    // Right\r\n    else {\r\n        var geometry = new THREE.CylinderBufferGeometry( raytick,raytick, raylen, 4 );\r\n        geometry.rotateX( -Math.PI / 2 );\r\n        geometry.translate(0,0,-(raylen*0.5));\r\n\r\n        var mesh = new THREE.Mesh( geometry, ATON.MatHub.materials.controllerRay );\r\n\r\n        XR.controller0.add( mesh.clone() );\r\n        XR.gControllers.add( XR.controller0 );\r\n\r\n        rhand = ATON.createUINode(\"Rhand\").load(XR._urlHand).setMaterial(ATON.MatHub.materials.controllerRay);\r\n\r\n        XR.controller0.add(rhand);\r\n    }\r\n\r\n    // We are connected to VRoadcast\r\n    if (ATON.VRoadcast.uid){\r\n        let avMats = ATON.MatHub.materials.avatars;\r\n        let am = avMats[ATON.VRoadcast.uid % avMats.length];\r\n        if (h === XR.HAND_L) lhand.setMaterial(am);\r\n        else rhand.setMaterial(am);\r\n    }\r\n};\r\n\r\n// FIXME:\r\nXR.switchHands = ()=>{\r\n\r\n/*\r\n    let C0 = new THREE.Group();\r\n    for (let cr in XR.controller0.children){\r\n        C0.add(XR.controller0.children[cr]);\r\n    }\r\n\r\n    let C1 = new THREE.Group();\r\n    for (let cl in XR.controller1.children){\r\n        C1.add(XR.controller1.children[cl]);\r\n    }\r\n\r\n    //XR.controller1.removeChildren();\r\n    //XR.controller0.removeChildren();\r\n\r\n    return;\r\n\r\n    for (let c in C1.children){\r\n        XR.controller0.add(C1.children[c]);\r\n    }\r\n    for (let c in C0.children){\r\n        XR.controller1.add(C0.children[c]);\r\n    }\r\n*/\r\n    let H = XR.controller1;\r\n    XR.controller1 = XR.controller0;\r\n    XR.controller0 = H;\r\n\r\n    //XR.controller0 = ATON._renderer.xr.getController(1);\r\n    //XR.controller1 = ATON._renderer.xr.getController(0);\r\n\r\n    for (let c in XR.controller0.children) XR.controller0.remove(XR.controller0.children[c]);\r\n    for (let c in XR.controller1.children) XR.controller1.remove(XR.controller1.children[c]);\r\n    XR.gControllers.removeChildren();\r\n\r\n    XR.setupControllerUI(XR.HAND_L);\r\n    XR.setupControllerUI(XR.HAND_R);\r\n\r\n    console.log(\"VR controllers switched\");\r\n};\r\n\r\n\r\n/* DEPRECATED\r\nXR.setupControllersUI = ()=>{\r\n    if (XR.gControllers) return; // already set\r\n\r\n    let raytick = 0.003;\r\n    let raylen  = 5.0;\r\n    var geometry = new THREE.CylinderBufferGeometry( raytick,raytick, raylen, 4 );\r\n    geometry.rotateX( -Math.PI / 2 );\r\n    geometry.translate(0,0,-(raylen*0.5));\r\n\r\n    var mesh = new THREE.Mesh( geometry, ATON.MatHub.materials.controllerRay );\r\n\r\n    XR.controller0.add( mesh.clone() );\r\n    //XR.controller1.add( mesh.clone() );\r\n\r\n    let vrcMatHands = (uid)=>{\r\n        let avMats = ATON.MatHub.materials.avatars;\r\n        if (avMats === undefined || uid === undefined) return;\r\n        \r\n        let am = avMats[uid % avMats.length];\r\n        rhand.setMaterial( am );\r\n        lhand.setMaterial( am );\r\n    };\r\n\r\n    // Hands\r\n    let handurl = ATON.PATH_RES+\"models/hand/hand.glb\";\r\n    let rhand = ATON.createUINode(\"Rhand\").load(handurl).setMaterial(ATON.MatHub.materials.controllerRay);\r\n    let lhand = ATON.createUINode(\"Lhand\").load(handurl).setMaterial(ATON.MatHub.materials.controllerRay).setScale(-1,1,1);\r\n    XR.controller0.add(rhand);\r\n    XR.controller1.add(lhand);\r\n\r\n    if (ATON.VRoadcast.uid) vrcMatHands(ATON.VRoadcast.uid);\r\n    ATON.on(\"VRC_IDassigned\", vrcMatHands);\r\n\r\n    XR.gControllers = ATON.createUINode();\r\n    XR.gControllers.add( XR.controller0 );\r\n    XR.gControllers.add( XR.controller1 );\r\n\r\n    XR.controller0.visible = false;\r\n    XR.controller1.visible = false;\r\n\r\n    XR.gControllers.disablePicking();\r\n\r\n    XR.rig.add(XR.gControllers);\r\n};\r\n*/\r\n\r\n// Not working\r\nXR.getControllerSpace = (i)=>{\r\n   if (i === 1) XR.getControllerGrip(1);\r\n   else XR.getControllerGrip(0);\r\n};\r\n\r\n/**\r\nGet controller world location\r\n@param {number} i - the controller ID (0 or 1)\r\n@returns {THREE.Vector3}\r\n*/\r\nXR.getControllerWorldLocation = (i)=>{\r\n    if (i === 1) return XR.controller1pos;\r\n    else return XR.controller0pos;\r\n};\r\n\r\n/**\r\nGet controller world direction\r\n@param {number} i - the controller ID (0 or 1)\r\n@returns {THREE.Vector3}\r\n*/\r\nXR.getControllerWorldDirection = (i)=>{\r\n    if (i === 1) return XR.controller1dir;\r\n    else return XR.controller0dir;\r\n};\r\n\r\nXR._deltaMotionController = (C)=>{\r\n    if (C === XR.HAND_L && XR._lastPosL === undefined) return;\r\n    if (C === XR.HAND_R && XR._lastPosR === undefined) return;\r\n\r\n    let p    = (C === XR.HAND_L)? XR.controller1pos : XR.controller0pos;\r\n    let prev = (C === XR.HAND_L)? XR._lastPosL : XR._lastPosR;\r\n\r\n    let D = THREE.Vector3(\r\n        p.x - prev.x,\r\n        p.y - prev.y,\r\n        p.z - prev.z\r\n    );\r\n\r\n    let m = D.lengthSq();\r\n\r\n    if (C === XR.HAND_L) XR._lastPosL = p;\r\n    else XR._lastPosR = p;\r\n};\r\n\r\nXR.update = ()=>{\r\n    // R controller\r\n    if (XR.controller0 && XR.controller0.visible){\r\n        XR.controller0.getWorldPosition(XR.controller0pos);\r\n        XR.controller0.getWorldDirection(XR.controller0dir);\r\n        XR.controller0dir.negate();\r\n\r\n        XR._deltaMotionController(XR.HAND_R);\r\n    }\r\n    // L controller\r\n    if (XR.controller1 && XR.controller1.visible){\r\n        XR.controller1.getWorldPosition(XR.controller1pos);\r\n        XR.controller1.getWorldDirection(XR.controller1dir);\r\n        XR.controller1dir.negate(); \r\n\r\n        XR._deltaMotionController(XR.HAND_L);\r\n    }\r\n\r\n/*\r\n    if (XR.gpad0 && XR.gpad0.buttons){\r\n        //if (XR.gpad0.buttons[1] && XR.gpad0.buttons[1].pressed) ATON.fireEvent(\"XRsqueezePressed\", 0);\r\n        if (XR.gpad0.buttons[4] && XR.gpad0.buttons[4].pressed) ATON.fireEvent(\"XRbuttonAPressed\");\r\n        if (XR.gpad0.buttons[5] && XR.gpad0.buttons[5].pressed) ATON.fireEvent(\"XRbuttonBPressed\");\r\n    }\r\n\r\n    if (XR.gpad1 && XR.gpad1.buttons){\r\n        //if (XR.gpad1.buttons[1] && XR.gpad1.buttons[1].pressed) ATON.fireEvent(\"XRsqueezePressed\", 1);\r\n        if (XR.gpad1.buttons[4] && XR.gpad1.buttons[4].pressed) ATON.fireEvent(\"XRbuttonXPressed\");\r\n        if (XR.gpad1.buttons[5] && XR.gpad1.buttons[5].pressed) ATON.fireEvent(\"XRbuttonYPressed\");\r\n    }\r\n*/\r\n};\r\n\r\n\r\nexport default XR;","/*\r\n    ATON spatial UI Button class\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\nimport Node from \"./ATON.node.js\";\r\n\r\n/**\r\nClass representing a SpatialUI Button.\r\nConstructor requires a uiid (UI Node ID)\r\n@class Button\r\n@example \r\nnew ATON.SUI.Button(\"myButton\")\r\n*/\r\nclass Button extends Node {\r\n\r\nconstructor(uiid){\r\n    super(uiid, ATON.NTYPES.UI);\r\n\r\n    this.baseColor   = ATON.MatHub.colors.black;\r\n    this.switchColor = ATON.MatHub.colors.green;\r\n\r\n    this._bSwitched = false;\r\n\r\n    this.container = new ThreeMeshUI.Block({\r\n        width: 0.1,\r\n        height: 0.1,\r\n        padding: 0.01,\r\n        borderRadius: 0.02,\r\n        backgroundColor: this.baseColor,\r\n        backgroundOpacity: 0.5,\r\n\r\n        fontFamily: ATON.SUI.PATH_FONT_JSON,\r\n        fontTexture: ATON.SUI.PATH_FONT_TEX,\r\n\r\n        justifyContent: 'center',\r\n        alignContent: 'center'\r\n    });\r\n    this.add(this.container);\r\n\r\n    this.uiText = new ThreeMeshUI.Text({ \r\n        content: \"button\",\r\n        fontSize: 0.02,\r\n        fontColor: ATON.MatHub.colors.white\r\n    });\r\n    this.container.add(this.uiText);\r\n\r\n    this._trigger = new THREE.Mesh( \r\n        new THREE.PlaneGeometry( ATON.SUI.STD_BTN_SIZE*0.9, ATON.SUI.STD_BTN_SIZE*0.9, 2 ), \r\n        ATON.MatHub.materials.fullyTransparent\r\n    );\r\n    this._trigger.position.set(0,0,0.002);\r\n\r\n    this.add( this._trigger );\r\n\r\n    this.onHover = ()=>{\r\n        this.container.set({ \r\n            backgroundOpacity: 0.8\r\n        });\r\n    };\r\n    this.onLeave = ()=>{\r\n        this.container.set({ \r\n            backgroundOpacity: 0.5 \r\n        });\r\n    };\r\n\r\n    this.enablePicking();\r\n}\r\n\r\n/**\r\nSet base color of the button\r\n@param {THREE.Color} c - the color\r\n*/\r\nsetBaseColor(c){\r\n    this.baseColor = c;\r\n    if (!this._bSwitched) this.container.set({ backgroundColor: this.baseColor });\r\n    return this;\r\n}\r\n\r\n/**\r\nSet button switch color (when activated)\r\n@param {THREE.Color} c - the color\r\n*/\r\nsetSwitchColor(c){\r\n    this.switchColor = c;\r\n    if (this._bSwitched) this.container.set({ backgroundColor: this.switchColor });\r\n    return this;\r\n}\r\n\r\n/**\r\nSet button text\r\n@param {string} text\r\n*/\r\nsetText(text){\r\n    this.uiText.set({ content: text });\r\n    return this;\r\n}\r\n\r\n/**\r\nSwitch the button (ON/OFF)\r\n@param {boolean} b\r\n*/\r\nswitch(b){\r\n    this._bSwitched = b;\r\n    if (b) this.container.set({ backgroundColor: this.switchColor });\r\n    else this.container.set({ backgroundColor: this.baseColor });\r\n    \r\n    return this;\r\n}\r\n\r\n/**\r\nSet button icon\r\n@param {string} url - the url to the icon (tipically a PNG file)\r\n*/\r\nsetIcon(url){\r\n    ATON.Utils.textureLoader.load(url, (texture) => {\r\n\r\n        this._trigger.material = new THREE.MeshStandardMaterial({\r\n            map: texture,\r\n            transparent: true,\r\n            depthWrite: false\r\n        });\r\n/*\r\n        this.container.set({ \r\n            backgroundTexture: texture,\r\n            backgroundOpacity: 1.0,\r\n            backgroundColor: undefined \r\n        });\r\n*/\r\n        this.uiText.position.set(0,-0.035,0);\r\n    });\r\n\r\n    return this;\r\n}\r\n\r\n}\r\n\r\nexport default Button;","/*\r\n    ATON spatial UI Label class\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\nimport Node from \"./ATON.node.js\";\r\n\r\n/**\r\nClass representing a SpatialUI Button.\r\nConstructor requires a uiid (UI Node ID)\r\n@class Label\r\n@example \r\nnew ATON.SUI.Button(\"myButton\")\r\n*/\r\nclass Label extends Node {\r\n\r\nconstructor(uiid){\r\n    super(uiid, ATON.NTYPES.UI);\r\n\r\n    this.baseColor = ATON.MatHub.colors.black;\r\n\r\n    this.container = new ThreeMeshUI.Block({\r\n        width: 0.2,\r\n        height: 0.05,\r\n        padding: 0.001,\r\n        borderRadius: 0.01,\r\n        backgroundColor: this.baseColor,\r\n        backgroundOpacity: 0.5,\r\n\r\n        fontFamily: ATON.SUI.PATH_FONT_JSON,\r\n        fontTexture: ATON.SUI.PATH_FONT_TEX,\r\n\r\n        justifyContent: 'center',\r\n        alignContent: 'center'\r\n    });\r\n    this.container.position.z = 0.05;\r\n    this.add(this.container);\r\n\r\n    this.uiText = new ThreeMeshUI.Text({ \r\n        content: \"Label\",\r\n        fontSize: 0.03,\r\n        fontColor: ATON.MatHub.colors.white\r\n    });\r\n    this.container.add(this.uiText);\r\n\r\n/*\r\n    this._trigger = new THREE.Mesh( \r\n        new THREE.PlaneGeometry( ATON.SUI.STD_BTN_SIZE*0.9, ATON.SUI.STD_BTN_SIZE*0.9, 2 ), \r\n        ATON.MatHub.materials.fullyTransparent\r\n    );\r\n    this._trigger.position.set(0,0,0.002);\r\n\r\n    this.add( this._trigger );\r\n\r\n    this.onHover = ()=>{\r\n        this.container.set({ \r\n            backgroundOpacity: 0.8\r\n        });\r\n    };\r\n    this.onLeave = ()=>{\r\n        this.container.set({ \r\n            backgroundOpacity: 0.5 \r\n        });\r\n    };\r\n\r\n    this.enablePicking();\r\n*/\r\n}\r\n\r\n/**\r\nSet base color of the label\r\n@param {THREE.Color} c - the color\r\n*/\r\nsetBaseColor(c){\r\n    this.baseColor = c;\r\n    this.container.set({ backgroundColor: this.baseColor });\r\n    return this;\r\n}\r\n\r\nsetTextColor(c){\r\n    this.uiText.set({ fontColor: c });\r\n    return this;\r\n}\r\n\r\n/**\r\nSet button text\r\n@param {string} text\r\n*/\r\nsetText(text){\r\n    this.uiText.set({ content: text });\r\n    return this;\r\n}\r\n\r\n/*\r\nsetAutoOrientation(b){\r\n    if (b === true){\r\n        let self = this;\r\n\r\n        this.onAfterRender = ()=>{\r\n            self.quaternion.copy( ATON.Nav._qOri );\r\n            console.log(\"x\");\r\n        };\r\n    }\r\n    else this.onAfterRender = undefined;\r\n}\r\n*/\r\n\r\n\r\n}\r\n\r\nexport default Label;","/*\r\n    ATON spatial UI\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\nimport Button from \"./ATON.sui.button.js\";\r\nimport Label from \"./ATON.sui.label.js\";\r\n\r\n/**\r\nATON Spatial UI\r\n@namespace SUI\r\n*/\r\nlet SUI = {};\r\n\r\nSUI.STD_BTN_SIZE = 0.1;\r\n\r\nSUI.Button = Button;\r\nSUI.Label  = Label;\r\n\r\n\r\n//Initializes Spatial UI module\r\nSUI.init = ()=>{\r\n    SUI.mainSelector = ATON.createUINode();\r\n    //SUI.secondSelector = ATON.createUINode();\r\n\r\n    //SUI._uiSelGeom = new THREE.SphereGeometry( 0.1, 16, 16 );\r\n    SUI.mainSelector.add( new THREE.Mesh( ATON.Utils.geomUnitSphere, ATON.MatHub.getMaterial(\"selector\") ));\r\n    SUI.mainSelector.disablePicking();\r\n\r\n    SUI.setSelectorRadius(0.05);\r\n    SUI.mainSelector.visible = false;\r\n    ATON._rootUI.add(SUI.mainSelector);\r\n\r\n    // Main Font\r\n    //SUI.PATH_FONT_JSON = ATON.PATH_MODS+\"three-mesh-ui/examples/assets/Roboto-msdf.json\"; // ATON.PATH_RES+\"fonts/custom-msdf.json\"\r\n    //SUI.PATH_FONT_TEX  = ATON.PATH_MODS+\"three-mesh-ui/examples/assets/Roboto-msdf.png\"; // ATON.PATH_RES+\"fonts/custom.png\"\r\n    SUI.PATH_FONT_JSON = ATON.PATH_RES+\"fonts/custom-msdf.json\"\r\n    SUI.PATH_FONT_TEX  = ATON.PATH_RES+\"fonts/custom.png\"\r\n/*\r\n    ThreeMeshUI.FontLibrary.addFont(\"mainFont\", \r\n        SUI.PATH_FONT_JSON, \r\n        new THREE.TextureLoader().load(SUI.PATH_FONT_TEX)\r\n    );\r\n*/\r\n    // Measurements\r\n    SUI.gMeasures = ATON.createUINode();\r\n    SUI._prevMPoint = undefined;\r\n    SUI._measLabels = [];\r\n    ATON._rootUI.add(SUI.gMeasures);\r\n\r\n    // Sem convex-shapes edit points \r\n    SUI.gPoints = ATON.createUINode();\r\n    ATON._rootUI.add(SUI.gPoints);\r\n\r\n    SUI.buildInfoNode();\r\n    SUI.bShowInfo = true;\r\n\r\n    SUI._labelScale   = ATON.Utils.isMobile()? 1.2 : 1.0;\r\n    SUI._labelScaleVR = 2.0;\r\n\r\n    ATON.on( \"SemanticNodeHover\", (semid)=>{\r\n        if (!SUI.bShowInfo) return;\r\n        SUI.infoNodeText.set({ content: semid });\r\n    });\r\n/*\r\n    ATON.on(\"UINodeHover\", (uiid)=>{\r\n        console.log(\"Hover UI node: \"+uiid);\r\n    });\r\n    ATON.on(\"UINodeLeave\", (uiid)=>{\r\n        console.log(\"Leave UI node: \"+uiid);\r\n    });\r\n*/\r\n};\r\n\r\n/**\r\nSet selector radius\r\n@param {number} r - the radius\r\n*/\r\nSUI.setSelectorRadius = (r)=>{\r\n    SUI._selectorRad = r;\r\n    SUI.mainSelector.scale.set(r,r,r);\r\n};\r\n\r\n/**\r\nGet selector current radius\r\n@returns {number}\r\n*/\r\nSUI.getSelectorRadius = ()=>{\r\n    //return SUI.mainSelector.scale.x;\r\n    return SUI._selectorRad;\r\n};\r\n\r\n/**\r\nSet selector 3D model\r\n@param {string} path - the model path (usually gltf or glb)\r\n@param {boolean} bUseStdMat - (optional) overwrites 3D model materials with standard selector material \r\n*/\r\nSUI.setSelectorModel = (path, bUseStdMat)=>{\r\n    if (path === undefined) return;\r\n\r\n    SUI.mainSelector.removeChildren();\r\n\r\n    SUI.mainSelector.load(path).disablePicking();\r\n    if (bUseStdMat) SUI.mainSelector.setMaterial( ATON.MatHub.getMaterial(\"selector\") );\r\n};\r\n\r\nSUI.buildInfoNode = ()=>{\r\n    SUI.infoNode = ATON.createUINode();\r\n    SUI.infoNode.attachToRoot();\r\n\r\n    SUI.infoContainer = new ThreeMeshUI.Block({\r\n        width: 0.15,\r\n        height: 0.05, //0.07,\r\n        padding: 0.01,\r\n        borderRadius: 0.02,\r\n        //backgroundColor: ATON.MatHub.colors.darksem,\r\n        //backgroundOpacity: 0.2,\r\n\r\n        fontFamily: SUI.PATH_FONT_JSON,\r\n        fontTexture: SUI.PATH_FONT_TEX,\r\n        //fontFamily: \"mainFont\",\r\n        //fontTexture: \"mainFont\",\r\n\r\n        alignContent: 'center', // could be 'center' or 'left'\r\n        justifyContent: 'center', // could be 'center' or 'start'\r\n    });\r\n    SUI.infoNode.add(SUI.infoContainer);\r\n\r\n    SUI.infoNodeText = new ThreeMeshUI.Text({ \r\n        content: \"Info\",\r\n        fontSize: 0.02,\r\n        fontColor: ATON.MatHub.colors.white\r\n    });\r\n    SUI.infoContainer.add(SUI.infoNodeText);\r\n    //SUI.infoNode.scale.set(0.07,0.07,0.07);\r\n};\r\n\r\n/**\r\nGet main UI Info Node\r\n@returns {Node}\r\n*/\r\nSUI.getInfoNode = ()=>{\r\n    return SUI.infoNode;\r\n};\r\n\r\n/**\r\nCreate a SpatialUI toolbar from a list of SUI buttons\r\nThis can be arranged anywhere in the scene or attached to other UI nodes\r\n@param {string} buttonlist - a list (array) of SUI buttons\r\n@param {THREE.Color} color - (optional) base color for the toolbar\r\n@returns {Node}\r\n*/\r\nSUI.createToolbar = (buttonlist, color)=>{\r\n    let T = ATON.createUINode();\r\n\r\n    let num = buttonlist.length;\r\n    let padding = SUI.STD_BTN_SIZE * 0.3;\r\n\r\n    let cont = new ThreeMeshUI.Block({\r\n        width: (SUI.STD_BTN_SIZE * num) + padding,\r\n        height: SUI.STD_BTN_SIZE + padding,\r\n        padding: 0.01,\r\n        borderRadius: 0.02,\r\n        backgroundColor: color? color : ATON.MatHub.colors.black,\r\n        backgroundOpacity: 0.3,\r\n\r\n        fontFamily: SUI.PATH_FONT_JSON,\r\n        fontTexture: SUI.PATH_FONT_TEX,\r\n\r\n        alignContent: 'center', // could be 'center' or 'left'\r\n        justifyContent: 'center', // could be 'center' or 'start'\r\n    });\r\n    //cont.position.set(0,0,0);\r\n\r\n    let m = (num*0.5) * SUI.STD_BTN_SIZE;\r\n    m -= (SUI.STD_BTN_SIZE*0.5);\r\n\r\n    for (let i=0; i<num; i++){\r\n        let button = buttonlist[i];\r\n        button.position.set((i*SUI.STD_BTN_SIZE)-m, 0.0, 0.01);\r\n        cont.add(button);\r\n    }\r\n\r\n    T.add(cont);\r\n    return T;\r\n};\r\n\r\n// Measurements\r\n\r\nSUI.addMeasurementPoint = (P)=>{\r\n    if (P === undefined) return undefined;\r\n\r\n    let s = 0.01;\r\n    let linetick = 0.001;\r\n\r\n    let M = new THREE.Mesh( ATON.Utils.geomUnitSphere, ATON.MatHub.getMaterial(\"measurement\"));\r\n    M.position.copy(P);\r\n    M.scale.set(s,s,s);\r\n    SUI.gMeasures.add(M);\r\n\r\n    // First time\r\n    if (SUI._prevMPoint === undefined){\r\n        SUI._prevMPoint = P;\r\n        return undefined;\r\n    }\r\n\r\n    // Second point\r\n    let d = SUI._prevMPoint.distanceTo(P);\r\n    console.log(d);\r\n    \r\n    let mstr = \" m\";\r\n    let scale = Math.max(d*1.5, 1.0);\r\n    if (d < 0.5){ d *= 100.0; mstr= \" cm\"; }\r\n    if (d < 0.05){ d *= 1000.0; mstr= \" mm\"; }\r\n    if (d > 1000.0){ d * 0.001; mstr=\" km\"; }\r\n\r\n    //let gLine = new THREE.CylinderBufferGeometry( linetick,linetick, d, 4 );\r\n    let gLine = new THREE.BufferGeometry().setFromPoints([SUI._prevMPoint,P]);\r\n    \r\n    SUI.gMeasures.add( new THREE.Line( gLine, ATON.MatHub.getMaterial(\"measurement\")) );\r\n\r\n    let L = new SUI.Label();\r\n    L.setBaseColor(ATON.MatHub.colors.white).setTextColor(ATON.MatHub.colors.black);\r\n\r\n    L.setPosition(\r\n        (SUI._prevMPoint.x + P.x)*0.5,\r\n        (SUI._prevMPoint.y + P.y)*0.5,\r\n        (SUI._prevMPoint.z + P.z)*0.5,\r\n    );\r\n\r\n    L.setScale(scale).setText(d.toPrecision(3)+mstr); // setScale(d*2.0)\r\n\r\n    SUI.gMeasures.add(L);\r\n\r\n    SUI._measLabels.push(L);\r\n\r\n    // return obj\r\n    let R = {};\r\n    R.A = SUI._prevMPoint.clone();\r\n    R.B = P.clone();\r\n\r\n    SUI._prevMPoint = undefined;\r\n\r\n    return R;   \r\n};\r\n\r\nSUI._updateMeasurements = ()=>{\r\n    if (SUI._measLabels.length <= 0) return;\r\n\r\n    for (let ml in SUI._measLabels){\r\n        SUI._measLabels[ml].orientToCamera();\r\n    }\r\n};\r\n\r\n// Main update routine\r\nSUI.update = ()=>{\r\n    if (ATON.Nav.isTransitioning() || ATON._bPauseQuery){\r\n        SUI.infoNode.visible = false;\r\n        return;\r\n    }\r\n\r\n    ThreeMeshUI.update();\r\n\r\n    if (ATON._queryDataScene && !ATON.Nav._bInteracting){\r\n        SUI.mainSelector.visible = true;\r\n        SUI.mainSelector.position.copy(ATON._queryDataScene.p);    \r\n    }\r\n    else {\r\n        SUI.mainSelector.visible = false;\r\n    }\r\n\r\n    // Measures\r\n    SUI._updateMeasurements();\r\n\r\n    // InfoNode (semantics)\r\n    if (ATON._queryDataSem){\r\n\r\n        if (ATON.XR._bPresenting){\r\n            SUI.infoNode.position.copy(ATON.XR.controller0pos); //.lerpVectors(ATON._queryDataSem.p, ATON.XR.controller0pos, 0.8);\r\n            SUI.infoNode.position.y += 0.1;\r\n            SUI.infoNode.setScale(SUI._labelScaleVR);\r\n        }\r\n        else {\r\n            SUI.infoNode.position.lerpVectors(ATON._queryDataSem.p, ATON.Nav._currPOV.pos, 0.2);\r\n            SUI.infoNode.setScale(ATON._queryDataSem.d * SUI._labelScale);\r\n        }\r\n        SUI.infoNode.orientToCamera();\r\n\r\n        if (SUI.bShowInfo) SUI.infoNode.visible = true;\r\n        \r\n        if (!ATON.VRoadcast._bStreamFocus) SUI.mainSelector.visible = false;\r\n    }\r\n    else {\r\n        SUI.infoNode.visible = false;\r\n    }\r\n\r\n    if (SUI.mainSelector.visible && ATON.VRoadcast._bStreamFocus){\r\n        let ss = SUI._selectorRad * (1.0 + (Math.cos(ATON._clock.elapsedTime*10.0) * 0.2) );\r\n        SUI.mainSelector.scale.set(ss,ss,ss);\r\n    }\r\n\r\n};\r\n\r\nexport default SUI;","/*\r\n    ATON Avatar Class\r\n    used in VRoadcast system\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\nimport Node from \"./ATON.node.js\";\r\n\r\nexport default class Avatar extends Node {\r\n\r\nconstructor(uid){\r\n    super(undefined /*uid*/, ATON.NTYPES.UI);\r\n\r\n    this.userid   = uid;\r\n    this.username = undefined; //\"User #\"+uid;\r\n    this.message  = \"...\";\r\n    \r\n    //this.bTalking = false;\r\n    this._auTalk = undefined;\r\n    this._bPlayingAudio = false;\r\n    this._auChunks = [];\r\n\r\n    this._tStateCall = -1.0;\r\n    //this._tStateDur  = 0.1;\r\n    this._tProgress  = 0.0;\r\n\r\n    // Focal point\r\n    this._tFocCall = -1.0;\r\n    this._currFocusPos = new THREE.Vector3();\r\n    this._tgtFocusPos  = undefined;\r\n\r\n    this._currState  = {};\r\n    this._currState.position   = new THREE.Vector3();\r\n    this._currState.quaternion = new THREE.Quaternion();\r\n\r\n    this._tgtState = undefined;\r\n\r\n    //console.log(this);\r\n\r\n    this.realize();\r\n}\r\n\r\ngetAvatarMaterialByUID(uid){\r\n    //if (uid === undefined) return 0;\r\n\r\n    let avaMats = ATON.MatHub.materials.avatars;\r\n    let mi = (uid % avaMats.length); //uid? (uid % avaMats.length) : 0;\r\n    \r\n    return avaMats[mi];\r\n}\r\n\r\nrealize(){\r\n    // build minimal representation\r\n    let g = new THREE.SphereGeometry( 0.2, 16, 16 );\r\n\r\n    this.usermaterial = this.getAvatarMaterialByUID(this.userid);\r\n\r\n    let smesh = new THREE.Mesh( g, this.usermaterial );\r\n\r\n    this.usermeshnode = ATON.createUINode();\r\n    this.usermeshnode.add(smesh);\r\n    this.usermeshnode.setMaterial(this.usermaterial);\r\n\r\n    // CHECK / FIXME: this is to avoid cloning of the same mesh when using same representation for all avatars\r\n    this.usermeshnode.setCloneOnLoadHit(false);\r\n\r\n    // Talk UI\r\n    this.userauinode = new THREE.Sprite( ATON.VRoadcast.uspritemats[this.userid % ATON.VRoadcast.uspritemats.length] );\r\n    this.userauinode.position.set(0,0,0);\r\n    this.userauinode.visible = false;\r\n\r\n    // Focus\r\n    this.userfpnode = new THREE.Sprite( ATON.VRoadcast.ufocmats[this.userid % ATON.VRoadcast.ufocmats.length] );\r\n    this.userfpnode.position.set(0,0,0);\r\n    //this.userfpnode.scale.set(10,10,10);\r\n    this.userfpnode.visible = false;\r\n\r\n    // Build Label\r\n    this.userlabelnode = ATON.createUINode();\r\n    this.labelcontainer = new ThreeMeshUI.Block({\r\n        width: 0.7,\r\n        height: 0.25,\r\n        padding: 0.03,\r\n        borderRadius: 0.05,\r\n        //backgroundColor: ATON.VRoadcast.ucolorsdark[this.userid % ATON.VRoadcast.ucolorsdark.length],\r\n        backgroundColor: ATON.MatHub.colors.black,\r\n\r\n        fontFamily: ATON.PATH_RES+\"fonts/custom-msdf.json\", //ATON.PATH_MODS+'three-mesh-ui/examples/assets/Roboto-msdf.json',\r\n        fontTexture: ATON.PATH_RES+\"fonts/custom.png\" //ATON.PATH_MODS+'three-mesh-ui/examples/assets/Roboto-msdf.png',\r\n\r\n        //alignContent: 'right', // could be 'center' or 'left'\r\n        //justifyContent: 'end', // could be 'center' or 'start'\r\n    });\r\n\r\n    this.userlabelnode.position.y = 0.4;\r\n    this.userlabelnode.add(this.labelcontainer);\r\n\r\n    // username text\r\n    this.usernametext = new ThreeMeshUI.Text({ \r\n        content: \"User #\"+this.userid,\r\n        fontSize: 0.09,\r\n        //fontColor: ATON.MatHub.colors.white\r\n        fontColor: ATON.VRoadcast.ucolors[this.userid % ATON.VRoadcast.ucolors.length]\r\n    });\r\n    this.usernametext.position.y = 0.0;\r\n\r\n    // message text\r\n    this.usermessagetext = new ThreeMeshUI.Text({ \r\n        content: \"\\nHello World!\",\r\n        fontSize: 0.03,\r\n        fontColor: ATON.MatHub.colors.white\r\n    });\r\n    this.usermessagetext.position.y = -0.03;\r\n\r\n    this.labelcontainer.add(this.usernametext);\r\n    this.labelcontainer.add(this.usermessagetext);\r\n    \r\n    this.add(this.usermeshnode);\r\n    this.add(this.userlabelnode);\r\n    this.add(this.userauinode);\r\n\r\n    //this.add(this.userfpnode);\r\n    \r\n    // Focus is centralized for better location accuracy\r\n    if (ATON.VRoadcast._focNodes[this.userid] === undefined){\r\n        ATON.VRoadcast._focNodes[this.userid] = this.userfpnode;\r\n        ATON.VRoadcast.focGroup.add( this.userfpnode );\r\n    }\r\n};\r\n\r\n// Loads custom avatar representation (3D model)\r\nloadRepresentation(url){\r\n    let A = this;\r\n\r\n    if (A.usermeshnode.children[0] !== undefined){\r\n        A.usermeshnode.remove(A.usermeshnode.children[0]);\r\n    }\r\n\r\n    A.usermeshnode.load(url); //.setMaterial(A.usermaterial);\r\n\r\n    return this;\r\n}\r\n\r\nsetUsername(username){\r\n    this.username = username;\r\n\r\n    this.usernametext.set({ \r\n        content: username\r\n    });\r\n\r\n    return this;\r\n}\r\n\r\ngetUsername(){\r\n    if (this.userid === undefined) return undefined;\r\n    if (this.username === undefined) return \"User #\"+this.userid;\r\n    return this.username;\r\n}\r\n\r\nsetMessage(msg){\r\n    this.message = msg;\r\n\r\n    // TODO: check for text length\r\n    this.usermessagetext.set({ \r\n        content: \"\\n\"+msg\r\n    });\r\n\r\n    return this;\r\n}\r\n\r\nsetTalkVolume(vol){\r\n    if (vol === undefined){\r\n        this.userauinode.visible = false;\r\n        return;\r\n    }\r\n    if (vol > 0){\r\n        this.userauinode.visible = true;\r\n        let v = 0.1 + (vol * 0.03);\r\n        this.userauinode.scale.set(v,v,v);\r\n    }\r\n    else this.userauinode.visible = false;\r\n}\r\n\r\nhideFocalPoint(){\r\n    this.userfpnode.visible = false;\r\n}\r\n\r\nrequestFocus(fp){\r\n    if (this._tFocCall >= 0.0) return; // already requested\r\n\r\n    this._tFocCall = ATON._clock.elapsedTime;\r\n\r\n    this._currFocusPos.copy(this.userfpnode.position);\r\n\r\n    this._tgtFocusPos = new THREE.Vector3( parseFloat(fp[0]), parseFloat(fp[1]), parseFloat(fp[2]));\r\n    this._tgtFocusRad = parseFloat(fp[3])*2.0;\r\n\r\n    this.userfpnode.scale.set(this._tgtFocusRad,this._tgtFocusRad,this._tgtFocusRad);\r\n\r\n    this.userfpnode.visible = true;\r\n}\r\n\r\nhandleFocusTransition(){\r\n    if (this._tFocCall < 0.0) return;\r\n\r\n    let D = ATON.VRoadcast.USER_STATE_FREQ; //this._tStateDur;\r\n\r\n    let t = (ATON._clock.elapsedTime - this._tFocCall) / D;\r\n\r\n    // End\r\n    if (t >= 1.0){\r\n        this._tFocCall = -1.0;\r\n\r\n        this.userfpnode.position.copy(this._tgtFocusPos);\r\n        this.userfpnode.scale.set(this._tgtFocusRad,this._tgtFocusRad,this._tgtFocusRad);\r\n        \r\n        this.userfpnode.visible = true;\r\n\r\n        //console.log(this.userfpnode.position);\r\n\r\n        return;\r\n    }\r\n\r\n    this.userfpnode.position.lerpVectors(this._currFocusPos, this._tgtFocusPos, t);\r\n\r\n    //let s = this._tgtFocusRad;\r\n    //this.userfpnode.scale.set(s,s,s);\r\n    this.userfpnode.visible = true;\r\n\r\n    //console.log(this.userfpnode.position);\r\n}\r\n\r\nrequestStateTransition(S){\r\n    if (this._tStateCall >= 0.0) return; // already requested\r\n\r\n    this._tStateCall = ATON._clock.elapsedTime;\r\n\r\n    this._currState.position.copy(this.position);\r\n    this._currState.quaternion.copy(this.quaternion);\r\n\r\n    this._tgtState = S;\r\n    \r\n    //this._sDistance = this.position.distanceTo(S.position);\r\n}\r\n\r\nhandleStateTransition(){\r\n    if (this._tStateCall < 0.0) return;\r\n\r\n    let D = ATON.VRoadcast.USER_STATE_FREQ; //this._tStateDur;\r\n\r\n    if (D <= 0.0) this._tProgress = 1.0;\r\n    else this._tProgress = (ATON._clock.elapsedTime - this._tStateCall) / D;\r\n\r\n    let cs = this._currState;\r\n    let ts = this._tgtState;\r\n\r\n    // End\r\n    if (this._tProgress >= 1.0){\r\n        this._tStateCall = -1.0;\r\n\r\n        this.position.copy(ts.position);\r\n        //this.quaternion.copy(ts.quaternion);\r\n        this.usermeshnode.quaternion.copy(ts.quaternion);\r\n\r\n        return;\r\n    }\r\n\r\n    this.position.lerpVectors(cs.position, ts.position, this._tProgress);\r\n    this.usermeshnode.quaternion.slerp(ts.quaternion, this._tProgress);\r\n    //THREE.Quaternion.slerp( cs.quaternion, ts.quaternion, this.usermeshnode.quaternion, this._tProgress);\r\n}\r\n\r\nupdate(){\r\n    this.handleStateTransition();\r\n    if (this.userfpnode.visible){\r\n        this.handleFocusTransition();\r\n\r\n        let s = this.userfpnode.scale.x;\r\n        if (s>0.001) this.userfpnode.scale.set(s*0.99,s*0.99,s*0.99);\r\n        else this.userfpnode.visible = false;\r\n    }\r\n\r\n    let cam  = ATON.Nav._camera;\r\n    let eye = ATON.Nav._currPOV.pos;\r\n    if (cam === undefined || eye === undefined) return;\r\n\r\n    //this.userlabelnode.lookAt( eye );\r\n\r\n    //this.userlabelnode.setRotationFromMatrix(cam.matrix); // quaternion.setFromRotationMatrix( cam.matrix );\r\n    //this.userlabelnode.rotation.copy(cam.rotation);\r\n\r\n    this.userlabelnode.orientToCamera(); //quaternion.copy( ATON.Nav._qOri );\r\n\r\n    // Talk UI\r\n    //this._handleTalk();\r\n\r\n    let avol = this.userauinode.scale.x;\r\n    avol *= 0.99; // shrinking rate\r\n\r\n    if (avol > 0.01) this.userauinode.scale.set(avol, avol, avol);\r\n    else this.userauinode.visible = false;\r\n\r\n/*\r\n    this.userlabelnode.rotation.y = Math.atan2(\r\n        ( cam.position.x - this.userlabelnode.position.x ),\r\n        ( cam.position.z - this.userlabelnode.position.z )\r\n    );\r\n*/\r\n    //this.userlabelnode.matrix.copy( cam.matrix );\r\n}\r\n\r\n_handleTalk(){\r\n    if (this._bPlayingAudio) return;\r\n    if (this._auChunks.length < 1) return;\r\n\r\n    let d = this._auChunks.shift();\r\n\r\n    let au = new Audio();\r\n    au.src = d.data;\r\n\r\n    au.play();\r\n    this._bPlayingAudio = true;\r\n\r\n    au.onended = ()=>{\r\n        this._bPlayingAudio = false;\r\n        //console.log(\"finished playing chunk\");\r\n    };\r\n\r\n    //this.setTalkVolume(d.volume);\r\n    this.setTalkVolume(5.0);\r\n}\r\n\r\n\r\n};","/*\r\n    ATON VRoadcast\r\n    real-time collaborative networking\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\nimport Avatar from \"./ATON.avatar.js\";\r\n\r\n/**\r\nATON VRoadcast component\r\n@namespace VRoadcast\r\n*/\r\nlet VRoadcast = {};\r\n\r\nVRoadcast.USER_STATE_FREQ = 0.25; // sec\r\nVRoadcast.REPLICATED_EVT = \"EREP\";\r\n\r\n// Thresholds state sending\r\nVRoadcast.THRES_STATE_POS = 0.01;\r\nVRoadcast.THRES_STATE_ORI = 0.08; // radians\r\n\r\nVRoadcast.Avatar = Avatar;\r\n\r\n\r\n/**\r\nInitialize the component\r\n*/\r\nVRoadcast.init = ()=>{\r\n    VRoadcast.address = window.location.origin;\r\n\r\n    VRoadcast.initMaterials();\r\n\r\n    VRoadcast.socket = undefined;\r\n    VRoadcast._connected = false;\r\n\r\n    VRoadcast._username = undefined;\r\n\r\n    VRoadcast.uid = undefined; // my userID (0,1,....)\r\n    VRoadcast._bStreamFocus = false; // stream focal point\r\n    VRoadcast._numUsers = 0;\r\n\r\n    VRoadcast.avatarList = [];\r\n\r\n    VRoadcast.avaGroup = ATON.createUINode(\"avatars\"); // holds all avatars representations\r\n    VRoadcast.avaGroup.attachToRoot();\r\n\r\n    VRoadcast.focGroup = ATON.createUINode(\"focus\"); // holds all avatars focal points\r\n    VRoadcast.focGroup.attachTo(VRoadcast.avaGroup);\r\n    VRoadcast._focNodes = [];\r\n\r\n    // send own state with given freq\r\n    window.setInterval( VRoadcast.sendState, VRoadcast.USER_STATE_FREQ*1000.0 );\r\n    VRoadcast._lastStateSent = undefined;\r\n\r\n    console.log(\"VRoadcast initialized\");\r\n    VRoadcast.enableChatLog();\r\n};\r\n\r\nVRoadcast.enableChatLog = ()=>{\r\n    VRoadcast._elChat = $(\"<div></div>\").text(\"\");\r\n};\r\n\r\nVRoadcast.getNumUsers = ()=>{\r\n    return VRoadcast._numUsers;\r\n};\r\n\r\n// Register materials (avatars/users)\r\nVRoadcast.initMaterials = ()=>{\r\n\r\n    VRoadcast.ucolors = [];\r\n    VRoadcast.ucolors.push( new THREE.Color(1,0,0) );\r\n    VRoadcast.ucolors.push( new THREE.Color(1,1,0) );\r\n    VRoadcast.ucolors.push( new THREE.Color(0,1,0) );\r\n    VRoadcast.ucolors.push( new THREE.Color(0,1,1) );\r\n    VRoadcast.ucolors.push( new THREE.Color(0,0,1) );\r\n    VRoadcast.ucolors.push( new THREE.Color(1,0,1) );\r\n\r\n    VRoadcast.ucolorsdark = [];\r\n    VRoadcast.ucolorsdark.push( new THREE.Color(0.2,0.0,0.0) );\r\n    VRoadcast.ucolorsdark.push( new THREE.Color(0.2,0.2,0.0) );\r\n    VRoadcast.ucolorsdark.push( new THREE.Color(0.0,0.2,0.0) );\r\n    VRoadcast.ucolorsdark.push( new THREE.Color(0.0,0.2,0.2) );\r\n    VRoadcast.ucolorsdark.push( new THREE.Color(0.0,0.0,0.2) );\r\n    VRoadcast.ucolorsdark.push( new THREE.Color(0.2,0.0,0.2) );\r\n\r\n    VRoadcast.ucolorhex = [];\r\n    VRoadcast.ucolorhex.push(\"#F00\");\r\n    VRoadcast.ucolorhex.push(\"#FF0\");\r\n    VRoadcast.ucolorhex.push(\"#0F0\");\r\n    VRoadcast.ucolorhex.push(\"#0FF\");\r\n    VRoadcast.ucolorhex.push(\"#00F\");\r\n    VRoadcast.ucolorhex.push(\"#F0F\");\r\n\r\n    let MM = ATON.MatHub.materials;\r\n    MM.avatars = [];\r\n\r\n    let mat = new THREE.MeshBasicMaterial({\r\n        color: VRoadcast.ucolors[0], \r\n        transparent: true, \r\n        opacity: 0.4, \r\n        depthWrite: false,\r\n        flatShading: true\r\n    });\r\n\r\n    MM.avatars.push(mat);\r\n\r\n    for (let c=1; c<VRoadcast.ucolors.length; c++){\r\n        let M = mat.clone();\r\n        M.color = VRoadcast.ucolors[c];\r\n\r\n        MM.avatars.push(M);\r\n    }\r\n\r\n    // AudioUI user materials\r\n    VRoadcast.uspritemats = [];\r\n\r\n    let texAUI = new THREE.TextureLoader().load( ATON.PATH_RES+\"useraui.png\" );\r\n    for (let c=0; c<VRoadcast.ucolors.length; c++){\r\n        let smat = new THREE.SpriteMaterial({ \r\n            map: texAUI,\r\n            depthWrite: false,\r\n            color: VRoadcast.ucolors[c] // multiply\r\n        });\r\n        smat.sizeAttenuation = true;\r\n\r\n        VRoadcast.uspritemats.push(smat);\r\n    }\r\n\r\n    // Focal points\r\n    VRoadcast.ufocmats = [];\r\n\r\n    let texFocP = new THREE.TextureLoader().load( ATON.PATH_RES+\"focus.png\" );\r\n    for (let c=0; c<VRoadcast.ucolors.length; c++){\r\n        let smat = new THREE.SpriteMaterial({ \r\n            map: texFocP,\r\n            depthWrite: false,\r\n            depthTest: false,\r\n            color: VRoadcast.ucolors[c] // multiply\r\n        });\r\n        smat.sizeAttenuation = true;\r\n\r\n        VRoadcast.ufocmats.push(smat);\r\n    }\r\n};\r\n\r\n/**\r\nFire a replicated event (network)\r\n@param {string} evtname - the event name\r\n@param {object} data - object containing data to be transmitted with this event\r\n\r\n@example\r\nATON.VRoadcast.fireEvent(\"test\", 42);\r\n*/\r\nVRoadcast.fireEvent = (evtname, data)=>{\r\n    if (!VRoadcast._connected) return;\r\n    let sock = VRoadcast.socket;\r\n\r\n    if (sock) sock.emit(VRoadcast.REPLICATED_EVT, {e: evtname, d: data});\r\n    //else ATON.on(\"VRC_Connected\", ()=>{ sock.on(evtname, onReceive); });\r\n};\r\n\r\n/**\r\nSubscribe to a given network event, through given handler\r\n@param {string} evtname - the event name\r\n@param {function} handler - network event handler (how we handle incoming event)\r\n\r\n@example\r\nATON.VRoadcast.on(\"test\", function(data){ console.log(\"Received: \"+data); });\r\n*/\r\nVRoadcast.on = (evtname, handler)=>{\r\n    if (handler === undefined) return;\r\n\r\n    let evhNetwork = ATON.EventHub.evNetwork;\r\n\r\n    if (evhNetwork[evtname] === undefined) evhNetwork[evtname] = []; // First time (event not registered)\r\n    evhNetwork[evtname].push(handler);\r\n};\r\n\r\n/**\r\nReturn true if VRoadcast is connected to the service\r\n@returns {boolean}\r\n*/\r\nVRoadcast.isConnected = ()=>{\r\n    if (VRoadcast.socket === undefined) return false;\r\n    return VRoadcast._connected;\r\n};\r\n\r\n/**\r\nUtility for server-side logging\r\n@param {string} d - string data to be logged\r\n*/\r\nVRoadcast.log = (d)=>{\r\n    if (!VRoadcast._connected) return;\r\n    let sock = VRoadcast.socket;\r\n\r\n    if (sock) sock.emit(\"LOG\", d);\r\n};\r\n\r\n/**\r\nRequest enter in a given scene. \r\nNote: this routine does not load the scene itself, instead it tells the VRoadcast service we want to connect to the given scene.\r\n@param {string} sceneid - the scene id (sid)\r\n@example\r\nATON.VRoadcast.requestSceneEnter(\"testscene\");\r\n*/\r\nVRoadcast.requestSceneEnter = (sceneid)=>{\r\n    if (!VRoadcast.socket) return;\r\n    if (sceneid === undefined) sceneid = ATON.SceneHub.currID;\r\n\r\n    if (sceneid === undefined){\r\n        console.log(\"VRC ERROR: current scene ID is undefined\");\r\n        return;\r\n    }\r\n\r\n    VRoadcast.socket.emit(\"SENTER\", sceneid );\r\n};\r\n\r\n/**\r\nConnect to VRoadcast service\r\n@param {string} address - the address of the service (optional). Default is same server where main service is running\r\n@example\r\nATON.VRoadcast.connect();\r\n*/\r\nVRoadcast.connect = (address)=>{\r\n    if (VRoadcast._connected) return;\r\n    if (address) VRoadcast.address = address;\r\n\r\n    let opts = {};\r\n\r\n    // Secure connection\r\n    if (window.location.protocol === \"https:\"){\r\n        opts.path = '/svrc/socket.io';\r\n        opts.secure = true;\r\n        opts.rejectUnauthorized = false;\r\n        //opts.transports = ['websocket'], \r\n        //opts.upgrade = false \r\n    }\r\n    else {\r\n        opts.path = '/vrc/socket.io';\r\n    }\r\n\r\n    VRoadcast.socket = io.connect(VRoadcast.address, opts); //, { 'force new connection': true });\r\n\r\n    if (VRoadcast.socket === undefined) return;\r\n    VRoadcast._connected = VRoadcast.socket.connected;\r\n\r\n    VRoadcast._registerSocketHandlers();\r\n};\r\n\r\nVRoadcast.disconnect = ()=>{\r\n    if (VRoadcast.socket === undefined) return;\r\n\r\n    VRoadcast.socket.disconnect();\r\n    VRoadcast._connected = false;\r\n};\r\n\r\n\r\nVRoadcast._onConnected = ()=>{\r\n    //\r\n};\r\n\r\nVRoadcast.setUsername = (username)=>{\r\n    VRoadcast._username = username;\r\n    if (VRoadcast.socket === undefined) return;\r\n    if (VRoadcast.uid === undefined) return;\r\n\r\n    if (VRoadcast._elChat) VRoadcast._elChat.append(\"<i>Your username is now: \"+username+\"</i><br>\");\r\n    VRoadcast.socket.emit(\"UNAME\", username);\r\n};\r\nVRoadcast.setMessage = (msg)=>{\r\n    VRoadcast._msg = msg;\r\n    if (VRoadcast.socket === undefined) return;\r\n    if (VRoadcast.uid === undefined) return;\r\n\r\n    if (VRoadcast._elChat){\r\n        VRoadcast._elChat.append(\"<span style='color:\"+VRoadcast.ucolorhex[VRoadcast.uid%6]+\"'><b>YOU</b>: \"+msg+\"</span><br>\");\r\n        VRoadcast._elChat.scrollTop(VRoadcast._elChat.scrollHeight);\r\n    }\r\n\r\n    VRoadcast.socket.emit(\"UMSG\", msg);\r\n};\r\n\r\n\r\n// Handle incoming server msgs\r\nVRoadcast._registerSocketHandlers = ()=>{\r\n\r\n    // We connected to server\r\n    VRoadcast.socket.on('connect', ()=>{\r\n        VRoadcast._connected = true;\r\n\r\n        // Request enter in scene node (room)\r\n        if (ATON.SceneHub.currID !== undefined) VRoadcast.requestSceneEnter();\r\n        \r\n        console.log(\"VRC connected, entering scene: \"+ATON.SceneHub.currID);\r\n        ATON.fireEvent(\"VRC_Connected\");\r\n\r\n        VRoadcast._onConnected();\r\n    });\r\n\r\n    VRoadcast.socket.on('disconnect', ()=>{\r\n        VRoadcast._connected = false;\r\n        VRoadcast.uid = undefined;\r\n\r\n        VRoadcast.avaGroup.hide();\r\n\r\n        if (VRoadcast._elChat) VRoadcast._elChat.append(\"<i>YOU disconnected from VRoadcast service</i><br>\");\r\n\r\n        console.log(\"VRC disconnected!\");\r\n        ATON.fireEvent(\"VRC_Disconnected\");\r\n    });\r\n\r\n    // Incoming replicated event\r\n    VRoadcast.socket.on(VRoadcast.REPLICATED_EVT, (data)=>{\r\n        let evtname = data.e;\r\n        let d = data.d;\r\n\r\n        let ehList = ATON.EventHub.evNetwork[evtname];\r\n        ATON.EventHub.executeHandlers(ehList, d);\r\n    });\r\n\r\n    VRoadcast.socket.on('ID', (data)=>{\r\n        console.log(\"Your ID is \" + data);\r\n        VRoadcast.uid = data;\r\n\r\n        VRoadcast.avaGroup.show();\r\n\r\n        if (VRoadcast._elChat) VRoadcast._elChat.append(\"<i>Your ID is #\"+data+\"</i><br>\");\r\n\r\n        ATON.fireEvent(\"VRC_IDassigned\", data);\r\n    });\r\n\r\n    VRoadcast.socket.on('UENTER', (data)=>{\r\n        let uid = data;\r\n        //if (uid === VRoadcast.uid) return; // myself\r\n\r\n        console.log(\"User #\" +uid+\" entered the scene\");\r\n        if (VRoadcast._elChat) VRoadcast._elChat.append(\"<i>User #\"+uid+\" entered the scene</i><br>\");\r\n\r\n        VRoadcast.touchAvatar(uid);\r\n    });\r\n\r\n    VRoadcast.socket.on('ULEAVE', (data)=>{\r\n        let uid = data;\r\n        if (uid === undefined) return;\r\n        \r\n        let A = VRoadcast.avatarList[uid];\r\n        if (A) A.hide();\r\n        // TODO: hide also focus\r\n\r\n        console.log(\"User #\" +uid+\" left the scene\");\r\n        if (VRoadcast._elChat) VRoadcast._elChat.append(\"<i>User #\"+uid+\" left the scene</i><br>\");\r\n\r\n        if (VRoadcast._numUsers>0) VRoadcast._numUsers--;\r\n    });\r\n\r\n    VRoadcast.socket.on('USTATE', (data)=>{\r\n        let S = VRoadcast.decodeState(data);\r\n\r\n        let uid = S.userid;\r\n        let A = VRoadcast.touchAvatar(uid);\r\n\r\n        //A.position.copy(S.position);\r\n        //A.quaternion.copy(S.quaternion);\r\n        \r\n        A.requestStateTransition(S);\r\n        //A.hideFocalPoint();\r\n    });\r\n\r\n    VRoadcast.socket.on('UFOCUS', (data)=>{\r\n        let uid = data.uid;\r\n        let fp  = data.fp;\r\n\r\n        let A = VRoadcast.touchAvatar(uid);\r\n\r\n        A.requestFocus(fp);\r\n    });\r\n\r\n    VRoadcast.socket.on('UNAME', (data)=>{\r\n        let uid   = data.uid;\r\n        let uname = data.name;\r\n\r\n        if (uid === undefined) return;\r\n\r\n        let A = VRoadcast.touchAvatar(uid);\r\n        A.setUsername(uname);\r\n\r\n        console.log(\"User #\" +uid+\" changed username to: \"+uname);\r\n        if (VRoadcast._elChat) VRoadcast._elChat.append(\"<i>User #\"+uid+\" changed username to: \"+uname+\"</i><br>\");\r\n    });\r\n\r\n    VRoadcast.socket.on('UMSG', (data)=>{\r\n        let uid = data.uid;\r\n        let msg = data.msg;\r\n\r\n        if (uid === undefined) return;\r\n\r\n        let A = VRoadcast.touchAvatar(uid);\r\n        A.setMessage(msg);\r\n\r\n        console.log(\"User #\" +uid+\": \"+msg);\r\n        if (VRoadcast._elChat) VRoadcast._elChat.append(\"<span style='color:\"+VRoadcast.ucolorhex[uid%6]+\"'><b>\"+A.getUsername()+\"</b>: \"+msg+\"</span><br>\");\r\n    });\r\n\r\n    VRoadcast.socket.on('UTALK', (data)=>{\r\n        let uid = data.uid;\r\n        if (uid === undefined) return;\r\n\r\n        let audioURL = data.audio;\r\n        let A = VRoadcast.touchAvatar(uid);\r\n\r\n        //A.setTalkVolume(data.vol);\r\n        A.setTalkVolume(5.0);\r\n\r\n        if (A._auTalk === undefined || A._auTalk === null) A._auTalk = new THREE.Audio( ATON.AudioHub._listener );\r\n        else A._auTalk.stop();\r\n\r\n        ATON.AudioHub._loader.load( audioURL, (buffer)=>{\r\n            A._auTalk.setBuffer( buffer );\r\n            A._auTalk.setLoop( false );\r\n            //A._auTalk.setVolume( 0.5 );\r\n            //A._auTalk.setPlaybackRate(0.9);\r\n            A._auTalk.play();\r\n        });\r\n        \r\n\r\n/*\r\n        //let newblob  = new File([data.blob], \"blob\"+ATON.MediaRec.auExt, { type: ATON.MediaRec.auType });\r\n        //let audioURL = window.URL.createObjectURL(newblob);\r\n        \r\n        if (A._auTalk === undefined){\r\n            A._auTalk = new Audio();\r\n            //A._auTalk.type = ATON.MediaRec.auType;\r\n        }\r\n        else {\r\n            //A._auTalk.pause();\r\n            A._auTalk.currentTime = 0;    \r\n        }\r\n\r\n        A._auTalk.src = audioURL;\r\n        A._auTalk.play();\r\n*/\r\n\r\n/*\r\n        A._auChunks.push({\r\n            data: audioURL,\r\n            volume: data.vol\r\n        });\r\n*/\r\n    });\r\n};\r\n\r\n// Encode state\r\nVRoadcast.encodeState = (S)=>{\r\n    if (!S) return;\r\n\r\n    let A = new Float32Array(6); // make sufficient room\r\n    A[0] = S.position.x;\r\n    A[1] = S.position.y;\r\n    A[2] = S.position.z;\r\n\r\n    // Convert to byte array, we use last float storage (4 bytes)\r\n    var binData = new Int8Array(A.buffer);\r\n\r\n    binData[16] = (S.quaternion.x * 128.0);\r\n    binData[17] = (S.quaternion.y * 128.0);\r\n    binData[18] = (S.quaternion.z * 128.0);\r\n    binData[19] = (S.quaternion.w * 128.0);\r\n\r\n    binData[20] = S.userid;\r\n\r\n    //binData[21] = parseInt(S.rank);\r\n\r\n    return binData;\r\n}\r\n\r\n// Decode state\r\nVRoadcast.decodeState = (binData)=>{\r\n    let S = {};\r\n    S.userid = binData[20];\r\n\r\n    // First decode quat\r\n    S.quaternion = new THREE.Quaternion(\r\n        binData[16] / 128.0,\r\n        binData[17] / 128.0,\r\n        binData[18] / 128.0,\r\n        binData[19] / 128.0\r\n    );\r\n\r\n    // Now decode floats\r\n    let a8 = new Int8Array(16);\r\n    for (var i=0; i<16; i++) a8[i] = binData[i];\r\n    let A = new Float32Array(a8.buffer);\r\n\r\n    S.position = new THREE.Vector3(A[0],A[1],A[2]);\r\n\r\n    //S.scale = A[3];\r\n\r\n    return S;\r\n}\r\n\r\n\r\n// Update\r\nVRoadcast.update = ()=>{\r\n\r\n    // State interpolation\r\n    for (let a=0; a<VRoadcast.avatarList.length; a++){\r\n        let A = VRoadcast.avatarList[a];\r\n        if (A && A.visible){\r\n            //A._tStateDur = VRoadcast.USER_STATE_FREQ;\r\n            A.update();\r\n        }\r\n    }\r\n};\r\n\r\nVRoadcast.setFocusStreaming = (b)=>{\r\n    if (b === undefined) return;\r\n\r\n    if (b){\r\n        if (!VRoadcast._bStreamFocus){\r\n\r\n            ATON.fireEvent(\"VRC_FocusStreamingStarted\");\r\n        }\r\n\r\n        VRoadcast._bStreamFocus = true;\r\n        return;\r\n    }\r\n    else {\r\n        if (VRoadcast._bStreamFocus){\r\n\r\n            ATON.fireEvent(\"VRC_FocusStreamingStopped\");\r\n        }\r\n\r\n        // Restore selector radius\r\n        let r = ATON.SUI._selectorRad;\r\n        ATON.SUI.mainSelector.scale.set(r,r,r);\r\n\r\n        VRoadcast._bStreamFocus = false;\r\n    }\r\n};\r\n\r\nVRoadcast.sendState = ()=>{\r\n    if (VRoadcast.uid === undefined) return;\r\n    if (!VRoadcast.socket || !VRoadcast._connected) return;\r\n    \r\n    let cpov = ATON.Nav._currPOV;\r\n    if (!cpov) return;\r\n    //console.log(cpov);\r\n\r\n    // Focus streaming\r\n    let fp = ATON.getSceneQueriedPoint();\r\n    if (VRoadcast._bStreamFocus && fp !== undefined){\r\n        //let F = new THREE.Vector3();\r\n        let fx = (fp.x /*- cpov.pos.x*/).toPrecision(3);\r\n        let fy = (fp.y /*- cpov.pos.y*/).toPrecision(3);\r\n        let fz = (fp.z /*- cpov.pos.z*/).toPrecision(3);\r\n        let r  = ATON.SUI.getSelectorRadius().toPrecision(3);\r\n        \r\n        VRoadcast.socket.emit(\"UFOCUS\", [fx,fy,fz,r]);\r\n    }\r\n\r\n    // Compose state\r\n    let S = {};\r\n    S.position = new THREE.Vector3();\r\n    S.quaternion = new THREE.Quaternion();\r\n\r\n    S.position.copy(cpov.pos);\r\n    S.quaternion.copy(ATON.Nav._qOri);\r\n    S.userid = VRoadcast.uid;\r\n\r\n    // Save bandwidth\r\n    if (VRoadcast._lastStateSent !== undefined){\r\n        let lastPos = VRoadcast._lastStateSent.position;\r\n        let lastOri = VRoadcast._lastStateSent.quaternion;\r\n\r\n        let dPos = lastPos.distanceToSquared(cpov.pos);\r\n        let dOri = lastOri.angleTo(ATON.Nav._qOri);\r\n\r\n        if ( dPos < VRoadcast.THRES_STATE_POS && dOri < VRoadcast.THRES_STATE_ORI) return;\r\n    }\r\n\r\n    // Encode and send\r\n    let binData = VRoadcast.encodeState(S);\r\n    VRoadcast.socket.emit(\"USTATE\", binData/*.buffer*/ );\r\n    VRoadcast._lastStateSent = S;\r\n\r\n    //console.log(\"State sent\");\r\n};\r\n\r\n\r\n// Avatars\r\nVRoadcast.getAvatar = (uid)=>{\r\n    return VRoadcast.avatarList[uid];\r\n};\r\n\r\nVRoadcast.touchAvatar = (uid)=>{\r\n\r\n    // First time\r\n    if (VRoadcast.avatarList[uid] === undefined){\r\n        let A = new VRoadcast.Avatar(uid);\r\n        A.attachTo(VRoadcast.avaGroup);\r\n        \r\n        A.loadRepresentation(ATON.PATH_RES+\"models/vrc/head.gltf\");\r\n        //console.log(VRoadcast.avaGroup);\r\n\r\n        VRoadcast.avatarList[uid] = A;\r\n\r\n        //console.log(VRoadcast.avatarList);\r\n        //console.log(ATON.MatHub.materials.avatars);\r\n        //console.log(A);\r\n        VRoadcast._numUsers++;\r\n    }\r\n\r\n    let A = VRoadcast.avatarList[uid];\r\n    A.show();\r\n\r\n    return A;\r\n}\r\n\r\nVRoadcast.clearAllAvatars = ()=>{\r\n    for (let i in VRoadcast.avatarList){\r\n        let A = VRoadcast.avatarList[i];\r\n        A.hide();\r\n        //A.dispose();\r\n    }\r\n};\r\n\r\nexport default VRoadcast;","/*\r\n    ATON Semantic shapes factory\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\n/**\r\nATON Semantic Factory\r\n@namespace SemFactory\r\n*/\r\nlet SemFactory = {};\r\n\r\nSemFactory.init = ()=>{\r\n    SemFactory.bConvexBuilding = false;\r\n    SemFactory.convexPoints = [];\r\n    //SemFactory.convexMeshes = [];\r\n    SemFactory.convexNode   = undefined; // keeps track of current convex semnode\r\n    SemFactory.currConvexMesh = undefined;\r\n    \r\n    // Temp sem node to hold developing convex mesh\r\n    SemFactory.currSemNode = ATON.createSemanticNode();\r\n    SemFactory.currSemNode.disablePicking();\r\n    SemFactory.currSemNode.attachToRoot();\r\n\r\n    SemFactory.currMaterial = ATON.MatHub.getMaterial(\"semanticShape\"); // current sem material we are using\r\n\r\n    SemFactory._numShapes = 0; // counter of shapes produced\r\n};\r\n\r\n\r\n// Current material\r\nSemFactory.resetMaterial = ()=>{\r\n    SemFactory.currMaterial = ATON.MatHub.getMaterial(\"semanticShape\");\r\n};\r\n\r\nSemFactory.setMaterial = (m)=>{\r\n    if (m === undefined) return;\r\n    SemFactory.currMaterial = m;\r\n};\r\n\r\n\r\n// Convex shapes\r\n// NOTE: if semid exists, add mesh under the same id\r\nSemFactory.addConvexPoint = (/*semid,*/ p)=>{\r\n\r\n    SemFactory.convexPoints.push(p);\r\n    let numPoints = SemFactory.convexPoints.length;\r\n\r\n    // Spatial UI\r\n    let M = new THREE.Mesh( ATON.Utils.geomUnitSphere, ATON.MatHub.getMaterial(\"semanticShapeEdit\"));\r\n    M.position.copy(p);\r\n    M.scale.set(0.001,0.001,0.001);\r\n    ATON.SUI.gPoints.add( M );\r\n\r\n    if (numPoints < 4) return false;\r\n\r\n    // lets build convex shape\r\n    let geom   = new THREE.ConvexBufferGeometry( SemFactory.convexPoints );\r\n    let semesh = new THREE.Mesh( geom, ATON.MatHub.getMaterial(\"semanticShapeEdit\") );\r\n\r\n    //let numMeshes = SemFactory.convexMeshes.length;\r\n\r\n    // First time: create semnode and add it to current sem group\r\n    if (!SemFactory.bConvexBuilding){\r\n        //if (semid === undefined) semid = \"sem\"+SemFactory._numShapes;\r\n\r\n        //SemFactory.convexNode = ATON.getSemanticNode(semid) || ATON.createSemanticNode(semid);\r\n        //SemFactory.convexNode = ATON.createSemanticNode();\r\n        //SemFactory.convexNode.add(semesh);\r\n        SemFactory.currSemNode.add(semesh);\r\n        \r\n        // Store\r\n        semesh.userData._convexPoints = [];\r\n        for (let i=0; i<numPoints; i++){\r\n            //semesh.userData._convexPoints.push( ATON.Utils.setVectorPrecision(SemFactory.convexPoints[i],3) );\r\n\r\n            ATON.Utils.setVectorPrecision(SemFactory.convexPoints[i],4);\r\n            semesh.userData._convexPoints.push(SemFactory.convexPoints[i].x);\r\n            semesh.userData._convexPoints.push(SemFactory.convexPoints[i].y);\r\n            semesh.userData._convexPoints.push(SemFactory.convexPoints[i].z);\r\n        }\r\n\r\n        SemFactory.currConvexMesh = semesh;\r\n        SemFactory.bConvexBuilding = true;\r\n    }\r\n\r\n    // keep updating current semantic geometry\r\n    else {\r\n        let currSemesh = SemFactory.currConvexMesh;\r\n        currSemesh.geometry.dispose();\r\n        currSemesh.geometry = geom;\r\n\r\n        //currSemesh.userData._convexPoints.push( ATON.Utils.setVectorPrecision(p,3) );\r\n\r\n        ATON.Utils.setVectorPrecision(p,4);\r\n        currSemesh.userData._convexPoints.push( p.x );\r\n        currSemesh.userData._convexPoints.push( p.y );\r\n        currSemesh.userData._convexPoints.push( p.z );\r\n    }\r\n\r\n    return true;\r\n};\r\n\r\nSemFactory.stopCurrentConvex = ()=>{\r\n    SemFactory.convexPoints = [];\r\n    SemFactory.bConvexBuilding = false;\r\n\r\n    SemFactory.currSemNode.removeChildren();\r\n    ATON.SUI.gPoints.removeChildren();\r\n};\r\n\r\nSemFactory.getCurrentConvexShape = ()=>{\r\n    return SemFactory.currSemNode\r\n};\r\n\r\nSemFactory.completeConvexShape = (semid)=>{\r\n    SemFactory.convexPoints = [];\r\n    SemFactory.bConvexBuilding = false;\r\n\r\n    //if (SemFactory.convexNode === undefined) return undefined;\r\n    //if (SemFactory.currConvexMesh === undefined) return undefined;\r\n    if (SemFactory.currSemNode === undefined) return;\r\n\r\n    if (semid === undefined) semid = \"sem\"+SemFactory._numShapes;\r\n\r\n    let S = ATON.getSemanticNode(semid) || ATON.createSemanticNode(semid);\r\n    \r\n    S.add(SemFactory.currSemNode.children[0]);\r\n    S.setMaterial( SemFactory.currMaterial );\r\n    S.setDefaultAndHighlightMaterials(SemFactory.currMaterial, ATON.MatHub.materials.semanticShapeHL);\r\n    S.enablePicking();\r\n\r\n    SemFactory.currSemNode.removeChildren();\r\n\r\n/*\r\n    SemFactory.convexNode = ATON.getSemanticNode(semid) || ATON.createSemanticNode(semid);\r\n    SemFactory.convexNode.add(SemFactory.currConvexMesh);\r\n\r\n    SemFactory.convexNode.setMaterial( SemFactory.currMaterial );\r\n    SemFactory.convexNode.setDefaultMaterial(SemFactory.currMaterial);\r\n    SemFactory.convexNode.enablePicking();\r\n*/\r\n    SemFactory._numShapes++;\r\n\r\n    //console.log(SemFactory.convexNode);\r\n    //console.log(SemFactory.convexNode.userData._convexPoints);\r\n\r\n    //return SemFactory.convexNode;\r\n\r\n    // Spatial UI\r\n    ATON.SUI.gPoints.removeChildren();\r\n\r\n    return S;\r\n};\r\n\r\nSemFactory.createConvexShape = (semid, points)=>{\r\n    let geom   = new THREE.ConvexBufferGeometry( points );\r\n    let semesh = new THREE.Mesh( geom, SemFactory.currMaterial );\r\n\r\n    semesh.userData._convexPoints = [];\r\n    for (let i=0; i<points.length; i++){\r\n        let p = points[i];\r\n        ATON.Utils.setVectorPrecision(p,4);\r\n\r\n        semesh.userData._convexPoints.push( p.x );\r\n        semesh.userData._convexPoints.push( p.y );\r\n        semesh.userData._convexPoints.push( p.z );\r\n        }\r\n\r\n    let S = ATON.getOrCreateSemanticNode(semid);\r\n    S.add(semesh);\r\n    S.setDefaultAndHighlightMaterials(SemFactory.currMaterial, ATON.MatHub.materials.semanticShapeHL);\r\n\r\n    S.enablePicking();\r\n\r\n    return S;\r\n};\r\n\r\nSemFactory.addSurfaceConvexPoint = (/*semid,*/ offset)=>{\r\n    if (!ATON._queryDataScene) return false;\r\n\r\n    if (offset === undefined) offset = 0.02;\r\n\r\n    let p   = ATON._queryDataScene.p;\r\n    let eye = ATON.Nav.getCurrentEyeLocation();\r\n/*\r\n    let n = ATON._queryDataScene.n;\r\n    p.x += (n.x * offset);\r\n    p.y += (n.y * offset);\r\n    p.z += (n.z * offset);\r\n*/\r\n    p.lerpVectors(p, eye, offset);\r\n\r\n    SemFactory.addConvexPoint(p);\r\n    return p;\r\n};\r\n\r\n\r\n// Spherical semantic shapes\r\n// NOTE: if semid exists, add mesh under the same id\r\nSemFactory.createSphere = (semid, location, radius)=>{\r\n    if (location === undefined) return undefined;\r\n    if (radius === undefined) return undefined;\r\n\r\n/*\r\n    if (ATON.getSemanticNode(semid)){\r\n        console.log(\"ERROR SemFactory: semantic node \"+semid+\" already exists.\");\r\n        return false;\r\n    }\r\n*/\r\n    if (semid === undefined) semid = \"sem\"+SemFactory._numShapes;\r\n\r\n    let S = ATON.getOrCreateSemanticNode(semid);\r\n\r\n    //let g = new THREE.SphereGeometry( 1.0, 16, 16 );\r\n    let M = new THREE.Mesh( ATON.Utils.geomUnitSphere, SemFactory.currMaterial );\r\n    \r\n    // Note: we add multiple spheres to the same <semid> node\r\n    let sphere = new THREE.Object3D();\r\n    sphere.position.copy(location);\r\n    sphere.scale.set(radius, radius, radius);\r\n    sphere.add(M);\r\n\r\n    S.add( sphere );\r\n    S.enablePicking();\r\n    S.setDefaultAndHighlightMaterials(SemFactory.currMaterial, ATON.MatHub.materials.semanticShapeHL);\r\n\r\n    //SemFactory.currParent.add( S );\r\n\r\n    SemFactory._numShapes++;\r\n\r\n    return S;\r\n};\r\n\r\nSemFactory.createSurfaceSphere = (semid)=>{\r\n    if (!ATON._queryDataScene) return undefined;\r\n\r\n    let p = ATON._queryDataScene.p;\r\n    let r = ATON.SUI.getSelectorRadius();\r\n\r\n    return SemFactory.createSphere(semid, p,r);\r\n};\r\n\r\nexport default SemFactory;","/*\r\n    ATON Front-end blueprint\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\n/**\r\nGeneric front-end routines for ATON-based web-apps. \r\nA set of blueprints to facilitate or support creation of a front-end\r\n@namespace FE\r\n*/\r\nlet FE = {};\r\n\r\n// Semantic-shapes types\r\nFE.SEMSHAPE_SPHERE = 0;\r\nFE.SEMSHAPE_CONVEX = 1;\r\n\r\n/**\r\nInitialize Front-end\r\n*/\r\nFE.realize = ()=>{\r\n    FE.PATH_RES_ICONS = ATON.PATH_RES+\"icons/\";\r\n\r\n    FE._bPopup = false;     // showing popup\r\n    FE.bPopupBlurBG = 0.25; // blur 3D content on popup show, 0.0 to disable\r\n    FE._userAuth = {};\r\n\r\n    FE._auSemNode = undefined;\r\n    FE._auSemNodePlaying = false;\r\n\r\n    FE._bReqHome = false;   // auto-compute home\r\n\r\n    FE.urlParams = new URLSearchParams(window.location.search);\r\n\r\n    FE._uiSetupBase();\r\n\r\n    ATON.realize();\r\n\r\n    // built-in base front-end parameters\r\n    let ddens = ATON.FE.urlParams.get('d');\r\n    if (ddens && ddens>0.0) ATON.setDefaultPixelDensity(ddens);\r\n};\r\n\r\n/**\r\nAdd basic front-end events such as showing spinner while loading assets and home viewpoint setup\r\n*/\r\nFE.addBasicLoaderEvents = ()=>{\r\n    ATON.on(\"NodeRequestFired\", ()=>{ $(\"#idLoader\").show(); });\r\n    ATON.on(\"AllNodeRequestsCompleted\", ()=>{ \r\n        $(\"#idLoader\").hide();\r\n        \r\n        //console.log(ATON.Nav.homePOV);\r\n\r\n        if (FE._bReqHome) return;\r\n\r\n        if (ATON.Nav.homePOV === undefined){\r\n            ATON.Nav.computeAndRequestDefaultHome(0.5);\r\n        }\r\n        \r\n        FE._bReqHome = true;\r\n    });\r\n\r\n    ATON.on(\"SceneJSONLoaded\",()=>{\r\n        if (ATON.Nav.homePOV !== undefined) ATON.Nav.requestHome(0.5);\r\n    });\r\n\r\n};\r\n\r\nFE.useMouseWheelToScaleSelector = (f)=>{\r\n\r\n    if (f === undefined) f = 0.001;\r\n\r\n    ATON.on(\"MouseWheel\", (d)=>{\r\n        if (ATON.Nav._controls.enableZoom === undefined) return;\r\n\r\n        if (ATON._kModShift){\r\n            ATON.Nav._controls.enableZoom = false;\r\n\r\n            let r = ATON.SUI.mainSelector.scale.x;\r\n            r += (-d*f);\r\n            if (r > 0.0001) ATON.SUI.setSelectorRadius(r);\r\n        }\r\n        else {\r\n            ATON.Nav._controls.enableZoom = true;\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\nLoad a scene. \r\nYou can use ATON.on(\"SceneJSONLoaded\", ...) to perform additional tasks when the scene JSON is fully loaded\r\n@param {string} sid - the scene ID (e.g.: 'sample/venus')\r\n*/\r\nFE.loadSceneID = (sid)=>{\r\n    if (sid === undefined) return;\r\n\r\n    let reqstr = ATON.PATH_RESTAPI_SCENE + sid;\r\n    if (ATON.SceneHub._bEdit) reqstr += \",edit\";\r\n\r\n    ATON.SceneHub.load(reqstr, sid);\r\n    console.log(reqstr);\r\n};\r\n\r\n\r\n\r\n// HTML UI\r\n//=======================================\r\n// Sample basic UI setup\r\nFE.uiBasicSetup = ()=>{\r\n    FE.uiAddButton(\"idTopToolbar\",\"fullscreen\", ATON.toggleFullScreen );\r\n    if (ATON.Utils.isConnectionSecure()) FE.uiAddButton(\"idTopToolbar\",\"vr\", ATON.XR.toggle );\r\n\r\n    FE.uiAddButton(\"idBottomToolbar\",\"home\", ()=>{ ATON.Nav.requestHome(0.1); });\r\n};\r\n\r\nFE._uiSetupBase = ()=>{\r\n    $(\"#idPopup\").click( FE.popupClose );\r\n    $(\"#idLoader\").html(\"<img src='\"+ATON.PATH_RES+\"loader.png'>\");\r\n};\r\n\r\n/**\r\nAdd generic icon button inside a specific div container\r\n@param {string} idcontainer - the id of html container (e.g.: \"idTopToolbar\")\r\n@param {string} icon - the icon. Can be shortname for default icons in /res/icons/ or URL to .png image\r\n@param {function} onPress - function triggered when pressing the button\r\n*/\r\nFE.uiAddButton = (idcontainer, icon, onPress)=>{\r\n    let iconurl;\r\n    let iconid;\r\n\r\n    if (icon.endsWith(\".png\")){\r\n        iconurl = icon;\r\n        iconid  = icon.slice(0,-4);\r\n    }\r\n    else {\r\n        iconurl = FE.PATH_RES_ICONS+icon+\".png\";\r\n        iconid  = icon;\r\n    }\r\n\r\n    let htmlcode = \"<div id='btn-\"+iconid+\"' class='atonBTN'><img src='\"+iconurl+\"'></div>\";\r\n    $(\"#\"+idcontainer).append(htmlcode);\r\n\r\n    if (onPress) $(\"#btn-\"+iconid).click( onPress );\r\n};\r\n\r\nFE.uiSwitchButton = (iconid, b)=>{\r\n    if (b) $(\"#btn-\"+iconid).addClass(\"switchedON\");\r\n    else $(\"#btn-\"+iconid).removeClass(\"switchedON\");\r\n};\r\n\r\nFE.uiAddButtonHome = (idcontainer)=>{\r\n    FE.uiAddButton(idcontainer, \"home\", ()=>{ \r\n        ATON.Nav.requestHome(0.3);\r\n    });\r\n};\r\n\r\nFE.uiAddButtonFirstPerson = (idcontainer)=>{\r\n    FE.uiAddButton(idcontainer, \"fp\", ()=>{\r\n        if (ATON.Nav.isFirstPerson()){\r\n            ATON.Nav.setOrbitControl();\r\n            //ATON.Nav.restorePreviousNavMode();\r\n            FE.uiSwitchButton(\"fp\",false);\r\n        }\r\n        else {\r\n            ATON.Nav.setFirstPersonControl();\r\n            FE.uiSwitchButton(\"fp\",true);\r\n        }\r\n    });\r\n};\r\n\r\nFE.uiAddButtonVR = (idcontainer)=>{\r\n    if (!ATON.Utils.isConnectionSecure()) return;\r\n    //if (!ATON.Utils.isWebXRsupported()) return; //Not showing on mobile\r\n\r\n    FE.uiAddButton(idcontainer, \"vr\", ATON.XR.toggle );\r\n};\r\nFE.uiAddButtonDeviceOrientation = (idcontainer)=>{\r\n    if (!ATON.Utils.isConnectionSecure()) return;\r\n    if (!ATON.Utils.isMobile()) return;\r\n\r\n    FE.uiAddButton(idcontainer,\"devori\", ()=>{\r\n        if (ATON.Nav.isDevOri()){\r\n            //ATON.Nav.setOrbitControl();\r\n            ATON.Nav.restorePreviousNavMode();\r\n            FE.uiSwitchButton(\"devori\",false);\r\n        }\r\n        else {\r\n            ATON.Nav.setDeviceOrientationControl();\r\n            FE.uiSwitchButton(\"devori\",true);\r\n        }\r\n    });\r\n};\r\n\r\nFE.uiAddButtonTalk = (idcontainer)=>{\r\n    if (!ATON.Utils.isConnectionSecure()) return;\r\n\r\n    FE.uiAddButton(idcontainer, \"talk\", ()=>{\r\n        if (ATON.MediaRec.isAudioRecording()){\r\n            ATON.MediaRec.stopMediaStreaming();\r\n            //FE.uiSwitchButton(\"talk\",false);\r\n            $(\"#btn-talk\").removeClass(\"atonBTN-rec\");\r\n        }\r\n        else {\r\n            ATON.MediaRec.startMediaStreaming();\r\n            //FE.uiSwitchButton(\"talk\",true);\r\n            $(\"#btn-talk\").addClass(\"atonBTN-rec\");\r\n        }\r\n    });\r\n};\r\n\r\nFE.uiAddButtonQR = (idcontainer)=>{\r\n    FE.uiAddButton(idcontainer,\"qr\", FE.popupQR );\r\n};\r\n\r\nFE.uiAddButtonFullScreen = (idcontainer)=>{\r\n    FE.uiAddButton(idcontainer, \"fullscreen\", ()=>{\r\n        ATON.toggleFullScreen();\r\n        screenfull.isFullscreen? FE.uiSwitchButton(\"fullscreen\",false) : FE.uiSwitchButton(\"fullscreen\",true);\r\n    });\r\n};\r\n\r\nFE.uiAddButtonVRC = (idcontainer)=>{\r\n    FE.uiAddButton(idcontainer, \"vrc\", ()=>{\r\n        if (ATON.VRoadcast.isConnected()){\r\n            FE.popupVRC();\r\n        }\r\n        else {\r\n            ATON.VRoadcast.connect();\r\n        }\r\n    });\r\n\r\n    ATON.on(\"VRC_IDassigned\", (uid)=>{\r\n        let i = (uid%6);\r\n        $(\"#btn-vrc\").addClass(\"atonVRCu\"+i);\r\n        //$(\"#\"+idcontainer).addClass(\"atonVRCu\"+i+\"-bg\");\r\n        FE.checkAuth((data)=>{\r\n            if (data.username!==undefined /*&& ATON.VRoadcast._username===undefined*/) ATON.VRoadcast.setUsername(data.username);\r\n        });\r\n    });\r\n\r\n    ATON.on(\"VRC_Disconnected\", ()=>{\r\n        $(\"#btn-vrc\").attr(\"class\",\"atonBTN\");\r\n    });\r\n};\r\n\r\nFE.uiAddButtonUser = (idcontainer)=>{\r\n    FE.uiAddButton(idcontainer, \"user\", ()=>{\r\n        FE.popupUser();\r\n    });\r\n};\r\n\r\nFE.uiAddButtonEditMode = (idcontainer)=>{\r\n    FE.uiAddButton(idcontainer, \"edit\", ()=>{\r\n        FE.checkAuth((data)=>{\r\n            if (data.username !== undefined){\r\n                ATON.SceneHub._bEdit = !ATON.SceneHub._bEdit;\r\n                FE.uiSwitchButton(\"edit\",ATON.SceneHub._bEdit);\r\n            }\r\n\r\n            else {\r\n                FE.popupUser();  \r\n            }\r\n        });\r\n    });\r\n};\r\n\r\n// Attach ID validator to given input field\r\nFE.uiAttachInputFilterID = (inputid)=>{\r\n    $(\"#\"+inputid).on('keyup change input', ()=>{\r\n        let value = $(\"#\"+inputid).val();\r\n        let regReplace = new RegExp('[^A-Za-z-_]', 'ig');\r\n        $(\"#\"+inputid).val( value.replace(regReplace, '') );\r\n\r\n    });\r\n};\r\n\r\nFE.setupBasicUISounds = ()=>{\r\n    FE.auLib = {};\r\n\r\n    FE.auLib.switch = new Audio(ATON.PATH_RES+\"audio/switch.wav\");\r\n    FE.auLib.switch.loop = false;\r\n};\r\n\r\nFE.playAudioFromSemanticNode = (semid)=>{\r\n    //if (FE._auSemNodePlaying) return;\r\n    if (semid === undefined) return;\r\n\r\n    let S = ATON.getSemanticNode(semid);\r\n    if (S === undefined) return;\r\n\r\n    let au = S.getAudio();\r\n    if (au === undefined) return;\r\n\r\n    if (FE._auSemNode === undefined || FE._auSemNode === null) FE._auSemNode = new THREE.Audio( ATON.AudioHub._listener );\r\n    else FE._auSemNode.stop();\r\n\r\n    ATON.AudioHub._loader.load( au, (buffer)=>{\r\n        FE._auSemNode.setBuffer( buffer );\r\n        FE._auSemNode.setLoop( false );\r\n        //FE._auSemNode.setVolume( 0.5 );\r\n        //FE._auSemNode.setPlaybackRate(0.9);\r\n        FE._auSemNode.play();\r\n    });\r\n\r\n/*\r\n    if (FE._auSemNode === undefined) FE._auSemNode = new Audio();\r\n    \r\n    FE._auSemNodePlaying = true;\r\n    FE._auSemNode.src = au;\r\n    //FE._auSemNode.type = ATON.MediaRec.auType;\r\n    FE._auSemNode.play();\r\n\r\n    FE._auSemNode.onended = ()=>{\r\n        FE._auSemNodePlaying = false;\r\n    };\r\n*/\r\n};\r\n\r\n\r\n// Popups\r\n//===================================================================\r\n\r\n/**\r\nShow a modal popup.\r\n@param {string} htmlcontent - The HTML5 content for the popup\r\n@param {string} cssClasses - (optional) css classes for the popup\r\n*/\r\nFE.popupShow = (htmlcontent, cssClasses)=>{\r\n    if (FE._bPopup) return false;\r\n\r\n    let clstr = \"atonPopup \";\r\n    if (cssClasses) clstr += cssClasses;\r\n\r\n    let htcont = \"<div id='idPopupContent' class='\"+clstr+\"'>\";\r\n    htcont += htmlcontent+\"</div>\"\r\n\r\n    $('#idPopup').html(htcont);\r\n    $('#idPopupContent').click((e)=>{ e.stopPropagation(); });\r\n    $('#idPopup').fadeIn();\r\n\r\n    FE._bPopup = true;\r\n\r\n    if (FE.bPopupBlurBG > 0.0){\r\n        ATON._renderer.setPixelRatio( FE.bPopupBlurBG );\r\n        ATON._renderer.render( ATON._mainRoot, ATON.Nav._camera );\r\n    }\r\n\r\n    ATON._bPauseQuery = true;\r\n    //ATON.renderPause();\r\n\r\n    $(\"#idTopToolbar\").hide();\r\n    $(\"#idBottomToolbar\").hide();\r\n\r\n    return true;\r\n};\r\n\r\n/**\r\nClose current popup\r\n*/\r\nFE.popupClose = ()=>{\r\n    FE._bPopup = false;\r\n\r\n    //ATON.renderResume();\r\n    if (FE.bPopupBlurBG > 0.0) ATON.resetPixelDensity();\r\n\r\n    $(\"#idPopup\").fadeOut();\r\n    //$(\"#idPopup\").empty();\r\n\r\n    ATON._bPauseQuery = false;\r\n\r\n    $(\"#idTopToolbar\").show();\r\n    $(\"#idBottomToolbar\").show();\r\n\r\n    ATON.focusOn3DView();\r\n};\r\n\r\nFE.popupQR = ()=>{\r\n    let htmlcontent = \"<h1>Share</h1>\";\r\n    htmlcontent += \"<div class='atonQRcontainer' id='idQRcode'></div><br><br>\";\r\n\r\n    if ( !ATON.FE.popupShow(htmlcontent) ) return;\r\n\r\n    let url = window.location.href;\r\n    new QRCode(document.getElementById(\"idQRcode\"), url);\r\n};\r\n\r\nFE.popupScreenShot = ()=>{\r\n    let cover = ATON.Utils.takeScreenshot(200);\r\n\r\n    FE.checkAuth((r)=>{\r\n\r\n        let htmlcontent = \"<h1>Screenshot</h1>\";\r\n        htmlcontent += \"This is a preview of what your screenshot will look like:<br><br>\";\r\n        htmlcontent += \"<img src='\"+cover.src+\"'><br>\";\r\n        htmlcontent += \"Resolution: <input id='isShotSize' type='number' min='100' max='4000' value='200'>px<br>\";\r\n\r\n        htmlcontent += \"<div class='atonBTN atonBTN-green' id='btnScreenShot' style='width:90%'><img src='\"+FE.PATH_RES_ICONS+\"sshot.png'>SHOT</div>\";\r\n\r\n        if (r.username !== undefined){\r\n            htmlcontent += \"<div class='atonBTN atonBTN-green' id='btnSetCover' style='width:90%'>Set as Cover</div>\";\r\n            /*\r\n            htmlcontent += \"<div class='atonBTN' id='btnSetCover' style='width:220px; height:220px; padding:5px'>\";\r\n            htmlcontent += \"<img src='\"+cover.src+\"'><br>\";\r\n            htmlcontent += \"Set as Cover</div>\";\r\n            */\r\n        }\r\n\r\n        if ( !ATON.FE.popupShow(htmlcontent) ) return;\r\n\r\n        $(\"#btnScreenShot\").click(()=>{\r\n            ATON.FE.popupClose();\r\n\r\n            let s = parseInt( $('#isShotSize').val() );\r\n            let img = ATON.Utils.takeScreenshot(s,\"shot.png\");\r\n        });\r\n\r\n        $(\"#btnSetCover\").click(()=>{\r\n            ATON.FE.popupClose();\r\n\r\n            ATON.Utils.postJSON(ATON.PATH_RESTAPI+\"setcover/\", {sid: ATON.SceneHub.currID, img: cover.src }, (r)=>{\r\n                console.log(r);\r\n            });\r\n\r\n        });\r\n    });\r\n};\r\n\r\nFE.popupVRC = ()=>{\r\n    let htmlcontent = \"\";\r\n    htmlcontent += \"<h1>Collaborative Session</h1>\";\r\n\r\n    // Username\r\n    htmlcontent += \"<input id='idVRCusername' type='text' size='10' placeholder='username...' style='display:none'>\";\r\n    htmlcontent += \"<div id='idVRCusernameBTN' class='atonBTN' style='width:200px; display:none'>\"+ATON.VRoadcast._username+\"</div>\";\r\n\r\n    htmlcontent += \"<div id='idChatBox' style='width:100%; height:150px; text-align:left;' class='scrollableY'></div>\";\r\n\r\n    //htmlcontent += \"<div style='text-align:left'>\";\r\n    htmlcontent += \"<input id='idVRCmsg' style='width:90%' type='text' placeholder='message...'>\";\r\n    //htmlcontent += \"</div>\";\r\n\r\n    htmlcontent += \"<div class='atonBTN atonBTN-red' id='idVRCdisconnect' style='width:90%'>LEAVE</div>\";\r\n\r\n    if ( !ATON.FE.popupShow(htmlcontent, \"atonPopupLarge\") ) return;\r\n\r\n    if (ATON.VRoadcast._username === undefined){\r\n        $('#idVRCusername').show();\r\n        $('#idVRCusernameBTN').hide();\r\n    }\r\n    else {\r\n        $('#idVRCusername').val(ATON.VRoadcast._username);\r\n        $('#idVRCusername').hide();\r\n        $('#idVRCusernameBTN').show();\r\n    }\r\n\r\n    if (ATON.VRoadcast.uid !== undefined) $('#idVRCusernameBTN').addClass(\"atonVRCu\"+(ATON.VRoadcast.uid % 6));\r\n\r\n    $(\"#idChatBox\").append(ATON.VRoadcast._elChat);\r\n\r\n    $(\"#idVRCmsg\").keypress((e)=>{\r\n        let keycode = (e.keyCode ? e.keyCode : e.which);\r\n        if(keycode == '13'){\r\n            let str = $(\"#idVRCmsg\").val();\r\n            ATON.VRoadcast.setMessage( str );\r\n            $(\"#idVRCmsg\").val(\"\");\r\n            //$(\"#idChatBox:first-child\").scrollTop( $(\"#idChatBox:first-child\").height() );\r\n        }\r\n    });\r\n\r\n    $(\"#idVRCusername\").keypress((e)=>{\r\n        let keycode = (e.keyCode ? e.keyCode : e.which);\r\n        if(keycode == '13'){\r\n            let str = $(\"#idVRCusername\").val();\r\n            ATON.VRoadcast.setUsername( str );\r\n            \r\n            $('#idVRCusername').hide();\r\n            $('#idVRCusernameBTN').html(ATON.VRoadcast._username);\r\n            $('#idVRCusernameBTN').show();\r\n        }\r\n    });\r\n\r\n    $(\"#idVRCusernameBTN\").click(()=>{\r\n        $('#idVRCusername').show();\r\n        $('#idVRCusernameBTN').hide();\r\n    });\r\n\r\n    $(\"#idVRCdisconnect\").click(()=>{\r\n        ATON.VRoadcast.disconnect();\r\n        ATON.FE.popupClose();\r\n    });\r\n\r\n};\r\n\r\n// User auth\r\nFE.checkAuth = (onReceive)=>{\r\n    $.ajax({\r\n        type: 'GET',\r\n        url: ATON.PATH_RESTAPI+\"user\",\r\n        xhrFields: { withCredentials: true },            \r\n        dataType: 'json',\r\n\r\n        success: (data)=>{\r\n            FE._userAuth = data;\r\n            //console.log(FE._userAuth);\r\n\r\n            if (data.username !== undefined){\r\n                $(\"#btn-user\").addClass(\"switchedON\");\r\n                if (ATON.VRoadcast._username === undefined) ATON.VRoadcast.setUsername(data.username);\r\n            }\r\n            else {\r\n                $(\"#btn-user\").removeClass(\"switchedON\");\r\n            }\r\n\r\n            onReceive(data);\r\n        }\r\n    });\r\n};\r\n\r\nFE.popupUser = ()=>{\r\n\r\n    FE.checkAuth((r)=>{\r\n        // We are already logged\r\n        if (r.username !== undefined){\r\n            let htmlcontent = \"<img src='\"+FE.PATH_RES_ICONS+\"user.png'><br>\";\r\n            htmlcontent += \"You are logged in as <b>'\"+r.username+\"'</b><br><br>\";\r\n\r\n            htmlcontent += \"<div class='atonBTN atonBTN-gray' id='idSHUuser'><img src='\"+FE.PATH_RES_ICONS+\"user.png'>Your profile</div>\";\r\n            htmlcontent += \"<div class='atonBTN atonBTN-gray' id='idSHUscenes'><img src='\"+FE.PATH_RES_ICONS+\"scene.png'>Your scenes</div>\";\r\n\r\n            htmlcontent += \"<div class='atonBTN atonBTN-red' id='idLogoutBTN' style='width:90%'>LOGOUT</div>\";\r\n\r\n            if ( !ATON.FE.popupShow(htmlcontent) ) return;\r\n\r\n            $(\"#idLogoutBTN\").click(()=>{\r\n                $.get(ATON.PATH_RESTAPI+\"logout\", (r)=>{\r\n                    console.log(r);\r\n                    ATON.SceneHub.setEditMode(false);\r\n                    ATON.fireEvent(\"Logout\");\r\n                    $(\"#btn-user\").removeClass(\"switchedON\");\r\n                });\r\n\r\n                ATON.FE.popupClose();\r\n            });\r\n\r\n            $(\"#idSHUscenes\").click(()=>{\r\n                ATON.Utils.goToURL(\"/shu/scenes/\");\r\n            });\r\n            $(\"#idSHUuser\").click(()=>{\r\n                ATON.Utils.goToURL(\"/shu/auth/\");\r\n            });\r\n\r\n        }\r\n\r\n        // Not logged in\r\n        else {\r\n            let htmlcontent = \"<img src='\"+FE.PATH_RES_ICONS+\"user.png'><br>\";\r\n            htmlcontent += \"username:<input id='idUsername' type='text' maxlength='15' size='15' ><br>\";\r\n            htmlcontent += \"password:<input id='idPassword' type='password' maxlength='15' size='15' ><br>\";\r\n\r\n            htmlcontent += \"<div class='atonBTN atonBTN-green' id='idLoginBTN' style='width:90%'>LOGIN</div>\";\r\n\r\n            if ( !ATON.FE.popupShow(htmlcontent) ) return;\r\n\r\n            $(\"#idLoginBTN\").click(()=>{\r\n                let jstr = JSON.stringify({\r\n                    username: $(\"#idUsername\").val(),\r\n                    password: $(\"#idPassword\").val()\r\n                });\r\n\r\n                $.ajax({\r\n                    url: ATON.PATH_RESTAPI+\"login\",\r\n                    type:\"POST\",\r\n                    data: jstr,\r\n                    contentType:\"application/json; charset=utf-8\",\r\n                    dataType:\"json\",\r\n\r\n                    success: (r)=>{\r\n                        console.log(r);\r\n                        if (r){\r\n                            ATON.fireEvent(\"Login\", r);\r\n                            $(\"#btn-user\").addClass(\"switchedON\");\r\n                            ATON.FE.popupClose();\r\n                        }\r\n                    }\r\n\r\n                }).fail((err)=>{\r\n                    //console.log(err);\r\n                    $(\"#idLoginBTN\").html(\"LOGIN FAILED\");\r\n                    $(\"#idLoginBTN\").attr(\"class\",\"atonBTN atonBTN-red\");\r\n                });\r\n            });\r\n        }\r\n    });\r\n};\r\n\r\n/*\r\nFE.popupPOV = ()=>{\r\n    let htmlcontent = \"<h1>Viewpoint</h1>\";\r\n\r\n    htmlcontent += \"<div class='select' style='width:200px;'><select id='idPOVmode'>\";\r\n    htmlcontent += \"<option value='0'>Set as Home viewpoint</option>\";\r\n    htmlcontent += \"<option value='1'>Add viewpoint</option>\";\r\n    htmlcontent += \"</select><div class='selectArrow'></div></div>\";\r\n\r\n    htmlcontent += \"<div class='atonBTN atonBTN-green' id='btnPOV' style='width:90%'>OK</div>\"; // <img src='\"+FE.PATH_RES_ICONS+\"pov.png'>\r\n\r\n    if ( !ATON.FE.popupShow(htmlcontent) ) return;\r\n\r\n    let mode = $(\"#idPOVmode\").val();\r\n};\r\n*/\r\n\r\nexport default FE;","/*\r\n    ATON Media Recorder\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\n/**\r\nATON Media Recorder\r\n@namespace MediaRec\r\n*/\r\nlet MediaRec = {};\r\nMediaRec.auType = \"audio/wav\";\r\nMediaRec.auExt  = \".wav\";\r\n//MediaRec.auType = \"audio/webm\";\r\n//MediaRec.auExt  = \".webm\";\r\n\r\nMediaRec.auBitsPerSecond  = 9000; //9000;\r\nMediaRec.auStreamInterval = 1000; //500;\r\nMediaRec.auMinVol = 1;\r\n\r\n\r\nMediaRec.init = ()=>{\r\n    MediaRec._bAudioRecording = false;\r\n    MediaRec._bStreaming = false;\r\n\r\n    MediaRec.recorder = undefined;\r\n};\r\n\r\nMediaRec.realizeAudioRecorder = ( onComplete )=>{\r\n    if (MediaRec.recorder !== undefined){\r\n        MediaRec.recorder.reset();\r\n        if (onComplete) onComplete();\r\n    }\r\n\r\n    // First time\r\n    else {\r\n        if (!ATON.Utils.isConnectionSecure()) return;\r\n        if (!navigator.mediaDevices) return;\r\n\r\n        if (MediaRec._ds === undefined) MediaRec._ds = setInterval( MediaRec._streamChunk, MediaRec.auStreamInterval);\r\n\r\n        let UM = navigator.mediaDevices.getUserMedia({ \r\n            video: false, \r\n            audio: true, \r\n            channelCount: 1,\r\n            echoCancellation: true,\r\n        });\r\n\r\n        UM.then(async function(stream){\r\n            MediaRec.recorder = RecordRTC(stream, { \r\n                type: 'audio',\r\n                mimeType: MediaRec.auType,\r\n                \r\n                bitsPerSecond: MediaRec.auBitsPerSecond,\r\n                audioBitsPerSecond: MediaRec.auBitsPerSecond,\r\n\r\n                sampleRate: 22050,\r\n                desiredSampRate: 22050,\r\n                \r\n                disableLogs: true,\r\n                \r\n                //recorderType: MediaStreamRecorder,\r\n                numberOfAudioChannels: 1,\r\n                //bufferSize: 16384,\r\n\r\n                //timeSlice: MediaRec.auStreamInterval,\r\n                //ondataavailable: MediaRec._onAuBlob,\r\n            });\r\n\r\n            // Audio analyser\r\n    /*\r\n            MediaRec._auAVGvolume = 0;\r\n\r\n            MediaRec._auCTX = new AudioContext();\r\n            const input = MediaRec._auCTX.createMediaStreamSource(stream);\r\n            const analyser = MediaRec._auCTX.createAnalyser();\r\n            const scriptProcessor = MediaRec._auCTX.createScriptProcessor();\r\n\r\n            // Some analyser setup\r\n            analyser.smoothingTimeConstant = 0.3;\r\n            analyser.fftSize = 1024;\r\n            \r\n            input.connect(analyser);\r\n            analyser.connect(scriptProcessor);\r\n            scriptProcessor.connect(MediaRec._auCTX.destination);\r\n\r\n            const getAverageVolume = array => {\r\n                const L = array.length;\r\n                if (L <= 0) return 0; \r\n                \r\n                let values = 0;\r\n                for (let i=0; i<L; i++) values += array[i];\r\n\r\n                return values / L;\r\n            };\r\n\r\n            scriptProcessor.onaudioprocess = audioProcessingEvent => {\r\n                if (!MediaRec._bAudioRecording) return;\r\n\r\n                const tempArray = new Uint8Array(analyser.frequencyBinCount);\r\n\r\n                analyser.getByteFrequencyData(tempArray);\r\n                MediaRec._auAVGvolume = parseInt(getAverageVolume(tempArray));\r\n                \r\n                //console.log(MediaRec._auAVGvolume);\r\n            };\r\n    */\r\n            if (onComplete) onComplete();\r\n        });\r\n    }\r\n};\r\n\r\nMediaRec.isAudioRecording = ()=>{\r\n    return MediaRec._bAudioRecording;\r\n};\r\n\r\n// helper routines\r\nMediaRec._stopRecAndSend = ( onFinish )=>{\r\n    if (MediaRec.recorder === undefined){\r\n        if (onFinish) onFinish();\r\n        return;\r\n    }\r\n\r\n    MediaRec.recorder.stopRecording(()=>{\r\n/*\r\n        let rblob = MediaRec.recorder.getBlob();\r\n\r\n        if (!rblob || rblob.size < 5 || !ATON.VRoadcast.socket || ATON.VRoadcast.uid === undefined){ // || MediaRec._auAVGvolume <= MediaRec.auMinVol\r\n            if (onFinish) onFinish();\r\n            return;\r\n        }\r\n\r\n        let reader = new FileReader();\r\n        reader.readAsDataURL(rblob); \r\n        reader.onloadend = ()=>{\r\n            let b64 = reader.result;\r\n            //let b64 = reader.result.split(',')[1];\r\n            //b64 = \"data:audio/wav;base64,\" + b64;\r\n*/\r\n        MediaRec.recorder.getDataURL((b64)=>{\r\n\r\n            if (!ATON.VRoadcast.socket || ATON.VRoadcast.uid === undefined){ // || MediaRec._auAVGvolume <= MediaRec.auMinVol\r\n                if (onFinish) onFinish();\r\n                return;\r\n            }\r\n\r\n            ATON.VRoadcast.socket.compress(false).emit(\"UTALK\", {\r\n                audio: b64,\r\n                uid: ATON.VRoadcast.uid,\r\n                //vol: MediaRec._auAVGvolume\r\n            });              \r\n            \r\n            if (onFinish) onFinish();\r\n            return;\r\n        });\r\n/*\r\n        console.log(\"sending blob...\"+rblob.size);\r\n\r\n        ATON.VRoadcast.socket.compress(false).emit(\"UTALK\", {\r\n            blob: rblob,\r\n            uid: ATON.VRoadcast.uid,\r\n            vol: MediaRec._auAVGvolume\r\n        });\r\n\r\n        if (onFinish) onFinish();\r\n*/\r\n        //if (onFinish) onFinish();\r\n    });\r\n};\r\n\r\nMediaRec._onAuBlob = (rblob)=>{\r\n    if (!rblob) return;\r\n    if (!ATON.VRoadcast.socket) return;\r\n    //if (ATON.vroadcast._auAVGvolume <= ATON.vroadcast.minAuVol) return;\r\n\r\n    //console.log(\"sending blob...\"+rblob.size);\r\n\r\n    ATON.VRoadcast.socket.emit(\"UTALK\", {\r\n        blob: rblob,\r\n        uid: ATON.VRoadcast.uid,\r\n        vol: MediaRec._auAVGvolume\r\n    });\r\n};\r\n\r\n// Audio Recording\r\nMediaRec.startRecording = ()=>{\r\n    MediaRec.realizeAudioRecorder(()=>{\r\n\r\n        if (!MediaRec.recorder) return;\r\n        if (MediaRec._bAudioRecording) return;\r\n\r\n        console.log(\"Recording...\");\r\n\r\n        MediaRec.recorder.startRecording();\r\n        MediaRec._bAudioRecording = true;\r\n    });\r\n};\r\n\r\nMediaRec.stopRecording = ()=>{\r\n    if (!MediaRec.recorder) return;\r\n\r\n    MediaRec.recorder.stopRecording(()=>{\r\n        let rblob = MediaRec.recorder.getBlob();\r\n        //let du = MediaRec.recorder.toURL();\r\n        //console.log(du);\r\n\r\n        console.log(\"Stop recording.\");\r\n\r\n        let reader = new FileReader();\r\n        reader.readAsDataURL(rblob); \r\n        reader.onloadend = ()=>{\r\n            let base64data = reader.result;                \r\n            //console.log(base64data);\r\n            ATON.fireEvent(\"AudioRecordCompleted\", base64data);\r\n        }\r\n\r\n        MediaRec._bAudioRecording = false;\r\n    });\r\n};\r\n\r\nMediaRec.startOrStopRecording = ()=>{\r\n    if (MediaRec._bAudioRecording) MediaRec.stopRecording();\r\n    else MediaRec.startRecording();\r\n};\r\n\r\nMediaRec._streamChunk = ()=>{\r\n    if (!MediaRec.recorder) return;\r\n    if (!MediaRec._bStreaming) return;\r\n\r\n    MediaRec._stopRecAndSend(()=>{ \r\n        MediaRec.recorder.startRecording();\r\n    });\r\n};\r\n\r\n// Audio Streaming\r\nMediaRec.startMediaStreaming = ()=>{\r\n    MediaRec.realizeAudioRecorder(()=>{\r\n        if (!MediaRec.recorder) return;\r\n        if (MediaRec._bAudioRecording) return;\r\n\r\n        //MediaRec.recorder.stopRecording(()=>{\r\n        console.log(\"Start MediaStreaming\");\r\n\r\n        MediaRec.recorder.startRecording();\r\n        MediaRec._bAudioRecording = true;\r\n        MediaRec._bStreaming = true;\r\n        //});\r\n    });\r\n};\r\n\r\nMediaRec.stopMediaStreaming = ()=>{\r\n    if (!MediaRec.recorder) return;\r\n    if (!MediaRec._bAudioRecording) return;\r\n\r\n    console.log(\"Stop MediaStreaming\");\r\n\r\n    MediaRec._stopRecAndSend(()=>{\r\n        //MediaRec._bStreaming = false;\r\n        //MediaRec._bAudioRecording = false;\r\n    });\r\n\r\n    MediaRec._bStreaming = false;\r\n    MediaRec._bAudioRecording = false;\r\n\r\n/*\r\n    MediaRec._stopRecAndSend(()=>{\r\n        clearInterval(MediaRec._dMediaRecorder);\r\n        MediaRec._bAudioRecording = false;\r\n    });\r\n*/\r\n};\r\n\r\nMediaRec.startOrStopMediaStreaming = ()=>{\r\n    if (MediaRec._bAudioRecording) MediaRec.stopMediaStreaming();\r\n    else MediaRec.startMediaStreaming();\r\n};\r\n\r\nexport default MediaRec;","/*!\r\n    @preserve\r\n\r\n \tATON\r\n\r\n \t@author Bruno Fanini\r\n\tVHLab, CNR ISPC\r\n\r\n==================================================================================*/\r\n\r\n'use strict';\r\n\r\n/**\r\n@namespace ATON\r\n*/\r\nlet ATON = {};\r\nwindow.ATON = ATON;\r\n\r\n// Import\r\nimport Node from \"./ATON.node.js\";\r\nimport POV from \"./ATON.pov.js\";\r\n//import Period from \"./ATON.period.js\";\r\nimport LightProbe from \"./ATON.lightprobe.js\";\r\n\r\nimport EventHub from \"./ATON.eventhub.js\";\r\nimport MatHub from \"./ATON.mathub.js\";\r\nimport Utils from \"./ATON.utils.js\";\r\nimport SceneHub from \"./ATON.scenehub.js\";\r\nimport AudioHub from \"./ATON.audiohub.js\";\r\nimport Nav from \"./ATON.nav.js\";\r\nimport XR from \"./ATON.xr.js\";\r\nimport SUI from \"./ATON.sui.js\";\r\nimport VRoadcast from \"./ATON.vroadcast.js\";\r\nimport SemFactory from \"./ATON.semfactory.js\";\r\nimport FE from \"./ATON.fe.js\";\r\nimport MediaRec from \"./ATON.mediarec.js\";\r\n\r\n// Classes\r\nATON.Node       = Node;\r\nATON.POV        = POV;\r\nATON.LightProbe = LightProbe;\r\n//ATON.Period = Period;\r\n\r\n// NS\r\nATON.EventHub   = EventHub;\r\nATON.Utils      = Utils;\r\nATON.SceneHub   = SceneHub;\r\nATON.MatHub     = MatHub;\r\nATON.Nav        = Nav;\r\nATON.AudioHub   = AudioHub;\r\nATON.XR         = XR;\r\nATON.SUI        = SUI;\r\nATON.VRoadcast  = VRoadcast;\r\nATON.SemFactory = SemFactory;\r\nATON.FE         = FE;\r\nATON.MediaRec   = MediaRec;\r\n\r\n//==============================================================\r\n// Consts\r\n//==============================================================\r\nATON.STD_UPVECTOR = new THREE.Vector3(0,1,0);\r\nATON.ROOT_NID = \".\"; // reserved node ID for graph-roots\r\n\r\nATON.RAD2DEG = (180.0 / Math.PI);\r\nATON.DEG2RAD = (Math.PI / 180.0);\r\n\r\n// Node types\r\nATON.NTYPES = {};\r\n// 1 and 2 are reserved\r\nATON.NTYPES.SCENE  = 3;\r\nATON.NTYPES.SEM    = 4;\r\nATON.NTYPES.UI     = 5;\r\n\r\n// Folders\r\nATON.PATH_RESTAPI       = window.location.origin + \"/api/\"; // \"../api/\";\r\nATON.PATH_RESTAPI_SCENE = ATON.PATH_RESTAPI + \"scene/\";\r\nATON.PATH_MODS          = window.location.origin + \"/mods/\"; // \"../mods/\";\r\nATON.PATH_THREE         = ATON.PATH_MODS + \"three/\";\r\nATON.PATH_DRACO_LIB     = ATON.PATH_THREE+\"examples/js/libs/draco/\";\r\nATON.PATH_BASIS_LIB     = ATON.PATH_THREE+\"examples/js/libs/basis/\";\r\n\r\nATON.PATH_COLLECTION = window.location.origin + \"/collection/\"; // \"../collection/\";\r\nATON.PATH_MODELS     = ATON.PATH_COLLECTION + \"models/\";\r\nATON.PATH_SCENES     = window.location.origin + \"/scenes/\"; // \"../scenes/\";\r\nATON.PATH_RES        = window.location.origin + \"/res/\"; // \"../res/\";\r\n\r\nATON.SHADOWS_NEAR = 0.1;\r\nATON.SHADOWS_FAR  = 50.0;\r\nATON.SHADOWS_SIZE = 15.0;\r\nATON.SHADOWS_RES  = 1024; // 512\r\n\r\n/**\r\nSet path collection (3D models, audio, panoramas, ...)\r\n@param {string} path - path\r\n*/\r\nATON.setPathCollection = (path)=>{\r\n    ATON.PATH_COLLECTION = /*window.location.origin + */path;\r\n    ATON.PATH_MODELS     = ATON.PATH_COLLECTION+\"models/\";\r\n};\r\n\r\n/**\r\nSet path scenes\r\n@param {string} path - path\r\n*/\r\nATON.setPathScenes = (path)=>{\r\n    ATON.PATH_SCENES = /*window.location.origin +*/ path;\r\n};\r\n\r\n\r\nATON._setupBaseListeners = ()=>{\r\n    let el = ATON._renderer.domElement;\r\n\r\n    window.addEventListener( 'resize', ATON._onResize, false );\r\n    el.addEventListener( 'mousemove', ATON._updateScreenMove, false );\r\n    ///el.addEventListener('dblclick', ATON._doubleTap, false);\r\n\r\n    el.addEventListener('mousedown', (e)=>{\r\n        if (e.button === 1) ATON.fireEvent(\"MouseMidButton\");      // middle-click\r\n        if (e.button === 2) ATON.fireEvent(\"MouseRightButton\");    // right-click\r\n    });\r\n\r\n    el.addEventListener( 'wheel', ATON._onMouseWheel, false );\r\n\r\n\r\n    // Touch events\r\n    Hammer(el).on(\"doubletap\", (e)=>{\r\n        ATON.fireEvent(\"DoubleTap\", e.srcEvent);\r\n        //console.log(e.srcEvent);\r\n    });\r\n\r\n    Hammer(el).on(\"tap\", (e)=>{\r\n        ATON._updateScreenMove(e.srcEvent);\r\n        ATON._handleQueries();\r\n\r\n        ATON.fireEvent(\"Tap\", e.srcEvent);\r\n        //console.log(e.srcEvent);\r\n\r\n        // UI selection\r\n        if (ATON._hoveredUI === undefined) return;\r\n        let H = ATON.getUINode(ATON._hoveredUI);\r\n        if (H && H.onSelect) H.onSelect();\r\n    });\r\n\r\n    ATON.on(\"DoubleTap\", (e)=>{\r\n        //console.log(e);\r\n        ATON.defaultDoubleTapFromScreenCoords(e);\r\n    });\r\n\r\n    //ATON.on(\"Tap\", (e)=>{\r\n        //console.log(e);\r\n    //});\r\n\r\n\r\n    // Keyboard\r\n    ATON._kModShift = false;\r\n    ATON._kModCtrl  = false;\r\n\r\n    el.addEventListener(\"keydown\", (e)=>{\r\n        if (e.key === \"Shift\")   ATON._kModShift = true;\r\n        if (e.key === \"Control\") ATON._kModCtrl  = true;\r\n        \r\n        ATON.fireEvent(\"KeyPress\", e.key);\r\n        //ATON.fireEvent(\"KeyPress/\"+e.key);\r\n    }, false);\r\n\r\n    el.addEventListener(\"keyup\", (e)=>{\r\n        if (e.key === \"Shift\")   ATON._kModShift = false;\r\n        if (e.key === \"Control\") ATON._kModCtrl  = false;\r\n\r\n        ATON.fireEvent(\"KeyUp\", e.key);\r\n        //ATON.fireEvent(\"KeyUp/\"+e.key);\r\n    }, false);\r\n\r\n    // Defaults\r\n    ATON.on(\"KeyPress\", (k)=>{\r\n\r\n        if (k==='+'){\r\n            let f = ATON.Nav.getFOV() + 1.0;\r\n            ATON.Nav.setFOV(f);\r\n        }\r\n        if (k==='-'){\r\n            let f = ATON.Nav.getFOV() - 1.0;\r\n            ATON.Nav.setFOV(f);\r\n        }\r\n\r\n        if (k==='PageUp'){\r\n            let r = ATON.SUI.mainSelector.scale.x + 0.02;\r\n            ATON.SUI.setSelectorRadius(r);\r\n        }\r\n        if (k==='PageDown'){\r\n            let r = ATON.SUI.mainSelector.scale.x - 0.02;\r\n            r = Math.max(r, 0.01);\r\n            ATON.SUI.setSelectorRadius(r); \r\n        }\r\n    });\r\n\r\n    // Default semantic highlight\r\n/*\r\n    ATON.on(\"SemanticNodeLeave\", (semid)=>{\r\n        let S = ATON.getSemanticNode(semid);\r\n        if (S) S.restoreDefaultMaterial();\r\n    });\r\n    ATON.on(\"SemanticNodeHover\", (semid)=>{\r\n        let S = ATON.getSemanticNode(semid);\r\n        if (S) S.highlight();\r\n    });\r\n*/          \r\n};\r\n\r\nATON._onResize = ()=>{\r\n    ATON.Nav._camera.aspect = window.innerWidth / window.innerHeight;\r\n    ATON.Nav._camera.updateProjectionMatrix();\r\n\r\n    ATON._renderer.setSize( window.innerWidth, window.innerHeight );\r\n    console.log(\"onResize\");\r\n};\r\n\r\nATON._onMouseWheel = (e)=>{\r\n    e.preventDefault();\r\n\r\n    ATON.fireEvent(\"MouseWheel\", e.deltaY);\r\n};\r\n\r\nATON.focusOn3DView = ()=>{\r\n    ATON._renderer.domElement.focus();\r\n};\r\n\r\n// Default retarget from screen coordinates (eg.: on double tap)\r\nATON.defaultDoubleTapFromScreenCoords = (e)=>{\r\n    ATON._updateScreenMove(e);\r\n    ATON._handleQueryScene();\r\n\r\n    if (!ATON.Nav._bControl) return;\r\n\r\n    let bFPtrans = ATON.Nav.isFirstPerson() || ATON.Nav.isDevOri();\r\n\r\n    // When first-person mode, teleport (non immersive)\r\n    if (ATON._queryDataScene && bFPtrans){\r\n        let P = ATON._queryDataScene.p;\r\n        let N = ATON._queryDataScene.n;\r\n        \r\n        if (N.y > 0.7){\r\n            let currDir = ATON.Nav._vDir;\r\n            let feye = new THREE.Vector3(P.x, P.y+ATON.userHeight, P.z);\r\n            let ftgt = new THREE.Vector3(\r\n                feye.x + currDir.x,\r\n                feye.y + currDir.y,\r\n                feye.z + currDir.z,\r\n            );\r\n\r\n            let POV = new ATON.POV().setPosition(feye).setTarget(ftgt);\r\n\r\n            ATON.Nav.requestPOV(POV, 0.5);\r\n        }\r\n        return;\r\n    }\r\n\r\n    // In orbit mode, focus on selected SemNode...\r\n    let hsn = ATON.getSemanticNode(ATON._hoveredSemNode);\r\n    if (ATON._queryDataSem && hsn){\r\n        ATON.Nav.requestPOVbyNode( hsn, 0.3);\r\n        return;\r\n    }\r\n    // ...or perform standard retarget on picket surface point\r\n    if (ATON._queryDataScene){\r\n        ATON.Nav.requestRetarget(ATON._queryDataScene.p, /*ATON._queryDataScene.n*/undefined, 0.3);\r\n    }\r\n\r\n    // TODO: go POV in sight if any (panorama only mode)\r\n}\r\n\r\n/**\r\nToggle fullscreen\r\n*/\r\nATON.toggleFullScreen = ()=>{\r\n    screenfull.toggle();\r\n/*\r\n    if (b === undefined){\r\n        screenfull.toggle();\r\n        return;\r\n    }\r\n\r\n    if (b) screenfull.request();\r\n*/\r\n};\r\n\r\n\r\n//============================================================================\r\n// ATON init routines\r\n//============================================================================\r\n/**\r\nMain ATON initialization, it will take care of all sub-components initialization, device profiling and much more\r\n@example\r\nATON.realize()\r\n*/\r\nATON.realize = ()=>{\r\n    console.log(\"Initialize ATON...\");\r\n\r\n    ATON.Utils.init();\r\n    ATON.Utils.profileDevice();\r\n    \r\n    //THREE.Object3D.DefaultUp = new THREE.Vector3(0,0,1); // mismatches WebXR y-up\r\n\r\n    // Timing\r\n    ATON._clock = new THREE.Clock(true);\r\n\r\n    let wglopts = {\r\n        //canvas: document.getElementById(\"View3D\"),\r\n        antialias: true, //ATON.device.isMobile? false : true,\r\n        alpha: true,\r\n        //pecision: \"mediump\"\r\n        preserveDrawingBuffer: true\r\n    };\r\n\r\n    ATON._renderer = new THREE.WebGLRenderer(wglopts);\r\n    ATON._renderer.setSize( window.innerWidth, window.innerHeight );\r\n    //console.log(ATON._renderer);\r\n\r\n    ATON._stdpxd = 1.0; //window.devicePixelRatio? (window.devicePixelRatio) : 1.0;\r\n    ATON._renderer.setPixelRatio( ATON._stdpxd );\r\n    //console.log(ATON._stdpxd);\r\n    \r\n    ATON._renderer.outputEncoding = THREE.sRGBEncoding;\r\n    //console.log(ATON._renderer.getPixelRatio());\r\n\r\n    ATON._renderer.setAnimationLoop( ATON._onFrame );\r\n    //ATON._bDirtyLP = false;\r\n\r\n    ATON._maxAnisotropy = ATON._renderer.capabilities.getMaxAnisotropy();\r\n    console.log(ATON._renderer.capabilities);\r\n\r\n    THREE.Cache.enabled = true;\r\n\r\n    ATON.userHeight = 1.7;\r\n \r\n    document.body.appendChild( ATON._renderer.domElement );\r\n    //console.log(ATON._renderer);\r\n    \r\n    let canvas = ATON._renderer.domElement;\r\n    canvas.style.outline = \"none\";\r\n    canvas.style.border  = \"none\";\r\n    //canvas.style.padding = \"0px\";\r\n    //canvas.style.margin  = \"0px\";\r\n    //canvas.style.width   = \"100%\";\r\n    //canvas.style.height  = \"100%\";\r\n\r\n    ATON.EventHub.init();\r\n    ATON.MatHub.init();\r\n\r\n    //ATON._setupLoadManager();\r\n    ATON._assetsManager = {};\r\n    ATON._aLoader = new THREE.GLTFLoader(/*ATON._loadManager*/);\r\n    ATON._dracoLoader = new THREE.DRACOLoader();\r\n    ATON._dracoLoader.setDecoderPath( ATON.PATH_DRACO_LIB );\r\n    ATON._aLoader.setDRACOLoader( ATON._dracoLoader );\r\n    ATON._numReqLoad = 0;\r\n\r\n    // Periods (TODO:)\r\n    //ATON.periods = [];\r\n\r\n    ATON._lps = []; // lightprobes\r\n    ATON._bAutoLP = false;\r\n    //ATON._dirtyLPs = true;\r\n    ATON._bShadowsFixedBound = false;\r\n\r\n    ATON.initGraphs();\r\n    ATON.SceneHub.init();\r\n\r\n    // Init audio hub\r\n    ATON.AudioHub.init();\r\n\r\n    // Init nav system\r\n    ATON.Nav.init();\r\n\r\n    // XR\r\n    ATON.XR.init();\r\n\r\n    // Spatial UI\r\n    ATON.SUI.init();\r\n\r\n    // VRoadcast\r\n    ATON.VRoadcast.init();\r\n\r\n    // Media Recorder\r\n    ATON.MediaRec.init();\r\n\r\n    // Semantic Factory\r\n    ATON.SemFactory.init();\r\n\r\n    // Query / picked data\r\n    ATON._queryDataScene = undefined;\r\n    ATON._queryDataSem   = undefined;\r\n    ATON._queryDataUI    = undefined;\r\n\r\n    ATON._hoveredSemNode = undefined;\r\n    ATON._hoveredUI      = undefined;\r\n\r\n    ATON._bQuerySemOcclusion = true;\r\n    ATON._bQueryNormals  = true;\r\n    ATON._bPauseQuery    = false;\r\n\r\n    //window.setInterval(()=>{ if (!ATON._bPauseQuery) ATON._handleQueries(); }, 500 );\r\n\r\n    // Basis (future support)\r\n/*\r\n    ATON._basisLoader = new BasisTextureLoader();\r\n    ATON._basisLoader.setTranscoderPath( ATON.PATH_BASIS_LIB );\r\n    ATON._basisLoader.detectSupport( ATON._renderer );\r\n    \r\n    // Register BasisTextureLoader for .basis extension.\r\n    THREE.DefaultLoadingManager.addHandler( /\\.basis$/, ATON._basisLoader );\r\n*/\r\n\r\n\r\n    // Mouse/Touch screen coords\r\n    ATON._screenPointerCoords = new THREE.Vector2(0.0,0.0);\r\n\r\n    // Ray casters\r\n    ATON._rcScene = new THREE.Raycaster();\r\n    ATON._rcScene.layers.set(ATON.NTYPES.SCENE);\r\n    ATON._rcSemantics = new THREE.Raycaster();\r\n    ATON._rcSemantics.layers.set(ATON.NTYPES.SEM);\r\n    ATON._rcUI = new THREE.Raycaster();\r\n    ATON._rcUI.layers.set(ATON.NTYPES.UI);\r\n\r\n    //ATON._registerRCS(); // not used for now\r\n\r\n    ATON._setupBaseListeners();\r\n\r\n    ATON.focusOn3DView();\r\n};\r\n\r\n/**\r\nPause rendering\r\n*/\r\nATON.renderPause = ()=>{\r\n    ATON._renderer.setAnimationLoop( undefined );\r\n};\r\n\r\n/**\r\nResume rendering (if paused)\r\n*/\r\nATON.renderResume = ()=>{\r\n    ATON._renderer.setAnimationLoop( ATON._onFrame );\r\n};\r\n\r\nATON._setupLoadManager = ()=>{\r\n    ATON._loadManager = new THREE.LoadingManager();\r\n    ATON._loadManager.onStart = ( url, itemsLoaded, itemsTotal )=>{\r\n\t    console.log( 'Started loading file: ' + url + '.\\nLoaded ' + itemsLoaded + ' of ' + itemsTotal + ' files.' );\r\n        ATON.fireEvent(\"NodeRequestFired\", url);\r\n    };\r\n\r\n    ATON._loadManager.onLoad = ()=>{\r\n\t    console.log( 'Loading complete!');\r\n        ATON.fireEvent(\"AllNodeRequestsCompleted\");\r\n    };\r\n\r\n    ATON._loadManager.onProgress = ( url, itemsLoaded, itemsTotal )=>{\r\n\t    //console.log( 'Loading file: ' + url + '.\\nLoaded ' + itemsLoaded + ' of ' + itemsTotal + ' files.' );\r\n    };\r\n\r\n    ATON._loadManager.onError = ( url )=>{\r\n\t    console.log( 'There was an error loading ' + url );\r\n    };\r\n};\r\n\r\n/**\r\nSet the default pixel density (standard is 1.0)\r\n@example\r\nATON.setDefaultPixelDensity(0.5)\r\n*/\r\nATON.setDefaultPixelDensity = (d)=>{\r\n    ATON._stdpxd = d;\r\n    ATON._renderer.setPixelRatio( d );\r\n};\r\n\r\n/**\r\nReset pixel density to default\r\n*/\r\nATON.resetPixelDensity = ()=>{\r\n    ATON._renderer.setPixelRatio( ATON._stdpxd );\r\n};\r\n\r\n\r\n//============================================================================\r\n// Scene-graphs\r\n//============================================================================\r\nATON.snodes   = {}; // Visible scene-graph\r\nATON.semnodes = {}; // Semantics graph\r\nATON.uinodes  = {}; // UI graph\r\n\r\n// Visible scene-graph\r\n//=============================================\r\n/**\r\nCreate a scene node (visible scene-graph)\r\n@param {string} id - a string representing unique ID of the node (optional)\r\n@returns {Node}\r\n*/\r\nATON.createSceneNode = (id)=>{\r\n    return new ATON.Node(id, ATON.NTYPES.SCENE);\r\n};\r\n\r\n/**\r\nGet a previously created scene node (visible scene-graph)\r\n@param {string} id - the node ID\r\n@returns {Node}\r\n*/\r\nATON.getSceneNode = (id)=>{ \r\n    if (id === undefined) return undefined;    \r\n    return ATON.snodes[id];\r\n};\r\n\r\n/**\r\nGet or create a scene node (visible scene-graph)\r\n@param {string} id - the node ID\r\n@returns {Node}\r\n*/\r\nATON.getOrCreateSceneNode = (id)=>{\r\n    let N = ATON.getSceneNode(id);\r\n    if (N !== undefined) return N;\r\n    return ATON.createSceneNode(id);\r\n};\r\n\r\n/**\r\nGet root (visible scene-graph)\r\n@returns {Node}\r\n*/\r\nATON.getRootScene = ()=>{\r\n    return ATON._rootVisible;\r\n};\r\n\r\n// Semantics, shape descriptors\r\n//=============================================\r\n\r\n/**\r\nCreate a semantic node\r\n@param {string} id - a string representing unique ID of the node (optional)\r\n@returns {Node}\r\n*/\r\nATON.createSemanticNode = (id)=>{\r\n    return new ATON.Node(id, ATON.NTYPES.SEM);\r\n};\r\n\r\n/**\r\nGet a previously created semantic node\r\n@param {string} id - the node ID\r\n@returns {Node}\r\n*/\r\nATON.getSemanticNode = (id)=>{\r\n    if (id === undefined) return undefined; \r\n    return ATON.semnodes[id];\r\n};\r\n\r\n/**\r\nGet or create a semantic node\r\n@param {string} id - the node ID\r\n@returns {Node}\r\n*/\r\nATON.getOrCreateSemanticNode = (id)=>{\r\n    let S = ATON.getSemanticNode(id);\r\n    if (S !== undefined) return S;\r\n    return ATON.createSemanticNode(id);\r\n};\r\n\r\n/**\r\nGet root of semantic graph\r\n@returns {Node}\r\n*/\r\nATON.getRootSemantics = ()=>{\r\n    return ATON._rootSem;\r\n};\r\n\r\n// UI graph\r\n//=============================================\r\n\r\n/**\r\nCreate a UI node\r\n@param {string} id - a string representing unique ID of the node (optional)\r\n@returns {Node}\r\n*/\r\nATON.createUINode = (id)=>{\r\n    return new ATON.Node(id, ATON.NTYPES.UI);\r\n};\r\n\r\n/**\r\nGet a previously created UI node\r\n@param {string} id - the node ID\r\n@returns {Node}\r\n*/\r\nATON.getUINode = (id)=>{\r\n    if (id === undefined) return undefined; \r\n    return ATON.uinodes[id];\r\n};\r\n\r\n/**\r\nGet root of UI graph\r\n@returns {Node}\r\n*/\r\nATON.getRootUI = ()=>{\r\n    return ATON._rootUI;\r\n};\r\n\r\n// Asset loading routines\r\nATON._assetReqNew = (url)=>{\r\n    ATON._numReqLoad++;\r\n    ATON.fireEvent(\"NodeRequestFired\", url);\r\n};\r\nATON._assetReqComplete = (url)=>{\r\n    ATON.fireEvent(\"NodeRequestCompleted\", url);\r\n    ATON._numReqLoad--;\r\n\r\n    if (ATON._numReqLoad <= 0){\r\n        ATON.fireEvent(\"AllNodeRequestsCompleted\");\r\n\r\n        // Bounds\r\n        let c = ATON._rootVisible.getBound().center;\r\n        let r = ATON._rootVisible.getBound().radius;\r\n\r\n        if (ATON._renderer.shadowMap.enabled){\r\n            ATON._rootVisible.traverse((o) => {\r\n                if (o.isMesh){\r\n                    o.castShadow = true;\r\n                    o.receiveShadow = true;\r\n                }\r\n            });\r\n\r\n            // TODO: experimental\r\n            if (ATON._bShadowsFixedBound){\r\n                ATON.SHADOWS_SIZE = r*1.5;\r\n\r\n                ATON._dMainL.shadow.camera.left   = -ATON.SHADOWS_SIZE;\r\n                ATON._dMainL.shadow.camera.right  = ATON.SHADOWS_SIZE;\r\n                ATON._dMainL.shadow.camera.bottom = -ATON.SHADOWS_SIZE;\r\n                ATON._dMainL.shadow.camera.top    = ATON.SHADOWS_SIZE;\r\n\r\n                ATON.updateDirShadows(c);\r\n            }\r\n        }\r\n\r\n        if (ATON._bAutoLP){\r\n            if (ATON._lps[0] === undefined) ATON.addLightProbe( new ATON.LightProbe().setPosition(c).setNear(r) );\r\n            else {\r\n                ATON._lps[0].setPosition(c.x, c.y, c.z).setNear(r);\r\n            }\r\n            console.log(\"Auto LP\");\r\n        }\r\n\r\n        ATON.getRootScene().assignLightProbesByProximity();\r\n\r\n        //ATON._bDirtyLP = true;\r\n\r\n        // FIXME: dirty\r\n        setTimeout( ()=>{\r\n            if (c && ATON._mMainPano) ATON._mMainPano.position.copy(c);\r\n            ATON.updateLightProbes();\r\n        }, 1000);\r\n\r\n    }\r\n};\r\n\r\n\r\nATON.initGraphs = ()=>{\r\n    // Global root\r\n    ATON._mainRoot = new THREE.Scene();\r\n    ATON._mainRoot.background = new THREE.Color( 0.7,0.7,0.7 );\r\n\r\n    // visible scene-graph\r\n    ATON._rootVisibleGlobal = new THREE.Group();\r\n    ATON._mainRoot.add(ATON._rootVisibleGlobal);\r\n\r\n    ATON._rootVisible = ATON.createSceneNode().setAsRoot();\r\n    ATON._rootVisibleGlobal.add(ATON._rootVisible);\r\n\r\n\r\n    // semantics graph\r\n    ATON._rootSem = ATON.createSemanticNode().setAsRoot();\r\n    ATON._mainRoot.add(ATON._rootSem);\r\n\r\n    // UI graph\r\n    ATON._rootUI = ATON.createUINode().setAsRoot();\r\n    ATON._mainRoot.add(ATON._rootUI);\r\n\r\n    // Uniform lighting\r\n    ATON.ambLight = new THREE.AmbientLight( new THREE.Color(1,1,1) /*ATON._mainRoot.background*/ );\r\n    ATON._rootVisibleGlobal.add(ATON.ambLight);\r\n};\r\n\r\nATON.setBackgroundColor = (bg)=>{\r\n    ATON._mainRoot.background = bg;\r\n};\r\n\r\n//==============================================================\r\n// LightProbes\r\n//==============================================================\r\nATON.setAutoLP = (b)=>{\r\n    ATON._bAutoLP = b;\r\n};\r\n\r\nATON.setNeutralAmbientLight = (a)=>{\r\n    ATON.ambLight.color = new THREE.Color( a,a,a );\r\n};\r\n\r\n/**\r\nAdd a LightProbe to the scene\r\n@param {LightProbe} LP - the light probe being added \r\n*/\r\nATON.addLightProbe = (LP)=>{\r\n    if (ATON._lps.length === 0) ATON.setNeutralAmbientLight(0.1);\r\n\r\n    ATON._lps.push(LP);\r\n};\r\n\r\n/**\r\nUpdate all LightProbes in the scene\r\n*/\r\nATON.updateLightProbes = ()=>{\r\n    if (ATON._lps.length === 0) return;\r\n\r\n    for (let i in ATON._lps) ATON._lps[i].update();\r\n\r\n    // FIXME: indirect LP based on first LP (for now)\r\n    if (ATON._lps[0]){\r\n        if (ATON._indLP) ATON._mainRoot.remove(ATON._indLP);\r\n\r\n        ATON._indLP = THREE.LightProbeGenerator.fromCubeRenderTarget( ATON._renderer, ATON._lps[0]._prevCCtarget );\r\n        ATON._mainRoot.add( ATON._indLP );\r\n    }\r\n\r\n    //for (let i in ATON._lps) ATON._lps[i].update();\r\n\r\n    ATON._rootVisible.traverse((o) => {\r\n        let LP = o.userData.LP;\r\n        if (LP !== undefined && LP instanceof ATON.LightProbe){\r\n            o.material.envMap = LP.getEnvTex();\r\n            //o.material.combine = THREE.AddOperation;\r\n            //o.material.envMapIntensity = 5.0;\r\n        }\r\n    });\r\n\r\n    console.log(\"LPs updated.\");\r\n};\r\n\r\n//==============================================================\r\n// Environment\r\n//==============================================================\r\n\r\n/**\r\nSet the main panorama (360)\r\n@param {string} path - url to equirectangular image\r\n@example\r\nATON.setMainPanorama(\"my/pano.jpg\");\r\n*/\r\nATON.setMainPanorama = (path)=>{\r\n\r\n    let tpano = new THREE.TextureLoader().load(path);\r\n    tpano.encoding = THREE.sRGBEncoding;\r\n\r\n    if (ATON._matMainPano !== undefined){\r\n        ATON._matMainPano.map = tpano;\r\n        //ATON._matMainPano.emissive = tpano;\r\n        return;\r\n    }\r\n\r\n    // First time: create it\r\n    ATON._gMainPano = new THREE.SphereBufferGeometry( 1.0, 60,60 );\r\n\r\n    ATON._matMainPano = new THREE.MeshBasicMaterial({ \r\n        map: tpano, \r\n        //emissive: tpano,\r\n        //castShadow: false,\r\n        //receiveShadow: false,\r\n        fog: false,\r\n        depthTest: false,\r\n        depthWrite: false,\r\n        //depthFunc: THREE.AlwaysDepth,\r\n        //side: THREE.DoubleSide\r\n    });\r\n\r\n    ATON._mMainPano = new THREE.Mesh(ATON._gMainPano, ATON._matMainPano);\r\n    ATON._mMainPano.frustumCulled = false;\r\n    ATON.setMainPanoramaRadius(ATON.Nav.STD_FAR * 0.9);\r\n\r\n    ATON._mMainPano.onAfterRender = ()=>{\r\n        //if (ATON._numReqLoad > 0) return;\r\n        ATON._mMainPano.position.copy(ATON.Nav._currPOV.pos);\r\n    };\r\n\r\n    ATON._rootVisibleGlobal.add(ATON._mMainPano);\r\n};\r\n\r\n\r\nATON.setMainPanoramaRadius = (r)=>{\r\n    if (ATON._gMainPano === undefined) return;\r\n    ATON._gMainPano.scale( -r,r,r );\r\n};\r\n\r\n/**\r\nSet main panorama rotation (radians) around up vector\r\n@param {number} r - rotation\r\n@example\r\nATON.setMainPanoramaRotation(1.5);\r\n*/\r\nATON.setMainPanoramaRotation = (r)=>{\r\n    if (ATON._mMainPano === undefined) return;\r\n    ATON._mMainPano.rotation.set( 0,r,0 );\r\n};\r\n\r\n/**\r\nSet and activate main directional light\r\n@param {THREE.Vector3} v - light direction\r\n@example\r\nATON.setMainLightDirection( new THREE.Vector(0.1,-1.0,0.0) );\r\n*/\r\nATON.setMainLightDirection = (v)=>{\r\n\r\n    let d = v.clone();\r\n\r\n    d.x *= ATON.SHADOWS_FAR * 0.5;\r\n    d.y *= ATON.SHADOWS_FAR * 0.5;\r\n    d.z *= ATON.SHADOWS_FAR * 0.5;\r\n\r\n    if (ATON._dMainL === undefined){\r\n        ATON._dMainL = new THREE.DirectionalLight( new THREE.Color(1,1,1), 1.0 );\r\n        ATON._dMainL.castShadow = false;\r\n\r\n        ATON._dMainLtgt = new THREE.Object3D();\r\n        ATON._rootVisibleGlobal.add(ATON._dMainLtgt);\r\n        ATON._dMainL.target = ATON._dMainLtgt;\r\n\r\n        ATON.setNeutralAmbientLight(0.1);\r\n\r\n        ATON._rootVisibleGlobal.add(ATON._dMainL);\r\n        ATON._dMainLpos = new THREE.Vector3();\r\n    }\r\n\r\n    ATON._dMainLdir = d;\r\n\r\n    ATON._dMainL.position.set(-d.x,-d.y,-d.z);\r\n};\r\n\r\nATON.toggleShadows = (b)=>{\r\n    if (ATON._dMainL === undefined) return;\r\n\r\n    if (b){\r\n        ATON._dMainL.castShadow = true;\r\n        ATON._renderer.shadowMap.enabled = true;\r\n\r\n        //ATON._renderer.shadowMap.type    = THREE.BasicShadowMap;\r\n        //ATON._renderer.shadowMap.type    = THREE.PCFShadowMap;\r\n        ATON._renderer.shadowMap.type    = THREE.PCFSoftShadowMap; // bleeding\r\n        //ATON._renderer.shadowMap.type    = THREE.VSMShadowMap;\r\n\r\n        ATON._dMainL.shadow.mapSize.width  = ATON.SHADOWS_RES;\r\n        ATON._dMainL.shadow.mapSize.height = ATON.SHADOWS_RES;\r\n        ATON._dMainL.shadow.camera.near    = ATON.SHADOWS_NEAR;\r\n        ATON._dMainL.shadow.camera.far     = ATON.SHADOWS_FAR;\r\n        //ATON._dMainL.shadow.bias = 0.0001;\r\n\r\n        ATON._dMainL.shadow.camera.left   = -ATON.SHADOWS_SIZE;\r\n        ATON._dMainL.shadow.camera.right  = ATON.SHADOWS_SIZE;\r\n        ATON._dMainL.shadow.camera.bottom = -ATON.SHADOWS_SIZE;\r\n        ATON._dMainL.shadow.camera.top    = ATON.SHADOWS_SIZE;\r\n\r\n        ATON._rootVisible.traverse((o) => {\r\n            if (o.isMesh){\r\n                o.castShadow = true;\r\n                o.receiveShadow = true;\r\n            }\r\n        });\r\n\r\n        if (ATON._bShadowsFixedBound){\r\n            let c = ATON._rootVisible.getBound().center;\r\n            ATON.updateDirShadows(c);\r\n        }\r\n\r\n        console.log(\"Shadows ON\");\r\n    }\r\n    else {\r\n        ATON._dMainL.castShadow = false;\r\n        ATON._renderer.shadowMap.enabled = false;\r\n        console.log(\"Shadows OFF\");\r\n    }\r\n};\r\n\r\nATON.updateDirShadows = (p)=>{\r\n    if (ATON._dMainLdir === undefined) return;\r\n\r\n    if (p === undefined) p = ATON.Nav.getCurrentEyeLocation();\r\n\r\n    ATON._dMainLpos.x = p.x + (ATON.Nav._vDir.x * ATON.SHADOWS_SIZE);\r\n    ATON._dMainLpos.y = p.y + (ATON.Nav._vDir.y * ATON.SHADOWS_SIZE);\r\n    ATON._dMainLpos.z = p.z + (ATON.Nav._vDir.z * ATON.SHADOWS_SIZE);\r\n\r\n    ATON._dMainL.position.set(\r\n        ATON._dMainLpos.x - ATON._dMainLdir.x, \r\n        ATON._dMainLpos.y - ATON._dMainLdir.y, \r\n        ATON._dMainLpos.z - ATON._dMainLdir.z\r\n    );\r\n    ATON._dMainLtgt.position.copy(ATON._dMainLpos);\r\n};\r\n\r\nATON._updateEnvironment = ()=>{\r\n    if (!ATON._renderer.shadowMap.enabled) return;\r\n    if (ATON._bShadowsFixedBound) return;\r\n\r\n    ATON.updateDirShadows();\r\n};\r\n\r\n//==============================================================\r\n// Update routines\r\n//==============================================================\r\nATON._onFrame = ()=>{\r\n    // TODO: add pause render\r\n\r\n    let dt = ATON._clock.getDelta();\r\n\r\n    ATON._fps = 1.0 / dt;\r\n    ATON._dt  = dt;\r\n    \r\n    ATON.Nav._bControlChange = false;\r\n    ATON.Nav._controls.update(dt);\r\n\r\n    ATON._renderer.render( ATON._mainRoot, ATON.Nav._camera );\r\n\r\n/*\r\n    if (ATON.Nav._bControlChange){\r\n        }\r\n    else {\r\n        //ATON._handleScreenPick();\r\n        }\r\n*/\r\n\r\n    if (ATON.XR._bPresenting) ATON.XR.update();\r\n\r\n    // Spatial queries\r\n    ATON._handleQueries();\r\n\r\n    // Navigation system\r\n    ATON.Nav.update();\r\n\r\n    // VRoadcast\r\n    ATON.VRoadcast.update();\r\n\r\n    // UI\r\n    ATON.SUI.update();\r\n\r\n    // Environment/lighting\r\n    ATON._updateEnvironment();\r\n\r\n    ATON.fireEvent(\"frame\");\r\n};\r\n\r\nATON._updateScreenMove = (e)=>{\r\n    e.preventDefault();\r\n\r\n    if (ATON.Nav._mode === ATON.Nav.MODE_DEVORI){\r\n        ATON._screenPointerCoords.x = 0.0;\r\n        ATON._screenPointerCoords.y = 0.0;\r\n        return;\r\n    }\r\n\r\n\tATON._screenPointerCoords.x = ( e.clientX / window.innerWidth ) * 2 - 1;\r\n\tATON._screenPointerCoords.y = -( e.clientY / window.innerHeight ) * 2 + 1;\r\n\r\n    //console.log(ATON._screenPointerCoords);\r\n};\r\n\r\n//==============================================================\r\n// Query rountines\r\n//==============================================================\r\nATON._registerRCS = ()=>{\r\n    ATON._rcRR = 0;\r\n    ATON._rcHandlers = [];\r\n\r\n    ATON._rcHandlers.push( ATON._handleQueryScene );\r\n    ATON._rcHandlers.push( ATON._handleQuerySemantics );\r\n    ATON._rcHandlers.push( ATON._handleQueryUI );\r\n};\r\n\r\nATON._handleQueries = ()=>{\r\n    if (ATON._bPauseQuery) return;\r\n    if (ATON.Nav._bInteracting) return;\r\n    if (ATON._numReqLoad > 0) return;\r\n    if (ATON.Nav.isTransitioning()) return; // do not query during POV transitions\r\n    //if (ATON.device.isMobile || !ATON.XR.isPresenting()) return; \r\n\r\n    // round-robin\r\n    //ATON._rcRR = (ATON._rcRR+1) % 2;\r\n    //ATON._rcHandlers[ATON._rcRR]();\r\n\r\n    ATON._handleQueryScene();\r\n    ATON._handleQuerySemantics();\r\n    ATON._handleQueryUI();\r\n};\r\n\r\n// Ray casting visible scenegraph\r\nATON._handleQueryScene = ()=>{\r\n    if (ATON.XR.isPresenting()){\r\n        ATON._rcScene.set( ATON.XR.getControllerWorldLocation(0), ATON.XR.getControllerWorldDirection(0) );\r\n    }\r\n    else \r\n        ATON._rcScene.setFromCamera( ATON._screenPointerCoords, ATON.Nav._camera );\r\n\r\n    ATON._hitsScene = [];\r\n    //ATON._rcScene.intersectObjects( ATON._rootVisible.children, true, ATON._hitsScene );\r\n    ATON._rcScene.intersectObjects( ATON._mainRoot.children, true, ATON._hitsScene );\r\n\r\n    //ATON._hitsOperator(ATON._hits);\r\n\r\n    // Process hits\r\n    let hitsnum = ATON._hitsScene.length;\r\n    if (hitsnum <= 0){\r\n        ATON._queryDataScene = undefined;\r\n        return;\r\n    }\r\n\r\n    let h = ATON._hitsScene[0];\r\n\r\n    ATON._queryDataScene = {};\r\n    ATON._queryDataScene.p = h.point;\r\n    ATON._queryDataScene.d = h.distance;\r\n    ATON._queryDataScene.o = h.object;\r\n    \r\n    //console.log(ATON._queryDataScene.o);\r\n\r\n    // Normals\r\n    if (!ATON._bQueryNormals) return;\r\n    if (h.face === null) return;\r\n    if (h.face.normal === undefined) return;\r\n\r\n    ATON._queryDataScene.matrixWorld = new THREE.Matrix3().getNormalMatrix( h.object.matrixWorld );\r\n    ATON._queryDataScene.n = h.face.normal.clone().applyMatrix3( ATON._queryDataScene.matrixWorld ).normalize();\r\n};\r\n\r\n/**\r\nGet location of current queried point (if any) on visible scene.\r\nIf no point is queried, return undefined\r\n@returns {THREE.Vector3}\r\n@example\r\nlet p = ATON.getSceneQueriedPoint()\r\n*/\r\nATON.getSceneQueriedPoint = ()=>{\r\n    if (ATON._queryDataScene === undefined) return undefined;\r\n    return ATON._queryDataScene.p;\r\n};\r\n\r\n/**\r\nGet distance to queried location (if any) on visible scene.\r\nIf no point is queried, return undefined\r\n@returns {number}\r\n@example\r\nlet d = ATON.getSceneQueriedDistance()\r\n*/\r\nATON.getSceneQueriedDistance = ()=>{\r\n    if (ATON._queryDataScene === undefined) return undefined;\r\n    return ATON._queryDataScene.d;\r\n};\r\n\r\n/**\r\nGet queried location normal (if any) on visible scene.\r\nIf no point is queried, return undefined\r\n@returns {THREE.Vector3}\r\n@example\r\nlet n = ATON.getSceneQueriedNormal()\r\n*/\r\nATON.getSceneQueriedNormal = ()=>{\r\n    if (ATON._queryDataScene === undefined) return undefined;\r\n    return ATON._queryDataScene.n;\r\n};\r\n\r\n\r\n// Ray casting semantic-graph\r\nATON._handleQuerySemantics = ()=>{\r\n    if (ATON.XR.isPresenting()){\r\n        ATON._rcSemantics.set( ATON.XR.getControllerWorldLocation(0), ATON.XR.getControllerWorldDirection(0) );\r\n    }\r\n    else \r\n        ATON._rcSemantics.setFromCamera( ATON._screenPointerCoords, ATON.Nav._camera );\r\n\r\n    ATON._hitsSem = [];\r\n    ATON._rcSemantics.intersectObjects( ATON._mainRoot.children, true, ATON._hitsSem );\r\n\r\n    // Process hits\r\n    let hitsnum = ATON._hitsSem.length;\r\n    if (hitsnum <= 0){\r\n        ATON._queryDataSem = undefined;\r\n\r\n        if (ATON._hoveredSemNode){\r\n            ATON.fireEvent(\"SemanticNodeLeave\", ATON._hoveredSemNode);\r\n            let S = ATON.getSemanticNode(ATON._hoveredSemNode);\r\n            if (S && S.onLeave) S.onLeave();\r\n        }\r\n        \r\n        ATON._hoveredSemNode = undefined;\r\n        return;\r\n    }\r\n\r\n    let h = ATON._hitsSem[0];\r\n\r\n    // Occlusion\r\n    if (ATON._bQuerySemOcclusion && ATON._queryDataScene){\r\n        if (ATON._queryDataScene.d < h.distance){\r\n\r\n            ATON._queryDataSem = undefined;\r\n\r\n            if (ATON._hoveredSemNode){\r\n                ATON.fireEvent(\"SemanticNodeLeave\", ATON._hoveredSemNode);\r\n                let S = ATON.getSemanticNode(ATON._hoveredSemNode);\r\n                if (S && S.onLeave) S.onLeave();\r\n            }\r\n\r\n            ATON._hoveredSemNode = undefined;\r\n            return;\r\n        }\r\n    }\r\n\r\n    ATON._queryDataSem = {};\r\n    ATON._queryDataSem.p = h.point;\r\n    ATON._queryDataSem.d = h.distance;\r\n    ATON._queryDataSem.o = h.object;\r\n    ATON._queryDataSem.list = []; // holds sem-nodes parental list\r\n\r\n    // traverse parents\r\n    let L = ATON._queryDataSem.list;\r\n    let sp = h.object.parent;\r\n    while (sp){\r\n        if (sp.nid && sp.nid !== ATON.ROOT_NID) L.push(sp.nid);\r\n        sp = sp.parent;\r\n    }\r\n\r\n    let hsn = L[0];\r\n    if (hsn){\r\n        if (ATON._hoveredSemNode !== hsn){\r\n            if (ATON._hoveredSemNode){\r\n                ATON.fireEvent(\"SemanticNodeLeave\", ATON._hoveredSemNode);\r\n                let S = ATON.getSemanticNode(ATON._hoveredSemNode);\r\n                if (S && S.onLeave) S.onLeave();\r\n            }\r\n\r\n            ATON._hoveredSemNode = hsn;\r\n            ATON.fireEvent(\"SemanticNodeHover\", hsn);\r\n            let S = ATON.getSemanticNode(hsn);\r\n            if (S && S.onHover) S.onHover();\r\n        }\r\n    }\r\n\r\n    //console.log(L);\r\n};\r\n\r\nATON._handleQueryUI = ()=>{\r\n    if (ATON.XR.isPresenting() && ATON.XR.controller0){\r\n        ATON._rcUI.set( ATON.XR.getControllerWorldLocation(0), ATON.XR.getControllerWorldDirection(0) );\r\n    }\r\n    else \r\n        ATON._rcUI.setFromCamera( ATON._screenPointerCoords, ATON.Nav._camera );\r\n\r\n    ATON._hitsUI = [];\r\n    ATON._rcUI.intersectObjects( ATON._mainRoot.children, true, ATON._hitsUI );\r\n\r\n    // Process hits\r\n    let hitsnum = ATON._hitsUI.length;\r\n    if (hitsnum <= 0){\r\n        ATON._queryDataUI = undefined;\r\n\r\n        if (ATON._hoveredUI){\r\n            ATON.fireEvent(\"UINodeLeave\", ATON._hoveredUI);\r\n            let S = ATON.getUINode(ATON._hoveredUI);\r\n            if (S && S.onLeave) S.onLeave();\r\n        }\r\n        \r\n        ATON._hoveredUI = undefined;\r\n        return;\r\n    }\r\n\r\n    let h = ATON._hitsUI[0];\r\n\r\n    // Occlusion\r\n    if (ATON._queryDataScene){\r\n        if (ATON._queryDataScene.d < h.distance){\r\n\r\n            ATON._queryDataUI = undefined;\r\n\r\n            if (ATON._hoveredUI){\r\n                ATON.fireEvent(\"SemanticNodeLeave\", ATON._hoveredUI);\r\n                let S = ATON.getUINode(ATON._hoveredUI);\r\n                if (S && S.onLeave) S.onLeave();\r\n            }\r\n\r\n            ATON._hoveredUI = undefined;\r\n            return;\r\n        }\r\n    }\r\n\r\n    ATON._queryDataUI = {};\r\n    ATON._queryDataUI.p = h.point;\r\n    ATON._queryDataUI.d = h.distance;\r\n    ATON._queryDataUI.o = h.object;\r\n    ATON._queryDataUI.list = []; // holds ui-nodes parental list\r\n\r\n    // traverse parents\r\n    let L = ATON._queryDataUI.list;\r\n    let sp = h.object.parent;\r\n    while (sp){\r\n        if (sp.nid && sp.nid !== ATON.ROOT_NID) L.push(sp.nid);\r\n        sp = sp.parent;\r\n    }\r\n\r\n    let hui = L[0];\r\n    if (hui){\r\n        if (ATON._hoveredUI !== hui){\r\n            if (ATON._hoveredUI){\r\n                ATON.fireEvent(\"UINodeLeave\", ATON._hoveredUI);\r\n                let S = ATON.getUINode(ATON._hoveredUI);\r\n                if (S && S.onLeave) S.onLeave();\r\n            }\r\n\r\n            ATON._hoveredUI = hui;\r\n            ATON.fireEvent(\"UINodeHover\", hui);\r\n            let S = ATON.getUINode(hui);\r\n            if (S && S.onHover) S.onHover();\r\n        }\r\n    }\r\n};\r\n\r\n\r\nexport default ATON;\r\n\r\n\r\n"]}