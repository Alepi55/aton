{"version":3,"sources":["ATON.node.js","ATON.pov.js","ATON.lightprobe.js","ATON.eventhub.js","ATON.mathub.js","ATON.utils.js","ATON.scenehub.js","ATON.nav.js","ATON.xr.js","ATON.sui.button.js","ATON.sui.js","ATON.avatar.js","ATON.vroadcast.js","ATON.semfactory.js","ATON.fe.js","ATON.js"],"names":["Node","THREE","Group","id","type","traverse","o","isMesh","geometry","LP","userData","undefined","update","material","envMap","getEnvTex","ATON","NTYPES","SCENE","bPickable","_rootG","_rootVisible","_nodes","snodes","SEM","_rootSem","semnodes","UI","_rootUI","uinodes","as","kwords","_bCloneOnLoadHit","castShadow","receiveShadow","onHover","onLeave","onSelect","ROOT_NID","nid","name","b","kw","K","split","k","c","children","C","addKeywords","s","description","visible","layers","disable","enable","hide","show","enablePicking","disablePicking","M","cMat","matSTD","matHL","setMaterial","f","opacity","envtex","Utils","assignLightProbeToMesh","_lps","length","Vector3","cLP","Box3","setFromObject","getCenter","mdist","i","d","distanceToSquared","pos","clone","p","parent","removeChild","dispose","remove","num","node","N","add","bb","bs","Sphere","getBoundingSphere","x","y","z","position","copy","set","sx","sy","sz","scale","rx","ry","rz","rotation","quaternion","Nav","_qOri","url","onComplete","_assetsManager","then","modelVisitor","console","log","_assetReqNew","P","Promise","resolve","reject","_aLoader","load","data","model","scene","_assetReqComplete","err","filename","exportNode","h","POV","target","up","STD_UPVECTOR","fov","STD_FOV","nextPOV","prevPOV","povlist","push","kwarray","pov","LightProbe","res","near","far","_res","_near","_far","STD_FAR","_envtex","_prevCCtarget","_pmremGenerator","PMREMGenerator","_renderer","CCtarget","WebGLCubeRenderTarget","format","RGBEFormat","generateMipmaps","minFilter","LinearMipmapLinearFilter","encoding","sRGBEncoding","CC","CubeCamera","_rootVisibleGlobal","texture","EventHub","evLocal","evNetwork","on","fireEvent","clearEventHandlers","evtname","ehList","handler","handlerLocal","handlerNetwork","evhLocal","VRoadcast","bReplicate","executeHandlers","MatHub","materials","colors","addDefaults","_loader","MaterialLoader","white","Color","black","green","yellow","red","blue","orange","sem","darksem","fullyTransparent","MeshBasicMaterial","transparent","depthWrite","selector","color","flatShading","controllerRay","semanticShape","semanticShapeHL","semanticShapeEdit","mat","jsonfile","addMaterial","device","geomUnitSphere","SphereBufferGeometry","exporterGLTF","exporterOBJ","_dlink","document","createElement","style","display","body","appendChild","textureLoader","TextureLoader","window","isSecureContext","isMobile","test","navigator","userAgent","substr","isXRsupported","xr","isSessionSupported","filepath","lastIndexOf","toLowerCase","index","substring","startsWith","object","updateMatrixWorld","g","applyMatrix4","matrixWorld","toNonIndexed","mergedGeometries","BufferGeometryUtils","mergeBufferGeometries","mergedGeometry","mergeVertices","center","group","mesh","Mesh","parentNode","computeBoundsTree","map","anisotropy","_maxAnisotropy","magFilter","LinearFilter","v","prec","parseFloat","toPrecision","blob","href","URL","createObjectURL","download","click","str","downloadBlob","Blob","jsonobj","downloadText","JSON","stringify","buffer","ext","getFileExtension","bBin","opts","binary","GLTFExporter","parse","output","ArrayBuffer","downloadArrayBuffer","downloadJSONobj","OBJExporter","noLP","BoxBufferGeometry","MeshStandardMaterial","PATH_RES","tex","createSceneNode","metalness","metalnessMap","roughnessMap","normalMap","dx","dz","PlaneBufferGeometry","rotateX","Math","PI","SceneHub","currID","currData","_bEdit","_bLoading","initBaseParsers","reqpath","sid","oncomplete","$","getJSON","parseScene","sobj","_jsonParsers","getSemanticNode","getSceneNode","child","nodes","edges","n","semid","S","SL","sphere","CL","semesh","_convexPoints","environment","env","pano","mainpano","setMainPanorama","PATH_COLLECTION","setMainPanoramaRotation","L","mainlight","direction","setMainLightDirection","_dMainL","intensity","shadows","toggleShadows","lps","lightprobes","auto","setAutoLP","viewpoints","povs","setHomePOV","setPosition","setTarget","setFOV","setKeywords","keywords","scenegraph","sg","G","getOrCreateSceneNode","removeChildren","urls","Array","isArray","forEach","u","attachTo","shadowcast","setShadowCast","shadowreceive","toYup","setYup","transform","setRotation","setScale","parid","childid","semanticgraph","getOrCreateSemanticNode","createSemanticNode","setDescription","spheres","SemFactory","createSphere","convexshapes","points","createConvexShape","parser","patch","mode","MODE_ADD","O","MODE_DEL","jstr","ajax","PATH_RESTAPI","contentType","dataType","success","r","COSINOIDAL_DIST","cos","POVtransitionDuration","STD_POV_TRANS_DURATION","init","_mode","_rotSpeedOrbit","_rotSpeedFP","_inertia","setOrbitControl","_currPOV","_fromPOV","_reqPOV","homePOV","_tPOVcall","_tPOVprogress","_vDir","Quaternion","_motionAmt","_motionDir","getCurrentEyeLocation","getCurrentDirection","copyCurrentPOV","isTransitioning","isOrbit","MODE_ORBIT","isFirstPerson","MODE_FP","isDevOri","MODE_DEVORI","XR","isPresenting","_cOrbit","_camOrbit","PerspectiveCamera","innerWidth","innerHeight","STD_NEAR","enableAll","OrbitControls","domElement","rotateSpeed","enablePan","enableDamping","dampingFactor","screenSpacePanning","enableZoom","minDistance","maxDistance","addEventListener","_bControlChange","_controls","_camera","syncCurrCamera","setFirstPersonControl","_cFirstPerson","_camFP","setDeviceOrientationControl","_screenPointerCoords","_cDevOri","_camDevOri","DeviceOrientationControls","alphaOffset","setMotionAmount","setMotionDirection","stop","cam","updateProjectionMatrix","getFOV","syncCurrPOV","getCamera","getWorldPosition","getWorldQuaternion","getWorldDirection","ctrl","handlePOV","handleXRtransition","handlePOVtransition","handleMotion","controller0","negate","fv","multiplyScalar","_dt","_clock","elapsedTime","lerpVectors","MathUtils","lerp","_currPos","_fromPos","_reqPos","tgt","subVectors","normalize","FP_EPS","requestPOV","duration","requestPOVbyBound","T","E","radius","requestPOVbyNode","getBound","requestRetarget","point","normal","distanceTo","computeDefaultHome","dv","sceneBS","getRootScene","eye","computeAndRequestDefaultHome","requestHome","scope","reorder","enabled","deviceOrientation","screenOrientation","absolute","alphaOffsetDevice","alphaOffsetScreen","onDeviceOrientationChangeEvent","zee","euler","q0","q1","event","onDeviceOrientationAbsoluteChangeEvent","onScreenOrientationChangeEvent","orientation","setObjectQuaternion","Euler","sqrt","alpha","beta","gamma","orient","setFromEuler","multiply","setFromAxisAngle","connect","disconnect","removeEventListener","getDirection","degToRad","iOSOrientationPermission","DeviceOrientationEvent","requestPermission","permissionState","catch","error","webkitCompassHeading","getDirectionMap","setReferenceSpaceType","setFramebufferScaleFactor","_bPresenting","currSession","rig","gControllers","controller0pos","controller1pos","controller0dir","controller1dir","defaultSelectHandler","_queryDataScene","userHeight","STD_TELEP_DURATION","_hoveredUI","H","getUINode","session","onSessionEnded","setSession","getController","controller1","e","gamepad","gp","pose","hasPosition","_handleUISelection","setRefSpaceLocation","setupControllersUI","requestSession","optionalFeatures","onSessionStarted","end","raytick","CylinderBufferGeometry","translate","raylen","createUINode","getControllerGrip","Button","uiid","baseColor","switchColor","_bSwitched","container","ThreeMeshUI","Block","width","height","padding","borderRadius","backgroundColor","backgroundOpacity","fontFamily","fontTexture","justifyContent","alignContent","uiText","Text","content","fontSize","fontColor","_trigger","PlaneGeometry","SUI","STD_BTN_SIZE","text","mainSelector","getMaterial","setSelectorRadius","gPoints","buildInfoNode","bShowInfo","_labelScale","_labelScaleVR","infoNodeText","getSelectorRadius","setSelectorModel","path","bUseStdMat","infoNode","attachToRoot","infoContainer","getInfoNode","createToolbar","buttonlist","cont","m","button","_bPauseQuery","_queryDataSem","orientToCamera","Avatar","uid","userid","username","message","bTalking","_tStateCall","_tStateDur","_tProgress","_currState","_tgtState","realize","avaMats","avatars","SphereGeometry","usermaterial","getAvatarMaterialByUID","smesh","usermeshnode","setCloneOnLoadHit","userlabelnode","labelcontainer","ucolorsdark","usernametext","usermessagetext","A","msg","D","cs","ts","slerp","handleStateTransition","address","location","origin","initMaterials","socket","_connected","_numUsers","avatarList","avaGroup","setInterval","sendState","USER_STATE_FREQ","_lastStateSent","enableChatLog","_elChat","getNumUsers","ucolors","ucolorhex","MM","sock","emit","REPLICATED_EVT","evhNetwork","isConnected","requestSceneEnter","sceneid","protocol","secure","rejectUnauthorized","io","connected","_registerSocketHandlers","_onConnected","setUsername","_username","append","setMessage","_msg","scrollTop","scrollHeight","touchAvatar","decodeState","requestStateTransition","uname","encodeState","Float32Array","binData","Int8Array","w","a8","a","cpov","lastPos","lastOri","dPos","dOri","angleTo","THRES_STATE_POS","THRES_STATE_ORI","getAvatar","loadRepresentation","clearAllAvatars","bConvexBuilding","convexPoints","convexNode","currConvexMesh","currSemNode","currMaterial","_numShapes","numPoints","geom","ConvexBufferGeometry","currSemesh","setVectorPrecision","setDefaultAndHighlightMaterials","offset","addConvexPoint","Object3D","FE","PATH_RES_ICONS","_bPopup","bPopupBlurBG","_userAuth","_bReqHome","urlParams","URLSearchParams","search","_uiSetupBase","ddens","get","setDefaultPixelDensity","_kModShift","reqstr","PATH_RESTAPI_SCENE","uiAddButton","toggleFullScreen","isConnectionSecure","toggle","popupClose","html","idcontainer","icon","onPress","iconurl","iconid","endsWith","slice","htmlcode","addClass","removeClass","uiSwitchButton","popupQR","screenfull","isFullscreen","popupVRC","attr","popupUser","checkAuth","inputid","value","val","regReplace","RegExp","replace","auLib","switch","Audio","loop","htmlcontent","cssClasses","clstr","htcont","stopPropagation","fadeIn","setPixelRatio","render","_mainRoot","resetPixelDensity","fadeOut","focusOn3DView","popupShow","QRCode","getElementById","keypress","keycode","keyCode","which","onReceive","xhrFields","withCredentials","setEditMode","password","fail","RAD2DEG","DEG2RAD","PATH_MODS","PATH_THREE","PATH_DRACO_LIB","PATH_BASIS_LIB","PATH_MODELS","PATH_SCENES","SHADOWS_NEAR","SHADOWS_FAR","SHADOWS_SIZE","SHADOWS_RES","setPathCollection","setPathScenes","_setupBaseListeners","el","_onResize","_updateScreenMove","_onMouseWheel","Hammer","srcEvent","_handleQueries","defaultDoubleTapFromScreenCoords","_kModCtrl","key","max","aspect","setSize","preventDefault","deltaY","focus","_handleQueryScene","bFPtrans","currDir","feye","ftgt","hsn","_hoveredSemNode","profileDevice","Clock","WebGLRenderer","antialias","preserveDrawingBuffer","_stdpxd","outputEncoding","setAnimationLoop","_onFrame","capabilities","getMaxAnisotropy","Cache","GLTFLoader","_dracoLoader","DRACOLoader","setDecoderPath","setDRACOLoader","_numReqLoad","_bAutoLP","_bShadowsFixedBound","initGraphs","_queryDataUI","_bQuerySemOcclusion","_bQueryNormals","Vector2","_rcScene","Raycaster","_rcSemantics","_rcUI","renderPause","renderResume","_setupLoadManager","_loadManager","LoadingManager","onStart","itemsLoaded","itemsTotal","onLoad","onProgress","onError","getRootSemantics","getRootUI","shadowMap","shadow","camera","left","right","bottom","top","updateDirShadows","addLightProbe","setNear","assignLightProbesByProximity","setTimeout","_mMainPano","updateLightProbes","Scene","background","setAsRoot","ambLight","AmbientLight","setBackgroundColor","bg","setNeutralAmbientLight","_indLP","LightProbeGenerator","fromCubeRenderTarget","tpano","_matMainPano","_gMainPano","fog","depthTest","frustumCulled","setMainPanoramaRadius","onAfterRender","DirectionalLight","_dMainLtgt","_dMainLpos","_dMainLdir","PCFSoftShadowMap","mapSize","_updateEnvironment","dt","getDelta","_fps","clientX","clientY","_registerRCS","_rcRR","_rcHandlers","_handleQuerySemantics","_handleQueryUI","hitsnum","getControllerWorldLocation","getControllerWorldDirection","setFromCamera","_hitsScene","intersectObjects","distance","face","Matrix3","getNormalMatrix","applyMatrix3","getSceneQueriedPoint","getSceneQueriedDistance","getSceneQueriedNormal","_hitsSem","list","sp","_hitsUI","hui"],"mappings":"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","file":"ATON.min.js","sourceRoot":"..\\src","sourcesContent":["/*\r\n    ATON Node Class\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n//import Period from \"./ATON.period.js\";\r\n\r\n\r\n/**\r\nClass representing an ATON node.\r\nConstructor allows to create different types (scene nodes, semantic nodes and UI nodes)\r\n@class Node\r\n@example \r\nlet myNode = new ATON.Node(\"someID\")\r\n*/\r\nclass Node extends THREE.Group {\r\n\r\nconstructor(id, type){\r\n    super();\r\n\r\n    this.type = type? type : ATON.NTYPES.SCENE;\r\n    \r\n    this.bPickable = true;\r\n\r\n    if (this.type === ATON.NTYPES.SCENE){\r\n        this._rootG = ATON._rootVisible;\r\n        this._nodes = ATON.snodes;\r\n        //this.period = undefined; // TODO: assign period object (read-only, centralized) - NOT USED FOR NOW\r\n    }\r\n    if (this.type === ATON.NTYPES.SEM){\r\n        this._rootG = ATON._rootSem;\r\n        this._nodes = ATON.semnodes;\r\n        //this.period = undefined;\r\n    }\r\n\r\n    if (this.type === ATON.NTYPES.UI){\r\n        this._rootG = ATON._rootUI;\r\n        this._nodes = ATON.uinodes;\r\n    }\r\n\r\n    // Register\r\n    this.as(id);\r\n\r\n    this.kwords = undefined;\r\n\r\n    this._bCloneOnLoadHit = true;\r\n\r\n    // Shadows\r\n    this.castShadow    = false;\r\n    this.receiveShadow = false;\r\n\r\n    // Local handlers\r\n    this.onHover  = undefined;\r\n    this.onLeave  = undefined;\r\n    this.onSelect = undefined;\r\n}\r\n\r\n/**\r\n(Re)assign node ID\r\n@param {string} id - the new ID\r\n@example\r\nmyNode.as(\"newID\")\r\n*/\r\nas(id){\r\n    if (id === undefined) return;\r\n    if (id === ATON.ROOT_NID) return;\r\n\r\n    this._nodes[id] = this;\r\n    this.nid  = id;\r\n    this.name = id;\r\n\r\n    return this;\r\n}\r\n\r\nsetAsRoot(){\r\n    this._nodes[ATON.ROOT_NID] = this;\r\n    this.nid = ATON.ROOT_NID;\r\n\r\n    return this;\r\n}\r\n\r\nsetCloneOnLoadHit(b){\r\n    this._bCloneOnLoadHit = b;\r\n    return this;\r\n}\r\n\r\n/**\r\nAdd keyword(s) to this node. Keywords are also recursively added into the sub-graph\r\n@param {string} kw - the keyword or comma-separated list of keywords\r\n@example\r\nmyNode.addKeywords(\"heritage,reconstruction\");\r\n*/\r\naddKeywords(kw){\r\n    let K = kw.split(\",\");\r\n\r\n    if (this.kwords === undefined) this.kwords = {};\r\n    for (let k in K) this.kwords[ K[k] ] = true;\r\n\r\n    // recurse into ATON nodes\r\n    for (let c in this.children){\r\n        let C = this.children[c];\r\n        if (C.type !== undefined) C.addKeywords(kw);\r\n    }\r\n\r\n    return this;\r\n}\r\n\r\n/**\r\nReturns true if this node has specific keyword\r\n@param {string} kw - the keyword\r\n@returns {boolean}\r\n@example\r\nif (myNode.hasKeyword(\"heritage\")){ ... }\r\n*/\r\nhasKeyword(kw){\r\n    if (this.kwords === undefined) return;\r\n    return (this.kwords[kw] !== undefined);\r\n}\r\n\r\n/**\r\nSet custom description (string) to the node\r\n@param {string} s - content\r\n@example\r\nmyNode.setDescription(\"This is a small description\");\r\n*/\r\nsetDescription(s){\r\n    this.userData.description = s;\r\n    return this;\r\n}\r\n\r\n/**\r\nGet node description (string) if any\r\n@returns {string}\r\n@example\r\nlet desc = myNode.getDescription();\r\n*/\r\ngetDescription(){\r\n    return this.userData.description;\r\n}\r\n\r\n/**\r\nHide this node (and sub-graph), also invisible to queries (ray casting, picking)\r\n@example\r\nmyNode.hide()\r\n*/\r\nhide(){ \r\n    this.visible = false;\r\n    this.traverse((o) => { o.layers.disable(this.type); });\r\n}\r\n\r\n/**\r\nShow this node (and sub-graph). If pickable, becomes sensible to queries (ray casting)\r\n@example\r\nmyNode.show()\r\n*/\r\nshow(){ \r\n    this.visible = true;\r\n    if (this.bPickable) this.traverse((o) => { o.layers.enable(this.type); });\r\n    return this;\r\n}\r\n\r\n/**\r\nToggle node visibility. If visible, becomes invisible, and viceversa.\r\n@example\r\nmyNode.toggle()\r\n*/\r\ntoggle(b){\r\n    if (b === undefined){\r\n        if (this.visible) return this.hide();\r\n        else return this.show();\r\n    }\r\n\r\n    if (b) return this.show();\r\n    else return this.hide();\r\n}\r\n\r\n/**\r\nDisable this node for runtime queries (ray casters). Useful for instance on vegetation, etc...\r\n@example\r\nmyNode.load(\"somevegetation.gltf\").disablePicking()\r\n*/\r\ndisablePicking(){\r\n    this.bPickable = false;\r\n    this.traverse((o) => { o.layers.disable(this.type); });\r\n    return this;  \r\n}\r\n\r\n/**\r\nEnable this node for runtime queries (ray casters)\r\n@example\r\nmyNode.enablePicking()\r\n*/\r\nenablePicking(){\r\n    this.bPickable = true;\r\n    this.traverse((o) => { o.layers.enable(this.type); });\r\n    return this;\r\n}\r\n\r\nsetPickable(b){\r\n    if (b) this.enablePicking();\r\n    else this.disablePicking();\r\n\r\n    return this;\r\n}\r\n\r\n/**\r\nSet cascading material. Note this applies to this node and all children (even all those still loading)\r\n@param {THREE.Material} M - the Material\r\n@example\r\nmyNode.setMaterial( new THREE.MeshBasicMaterial({ transparent: true, opacity: 0.2, wireframe: true }) )\r\n*/\r\nsetMaterial(M){\r\n    this.userData.cMat = M;\r\n\r\n    this.traverse((o) => {\r\n        if (o.isMesh){\r\n            this.userData.cMat = M;\r\n            o.material = M;\r\n            //o.material.needsUpdate = true;\r\n            }\r\n    });\r\n\r\n    return this;\r\n}\r\n\r\n/** \r\nGet cascading material\r\n@returns {THREE.Material}\r\n*/\r\ngetMaterial(){\r\n    return this.userData.cMat;\r\n}\r\n\r\n// Set default and highlight materials\r\nsetDefaultAndHighlightMaterials(matSTD, matHL){\r\n    this.userData.matSTD = matSTD;\r\n    this.userData.matHL  = matHL;\r\n\r\n    return this;\r\n}\r\nhighlight(){\r\n    if (this.userData.matHL) this.setMaterial(this.userData.matHL);\r\n    return this;\r\n}\r\nrestoreDefaultMaterial(){\r\n    if (this.userData.matSTD) this.setMaterial(this.userData.matSTD);\r\n    return this;\r\n}\r\n\r\n// Set cascading opacity\r\nsetOpacity(f){\r\n    this.traverse((o) => {\r\n        if (o.isMesh){\r\n            o.material.opacity = f;\r\n            //o.material.needsUpdate = true;\r\n        }\r\n    });\r\n\r\n    return this;\r\n}\r\n\r\n// FIXME: not working\r\nsetShadowCast(b){\r\n    this.castShadow = b;\r\n\r\n    this.traverse((o) => {\r\n        if (o.isMesh){\r\n            o.castShadow = b;\r\n        }\r\n    });\r\n\r\n    return this;\r\n};\r\nsetShadowReceive(b){\r\n    this.receiveShadow = b;\r\n\r\n    this.traverse((o) => {\r\n        if (o.isMesh){\r\n            o.receiveShadow = b;\r\n        }\r\n    });\r\n\r\n    return this;\r\n};\r\n\r\nsetEnvMap(envtex){\r\n    this.traverse((o) => {\r\n        if (o.isMesh){\r\n\t\t\to.material.envMap  = envtex;\r\n\t\t\t//o.material.combine = THREE.MultiplyOperation;\r\n            //o.material.needsUpdate = true;\r\n        }\r\n    });\r\n\r\n    return this;\r\n}\r\n\r\nassignLightProbe(LP){\r\n    this.traverse((o) => {\r\n        if (o.isMesh && o.geometry) ATON.Utils.assignLightProbeToMesh(LP, o);\r\n    });\r\n\r\n    return this;\r\n}\r\n\r\n// (re)assign LPs for each mesh depending on proximity\r\nassignLightProbesByProximity(){\r\n    if (ATON._lps.length === 0) return this;\r\n\r\n    this.traverse((o) => {\r\n        if (o.isMesh && o.geometry){\r\n            let c = new THREE.Vector3();\r\n            let bbox = new THREE.Box3().setFromObject(o).getCenter(c);\r\n\r\n            let cLP   = undefined;\r\n            let mdist = undefined;\r\n\r\n            for (let i in ATON._lps){\r\n                let LP = ATON._lps[i];\r\n                let d = c.distanceToSquared(LP.pos);\r\n\r\n                if (cLP === undefined || d < mdist){\r\n                    mdist = d;\r\n                    cLP = LP;\r\n                }\r\n            }\r\n\r\n            if (cLP) ATON.Utils.assignLightProbeToMesh(cLP, o);\r\n        }\r\n    });\r\n\r\n    return this;\r\n};\r\n\r\n// Find & update all LPs under this subgraph\r\n// FIXME: not working\r\nupdateLightProbes = ()=>{\r\n    this.traverse((o) => {\r\n        if (o.isMesh && o.geometry){\r\n            let LP = o.userData.LP;\r\n\r\n            if (LP !== undefined){\r\n                LP.update();\r\n                o.material.envMap = LP.getEnvTex();\r\n                //o.material.envMapIntensity = 5.0;\r\n                //console.log(\"x\");\r\n            }\r\n        }\r\n    });\r\n\r\n    return this;\r\n};\r\n\r\n// Deep clone\r\nduplicate(){\r\n    let C = this.clone();\r\n\r\n    C.traverse((o)=>{\r\n        if (o.isMesh){\r\n            o.material = o.material.clone();\r\n        }\r\n    });\r\n\r\n    return C;\r\n}\r\n\r\n\r\n// FIXME: xxx\r\ndelete(){\r\n    let p = this.parent;\r\n\r\n    if (p !== undefined && p.nid !== undefined) p.removeChild( this );\r\n}\r\n\r\nremoveChild(c){\r\n    if (c === undefined) return;\r\n\r\n    let nid = c.nid;\r\n    if (c.nid !== undefined) this._nodes[c.nid] = undefined;\r\n\r\n    c.parent = undefined;\r\n\r\n    c.traverse((o) => {\r\n        if (o.geometry) o.geometry.dispose();\r\n        if (o.material) o.material.dispose();\r\n    });\r\n\r\n    this.remove(c);\r\n\r\n    return this;\r\n}\r\n/**\r\nDelete all children of this node\r\n*/\r\nremoveChildren(){\r\n    let num = this.children.length;\r\n    for (let i=(num-1); i>=0; i--) this.removeChild(this.children[i]);\r\n\r\n    return this;\r\n}\r\n\r\n\r\n/**\r\nAttach this node to parent by providing ID (string) or node object\r\n@param {string|Node} node - the parent node\r\n@example\r\nmyNode.attachTo(\"someGroupID\")\r\n@example\r\nmyNode.attachTo(myParentGroup)\r\n*/\r\nattachTo(node){\r\n    let N = (typeof node === 'string')? this._nodes[node] : node;\r\n    if (N){\r\n        N.add(this);\r\n        if (N.userData.cMat) this.userData.cMat = N.userData.cMat;\r\n        }\r\n    return N;\r\n}\r\n\r\n/**\r\nAttach this node to main root. This is usually mandatory in order to visualize the node and all its descendants.\r\nDepending on node type this will be the scene root (visible scene-graph), the semantic-graph root or UI root\r\n@example\r\nmyNode.attachToRoot()\r\n*/\r\nattachToRoot(){\r\n    this._rootG.add(this);\r\n    if (this._rootG.userData.cMat) this.userData.cMat = this._rootG.userData.cMat;\r\n    return this._rootG;\r\n}\r\n\r\n/**\r\nReturn bounding sphere of this node\r\n@returns {THREE.Sphere}\r\n@example\r\nlet bs = myNode.getBound()\r\n*/\r\ngetBound(){\r\n    let bb = new THREE.Box3().setFromObject( this );\r\n    let bs = new THREE.Sphere();\r\n    bb.getBoundingSphere(bs);\r\n\r\n    return bs;\r\n}\r\n\r\n/**\r\nSet location (translation) of this node\r\n@example\r\nmyNode.setPosition(1.0,3.0,0.0)\r\n@example\r\nmyNode.setPosition( new THREE.Vector3(1.0,3.0,0.0) )\r\n*/\r\nsetPosition(x,y,z){\r\n    if (x instanceof THREE.Vector3) this.position.copy(x);\r\n    else this.position.set(x,y,z);\r\n\r\n    return this;\r\n}\r\n\r\n/**\r\nSet scale of this node\r\n@example\r\nmyNode.setScale(3.0,2.0,1.0)\r\n@example\r\nmyNode.setScale(2.0)\r\n@example\r\nmyNode.setScale( new THREE.Vector3(3.0,2.0,1.0) )\r\n*/\r\nsetScale(sx,sy,sz){\r\n    if (sx instanceof THREE.Vector3) this.scale.copy(sx);\r\n    else {\r\n        if (sy === undefined){ sy = sx; sz = sx; }\r\n        this.scale.set(sx,sy,sz);\r\n        }\r\n    \r\n    return this;\r\n}\r\n\r\n/**\r\nSet rotation of this node (Euler rx,ry,rz) in radians\r\n@example\r\nmyNode.setRotation(3.0,2.0,1.0)\r\n@example\r\nmyNode.setRotation( new THREE.Vector3(3.0,2.0,1.0) )\r\n*/\r\nsetRotation(rx,ry,rz){\r\n    if (rx instanceof THREE.Vector3) this.rotation.copy(rx);\r\n    else this.rotation.set(rx,ry,rz);\r\n    \r\n    return this;\r\n}\r\n/**\r\nOrient this node to current camera\r\n*/\r\norientToCamera(){\r\n    this.quaternion.copy( ATON.Nav._qOri );\r\n    return this;\r\n}\r\n\r\nsetYup(){\r\n    this.rotation.set(-1.57079632679,0.0,0.0);\r\n    return this;  \r\n}\r\n\r\n/**\r\nLoad a 3D model under this node, with optional onComplete handler.\r\nNote the system will take care of loading the resources in background, and will manage duplicate requests to same resources avoiding waste of bandwidth\r\n@param {string} url - the url of the 3D model\r\n@param {function} onComplete - the optional handler to be fired on completion\r\n@example\r\nmyNode.load(\"mymodel.gltf\", ()=>{ console.log(\"completed!\") })\r\n*/\r\nload(url, onComplete){\r\n    if (url === undefined) return this;\r\n\r\n    let N = this;\r\n\r\n    // [C] Promise already requested\r\n    if ( N._bCloneOnLoadHit && ATON._assetsManager[url] !== undefined ){\r\n        ATON._assetsManager[url].then(( o ) =>{\r\n            let C = o.clone();\r\n\r\n            ATON.Utils.modelVisitor(N, C); // check\r\n            N.add( C );\r\n\r\n            if (onComplete) onComplete();\r\n        });\r\n\r\n        console.log(\"HIT!\");\r\n        return N;\r\n    }\r\n\r\n    // Fire request\r\n    if (N.type === ATON.NTYPES.SCENE) ATON._assetReqNew(url);\r\n\r\n    let P = new Promise( ( resolve, reject ) => {\r\n        ATON._aLoader.load( url, (data)=>{\r\n            let model = data.scene || data.scene[0];\r\n\r\n            // Visit loaded model\r\n            ATON.Utils.modelVisitor(N, model);\r\n\r\n            N.add( model );\r\n\r\n            resolve(model);\r\n            console.log(\"Model \"+url+\" loaded\");\r\n            \r\n            if (N.type === ATON.NTYPES.SCENE) ATON._assetReqComplete(url);\r\n\r\n            if (onComplete) onComplete();\r\n        },\r\n        undefined,\r\n        (err)=>{\r\n            console.log(err);\r\n            //reject(model);\r\n\r\n            if (N.type === ATON.NTYPES.SCENE) ATON._assetReqComplete(url);\r\n            if (onComplete) onComplete();\r\n        });\r\n\r\n/*\r\n        ATON._aLoader.load( url+\"__LOD2-d.gltf\", (data)=>{\r\n            let model = data.scene || data.scene[0];\r\n            ATON._modelVisitor(model);\r\n\r\n            let C = new THREE.Vector3();\r\n            let bb = new THREE.Box3().setFromObject( model ).getCenter(C);\r\n            model.position.set(-C.x,-C.y,-C.z);\r\n\r\n            let lod = new THREE.LOD();\r\n            lod.position.set(C.x,C.y,C.z);\r\n            lod.matrixAutoUpdate = true;\r\n            lod.addLevel(model, 40.0);\r\n            N.add(lod);\r\n\r\n            //N.add( model );\r\n\r\n            resolve(model);\r\n            console.log(\"ATON model \"+url+\" loaded\");\r\n\r\n            ATON._aLoader.load( url+\"__LOD1-d.gltf\", (data2)=>{\r\n                let model2 = data2.scene || data2.scene[0];\r\n                ATON._modelVisitor(model2);\r\n\r\n                model2.position.set(-C.x,-C.y,-C.z);\r\n                \r\n                lod.addLevel(model2, 0.0);\r\n            });\r\n            \r\n            ATON._assetReqComplete(url);\r\n        });\r\n*/\r\n    });\r\n\r\n    // Register\r\n    if (N._bCloneOnLoadHit) ATON._assetsManager[url] = P;\r\n\r\n    return this;\r\n}\r\n\r\nexportAs( filename ){\r\n    ATON.Utils.exportNode(this, filename);\r\n\r\n    return this;\r\n}\r\n\r\nsetOnHover( h ){\r\n    this.onHover = f;\r\n    return this;\r\n}\r\nsetOnLeave( h ){\r\n    this.onLeave = f;\r\n    return this;\r\n}\r\nsetOnSelect( h ){\r\n    this.onSelect = f;\r\n    return this;\r\n}\r\n\r\n// Assign a period to this node\r\n// TODO: \r\n/*\r\nsetPeriod(p){\r\n    if (this.type === ATON.NTYPES.UI) return this; // not on UI nodes\r\n\r\n    let P = (typeof p === 'string')? ATON.periods[p] : p;\r\n    if (P === undefined) return this;\r\n\r\n    this.period = P;\r\n    return this;\r\n}\r\n\r\nfilterByPeriodID(id){\r\n    if (this.period === undefined) return this;\r\n\r\n    if (this.period.id !== id){\r\n        this.hide();\r\n        return this;\r\n        }\r\n    else {\r\n        this.show();\r\n        return this;\r\n    }\r\n\r\n    this.traverse((o) => {\r\n        if (o.period){\r\n            if (o.period.id === id) this.show();\r\n            else this.hide();\r\n        }\r\n    });\r\n\r\n    return this;\r\n}\r\n*/\r\n\r\n}\r\n\r\nexport default Node;","/*\r\n    ATON Viewpoint Class\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\n/**\r\nClass representing a Viewpoint (POV) in the 3D space, abstracting from device used (mobile, desktop or immersive XR).\r\nConstructor allows to assign the POV a unique ID (`string`)\r\n@class POV\r\n@example \r\nnew ATON.POV(\"myView\")\r\n*/\r\nclass POV {\r\n\r\nconstructor(id){\r\n    this.pos    = new THREE.Vector3(1,0,0);\r\n    this.target = new THREE.Vector3(0,0,0);\r\n    this.up     = ATON.STD_UPVECTOR;\r\n    this.fov    = ATON.Nav.STD_FOV;\r\n\r\n    this.kwords = undefined;\r\n\r\n    this.nextPOV = undefined;\r\n    this.prevPOV = undefined;\r\n\r\n    // Register\r\n    this.as(id);\r\n}\r\n\r\nas(id){\r\n    if (id === undefined) return;\r\n\r\n    ATON.Nav.povlist[id] = this;\r\n    this.id = id;\r\n\r\n    return this;\r\n}\r\n\r\n/**\r\nSet eye position\r\n@example\r\nnew ATON.POV(\"myView\").setPosition(2.0,6.0,1.5)\r\n@example\r\nmypov.setPosition( new THREE.Vector3(2.0,6.0,1.5) )\r\n*/\r\nsetPosition(x,y,z){\r\n    if (x instanceof THREE.Vector3) this.pos.copy(x);\r\n    else this.pos.set(x,y,z);\r\n\r\n    return this;\r\n}\r\n\r\n/**\r\nSet target position\r\n@example\r\nnew ATON.POV(\"myView\").setTarget(8.0,6.0,1.5)\r\n@example\r\nmypov.setTarget( new THREE.Vector3(8.0,6.0,1.5) ).setPosition(2.0,6.0,1.5)\r\n*/\r\nsetTarget(x,y,z){\r\n    if (x instanceof THREE.Vector3) this.target.copy(x);\r\n    else this.target.set(x,y,z);\r\n\r\n    return this;\r\n}\r\n\r\n/**\r\nSet field of view (FOV) in degrees\r\n@param {number} f\r\n@example\r\nnew ATON.POV(\"myView\").setFOV(70.0)\r\n*/\r\nsetFOV(f){\r\n    this.fov = f;\r\n\r\n    return this;\r\n}\r\n\r\n/**\r\nAdd a keyword to this viewpoint\r\n@param {string} kw - the keyword\r\n@example\r\nnew ATON.POV(\"myView\").addKeyword(\"heritage\")\r\n*/\r\naddKeyword(kw){\r\n    if (this.kwords === undefined) this.kwords = [];\r\n    this.kwords.push(kw);\r\n\r\n    return this;\r\n}\r\n\r\nsetKeywords(kwarray){\r\n    this.kwords = kwarray;\r\n    return this;\r\n}\r\n\r\n/**\r\nSet an optional next POV\r\n@param {POV} pov - the next POV\r\n*/\r\nsetNextPOV(pov){\r\n    if (!pov) return;\r\n    this.nextPOV = pov;\r\n\r\n    return this;\r\n}\r\n\r\n/**\r\nSet an optional previous POV\r\n@param {POV} pov - the previous POV\r\n*/\r\nsetPrevPOV(pov){\r\n    if (!pov) return;\r\n    this.prevPOV = pov;\r\n\r\n    return this;\r\n}\r\n\r\n}\r\n\r\nexport default POV;","/*\r\n    ATON Light Probe Class\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\n/**\r\nClass representing a light probe (LP), can be static or updated at runtime\r\n@class LightProbe\r\n@param {number} res - Resolution in pixel of lightprobe (default 64)\r\n@param {number} near - Capture near (default 1m)\r\n@param {number} far - Capture far (default 1Km)\r\n@example \r\nlet LP = new ATON.LightProbe()\r\n*/\r\nclass LightProbe {\r\n\r\nconstructor(res, near, far){\r\n    this.pos = new THREE.Vector3(0,0,0);\r\n\r\n    this._res  = (res !== undefined)?  res  : 64;\r\n    this._near = (near !== undefined)? near : 1.0;\r\n    this._far  = (far !== undefined)?  far  : ATON.Nav.STD_FAR;\r\n/*\r\n    this._LPtarget0 = undefined;\r\n    this._LPtarget1 = undefined;\r\n\r\n    this._LP0 = undefined;\r\n    this._LP1 = undefined;\r\n\r\n    this._flipLP = false;\r\n*/\r\n    this._envtex = undefined;\r\n    this._prevCCtarget = undefined;\r\n\r\n    this._pmremGenerator = new THREE.PMREMGenerator(ATON._renderer);\r\n\r\n    //this.realize();\r\n}\r\n\r\n/*\r\nrealize(){\r\n    this._LPtarget0 = new THREE.WebGLCubeRenderTarget( this._res, {\r\n        format: THREE.RGBFormat,\r\n        generateMipmaps: true,\r\n        minFilter: THREE.LinearMipmapLinearFilter,\r\n        encoding: THREE.sRGBEncoding // prevent the material's shader from recompiling every frame\r\n    });\r\n\r\n    this._LPtarget1 = new THREE.WebGLCubeRenderTarget( this._res, {\r\n        format: THREE.RGBFormat,\r\n        generateMipmaps: true,\r\n        minFilter: THREE.LinearMipmapLinearFilter,\r\n        encoding: THREE.sRGBEncoding\r\n    });\r\n\r\n    this._LP0 = new THREE.CubeCamera( this._near, this._far, this._LPtarget0 );\r\n    this._LP1 = new THREE.CubeCamera( this._near, this._far, this._LPtarget1 );\r\n\r\n    return this;\r\n}\r\n*/\r\n\r\n/**\r\nSet LP position\r\n@example\r\nLP.setPosition(2.0,6.0,1.5)\r\n@example\r\nLP.setPosition( new THREE.Vector3(2.0,6.0,1.5) )\r\n*/\r\nsetPosition(x,y,z){\r\n    if (x instanceof THREE.Vector3) this.pos.copy(x);\r\n    else this.pos.set(x,y,z);\r\n\r\n    //if (this._LP0) this._LP0.position.copy(this.pos);\r\n    //if (this._LP1) this._LP1.position.copy(this.pos);\r\n\r\n    return this;\r\n}\r\n\r\nsetNear(near){\r\n    this._near = near;\r\n    return this;\r\n}\r\nsetFar(far){ \r\n    this._far = far;\r\n    return this;\r\n}\r\n\r\n/**\r\nUpdate LP capture. Typically called when all 3D models are loaded and arranged into the scene.\r\nCan be called at runtime or whenever there is some change in the 3D scene\r\n@example\r\nLP.update()\r\n*/\r\nupdate(){\r\n    if (this._envtex) this._envtex.dispose();\r\n    if (this._prevCCtarget) this._prevCCtarget.dispose();\r\n\r\n    let CCtarget = new THREE.WebGLCubeRenderTarget( this._res, {\r\n        format: THREE.RGBEFormat,\r\n        generateMipmaps: true,\r\n        minFilter: THREE.LinearMipmapLinearFilter,\r\n        encoding: THREE.sRGBEncoding // prevent the material's shader from recompiling every frame\r\n    });\r\n\r\n    let CC = new THREE.CubeCamera( this._near, this._far, CCtarget );\r\n    CC.position.copy(this.pos);\r\n\r\n    CC.update( ATON._renderer, ATON._rootVisibleGlobal );\r\n\r\n    this._envtex = CCtarget.texture;\r\n    \r\n/*\r\n    console.log(CC);\r\n    console.log(CCtarget);\r\n\r\n    let CCtargetX = new THREE.WebGLCubeRenderTarget( this._res, {\r\n        format: THREE.RGBFormat,\r\n        //generateMipmaps: true,\r\n        minFilter: THREE.LinearMipmapLinearFilter,\r\n        encoding: THREE.sRGBEncoding\r\n    });\r\n\r\n    let CCX = new THREE.CubeCamera( this._near, this._far, CCtargetX );\r\n    CCX.position.copy(this.pos);\r\n\r\n    CCX.update( ATON._renderer, ATON._rootVisible );\r\n    this._envtex = this._pmremGenerator.fromCubemap(CCtargetX.texture).texture;\r\n*/\r\n\r\n    this._prevCCtarget = CCtarget;\r\n\r\n\r\n/*\r\n    if (this._LP0 === undefined || this._LP1 === undefined) return this;\r\n\r\n    this._flipLP = !this._flipLP;\r\n    //ATON._flipLP = !ATON._flipLP;\r\n\r\n    if (this._flipLP){\r\n        this._LP0.update( ATON._renderer, ATON._mainRoot );\r\n        this._envtex = this._LPtarget0.texture;\r\n    }\r\n    else {\r\n        this._LP1.update( ATON._renderer, ATON._mainRoot );\r\n        this._envtex = this._LPtarget1.texture;\r\n    }\r\n*/\r\n    return this;\r\n}\r\n\r\n\r\ngetEnvTex(){\r\n    return this._envtex;\r\n}\r\n\r\nassignToNode(N){\r\n    if (N === undefined) return;\r\n    //TODO:\r\n}\r\n\r\n}\r\n\r\nexport default LightProbe;","/*\r\n    ATON Event Hub\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\n/**\r\nATON Event Hub\r\n@namespace EventHub\r\n*/\r\nlet EventHub = {};\r\n\r\n//Initializes the component\r\nEventHub.init = ()=>{\r\n\r\n    EventHub.evLocal   = {};\r\n    EventHub.evNetwork = {};\r\n\r\n    // Expose\r\n    ATON.on                 = EventHub.on;\r\n    ATON.fireEvent          = EventHub.fireEvent;\r\n    ATON.clearEventHandlers = EventHub.clearEventHandlers\r\n};\r\n\r\n/**\r\nClear all event handlers for a given event\r\n@param {string} evtname - event name\r\n*/\r\nEventHub.clearEventHandlers = (evtname)=>{\r\n    EventHub.evLocal[evtname]   = [];\r\n    EventHub.evNetwork[evtname] = [];\r\n};\r\n\r\n// Execute all handlers from list with given data\r\nEventHub.executeHandlers = (ehList, data)=>{\r\n    if (!ehList) return;\r\n\r\n    for (let h = 0; h < ehList.length; h++) {\r\n        let handler = ehList[h];\r\n        if (handler) handler(data);\r\n    }\r\n};\r\n\r\n/**\r\nSubscribe to a given event, with local handler and optional network handler.\r\nThis is also accessible as ATON.on()\r\n@param {string} evtname - event name\r\n@param {function} handlerLocal - local event handler\r\n@param {function} handlerNetwork - optional network (see VRoadcast) event handler\r\n@example\r\nATON.EventHub.on(\"myEvent\", function(data){ console.log(\"received local event\"); })\r\n@example\r\nATON.on(\"myEvent\", function(data){ console.log(\"received local event\"); })\r\n*/\r\nEventHub.on = (evtname, handlerLocal, handlerNetwork)=>{\r\n    // Local event (default)\r\n    if (handlerLocal !== undefined){\r\n        let evhLocal = EventHub.evLocal;\r\n\r\n        if (evhLocal[evtname] === undefined) evhLocal[evtname] = []; // First time (event not registered)\r\n        evhLocal[evtname].push(handlerLocal);\r\n    }\r\n\r\n    // Received event (network)\r\n    if (handlerNetwork !== undefined){\r\n        ATON.VRoadcast.on(evtname, handlerNetwork);\r\n    }\r\n\r\n};\r\n\r\n/**\r\nFire a local (and optionally network) event, with data.\r\nThis is also accessible as ATON.fireEvent()\r\n@param {string} evtname - event name\r\n@param {object} data - object containing data to be transmitted with this event\r\n@param {bool} bReplicate - if true, it will replicate (broadcast) the event to other connected peers in the same scene (see VRoadcast)\r\n@example\r\nATON.EventHub.fireEvent(\"myEvent\", data)\r\n@example\r\nATON.fireEvent(\"myEvent\", data)\r\n*/\r\nEventHub.fireEvent = (evtname, data, bReplicate)=>{\r\n    let ehList = EventHub.evLocal[evtname];\r\n    EventHub.executeHandlers(ehList, data);\r\n\r\n    if (!bReplicate) return;\r\n    ATON.VRoadcast.fireEvent(evtname, data);\r\n};\r\n\r\nexport default EventHub;","/*\r\n    ATON Materials Hub\r\n    Centralized material manager\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\n/**\r\nATON Material Hub\r\n@namespace MatHub\r\n*/\r\nlet MatHub = {};\r\n\r\nMatHub.init = ()=>{\r\n    MatHub.materials = {};\r\n    MatHub.colors    = {};\r\n\r\n    MatHub.addDefaults();\r\n\r\n    MatHub._loader = new THREE.MaterialLoader();\r\n};\r\n\r\nMatHub.addDefaults = ()=>{\r\n\r\n    // Colors\r\n    MatHub.colors.white  = new THREE.Color(1,1,1);\r\n    MatHub.colors.black  = new THREE.Color(0,0,0);\r\n    MatHub.colors.green  = new THREE.Color(0,1,0);\r\n    MatHub.colors.yellow = new THREE.Color(1,1,0);\r\n    MatHub.colors.red    = new THREE.Color(1,0,0);\r\n    MatHub.colors.blue   = new THREE.Color(0,0,1);\r\n    MatHub.colors.orange = new THREE.Color(1,0.5,0);\r\n    \r\n    MatHub.colors.sem     = new THREE.Color(0,0,1);\r\n    MatHub.colors.darksem = new THREE.Color(0,0,0.1);\r\n\r\n    // Materials\r\n    MatHub.materials.fullyTransparent = new THREE.MeshBasicMaterial({ \r\n        transparent: true, \r\n        depthWrite: false, \r\n        opacity: 0.0\r\n    });\r\n    \r\n    // Selector\r\n    MatHub.materials.selector = new THREE.MeshBasicMaterial({\r\n        color: MatHub.colors.green,\r\n        transparent: true,\r\n        depthWrite: false,\r\n        opacity: 0.2, \r\n        flatShading: true\r\n    });\r\n\r\n    // XR/VR ray\r\n    MatHub.materials.controllerRay = new THREE.MeshBasicMaterial({ \r\n        color: MatHub.colors.white, \r\n        transparent: true, \r\n        opacity: 0.2,\r\n        depthWrite: false,\r\n        flatShading: true\r\n    });\r\n\r\n    // Semantic shapes\r\n    MatHub.materials.semanticShape = new THREE.MeshBasicMaterial({ \r\n        color: MatHub.colors.sem, \r\n        transparent: true,\r\n        depthWrite: false, \r\n        opacity: 0.1,\r\n        flatShading: true\r\n    });\r\n    MatHub.materials.semanticShapeHL = new THREE.MeshBasicMaterial({ \r\n        color: MatHub.colors.sem, \r\n        transparent: true,\r\n        depthWrite: false, \r\n        opacity: 0.3,\r\n        flatShading: true\r\n    });\r\n    MatHub.materials.semanticShapeEdit = new THREE.MeshBasicMaterial({ \r\n        color: MatHub.colors.orange, \r\n        transparent: true,\r\n        depthWrite: false, \r\n        opacity: 0.5,\r\n        flatShading: true\r\n    });\r\n};\r\n\r\nMatHub.addMaterial = (id, mat)=>{\r\n    if (MatHub.materials[id]){\r\n        console.log(\"MatHub: material \"+id+\" already registered\");\r\n        return;\r\n    }\r\n\r\n    MatHub.materials[id] = mat;\r\n};\r\n\r\nMatHub.loadMaterial = (id, jsonfile)=>{\r\n    MatHub._loader.load(jsonfile, (mat)=>{\r\n        MatHub.addMaterial(id, mat);\r\n    },\r\n    undefined,\r\n    (err)=>{\r\n        console.log(err);\r\n    });\r\n};\r\n\r\nMatHub.getMaterial = (id)=>{\r\n    return MatHub.materials[id];\r\n};\r\n\r\nexport default MatHub;","/*\r\n    ATON Utils\r\n    various utilities for device profiling, graph visiting, etc.\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\n/**\r\nATON Utils\r\n@namespace Utils\r\n*/\r\nlet Utils = {};\r\n\r\n\r\nUtils.init = ()=>{\r\n    // read-only object to inspect device capabilities\r\n    ATON.device = {};\r\n\r\n    Utils.geomUnitSphere = new THREE.SphereBufferGeometry( 1.0, 16, 16 );\r\n\r\n    // Export/Download utils\r\n    Utils.exporterGLTF = undefined;\r\n    Utils.exporterOBJ  = undefined;\r\n\r\n    Utils._dlink = document.createElement('a');\r\n    Utils._dlink.style.display = 'none';\r\n    document.body.appendChild( Utils._dlink ); // Firefox workaround, see #6594\r\n\r\n    Utils.textureLoader = new THREE.TextureLoader();\r\n};\r\n\r\n/**\r\nIf current connection is secure\r\n@returns {boolean}\r\n*/\r\nUtils.isConnectionSecure = ()=>{\r\n    return window.isSecureContext;\r\n}\r\n\r\n/**\r\nIf current device is mobile (e.g. smartphone, tablet, Oculus Quest)\r\n@returns {boolean}\r\n*/\r\nUtils.isMobile = ()=>{\r\n    return ATON.device.isMobile;\r\n}\r\n\r\n// Profile device capabilities\r\nUtils.profileDevice = ()=>{\r\n\r\n    // Detect mobile\r\n    ATON.device.isMobile = false;\r\n    let detectMobile = ()=>{\r\n        if(/(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|ipad|iris|kindle|Android|Silk|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(navigator.userAgent)\r\n        || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(navigator.userAgent.substr(0,4))){\r\n            return true;\r\n            }\r\n\r\n        return false;\r\n    };\r\n\r\n    ATON.device.isMobile = detectMobile();\r\n\r\n    // XR\r\n    ATON.device.isXRsupported = false;\r\n    if ( 'xr' in navigator ){\r\n\t    navigator.xr.isSessionSupported( 'immersive-vr' ).then( function ( b ){\r\n            if (b){\r\n                ATON.device.isXRsupported = true;\r\n                console.log(\"WebXR supported\");\r\n                }\r\n            else {\r\n                ATON.device.isXRsupported = false;\r\n                console.log(\"WebXR NOT supported\");\r\n                }\r\n\t\t});\r\n    }\r\n};\r\n\r\n// Path utils\r\nUtils.getFileExtension = ( filepath )=>{\r\n\treturn filepath.substr(filepath.lastIndexOf('.')+1).toLowerCase();\r\n};\r\n\r\nUtils.getBaseFolder = ( filepath )=>{\r\n    var index = filepath.lastIndexOf('/');\r\n    if (index !== -1) return filepath.substring( 0, index + 1 );\r\n    \r\n    return '';\r\n};\r\n\r\nUtils.isResourceURL = (s)=>{\r\n    if (s.startsWith(\"http://\"))  return true;\r\n    if (s.startsWith(\"https://\")) return true;\r\n    return false;\r\n};\r\n\r\nUtils.mergeObject = ( object )=>{\r\n    object.updateMatrixWorld( true );\r\n\r\n    const geometry = [];\r\n    object.traverse( c => {\r\n        if ( c.isMesh ){\r\n            const g = c.geometry;\r\n            g.applyMatrix4( c.matrixWorld );\r\n            geometry.push( g.toNonIndexed() );\r\n        }\r\n\r\n    });\r\n\r\n    const mergedGeometries = THREE.BufferGeometryUtils.mergeBufferGeometries( geometry, false );\r\n    const mergedGeometry   = THREE.BufferGeometryUtils.mergeVertices( mergedGeometries ).center();\r\n\r\n    const group = new THREE.Group();\r\n    const mesh = new THREE.Mesh( mergedGeometry );\r\n    group.add( mesh );\r\n    return group;\r\n};\r\n\r\n// Helper visitor routine\r\nUtils.modelVisitor = (parentNode, model)=>{\r\n    if (!model) return this;\r\n\r\n    //model = Utils.mergeObject(model);\r\n    \r\n    let N = parentNode;\r\n    let type = N.type; // Differentiate visit depending on node type\r\n\r\n    model.traverse( ( o ) => {\r\n\r\n        if (N.bPickable !== undefined){\r\n            if (N.bPickable) o.layers.enable(type);\r\n            else o.layers.disable(type);\r\n        }\r\n\r\n        if (o.isMesh){\r\n            //let numVertices = o.geometry.attributes.position.count;\r\n            //console.log(numVertices);\r\n\r\n            if (type === ATON.NTYPES.SCENE){\r\n                // TODO: \r\n                o.castShadow    = true; //N.castShadow;\r\n                o.receiveShadow = true; //N.receiveShadow;\r\n\r\n                // Build accelerated ray casting\r\n                if (o.geometry){\r\n                    o.geometry.computeBoundsTree();\r\n                    console.log(\"Computed BVH\");\r\n                }\r\n\r\n                // Ensure mipmapping is correct\r\n                if ( o.material.map !== null){\r\n                    //console.log(object.material.map);\r\n                    \r\n                    // Why do I have to do this?\r\n                    //o.material.map.generateMipmaps = false;\r\n                    o.material.map.anisotropy = ATON._maxAnisotropy;\r\n                    o.material.map.minFilter  = THREE.LinearMipmapLinearFilter;\r\n                    o.material.map.magFilter  = THREE.LinearFilter;\r\n                    //o.material.map.needsUpdate = true;\r\n                }\r\n            }\r\n\r\n            if (type === ATON.NTYPES.SEM){\r\n                o.material = ATON.MatHub.materials.semanticShape;\r\n            }\r\n\r\n            // Cascading material\r\n            if (N.userData.cMat){\r\n                o.material = N.userData.cMat;\r\n                //o.material.needsUpdate = true;\r\n            }\r\n        }\r\n    });\r\n};\r\n\r\nUtils.setVectorPrecision = (v, prec)=>{\r\n    v.x = parseFloat( v.x.toPrecision(prec) );\r\n    v.y = parseFloat( v.y.toPrecision(prec) );\r\n    v.z = parseFloat( v.z.toPrecision(prec) );\r\n    \r\n    return v;\r\n};\r\n\r\n// Export routines\r\nUtils.downloadBlob = (blob, filename)=>{\r\n    if (filename === undefined) return;\r\n\r\n    Utils._dlink.href = URL.createObjectURL( blob );\r\n    Utils._dlink.download = filename;\r\n    Utils._dlink.click();\r\n};\r\n\r\n// Download text ASCII data\r\nUtils.downloadText = ( str, filename )=>{\r\n    Utils.downloadBlob( new Blob( [ str ], { type: 'text/plain' } ), filename );\r\n};\r\n\r\n// Download json object\r\nUtils.downloadJSONobj = (jsonobj, filename)=>{\r\n    Utils.downloadText( JSON.stringify(jsonobj), filename );\r\n};\r\n\r\nUtils.downloadArrayBuffer = ( buffer, filename )=>{\r\n    Utils.downloadBlob( new Blob( [ buffer ], { type: 'application/octet-stream' } ), filename );\r\n};\r\n\r\n// Export ATON node\r\nUtils.exportNode = (node, filename)=>{\r\n    let ext = Utils.getFileExtension(filename);\r\n    if (ext.length < 1) return;\r\n\r\n    // GLTF\r\n    if (ext === \"glb\" || ext === \"gltf\"){\r\n        let bBin = (ext === \"glb\")? true : false;\r\n\r\n        let opts = {\r\n            //trs: true, // Export position, rotation and scale instead of matrix per node. Default is false\r\n            binary: bBin, // Export in binary (.glb) format, returning an ArrayBuffer. Default is false\r\n            //onlyVisible: false,\r\n            //truncateDrawRange: true\r\n        };\r\n\r\n        if (Utils.exporterGLTF === undefined) Utils.exporterGLTF = new THREE.GLTFExporter();\r\n\r\n        Utils.exporterGLTF.parse( node, ( output )=>{\r\n            if ( output instanceof ArrayBuffer ){\r\n                Utils.downloadArrayBuffer( output, filename);\r\n            }\r\n            else {\r\n                console.log( output );\r\n                Utils.downloadJSONobj(output, filename);\r\n            }\r\n        }, opts);\r\n    }\r\n\r\n    // OBJ format\r\n    if (ext === \"obj\"){\r\n        if (Utils.exporterOBJ === undefined) Utils.exporterOBJ = new THREE.OBJExporter();\r\n\r\n        let output = Utils.exporterOBJ.parse(node);\r\n        //console.log(output);\r\n        Utils.downloadText(output, filename);\r\n    }\r\n};\r\n\r\nUtils.assignLightProbeToMesh = (LP, mesh)=>{\r\n    if (LP === undefined || mesh === undefined) return;\r\n\r\n    if (mesh.noLP) return;\r\n\r\n    mesh.userData.LP = LP;\r\n    //LP.update();\r\n    //mesh.material.envMap = LP.getEnvTex();\r\n    \r\n    //mesh.material.combine = THREE.MultiplyOperation;\r\n    //mesh.material.needsUpdate = true;\r\n\r\n    //console.log(mesh.userData);\r\n};\r\n\r\nUtils.createATONCube = (id)=>{\r\n    let g = new THREE.BoxBufferGeometry( 1,1,1 );\r\n\r\n    let mat = new THREE.MeshStandardMaterial();\r\n\r\n    Utils.textureLoader.load((ATON.PATH_RES+\"models/aton-cube.jpg\"), (tex)=>{\r\n        tex.encoding = THREE.sRGBEncoding;\r\n        mat.map = tex;\r\n    });\r\n\r\n    let N = ATON.createSceneNode(id);\r\n    N.add( new THREE.Mesh(g) );\r\n    N.setMaterial(mat);\r\n\r\n    N.enablePicking();\r\n    return N;\r\n};\r\n\r\n\r\nUtils.createATONCubePBR = (id)=>{\r\n    let g = new THREE.BoxBufferGeometry( 1,1,1 );\r\n\r\n    let mat = new THREE.MeshStandardMaterial();\r\n    mat.metalness = 1.0;\r\n\r\n    Utils.textureLoader.load((ATON.PATH_RES+\"models/aton-cube.jpg\"), (tex)=>{\r\n        tex.encoding = THREE.sRGBEncoding;\r\n        mat.map = tex;\r\n    });\r\n\r\n    Utils.textureLoader.load((ATON.PATH_RES+\"models/aton-cube-pbr.jpg\"), (tex)=>{\r\n        tex.encoding = THREE.sRGBEncoding;\r\n        mat.metalnessMap = tex;\r\n        mat.roughnessMap = tex;\r\n    });\r\n\r\n    Utils.textureLoader.load((ATON.PATH_RES+\"models/aton-cube-nrm.png\"), (tex)=>{\r\n        tex.encoding = THREE.sRGBEncoding;\r\n        mat.normalMap = tex;\r\n\r\n        //mat.bumpMap.anisotropy = ATON._maxAnisotropy;\r\n        //mat.bumpMap.minFilter  = THREE.LinearMipmapLinearFilter;\r\n        //mat.bumpMap.magFilter  = THREE.LinearFilter;\r\n    });\r\n\r\n    let N = ATON.createSceneNode(id);\r\n    N.add( new THREE.Mesh(g) );\r\n    N.setMaterial(mat);\r\n\r\n    N.enablePicking();\r\n    return N;\r\n};\r\n\r\n\r\nUtils.createGround = (texture, dx,dz)=>{\r\n    if (dx === undefined) dx = 1.0;\r\n    if (dz === undefined) dz = 1.0;\r\n\r\n    let g = new THREE.PlaneBufferGeometry( dx, dz );\r\n\r\n    let mat = new THREE.MeshStandardMaterial();\r\n    if (texture !== undefined) Utils.textureLoader.load(texture, (tex)=>{\r\n        tex.encoding = THREE.sRGBEncoding;\r\n        mat.map = tex;\r\n    });\r\n\r\n    let N = ATON.createSceneNode().rotateX(-Math.PI * 0.5);\r\n    N.add( new THREE.Mesh(g, mat) );\r\n    N.enablePicking();\r\n\r\n    return N;\r\n};\r\n\r\n\r\nexport default Utils;","/*\r\n    ATON Scene Hub\r\n    scene JSON routines\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\n/**\r\nATON Scene Hub\r\n@namespace SceneHub\r\n*/\r\nlet SceneHub = {};\r\n\r\nSceneHub.MODE_ADD = 0;\r\nSceneHub.MODE_DEL = 1;\r\n\r\n/**\r\nInitializes the component\r\n*/\r\nSceneHub.init = ()=>{\r\n    SceneHub.currID   = undefined; // Scene ID (sid)\r\n    SceneHub.currData = undefined; // holds compact object describing our ATON scene\r\n    SceneHub._bEdit   = false;     // edit mode (client can modify json on the server)\r\n\r\n    SceneHub._bLoading = false;\r\n\r\n    SceneHub.initBaseParsers();\r\n};\r\n\r\n/**\r\nThis enables/disables edit mode - i.e. changes to the scene are sent to server and become persistent\r\n@param {bool} b - true or false\r\n@example\r\nATON.SceneHub.setEditMode(true)\r\n*/\r\nSceneHub.setEditMode = (b)=>{\r\n    SceneHub._bEdit = b;\r\n    console.log(\"Edit mode:\"+b);\r\n};\r\n\r\n\r\n/**\r\n    Loads a scene by providing JSON path\r\n    @param {string} reqpath - JSON url\r\n    @param {string} sid - Scene ID\r\n    @param {function} oncomplete - Function to be called on complete\r\n    @example\r\n        ATON.SceneHub.load(\"http://path/to/scene.json\", \"sample\", ()=>{ console.log(\"Done!\"); });\r\n*/\r\nSceneHub.load = (reqpath, sid, oncomplete)=>{\r\n    //let args = reqpath.split(',');\r\n\r\n    SceneHub._bLoading = true;\r\n    console.log(\"Loading Scene: \"+sid);\r\n\r\n    return $.getJSON( reqpath, ( data )=>{\r\n        SceneHub.currData  = data;\r\n        SceneHub.currID    = sid; //scenejson.substring(scenejson.lastIndexOf('/')+1);\r\n        SceneHub._bLoading = false;\r\n\r\n        //console.log(ATON.currScene);\r\n\r\n        SceneHub.parseScene(data);\r\n\r\n        if (oncomplete) oncomplete();\r\n        ATON.fireEvent(\"SceneJSONLoaded\", sid);\r\n    });\r\n};\r\n\r\nSceneHub.parseScene = (sobj)=>{\r\n    sobj = (sobj === undefined)? SceneHub.currData : sobj;\r\n    if (sobj === undefined) return;\r\n\r\n    for (let k in sobj)\r\n        if (SceneHub._jsonParsers[k]) SceneHub._jsonParsers[k]( sobj[k] );\r\n};\r\n\r\nSceneHub.getJSONchildren = (nid, type)=>{\r\n    if (type === undefined) type = ATON.NTYPES.SCENE;\r\n\r\n    let P = undefined;\r\n    let children = [];\r\n\r\n    if (type === ATON.NTYPES.SEM)   P = ATON.getSemanticNode(nid);\r\n    if (type === ATON.NTYPES.SCENE) P = ATON.getSceneNode(nid);\r\n\r\n    if (P === undefined) return undefined;\r\n\r\n    for (let c in P.children){\r\n        let child = P.children[c];\r\n\r\n        if (child.nid !== undefined) children.push( child.nid );\r\n        }\r\n\r\n    return children;\r\n};\r\n\r\nSceneHub.getJSONgraphEdges = (type)=>{\r\n    if (type === undefined) type = ATON.NTYPES.SCENE;\r\n    let nodes = ATON.snodes;\r\n    \r\n    if (type === ATON.NTYPES.SEM) nodes = ATON.semnodes;\r\n    if (type === ATON.NTYPES.UI)  nodes = ATON.uinodes;\r\n\r\n    let edges = {};\r\n\r\n    for (let n in nodes){\r\n        let N = nodes[n];\r\n\r\n        //if (N && N.children) edges[n] = SceneHub.getJSONchildren(n, type);\r\n\r\n        let E = {};\r\n        if (N && N.parent && N.parent.nid){\r\n            //edges.push([N.parent.nid, N.nid]);\r\n            if (edges[N.parent.nid] === undefined) edges[N.parent.nid] = [];\r\n            edges[N.parent.nid].push(N.nid);\r\n            //edges[N.parent.nid].filter((v,i) => edges[N.parent.nid].indexOf(v) === i);\r\n        }\r\n    }\r\n\r\n    //console.log(edges);\r\n    return edges;\r\n};\r\n\r\nSceneHub.getJSONsemanticSpheresList = (semid)=>{\r\n    let S = ATON.getSemanticNode(semid);\r\n    if (S === undefined) return undefined;\r\n\r\n    let SL = [];\r\n\r\n    for (let s in S.children){\r\n        let sphere = S.children[s];\r\n        if (sphere.type){\r\n            SL.push([\r\n                parseFloat(sphere.position.x.toPrecision(3)), \r\n                parseFloat(sphere.position.y.toPrecision(3)), \r\n                parseFloat(sphere.position.z.toPrecision(3)), \r\n                parseFloat(sphere.scale.x.toPrecision(3))\r\n            ]);\r\n        }\r\n    }\r\n\r\n    return SL;\r\n};\r\n\r\nSceneHub.getJSONsemanticConvexShapes = (semid)=>{\r\n    let S = ATON.getSemanticNode(semid);\r\n    if (S === undefined) return undefined;\r\n\r\n    let CL = [];\r\n\r\n    for (let s in S.children){\r\n        let semesh = S.children[s];\r\n        if (semesh.userData._convexPoints){\r\n            CL.push(semesh.userData._convexPoints);\r\n        }\r\n    }\r\n\r\n    //console.log(CL);\r\n    \r\n    return CL;\r\n};\r\n\r\n// Top-level scene-JSON parsers\r\nSceneHub.initBaseParsers = ()=>{\r\n    SceneHub._jsonParsers = {};\r\n\r\n    // Environment\r\n    SceneHub._jsonParsers.environment = (env)=>{\r\n\r\n        let pano = env.mainpano;\r\n        if (env.mainpano){\r\n            if (pano.url) ATON.setMainPanorama(ATON.PATH_COLLECTION+pano.url);\r\n            if (pano.rotation) ATON.setMainPanoramaRotation(pano.rotation);\r\n        }\r\n\r\n        let L = env.mainlight;\r\n        if (L){\r\n            if (L.direction) ATON.setMainLightDirection( new THREE.Vector3(L.direction[0],L.direction[1],L.direction[2]) );\r\n\r\n            if (ATON._dMainL){\r\n                if (L.color)     ATON._dMainL.color = new THREE.Color(L.color[0],L.color[1],L.color[2]);\r\n                if (L.intensity) ATON._dMainL.intensity = L.intensity;\r\n\r\n                if (L.shadows) ATON.toggleShadows(L.shadows);\r\n            }\r\n        }\r\n\r\n        let lps = env.lightprobes;\r\n        if (lps){\r\n            if (lps.auto) ATON.setAutoLP(true);\r\n        }\r\n\r\n    };\r\n\r\n    // Viewpoints\r\n    SceneHub._jsonParsers.viewpoints = (povs)=>{\r\n        if (povs === undefined) return;\r\n\r\n        for (let p in povs){\r\n            let pov = povs[p];\r\n            \r\n            if (p === \"home\"){\r\n                ATON.Nav.setHomePOV( \r\n                    new ATON.POV()\r\n                    .setPosition(pov.position[0],pov.position[1],pov.position[2])\r\n                    .setTarget(pov.target[0],pov.target[1],pov.target[2])\r\n                    .setFOV(pov.fov)\r\n                    .setKeywords(pov.keywords)\r\n                );\r\n            }\r\n            else {\r\n                new ATON.POV(p)\r\n                .setPosition(pov.position)\r\n                .setTarget(pov.target)\r\n                .setFOV(pov.fov)\r\n                .setKeywords(pov.keywords);\r\n            }\r\n        }\r\n    };\r\n\r\n    // Visible scene-graph\r\n    SceneHub._jsonParsers.scenegraph = (sg)=>{\r\n        if (sg === undefined) return;\r\n\r\n        let nodes = sg.nodes;\r\n        let edges = sg.edges;\r\n\r\n        // nodes\r\n        for (let nid in nodes){\r\n            let N = nodes[nid]; // JSON node\r\n\r\n            //let G = ATON.createSceneNode(nid); // ATON node\r\n            let G = ATON.getOrCreateSceneNode(nid).removeChildren();\r\n            \r\n            // load models by urls list\r\n            let urls = N.urls;\r\n            if (urls){\r\n                if (Array.isArray(urls)){\r\n                    urls.forEach(u => {\r\n                        ATON.createSceneNode().load(ATON.PATH_COLLECTION+u).attachTo(G);\r\n                    });\r\n                }\r\n                else {\r\n                    G.load(ATON.PATH_COLLECTION+urls);\r\n                }\r\n            }\r\n\r\n            // FIXME: not working\r\n            if (N.shadowcast)    G.setShadowCast(N.shadowcast);\r\n            if (N.shadowreceive) G.setShadowCast(N.shadowreceive);\r\n\r\n            if (N.toYup) G.setYup();\r\n\r\n            // Keywords\r\n            if (N.keywords) G.kwords = N.keywords;\r\n\r\n            // Transform node\r\n            let transform = N.transform;\r\n            if (transform){\r\n                if (transform.position) G.setPosition(transform.position[0],transform.position[1],transform.position[2]);\r\n                if (transform.rotation) G.setRotation(transform.rotation[0],transform.rotation[1],transform.rotation[2]);\r\n                if (transform.scale)    G.setScale(transform.scale[0],transform.scale[1],transform.scale[2]);\r\n            }\r\n        }\r\n\r\n        // Build graph through relationships\r\n        for (let parid in edges){\r\n            let children = edges[parid];\r\n\r\n            let P = ATON.getSceneNode(parid);\r\n\r\n            if (P !== undefined){\r\n                for (let c in children){\r\n                    let childid = children[c];\r\n                    let C = ATON.getSceneNode(childid);\r\n                    if (C !== undefined) C.attachTo(P);\r\n                }\r\n            }\r\n        }\r\n/*\r\n        for (let e = 0; e < edges.length; e++){\r\n            let E = edges[e];\r\n\r\n            let from = E[0];\r\n            let to   = E[1];\r\n\r\n            if (from && to){\r\n                let child = ATON.getSceneNode(to);\r\n                if (child) child.attachTo(from);\r\n            }\r\n        }\r\n*/\r\n    };\r\n\r\n    // Semantic scene-graph\r\n    SceneHub._jsonParsers.semanticgraph = (sg)=>{\r\n        if (sg === undefined) return;\r\n\r\n        let nodes = sg.nodes;\r\n        let edges = sg.edges;\r\n\r\n        // nodes\r\n        for (let nid in nodes){\r\n            let N = nodes[nid]; // JSON node\r\n\r\n            //let G = ATON.createSemanticNode(nid);\r\n            let G = ATON.getOrCreateSemanticNode(nid).removeChildren();\r\n            \r\n            // load shapes by urls list\r\n            let urls = N.urls;\r\n            if (urls){\r\n                if (Array.isArray(urls)){\r\n                    urls.forEach(u => {\r\n                        ATON.createSemanticNode().load(ATON.PATH_COLLECTION+u).attachTo(G);\r\n                    });\r\n                }\r\n                else {\r\n                    G.load(ATON.PATH_COLLECTION+urls);\r\n                }\r\n            }\r\n\r\n            if (N.toYup) G.setYup();\r\n\r\n            if (N.description) G.setDescription(N.description);\r\n\r\n            // Keywords\r\n            if (N.keywords) G.kwords = N.keywords;\r\n\r\n            // Sphere [x,y,z, r]\r\n            let spheres = N.spheres;\r\n            if (Array.isArray(spheres)){\r\n                for (let s in spheres){\r\n                    let S = spheres[s];\r\n                    ATON.SemFactory.createSphere(nid, new THREE.Vector3(S[0],S[1],S[2]), S[3]);\r\n                }\r\n            }\r\n\r\n            let convexshapes = N.convexshapes;\r\n            if (Array.isArray(convexshapes)){\r\n                for (let s in convexshapes){\r\n                    let S = convexshapes[s];\r\n\r\n                    let points = [];\r\n                    for (let i=0; i<S.length; i+=3){\r\n                        let p = new THREE.Vector3(S[i],S[i+1],S[i+2]);\r\n                        points.push(p);\r\n                    }\r\n\r\n                    ATON.SemFactory.createConvexShape(nid, points);\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        // Build relationships\r\n        for (let parid in edges){\r\n            let children = edges[parid];\r\n\r\n            let P = ATON.getSemanticNode(parid);\r\n\r\n            if (P !== undefined){\r\n                for (let c in children){\r\n                    let childid = children[c];\r\n                    let C = ATON.getSemanticNode(childid);\r\n                    if (C !== undefined) C.attachTo(P);\r\n                }\r\n            }\r\n        }\r\n/*\r\n        for (let e = 0; e < edges.length; e++){\r\n            let E = edges[e];\r\n\r\n            let from = E[0];\r\n            let to   = E[1];\r\n\r\n            if (from && to){\r\n                let child = ATON.getSemanticNode(to);\r\n                if (child) child.attachTo(from);\r\n            }\r\n        }\r\n*/\r\n    };\r\n\r\n};\r\n\r\n// Adds custom scene parser to extend JSON scene\r\n// parser(k){ ... }\r\nSceneHub.addSceneParser = (k, parser)=>{\r\n    SceneHub._jsonParsers[k] = parser;\r\n};\r\n\r\n// [C] Sends JSON edit to server node\r\n// previously used: https://tools.ietf.org/html/rfc6902\r\nSceneHub.sendEdit = (patch, mode, onComplete)=>{\r\n    if (SceneHub._bLoading || !SceneHub._bEdit) return;\r\n    if (patch === undefined) return;\r\n    if (mode === undefined) mode = SceneHub.MODE_ADD;\r\n\r\n    let sid = SceneHub.currID;\r\n\r\n    let O = {};\r\n    O.sid  = sid;\r\n    O.data = patch;\r\n    O.mode = (mode === SceneHub.MODE_DEL)? \"DEL\" : \"ADD\";\r\n\r\n    let jstr = JSON.stringify(O);\r\n    //console.log(jstr);\r\n\r\n    $.ajax({\r\n        url: ATON.PATH_RESTAPI+\"edit/scene\",\r\n        type:\"POST\",\r\n        data: jstr,\r\n        contentType:\"application/json; charset=utf-8\",\r\n        dataType:\"json\",\r\n\r\n        // Update local scene JSON\r\n        // TODO: improve traffic by applying patch to local json, and NOT by receiving entire JSON \r\n        success: (r)=>{\r\n            if (r === undefined) return;\r\n            //console.log(r);\r\n            SceneHub.currData = r;\r\n            //console.log(ATON.currSceneHub.data);\r\n\r\n            if (onComplete) onComplete();\r\n        }\r\n    });\r\n};\r\n\r\n\r\nexport default SceneHub;","/*\r\n    ATON Navigation system\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\nconst COSINOIDAL_DIST = function(x){ return (1.0 - Math.cos(x * Math.PI)) / 2.0; };\r\n\r\n/**\r\nATON Navigation system\r\n@namespace Nav\r\n*/\r\nlet Nav = {};\r\n\r\n// Consts\r\nNav.STD_FOV  = 50.0;\r\nNav.STD_NEAR = 0.05;\r\nNav.STD_FAR  = 1000.0;\r\n\r\nNav.FP_EPS = 0.01;\r\nNav.STD_POV_TRANS_DURATION = 2.0;\r\n\r\n// Non-immersive navigation controls\r\nNav.MODE_ORBIT  = 0;\r\nNav.MODE_FP     = 1;\r\nNav.MODE_DEVORI = 2;\r\n\r\n\r\nNav.POVtransitionDuration = Nav.STD_POV_TRANS_DURATION;\r\n\r\n\r\n\r\n\r\n//Initialize nav system\r\nNav.init = ()=>{\r\n    Nav._mode = undefined;\r\n\r\n    Nav._rotSpeedOrbit = 0.4;\r\n    Nav._rotSpeedFP    = -0.2;\r\n    Nav._inertia       = 0.0; // 0.0 = disabled\r\n\r\n    // Setup controls\r\n    //Nav._camera = new THREE.PerspectiveCamera( Nav.STD_FOV, window.innerWidth / window.innerHeight, Nav.STD_NEAR, Nav.STD_FAR );\r\n    //Nav._camera.layers.enableAll();\r\n    //Nav._controls = new THREE.OrbitControls( Nav._camera, ATON._renderer.domElement);\r\n    Nav.setOrbitControl();\r\n\r\n    // POV data\r\n    Nav._currPOV = new ATON.POV(); // holds current viewpoint data (eye, target, etc...)\r\n    Nav._fromPOV = new ATON.POV(); // initial POV when requesting a transition\r\n    Nav._reqPOV  = new ATON.POV(); // requested POV for transition\r\n\r\n    Nav.homePOV = undefined; //new ATON.POV();\r\n\r\n    Nav._tPOVcall = -1.0;\r\n    Nav._tPOVprogress = 0.0;\r\n\r\n    Nav.povlist = {}; // This will handle registered POVs\r\n\r\n    // World direction and orientation (quat)\r\n    // consistent within standard and immersive XR\r\n    Nav._vDir = new THREE.Vector3(1,0,0);\r\n    Nav._qOri = new THREE.Quaternion();\r\n\r\n    // Motion\r\n    Nav._motionAmt = 0.0;\r\n    Nav._motionDir = new THREE.Vector3(0,1,0);\r\n};\r\n\r\n/**\r\nGet current eye location, consistent within standard and immersive XR sessions.\r\n@returns {THREE.Vector3}\r\n@example\r\nlet p = ATON.Nav.getCurrentEyeLocation();\r\n*/\r\nNav.getCurrentEyeLocation = ()=>{\r\n    return Nav._currPOV.pos;\r\n};\r\n\r\n/**\r\nGet current view direction (normalized). Consistent within standard and immersive XR sessions.\r\n@returns {THREE.Vector3}\r\n@example\r\nlet d = ATON.Nav.getCurrentDirection();\r\n*/\r\nNav.getCurrentDirection = ()=>{\r\n    return Nav._vDir;\r\n};\r\n\r\n/**\r\nGrab current POV and return a copy.\r\n@returns {POV}\r\n@example\r\nlet pov = ATON.Nav.copyCurrentPOV();\r\n*/\r\nNav.copyCurrentPOV = ()=>{\r\n    let pov = new ATON.POV();\r\n    pov.pos.copy(Nav._currPOV.pos);\r\n    pov.target.copy(Nav._currPOV.target);\r\n    pov.fov = Nav._currPOV.fov;\r\n\r\n    return pov;\r\n};\r\n\r\n/**\r\nReturn true if the navigation system is currently performing a transition\r\n@returns {boolean}\r\n*/\r\nNav.isTransitioning = ()=>{\r\n    if (Nav._tPOVcall >= 0.0) return true;\r\n    return false;\r\n};\r\n\r\n/**\r\nReturn true if the navigation system is in Orbit mode\r\n@returns {boolean}\r\n*/\r\nNav.isOrbit = ()=>{ return (Nav._mode === Nav.MODE_ORBIT); };\r\n\r\n/**\r\nReturn true if the navigation system is in First-person mode\r\n@returns {boolean}\r\n*/\r\nNav.isFirstPerson = ()=>{ return (Nav._mode === Nav.MODE_FP); };\r\n\r\n/**\r\nReturn true if the navigation system is in Device-orientation mode\r\n@returns {boolean}\r\n*/\r\nNav.isDevOri = ()=>{ return (Nav._mode === Nav.MODE_DEVORI); };\r\n\r\n/**\r\nSet Orbit navigation mode (default)\r\n*/\r\nNav.setOrbitControl = ()=>{\r\n    if (ATON.XR.isPresenting()) return;\r\n\r\n    Nav._mode = Nav.MODE_ORBIT;\r\n\r\n    // One-time setup\r\n    if (Nav._cOrbit === undefined){\r\n        Nav._camOrbit = new THREE.PerspectiveCamera( Nav.STD_FOV, window.innerWidth / window.innerHeight, Nav.STD_NEAR, Nav.STD_FAR );\r\n        Nav._camOrbit.layers.enableAll();\r\n\r\n        Nav._cOrbit = new THREE.OrbitControls( Nav._camOrbit, ATON._renderer.domElement);\r\n\r\n        let C = Nav._cOrbit;\r\n\r\n        C.rotateSpeed   = Nav._rotSpeedOrbit;\r\n        C.enablePan     = true;\r\n        \r\n        if (Nav._inertia > 0.0){\r\n            C.enableDamping = true;\r\n            C.dampingFactor = 0.1;\r\n        }\r\n        \r\n        C.screenSpacePanning = true;\r\n        \r\n        C.enableZoom  = true;\r\n        C.minDistance = 0.03;\r\n        C.maxDistance = 1000.0;\r\n\r\n        C.addEventListener(\"change\", () => { Nav._bControlChange = true; });\r\n    }\r\n\r\n    Nav._controls = Nav._cOrbit;\r\n    //Nav._controls.target.copy(Nav._camera.position);\r\n    Nav._camera = Nav._camOrbit;\r\n    \r\n    Nav._controls.update();\r\n    if (Nav._currPOV) Nav.syncCurrCamera();\r\n};\r\n\r\n/**\r\nSet First-Person navigation mode\r\n*/\r\nNav.setFirstPersonControl = ()=>{\r\n    if (ATON.XR.isPresenting()) return;\r\n\r\n    Nav._mode = Nav.MODE_FP;\r\n\r\n    // One-time setup\r\n    if (Nav._cFirstPerson === undefined){\r\n        Nav._camFP = new THREE.PerspectiveCamera( Nav.STD_FOV, window.innerWidth / window.innerHeight, Nav.STD_NEAR, Nav.STD_FAR );\r\n        Nav._camFP.layers.enableAll();\r\n\r\n        Nav._cFirstPerson = new THREE.OrbitControls( Nav._camFP, ATON._renderer.domElement);\r\n\r\n        let C = Nav._cFirstPerson;\r\n\r\n        C.enableZoom  = false;\r\n        C.enablePan   = false;\r\n        C.rotateSpeed = Nav._rotSpeedFP;\r\n        \r\n        if (Nav._inertia > 0.0){\r\n            C.enableDamping = true;\r\n            C.dampingFactor = 0.1;\r\n        }\r\n        \r\n        //C.screenSpacePanning = true;\r\n\r\n        C.target.copy(Nav._camera.position);\r\n\r\n        C.minDistance = 0.05;\r\n        C.maxDistance = 0.05;\r\n    }\r\n\r\n    Nav._controls = Nav._cFirstPerson;\r\n    //Nav._controls.target.copy(Nav._camera.position);\r\n    Nav._camera = Nav._camFP;\r\n\r\n    Nav._controls.update();\r\n    if (Nav._currPOV) Nav.syncCurrCamera();\r\n/*\r\n    if (Nav._controls) ATON._controls.dispose();\r\n    ATON._controls = new THREE.FirstPersonControls( ATON._camera, ATON._renderer.domElement);\r\n    ATON._controls.lookSpeed = 0.1;\r\n    ATON._controls.movementSpeed = 10;\r\n    ATON._controls.noFly = true;\r\n    ATON._controls.lookVertical = false;\r\n\r\n    //ATON._camera.position.set( 20.0, 5.0, 0 );\r\n    ATON._controls.lookAt(0,4,0);\r\n\r\n    ATON._controls.update();\r\n    console.log(ATON._controls);\r\n*/\r\n};\r\n\r\n/**\r\nSet device-orientation navigation mode\r\n*/\r\nNav.setDeviceOrientationControl = ()=>{\r\n    if (!ATON.Utils.isMobile()) return;\r\n\r\n    Nav._mode = Nav.MODE_DEVORI;\r\n    ATON._screenPointerCoords.set(0.0,0.0);\r\n\r\n    // One-time setup\r\n    if (Nav._cDevOri === undefined){\r\n        Nav._camDevOri = new THREE.PerspectiveCamera( Nav.STD_FOV, window.innerWidth / window.innerHeight, Nav.STD_NEAR, Nav.STD_FAR );\r\n        Nav._camDevOri.layers.enableAll();\r\n\r\n        Nav._cDevOri = new THREE.DeviceOrientationControls(Nav._camDevOri, ATON._renderer.domElement);\r\n        //Nav._cDevOri = new Nav.DeviceOrientationControls(Nav._camDevOri, ATON._renderer.domElement);\r\n\r\n        Nav._cDevOri.alphaOffset = 0.0; //The alpha offset in radians\r\n    }\r\n\r\n    Nav._controls = Nav._cDevOri;\r\n    Nav._camera   = Nav._camDevOri;\r\n\r\n    Nav._controls.update();\r\n    if (Nav._currPOV) Nav.syncCurrCamera();\r\n};\r\n\r\n/**\r\nSet a motion amount\r\n@param {number} f - the motion amount\r\n@example\r\nATON.Nav.setMotionAmount(0.1);\r\n*/\r\nNav.setMotionAmount = (f)=>{\r\n    Nav._motionAmt = f;\r\n};\r\n\r\n/**\r\nSet a motion direction\r\n@param {THREE.Vector3} f - the motion direction\r\n@example\r\nATON.Nav.setMotionDirection( new THREE.Vector(1,0,0) );\r\n*/\r\nNav.setMotionDirection = (v)=>{\r\n    Nav._motionDir.copy(v);\r\n}\r\n\r\n/**\r\nStop current motion\r\n*/\r\nNav.stop = ()=>{\r\n    Nav._motionAmt = 0.0;\r\n    //TODO: stop any transition\r\n};\r\n\r\n/**\r\nSet field-of-view (FoV) in degrees\r\n@param {number} f\r\n@example\r\nATON.Nav.setFOV(30.0);\r\n*/\r\nNav.setFOV = (f)=>{\r\n    if (ATON.XR.isPresenting()) return; // skip for immersive sessions\r\n\r\n    Nav._currPOV.fov = f;\r\n\r\n    let cam = Nav._camera;\r\n    cam.fov = f;\r\n    cam.updateProjectionMatrix();\r\n};\r\n\r\n/**\r\nGet current field-of-view (FoV) in degrees\r\n@returns {number}\r\n*/\r\nNav.getFOV = ()=>{\r\n    return Nav._currPOV.fov;\r\n};\r\n\r\n\r\n// Retrieve currPOV from camera and controls\r\nNav.syncCurrPOV = ()=>{\r\n    if (ATON.XR.isPresenting()){\r\n        \r\n        let C = ATON._renderer.xr.getCamera(Nav._camera);\r\n        C.getWorldPosition( Nav._currPOV.pos );\r\n        C.getWorldQuaternion( Nav._qOri );\r\n        C.getWorldDirection( Nav._vDir );\r\n        //console.log(Nav._hmdPos);\r\n\r\n        //ATON.XR.hmdPos.copy(Nav._currPOV.pos);\r\n        //ATON.XR.hmdDir.copy(Nav._vDir);\r\n        \r\n        //ATON._renderer.xr.getCamera(Nav._camera);\r\n        //ATON._renderer.xr.getCamera(Nav._camera).getWorldDirection(Nav._vDir);\r\n        //Nav._camera.getWorldDirection(Nav._vDir);\r\n        \r\n        //Nav._currPOV.pos.copy(Nav._camera.position);\r\n        return;\r\n    }\r\n\r\n    let ctrl  = Nav._controls;\r\n    let cam   = Nav._camera;\r\n\r\n    cam.getWorldDirection(Nav._vDir);\r\n    cam.getWorldQuaternion(Nav._qOri);\r\n\r\n    if (Nav._mode === Nav.MODE_DEVORI){\r\n        Nav._currPOV.pos.copy(cam.position);\r\n        return;\r\n    }\r\n\r\n    if (Nav._mode === Nav.MODE_FP){\r\n        Nav._currPOV.pos.copy(ctrl.target);\r\n\r\n        Nav._currPOV.target.x = Nav._currPOV.pos.x + Nav._vDir.x; //ctrl.target.x - cam.position.x;\r\n        Nav._currPOV.target.y = Nav._currPOV.pos.y + Nav._vDir.y; //ctrl.target.y - cam.position.y;\r\n        Nav._currPOV.target.z = Nav._currPOV.pos.z + Nav._vDir.z; //ctrl.target.z - cam.position.z;\r\n        return;\r\n    }\r\n    \r\n    Nav._currPOV.pos.copy(cam.position);\r\n    Nav._currPOV.target.copy(ctrl.target);\r\n};\r\n\r\n// After syncCurrPOV and before updateCamera, we maniuplate currPOV\r\n//==================================================================================\r\nNav.handlePOV = ()=>{\r\n    //console.log(Nav._currPOV.pos);\r\n\r\n    if (ATON.XR.isPresenting()) Nav.handleXRtransition();\r\n    else Nav.handlePOVtransition();\r\n\r\n    Nav.handleMotion();\r\n\r\n    //if (ATON.XR.isPresenting()) console.log(ATON._renderer.xr);\r\n\r\n    // Handle constraints\r\n\r\n};\r\n\r\nNav.handleMotion = ()=>{\r\n    if (Nav.isTransitioning()) return;\r\n\r\n    if (Nav._motionAmt != 0.0){\r\n\r\n        //if ()\r\n\r\n\r\n        if (ATON.XR.controller0 && ATON.XR.controller0.visible){\r\n            ATON.XR.controller0.getWorldDirection(Nav._motionDir);\r\n            Nav._motionDir.negate();\r\n            }\r\n        else Nav._motionDir.copy(Nav._vDir);\r\n\r\n        let fv = Nav._motionDir.clone();\r\n        fv.multiplyScalar(Nav._motionAmt * ATON._dt);\r\n\r\n        Nav._currPOV.pos.add(fv);\r\n        Nav._currPOV.target.add(fv); // check if needed\r\n    }\r\n};\r\n\r\nNav.handlePOVtransition = ()=>{\r\n    if (Nav._tPOVcall < 0.0) return;\r\n\r\n    if (Nav.POVtransitionDuration <= 0.0) Nav._tPOVprogress = 1.0;\r\n    else Nav._tPOVprogress = (ATON._clock.elapsedTime - Nav._tPOVcall) / Nav.POVtransitionDuration;\r\n\r\n    // End\r\n    if (Nav._tPOVprogress >= 1.0){\r\n\r\n        Nav._tPOVcall = -1.0;\r\n        //Nav._controls.enabled = true;\r\n\r\n        Nav._currPOV.pos.copy(Nav._reqPOV.pos);\r\n        Nav._currPOV.target.copy(Nav._reqPOV.target);\r\n        Nav._currPOV.fov = Nav._reqPOV.fov;\r\n\r\n        ATON.fireEvent(\"POVTransitionCompleted\", Nav._reqPOV.id);\r\n        return;\r\n    }\r\n\r\n    Nav._tPOVprogress = COSINOIDAL_DIST(Nav._tPOVprogress);\r\n\r\n    Nav._currPOV.pos.lerpVectors(Nav._fromPOV.pos, Nav._reqPOV.pos, Nav._tPOVprogress);\r\n    Nav._currPOV.target.lerpVectors(Nav._fromPOV.target, Nav._reqPOV.target, Nav._tPOVprogress);\r\n\r\n    if (!Nav._fromPOV.fov || !Nav._reqPOV.fov) return;\r\n    Nav._currPOV.fov = THREE.MathUtils.lerp(Nav._fromPOV.fov, Nav._reqPOV.fov, Nav._tPOVprogress);\r\n\r\n    //console.log(Nav._camera);\r\n\r\n    Nav._camera.fov = Nav._currPOV.fov;\r\n    Nav._camera.updateProjectionMatrix();\r\n};\r\n\r\n// Immersive XR transitions\r\nNav.handleXRtransition = ()=>{\r\n    if (Nav._tPOVcall < 0.0) return;\r\n\r\n    if (Nav.POVtransitionDuration <= 0.0) Nav._tPOVprogress = 1.0;\r\n    else Nav._tPOVprogress = (ATON._clock.elapsedTime - Nav._tPOVcall) / Nav.POVtransitionDuration;\r\n\r\n    // End\r\n    if (Nav._tPOVprogress >= 1.0){\r\n\r\n        Nav._tPOVcall = -1.0;\r\n        //Nav._controls.enabled = true;\r\n\r\n        //ATON.XR.setRefSpaceLocation(Nav._reqXRpos);\r\n\r\n        console.log(\"XR height\"+ATON.XR._currPos.y);\r\n        console.log(\"HMD height\"+Nav._currPOV.pos.y);\r\n\r\n        ATON.fireEvent(\"POVTransitionCompleted\", Nav._reqPOV.id);\r\n        return;\r\n    }\r\n\r\n    ATON.XR._currPos.lerpVectors(ATON.XR._fromPos, ATON.XR._reqPos, Nav._tPOVprogress);\r\n    //ATON.XR._currPos.lerpVectors(Nav._fromPOV.pos, Nav._reqPOV.pos, Nav._tPOVprogress);\r\n\r\n};\r\n\r\n// Update internal camera from currPOV \r\nNav.syncCurrCamera = ()=>{\r\n    let ctrl  = Nav._controls;\r\n    let cam   = Nav._camera;\r\n    \r\n    let pos = Nav._currPOV.pos;\r\n    let tgt = Nav._currPOV.target;\r\n\r\n    // We are in VR\r\n    if (ATON.XR.isPresenting()){\r\n        ///let vrcam = ATON.XR.rig;\r\n        ///vrcam.position.copy(pos);\r\n        \r\n        ///ATON.XR.setRefSpaceLocation(pos);\r\n\r\n        //let C = ATON._renderer.xr.getCamera(cam);\r\n        //C.getWorldDirection(Nav._vDir);\r\n        return;\r\n    }\r\n\r\n    if (Nav._mode === Nav.MODE_DEVORI){\r\n        cam.position.copy(pos);\r\n        return;\r\n    }\r\n\r\n    // Common controls\r\n    //let d = new THREE.Vector3();\r\n    Nav._vDir.subVectors(tgt, pos);\r\n    Nav._vDir.normalize();\r\n\r\n    if (Nav._mode === Nav.MODE_FP){\r\n        ctrl.target.copy(pos);\r\n\r\n        cam.position.x = ctrl.target.x - (Nav._vDir.x * Nav.FP_EPS);\r\n        cam.position.y = ctrl.target.y - (Nav._vDir.y * Nav.FP_EPS);\r\n        cam.position.z = ctrl.target.z - (Nav._vDir.z * Nav.FP_EPS);\r\n    }\r\n    else {\r\n        cam.position.copy(pos);\r\n        ctrl.target.copy(tgt);\r\n    }\r\n};\r\n\r\n// Main update routine\r\nNav.update = ()=>{\r\n\r\n    //Nav._bXR = ATON.XR.isPresenting();\r\n\r\n    Nav.syncCurrPOV();\r\n    Nav.handlePOV();\r\n    Nav.syncCurrCamera();\r\n};\r\n\r\n\r\n/**\r\nRequest transition to viewpoint (POV)\r\n@param {POV} pov - the target POV\r\n@param {number} duration - duration of transition in seconds (optional), otherwise use standard duration\r\n@example\r\nATON.Nav.requestPOV( myTargetPOV );\r\n*/\r\nNav.requestPOV = (pov, duration)=>{\r\n    if (ATON._tPOVcall >= 0.0) return; // already requested\r\n\r\n    ATON.fireEvent(\"POVTransitionRequested\", pov.id);\r\n\r\n    if (duration !== undefined) Nav.POVtransitionDuration = duration;\r\n    \r\n    //Nav._controls.enabled = false;\r\n\r\n    Nav._tPOVcall = ATON._clock.elapsedTime;\r\n    \r\n    if (ATON.XR.isPresenting()){\r\n        Nav._reqPOV.pos.copy(pov.pos? pov.pos : Nav._currPOV.pos);\r\n        Nav._fromPOV.pos.copy(Nav._currPOV.pos);\r\n\r\n        ATON.XR._reqPos.copy(pov.pos? pov.pos : Nav._currPOV.pos);\r\n        ATON.XR._fromPos.copy(ATON.XR._currPos);\r\n    }\r\n    else {\r\n        Nav._reqPOV.pos.copy(pov.pos? pov.pos : Nav._currPOV.pos);\r\n        Nav._reqPOV.target.copy( pov.target? pov.target : Nav._currPOV.target);\r\n        Nav._reqPOV.fov = pov.fov? pov.fov : Nav._currPOV.fov;\r\n\r\n        Nav._fromPOV.pos.copy(Nav._currPOV.pos);\r\n        Nav._fromPOV.target.copy(Nav._currPOV.target);\r\n        Nav._fromPOV.fov = Nav._currPOV.fov;\r\n    }\r\n};\r\n\r\n\r\nNav.requestPOVbyBound = (bs, duration)=>{\r\n    if (bs === undefined) return;\r\n\r\n    let T = new THREE.Vector3();\r\n    let E = new THREE.Vector3();\r\n\r\n    T.copy(bs.center);\r\n    \r\n    let r = bs.radius * 2.5;\r\n    E.x = T.x - (r * Nav._vDir.x);\r\n    E.y = T.y - (r * Nav._vDir.y);\r\n    E.z = T.z - (r * Nav._vDir.z);\r\n\r\n    let pov = new ATON.POV().setPosition(E).setTarget(T);    \r\n    Nav.requestPOV(pov, duration);\r\n};\r\n\r\n/**\r\nRequest transition to specific ATON Node\r\n@param {Node} n - the target ATON Node\r\n@param {number} duration - duration of transition in seconds (optional), otherwise use standard duration\r\n@example\r\nATON.Nav.requestPOVbyNode( myNode );\r\n*/\r\nNav.requestPOVbyNode = (n, duration)=>{\r\n    if (n === undefined) return;\r\n    \r\n    let bs = n.getBound();\r\n\r\n    Nav.requestPOVbyBound(bs,duration);\r\n};\r\n\r\nNav.requestRetarget = (point, normal, duration)=>{\r\n    let M = new THREE.Vector3();\r\n    if (normal === undefined){\r\n        M.lerpVectors(point, Nav._currPOV.pos, 0.8);\r\n    }\r\n    else {\r\n        let d = point.distanceTo(Nav._currPOV.pos);\r\n        d *= 0.5;\r\n        M.x = point.x + (normal.x * d);\r\n        M.y = point.y + (normal.y * d);\r\n        M.z = point.z + (normal.z * d);\r\n    }\r\n\r\n    let pov = new ATON.POV().setPosition(M).setTarget(point).setFOV(Nav._currPOV.fov);\r\n    console.log(pov);\r\n    \r\n    Nav.requestPOV(pov, duration);\r\n};\r\n\r\n\r\n/**\r\nCompute a default home, depending on visibile bounding sphere. Typically called after all assets are loaded\r\n@param {THREE.Vector3} dv - the normalized offset direction (optional)\r\n@example\r\nATON.Nav.computeDefaultHome();\r\n*/\r\nNav.computeDefaultHome = (dv)=>{\r\n    if (dv === undefined) dv = new THREE.Vector3(1,0.7,1);\r\n\r\n    let sceneBS = ATON.getRootScene().getBound();\r\n\r\n    let eye = new THREE.Vector3(\r\n        sceneBS.center.x + (sceneBS.radius * dv.x * 1.5), \r\n        sceneBS.center.y + (sceneBS.radius * dv.y * 1.5), \r\n        sceneBS.center.z + (sceneBS.radius * dv.z * 1.5)\r\n    );\r\n\r\n    Nav.homePOV = new ATON.POV().setPosition(eye).setTarget(sceneBS.center);\r\n};\r\n\r\n/** \r\nSet the home viewpoint (POV)\r\n@param {POV} pov - the home POV\r\n*/\r\nNav.setHomePOV = (pov)=>{\r\n    Nav.homePOV = pov;\r\n};\r\n\r\nNav.computeAndRequestDefaultHome = (duration, dv)=>{\r\n    Nav.computeDefaultHome(dv);\r\n    Nav.requestPOV(Nav.homePOV, duration);\r\n};\r\n\r\n/** \r\nRequest home viewpoint\r\n@param {number} duration - transition duration\r\n*/\r\nNav.requestHome = (duration)=>{\r\n    Nav.requestPOV(Nav.homePOV, duration);\r\n};\r\n\r\n\r\n/*\r\nMobile devori (modified for absolute compass - UNSTABLE)\r\nauthor richt / http://richt.me\r\nauthor WestLangley / http://github.com/WestLangley\r\nW3C Device Orientation control (http://w3c.github.io/deviceorientation/spec-source-orientation.html)\r\n*/\r\nNav.DeviceOrientationControls = function ( object ) {\r\n    let scope = this;\r\n\r\n    this.object = object;\r\n    this.object.rotation.reorder( 'YXZ' );\r\n    this.enabled = true;\r\n\r\n    this.deviceOrientation = {};\r\n    this.screenOrientation = 0;\r\n\r\n    this.alphaOffset = 0; // radians\r\n    this.absolute = false;\r\n    this.alphaOffsetDevice = undefined;\r\n    this.alphaOffsetScreen = undefined;\r\n\r\n    let onDeviceOrientationChangeEvent = function ( event ) {\r\n        if(scope.absolute) return;\r\n        scope.deviceOrientation = event;\r\n    };\r\n\r\n    let onDeviceOrientationAbsoluteChangeEvent = function ( event ) {\r\n        scope.deviceOrientation = event;\r\n        scope.absolute = true;\r\n    };\r\n\r\n    let onScreenOrientationChangeEvent = function () {\r\n        scope.screenOrientation = window.orientation || 0;\r\n    };\r\n\r\n    // The angles alpha, beta and gamma form a set of intrinsic Tait-Bryan angles of type Z-X'-Y''\r\n    let setObjectQuaternion = function () {\r\n        let zee = new THREE.Vector3( 0, 0, 1 );\r\n        let euler = new THREE.Euler();\r\n\r\n        let q0 = new THREE.Quaternion();\r\n        let q1 = new THREE.Quaternion( - Math.sqrt( 0.5 ), 0, 0, Math.sqrt( 0.5 ) ); // - PI/2 around the x-axis\r\n\r\n        return function ( quaternion, alpha, beta, gamma, orient ) {\r\n            euler.set( beta, alpha, - gamma, 'YXZ' ); // 'ZXY' for the device, but 'YXZ' for us\r\n            quaternion.setFromEuler( euler ); // orient the device\r\n            quaternion.multiply( q1 ); // camera looks out the back of the device, not the top\r\n            quaternion.multiply( q0.setFromAxisAngle( zee, - orient ) ); // adjust for screen orientation\r\n        };\r\n\r\n    }();\r\n\r\n    this.connect = function () {\r\n        onScreenOrientationChangeEvent(); // run once on load\r\n\r\n        window.addEventListener( 'orientationchange', onScreenOrientationChangeEvent, false );\r\n        window.addEventListener( 'deviceorientation', onDeviceOrientationChangeEvent, false );\r\n        window.addEventListener( 'deviceorientationabsolute', onDeviceOrientationAbsoluteChangeEvent, false );\r\n\r\n        scope.enabled = true;\r\n    };\r\n\r\n    this.disconnect = function () {\r\n        window.removeEventListener( 'orientationchange', onScreenOrientationChangeEvent, false );\r\n        window.removeEventListener( 'deviceorientation', onDeviceOrientationChangeEvent, false );\r\n        window.removeEventListener( 'deviceorientationabsolute', onDeviceOrientationAbsoluteChangeEvent, false );\r\n\r\n        scope.enabled = false;\r\n    };\r\n\r\n    this.update = function () {\r\n        if ( scope.enabled === false ) return;\r\n\r\n        let device;\r\n        device = scope.deviceOrientation;\r\n\r\n        if ( device ) {\r\n            let alpha = this.getDirection() ? THREE.Math.degToRad( this.getDirection() ) + scope.alphaOffset : 0; // Z\r\n            let beta = device.beta ? THREE.Math.degToRad( device.beta ) : 0; // X'\r\n\r\n            let gamma = device.gamma ? THREE.Math.degToRad( device.gamma ) : 0; // Y''\r\n            let orient = scope.screenOrientation ? THREE.Math.degToRad( scope.screenOrientation ) : 0; // O\r\n\r\n            setObjectQuaternion( scope.object.quaternion, alpha, beta, gamma, orient );\r\n        }\r\n\r\n    };\r\n\r\n    this.dispose = ()=>{\r\n        scope.disconnect();\r\n    };\r\n\r\n    this.iOSOrientationPermission = ()=>{\r\n        if (typeof DeviceOrientationEvent.requestPermission === 'function') {\r\n            DeviceOrientationEvent.requestPermission().then(permissionState => {\r\n                if (permissionState === 'granted') {\r\n\r\n                }\r\n\r\n                console.log(permissionState);\r\n            }).catch(console.error);\r\n        }\r\n    }\r\n\r\n    this.getDirection = ()=>{\r\n        return (typeof scope.deviceOrientation.webkitCompassHeading != \"undefined\") ? scope.deviceOrientation.webkitCompassHeading : scope.deviceOrientation.alpha;\r\n    }\r\n\r\n    this.getDirectionMap = ()=>{\r\n        return (typeof scope.deviceOrientation.webkitCompassHeading != \"undefined\") ? (360 - scope.deviceOrientation.webkitCompassHeading) : scope.deviceOrientation.alpha;\r\n    }\r\n\r\n    this.connect();\r\n};\r\n\r\n\r\nexport default Nav;","/*\r\n    ATON immersive XR module\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\n/**\r\nATON Immersive XR\r\n@namespace XR\r\n*/\r\nlet XR = {};\r\n\r\nXR.STD_TELEP_DURATION = 0.03;\r\n\r\n\r\n//Initializes XR component\r\nXR.init = ()=>{\r\n    ATON._renderer.xr.enabled = true;\r\n    ATON._renderer.xr.setReferenceSpaceType( 'local' );\r\n    \r\n    if (ATON.device.isMobile) ATON._renderer.xr.setFramebufferScaleFactor(0.5); // WebXR density\r\n\r\n    XR._bPresenting = false;\r\n    XR.currSession = null;\r\n\r\n    XR.rig = new THREE.Group();\r\n    //XR.rig.position.set(0,0,0);\r\n    XR.rig.add( ATON.Nav._camera );\r\n    ATON._rootUI.add(XR.rig);\r\n\r\n    //XR.hmdOri = new THREE.Quaternion();\r\n    //XR.hmdPos = new THREE.Vector3();\r\n\r\n    XR._currPos = XR.rig.position; //new THREE.Vector3();\r\n    XR._fromPos = new THREE.Vector3();\r\n    XR._reqPos  = new THREE.Vector3();\r\n\r\n    XR.gControllers = undefined;\r\n\r\n    XR.controller0pos = new THREE.Vector3();\r\n    XR.controller1pos = new THREE.Vector3();\r\n    XR.controller0dir = new THREE.Vector3();\r\n    XR.controller1dir = new THREE.Vector3();\r\n\r\n    // test\r\n    ATON.on(\"XRselectStart\", (c)=>{\r\n        XR.defaultSelectHandler(c);\r\n    });\r\n    ATON.on(\"XRselectEnd\", (c)=>{\r\n        //ATON.Nav.stop();\r\n        //console.log(\"Sel end \"+c);\r\n    });\r\n};\r\n\r\n/**\r\nReturn true if we are presenting (immersive mode)\r\n@returns {boolean}\r\n*/\r\nXR.isPresenting = ()=>{\r\n    return XR._bPresenting;\r\n};\r\n\r\n\r\nXR.defaultSelectHandler = (c)=>{\r\n\r\n    if (ATON._queryDataScene){\r\n        let P = ATON._queryDataScene.p;\r\n        let N = ATON._queryDataScene.n;\r\n\r\n        //P.y += 0.8; // with 'local': half user height\r\n\r\n        // FIXME: height offset needed for \"local\", fill this automatically\r\n        if (N.y > 0.7) ATON.Nav.requestPOV( new ATON.POV().setPosition(P.x, P.y + ATON.userHeight, P.z), XR.STD_TELEP_DURATION );\r\n    }\r\n    \r\n    //ATON.Nav.setMotionAmount(3.0);\r\n};\r\n\r\nXR._handleUISelection = ()=>{\r\n    if (ATON._hoveredUI === undefined) return false;\r\n\r\n    let H = ATON.getUINode(ATON._hoveredUI);\r\n    if (H && H.onSelect) H.onSelect();\r\n    \r\n    return true;\r\n}\r\n\r\n\r\n/**\r\nSet reference-space location (not the actual HMD camera location).\r\nThis can be used to move around the user, given a proper locomotion technique\r\n@param {THREE.Vector3} p - the new location of reference space\r\n*/\r\nXR.setRefSpaceLocation = (p)=>{\r\n    XR.rig.position.copy(p);\r\n};\r\n\r\n// On XR session started\r\nXR.onSessionStarted = ( session )=>{\r\n\tsession.addEventListener( 'end', XR.onSessionEnded );\r\n\r\n\tATON._renderer.xr.setSession( session );\r\n\tXR.currSession = session;\r\n\r\n    XR.controller0 = ATON._renderer.xr.getController(0);\r\n    XR.controller1 = ATON._renderer.xr.getController(1);\r\n\r\n    //console.log(XR.controller0);\r\n\r\n    // Controller 0\r\n    if (XR.controller0){\r\n        XR.controller0.visible = false;\r\n\r\n        XR.controller0.addEventListener( 'connected', (e) => {\r\n            XR.controller0.gamepad = e.data.gamepad;\r\n            //console.log(XR.controller0.gamepad);\r\n\r\n            let gp = XR.controller0.gamepad;\r\n            if (gp.pose && gp.pose.hasPosition) XR.controller0.visible = true;\r\n        });\r\n\r\n        XR.controller0.addEventListener( 'selectstart', ()=>{\r\n            if (XR._handleUISelection()) return;\r\n\r\n            ATON.fireEvent(\"XRselectStart\", 0);\r\n        });\r\n        XR.controller0.addEventListener( 'selectend', ()=>{ \r\n            ATON.fireEvent(\"XRselectEnd\", 0);\r\n        });\r\n    }\r\n\r\n    // Controller 1\r\n    if (XR.controller1){\r\n        XR.controller1.visible = false;\r\n\r\n        XR.controller1.addEventListener( 'connected', (e) => {\r\n            //XR.controller1.visible = true;\r\n            XR.controller1.gamepad = e.data.gamepad;\r\n            \r\n            let gp = XR.controller1.gamepad;\r\n            if (gp.pose && gp.pose.hasPosition) XR.controller1.visible = true;\r\n        });\r\n\r\n        XR.controller1.addEventListener( 'selectstart',  ()=>{\r\n            //if (XR._handleUISelection()) return;\r\n        \r\n            ATON.fireEvent(\"XRselectStart\", 1);\r\n        });\r\n        XR.controller1.addEventListener( 'selectend',  ()=>{ \r\n            ATON.fireEvent(\"XRselectEnd\", 1);\r\n        });\r\n    }\r\n\r\n    XR.setRefSpaceLocation(ATON.Nav._currPOV.pos);\r\n\r\n    XR._bPresenting = true;\r\n    console.log(\"XR now presenting\");\r\n\r\n    XR.setupControllersUI();\r\n\r\n    ATON.fireEvent(\"XRmode\", true);\r\n\r\n    //console.log(session);\r\n};\r\n\r\n// On XR session terminated\r\nXR.onSessionEnded = ( /*event*/ )=>{\r\n    XR.currSession.removeEventListener( 'end', XR.onSessionEnded );\r\n    XR.currSession = null;\r\n\r\n    XR._bPresenting = false;\r\n    //XR.rig.position.set(0.0,0.0,0.0);\r\n    XR.setRefSpaceLocation( new THREE.Vector3(0,0,0) );\r\n\r\n    ATON.fireEvent(\"XRmode\", false);\r\n\r\n    console.log(\"Quit XR\");\r\n};\r\n\r\n/**\r\nToggle immersive mode\r\n*/\r\nXR.toggle = ()=>{\r\n    if (!ATON.device.isXRsupported) return;\r\n\r\n    // Enter XR\r\n    if (XR.currSession === null){\r\n        let sessionInit = { \r\n            optionalFeatures: [\r\n                \"local\",\r\n                //\"local-floor\" \r\n                ///\"bounded-floor\"\r\n            ]\r\n        };\r\n        navigator.xr.requestSession( 'immersive-vr', sessionInit ).then( XR.onSessionStarted );\r\n        //console.log(navigator.xr);\r\n    }\r\n    // Exit XR\r\n    else {\r\n        XR.currSession.end();\r\n    }\r\n};\r\n\r\nXR.setupControllersUI = ()=>{\r\n    if (XR.gControllers) return; // already set\r\n\r\n    let raytick = 0.003;\r\n    let raylen  = 5.0;\r\n    var geometry = new THREE.CylinderBufferGeometry( raytick,raytick, raylen, 4 );\r\n    geometry.rotateX( -Math.PI / 2 );\r\n    geometry.translate(0,0,-(raylen*0.5));\r\n\r\n    var mesh = new THREE.Mesh( geometry, ATON.MatHub.materials.controllerRay );\r\n\r\n    XR.controller0.add( mesh.clone() );\r\n    //XR.controller1.add( mesh.clone() );\r\n\r\n    XR.gControllers = ATON.createUINode();\r\n    XR.gControllers.add( XR.controller0 );\r\n    XR.gControllers.add( XR.controller1 );\r\n\r\n    XR.controller0.visible = false;\r\n    XR.controller1.visible = false;\r\n\r\n    XR.gControllers.disablePicking();\r\n\r\n    XR.rig.add(XR.gControllers);\r\n};\r\n\r\n// Not working\r\nXR.getControllerSpace = (i)=>{\r\n   if (i === 1) XR.getControllerGrip(1);\r\n   else XR.getControllerGrip(0);\r\n};\r\n\r\n/**\r\nGet controller world location\r\n@param {number} i - the controller ID (0 or 1)\r\n@returns {THREE.Vector3}\r\n*/\r\nXR.getControllerWorldLocation = (i)=>{\r\n    if (i === 1) return XR.controller1pos;\r\n    else return XR.controller0pos;\r\n};\r\n\r\n/**\r\nGet controller world direction\r\n@param {number} i - the controller ID (0 or 1)\r\n@returns {THREE.Vector3}\r\n*/\r\nXR.getControllerWorldDirection = (i)=>{\r\n    if (i === 1) return XR.controller1dir;\r\n    else return XR.controller0dir;\r\n};\r\n\r\nXR.update = ()=>{\r\n    if (XR.controller0.visible){\r\n        XR.controller0.getWorldPosition(XR.controller0pos);\r\n        XR.controller0.getWorldDirection(XR.controller0dir);\r\n        XR.controller0dir.negate();\r\n    }\r\n    if (XR.controller1.visible){\r\n        XR.controller1.getWorldPosition(XR.controller1pos);\r\n        XR.controller1.getWorldDirection(XR.controller1dir);\r\n        XR.controller1dir.negate(); \r\n    }\r\n};\r\n\r\n\r\nexport default XR;","/*\r\n    ATON spatial UI Button class\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\nimport Node from \"./ATON.node.js\";\r\n\r\n/**\r\nClass representing a SpatialUI Button.\r\nConstructor requires a uiid (UI Node ID)\r\n@class Button\r\n@example \r\nnew ATON.SUI.Button(\"myButton\")\r\n*/\r\nclass Button extends Node {\r\n\r\nconstructor(uiid){\r\n    super(uiid, ATON.NTYPES.UI);\r\n\r\n    this.baseColor   = ATON.MatHub.colors.black;\r\n    this.switchColor = ATON.MatHub.colors.green;\r\n\r\n    this._bSwitched = false;\r\n\r\n    this.container = new ThreeMeshUI.Block({\r\n        width: 0.1,\r\n        height: 0.1,\r\n        padding: 0.01,\r\n        borderRadius: 0.02,\r\n        backgroundColor: this.baseColor,\r\n        backgroundOpacity: 0.5,\r\n\r\n        fontFamily: ATON.PATH_RES+\"fonts/custom-msdf.json\",\r\n        fontTexture: ATON.PATH_RES+\"fonts/custom.png\",\r\n\r\n        justifyContent: 'center',\r\n        alignContent: 'center'\r\n    });\r\n    this.add(this.container);\r\n\r\n    this.uiText = new ThreeMeshUI.Text({ \r\n        content: \"button\",\r\n        fontSize: 0.02,\r\n        fontColor: ATON.MatHub.colors.white\r\n    });\r\n    this.container.add(this.uiText);\r\n\r\n    this._trigger = new THREE.Mesh( \r\n        new THREE.PlaneGeometry( ATON.SUI.STD_BTN_SIZE*0.9, ATON.SUI.STD_BTN_SIZE*0.9, 2 ), \r\n        ATON.MatHub.materials.fullyTransparent\r\n    );\r\n    this._trigger.position.set(0,0,0.002);\r\n\r\n    this.add( this._trigger );\r\n\r\n    this.onHover = ()=>{\r\n        this.container.set({ \r\n            backgroundOpacity: 0.8\r\n        });\r\n    };\r\n    this.onLeave = ()=>{\r\n        this.container.set({ \r\n            backgroundOpacity: 0.5 \r\n        });\r\n    };\r\n\r\n    this.enablePicking();\r\n}\r\n\r\n/**\r\nSet base color of the button\r\n@param {THREE.Color} c - the color\r\n*/\r\nsetBaseColor(c){\r\n    this.baseColor = c;\r\n    if (!this._bSwitched) this.container.set({ backgroundColor: this.baseColor });\r\n    return this;\r\n}\r\n\r\n/**\r\nSet button switch color (when activated)\r\n@param {THREE.Color} c - the color\r\n*/\r\nsetSwitchColor(c){\r\n    this.switchColor = c;\r\n    if (this._bSwitched) this.container.set({ backgroundColor: this.switchColor });\r\n    return this;\r\n}\r\n\r\n/**\r\nSet button text\r\n@param {string} text\r\n*/\r\nsetText(text){\r\n    this.uiText.set({ content: text });\r\n    return this;\r\n}\r\n\r\n/**\r\nSwitch the button (ON/OFF)\r\n@param {boolean} b\r\n*/\r\nswitch(b){\r\n    this._bSwitched = b;\r\n    if (b) this.container.set({ backgroundColor: this.switchColor });\r\n    else this.container.set({ backgroundColor: this.baseColor });\r\n    \r\n    return this;\r\n}\r\n\r\n/**\r\nSet button icon\r\n@param {string} url - the url to the icon (tipically a PNG file)\r\n*/\r\nsetIcon(url){\r\n    ATON.Utils.textureLoader.load(url, (texture) => {\r\n\r\n        this._trigger.material = new THREE.MeshStandardMaterial({\r\n            map: texture,\r\n            transparent: true,\r\n            depthWrite: false\r\n        });\r\n/*\r\n        this.container.set({ \r\n            backgroundTexture: texture,\r\n            backgroundOpacity: 1.0,\r\n            backgroundColor: undefined \r\n        });\r\n*/\r\n        this.uiText.position.set(0,-0.035,0);\r\n    });\r\n\r\n    return this;\r\n}\r\n\r\n}\r\n\r\nexport default Button;","/*\r\n    ATON spatial UI\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\nimport Button from \"./ATON.sui.button.js\";\r\n\r\n\r\n/**\r\nATON Spatial UI\r\n@namespace SUI\r\n*/\r\nlet SUI = {};\r\n\r\nSUI.STD_BTN_SIZE = 0.1;\r\n\r\nSUI.Button = Button;\r\n\r\n\r\n//Initializes Spatial UI module\r\nSUI.init = ()=>{\r\n    SUI.mainSelector   = ATON.createUINode();\r\n    //SUI.secondSelector = ATON.createUINode();\r\n\r\n    //SUI._uiSelGeom = new THREE.SphereGeometry( 0.1, 16, 16 );\r\n    SUI.mainSelector.add( new THREE.Mesh( ATON.Utils.geomUnitSphere, ATON.MatHub.getMaterial(\"selector\") ));\r\n    SUI.mainSelector.disablePicking();\r\n\r\n    SUI.setSelectorRadius(0.05);\r\n    SUI.mainSelector.visible = false;\r\n\r\n    ATON._rootUI.add(SUI.mainSelector);\r\n\r\n    SUI.gPoints = ATON.createUINode();\r\n    ATON._rootUI.add(SUI.gPoints);\r\n\r\n    SUI.buildInfoNode();\r\n    SUI.bShowInfo = true;\r\n\r\n    SUI._labelScale   = ATON.Utils.isMobile()? 1.2 : 1.0;\r\n    SUI._labelScaleVR = 2.0;\r\n\r\n    ATON.on( \"SemanticNodeHover\", (semid)=>{\r\n        if (!SUI.bShowInfo) return;\r\n        SUI.infoNodeText.set({ content: semid });\r\n    });\r\n/*\r\n    ATON.on(\"UINodeHover\", (uiid)=>{\r\n        console.log(\"Hover UI node: \"+uiid);\r\n    });\r\n    ATON.on(\"UINodeLeave\", (uiid)=>{\r\n        console.log(\"Leave UI node: \"+uiid);\r\n    });\r\n*/\r\n};\r\n\r\n/**\r\nSet selector radius\r\n@param {number} r - the radius\r\n*/\r\nSUI.setSelectorRadius = (r)=>{\r\n    SUI.mainSelector.scale.set(r,r,r);\r\n};\r\n\r\n/**\r\nGet selector current radius\r\n@returns {number}\r\n*/\r\nSUI.getSelectorRadius = ()=>{\r\n    return SUI.mainSelector.scale.x;\r\n};\r\n\r\n/**\r\nSet selector 3D model\r\n@param {string} path - the model path (usually gltf or glb)\r\n@param {boolean} bUseStdMat - (optional) overwrites 3D model materials with standard selector material \r\n*/\r\nSUI.setSelectorModel = (path, bUseStdMat)=>{\r\n    if (path === undefined) return;\r\n\r\n    SUI.mainSelector.removeChildren();\r\n\r\n    SUI.mainSelector.load(path).disablePicking();\r\n    if (bUseStdMat) SUI.mainSelector.setMaterial( ATON.MatHub.getMaterial(\"selector\") );\r\n};\r\n\r\nSUI.buildInfoNode = ()=>{\r\n    SUI.infoNode = ATON.createUINode();\r\n    SUI.infoNode.attachToRoot();\r\n\r\n    SUI.infoContainer = new ThreeMeshUI.Block({\r\n        width: 0.15,\r\n        height: 0.05, //0.07,\r\n        padding: 0.01,\r\n        borderRadius: 0.02,\r\n        //backgroundColor: ATON.MatHub.colors.darksem,\r\n        //backgroundOpacity: 0.2,\r\n\r\n        fontFamily: ATON.PATH_RES+\"fonts/custom-msdf.json\", //ATON.PATH_MODS+'three-mesh-ui/examples/assets/Roboto-msdf.json',\r\n        fontTexture: ATON.PATH_RES+\"fonts/custom.png\", //ATON.PATH_MODS+'three-mesh-ui/examples/assets/Roboto-msdf.png',\r\n\r\n        alignContent: 'center', // could be 'center' or 'left'\r\n        justifyContent: 'center', // could be 'center' or 'start'\r\n    });\r\n    SUI.infoNode.add(SUI.infoContainer);\r\n\r\n    SUI.infoNodeText = new ThreeMeshUI.Text({ \r\n        content: \"Info\",\r\n        fontSize: 0.02,\r\n        fontColor: ATON.MatHub.colors.white\r\n    });\r\n    SUI.infoContainer.add(SUI.infoNodeText);\r\n    //SUI.infoNode.scale.set(0.07,0.07,0.07);\r\n};\r\n\r\n/**\r\nGet main UI Info Node\r\n@returns {Node}\r\n*/\r\nSUI.getInfoNode = ()=>{\r\n    return SUI.infoNode;\r\n};\r\n\r\n/**\r\nCreate a SpatialUI toolbar from a list of SUI buttons\r\nThis can be arranged anywhere in the scene or attached to other UI nodes\r\n@param {string} buttonlist - a list (array) of SUI buttons\r\n@param {THREE.Color} color - (optional) base color for the toolbar\r\n@returns {Node}\r\n*/\r\nSUI.createToolbar = (buttonlist, color)=>{\r\n    let T = ATON.createUINode();\r\n\r\n    let num = buttonlist.length;\r\n    let padding = SUI.STD_BTN_SIZE * 0.3;\r\n\r\n    let cont = new ThreeMeshUI.Block({\r\n        width: (SUI.STD_BTN_SIZE * num) + padding,\r\n        height: SUI.STD_BTN_SIZE + padding,\r\n        padding: 0.01,\r\n        borderRadius: 0.02,\r\n        backgroundColor: color? color : ATON.MatHub.colors.black,\r\n        backgroundOpacity: 0.3,\r\n\r\n        fontFamily: ATON.PATH_RES+\"fonts/custom-msdf.json\",\r\n        fontTexture: ATON.PATH_RES+\"fonts/custom.png\",\r\n\r\n        alignContent: 'center', // could be 'center' or 'left'\r\n        justifyContent: 'center', // could be 'center' or 'start'\r\n    });\r\n    //cont.position.set(0,0,0);\r\n\r\n    let m = (num*0.5) * SUI.STD_BTN_SIZE;\r\n    m -= (SUI.STD_BTN_SIZE*0.5);\r\n\r\n    for (let i=0; i<num; i++){\r\n        let button = buttonlist[i];\r\n        button.position.set((i*SUI.STD_BTN_SIZE)-m, 0.0, 0.01);\r\n        cont.add(button);\r\n    }\r\n\r\n    T.add(cont);\r\n    return T;\r\n};\r\n\r\n// Main update routine\r\nSUI.update = ()=>{\r\n    if (ATON.Nav.isTransitioning() || ATON._bPauseQuery){\r\n        SUI.infoNode.visible = false;\r\n        return;\r\n    }\r\n\r\n    ThreeMeshUI.update();\r\n\r\n    if (ATON._queryDataScene){\r\n        SUI.mainSelector.visible = true;\r\n        SUI.mainSelector.position.copy(ATON._queryDataScene.p);    \r\n    }\r\n    else {\r\n        SUI.mainSelector.visible = false;\r\n    }\r\n\r\n    // InfoNode (semantics)\r\n    if (ATON._queryDataSem){\r\n\r\n        if (ATON.XR._bPresenting){\r\n            SUI.infoNode.position.copy(ATON.XR.controller0pos); //.lerpVectors(ATON._queryDataSem.p, ATON.XR.controller0pos, 0.8);\r\n            SUI.infoNode.setScale(SUI._labelScaleVR);\r\n        }\r\n        else {\r\n            SUI.infoNode.position.lerpVectors(ATON._queryDataSem.p, ATON.Nav._currPOV.pos, 0.2);\r\n            SUI.infoNode.setScale(ATON._queryDataSem.d * SUI._labelScale);\r\n        }\r\n        SUI.infoNode.orientToCamera();\r\n\r\n        if (SUI.bShowInfo) SUI.infoNode.visible = true;\r\n        SUI.mainSelector.visible = false;\r\n    }\r\n    else {\r\n        SUI.infoNode.visible = false;\r\n    }\r\n\r\n};\r\n\r\nexport default SUI;","/*\r\n    ATON Avatar Class\r\n    used in VRoadcast system\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\nimport Node from \"./ATON.node.js\";\r\n\r\nexport default class Avatar extends Node {\r\n\r\nconstructor(uid){\r\n    super(undefined /*uid*/, ATON.NTYPES.UI);\r\n\r\n    this.userid   = uid;\r\n    this.username = \"User #\"+uid;\r\n    this.message  = \"...\";\r\n    this.bTalking = false;\r\n\r\n    this._tStateCall = -1.0;\r\n    this._tStateDur  = 0.1;\r\n    this._tProgress  = 0.0;\r\n\r\n    this._currState  = {};\r\n    this._currState.position   = new THREE.Vector3();\r\n    this._currState.quaternion = new THREE.Quaternion();\r\n\r\n    this._tgtState = undefined;\r\n\r\n    //console.log(this);\r\n\r\n    this.realize();\r\n}\r\n\r\ngetAvatarMaterialByUID(uid){\r\n    //if (uid === undefined) return 0;\r\n\r\n    let avaMats = ATON.MatHub.materials.avatars;\r\n    let mi = (uid % avaMats.length); //uid? (uid % avaMats.length) : 0;\r\n    \r\n    return avaMats[mi];\r\n}\r\n\r\nrealize(){\r\n    // build minimal representation\r\n    let g = new THREE.SphereGeometry( 0.2, 16, 16 );\r\n\r\n    this.usermaterial = this.getAvatarMaterialByUID(this.userid);\r\n\r\n    let smesh = new THREE.Mesh( g, this.usermaterial );\r\n\r\n    this.usermeshnode = ATON.createUINode();\r\n    this.usermeshnode.add(smesh);\r\n    this.usermeshnode.setMaterial(this.usermaterial);\r\n\r\n    // CHECK / FIXME: this is to avoid cloning of the same mesh when using same representation for all avatars\r\n    this.usermeshnode.setCloneOnLoadHit(false);\r\n\r\n    // Build Label\r\n    this.userlabelnode = ATON.createUINode();\r\n    this.labelcontainer = new ThreeMeshUI.Block({\r\n        width: 0.7,\r\n        height: 0.25,\r\n        padding: 0.03,\r\n        borderRadius: 0.05,\r\n        backgroundColor: ATON.VRoadcast.ucolorsdark[this.userid % ATON.VRoadcast.ucolorsdark.length],\r\n\r\n        fontFamily: ATON.PATH_RES+\"fonts/custom-msdf.json\", //ATON.PATH_MODS+'three-mesh-ui/examples/assets/Roboto-msdf.json',\r\n        fontTexture: ATON.PATH_RES+\"fonts/custom.png\" //ATON.PATH_MODS+'three-mesh-ui/examples/assets/Roboto-msdf.png',\r\n\r\n        //alignContent: 'right', // could be 'center' or 'left'\r\n        //justifyContent: 'end', // could be 'center' or 'start'\r\n    });\r\n\r\n    this.userlabelnode.position.y = 0.4;\r\n    this.userlabelnode.add(this.labelcontainer);\r\n\r\n    // username text\r\n    this.usernametext = new ThreeMeshUI.Text({ \r\n        content: \"User #\"+this.userid,\r\n        fontSize: 0.09,\r\n        fontColor: ATON.MatHub.colors.white //ATON.VRoadcast.ucolors[this.userid % ATON.VRoadcast.ucolors.length]\r\n    });\r\n    this.usernametext.position.y = 0.0;\r\n\r\n    // message text\r\n    this.usermessagetext = new ThreeMeshUI.Text({ \r\n        content: \"\\nHello World!\",\r\n        fontSize: 0.03,\r\n        fontColor: ATON.MatHub.colors.white\r\n    });\r\n    this.usermessagetext.position.y = -0.03;\r\n\r\n    this.labelcontainer.add(this.usernametext);\r\n    this.labelcontainer.add(this.usermessagetext);\r\n    \r\n    this.add(this.usermeshnode);\r\n    this.add(this.userlabelnode);\r\n};\r\n\r\n// Loads custom avatar representation (3D model)\r\nloadRepresentation(url){\r\n    let A = this;\r\n\r\n    if (A.usermeshnode.children[0] !== undefined){\r\n        A.usermeshnode.remove(A.usermeshnode.children[0]);\r\n    }\r\n\r\n    A.usermeshnode.load(url); //.setMaterial(A.usermaterial);\r\n\r\n    return this;\r\n}\r\n\r\nsetUsername(username){\r\n    this.username = username;\r\n\r\n    this.usernametext.set({ \r\n        content: username\r\n    });\r\n\r\n    return this;\r\n}\r\n\r\nsetMessage(msg){\r\n    this.message = msg;\r\n\r\n    // TODO: check for text length\r\n    this.usermessagetext.set({ \r\n        content: \"\\n\"+msg\r\n    });\r\n\r\n    return this;\r\n}\r\n\r\nrequestStateTransition(S){\r\n    if (this._tStateCall >= 0.0) return; // already requested\r\n\r\n    this._tStateCall = ATON._clock.elapsedTime;\r\n\r\n    this._currState.position.copy(this.position);\r\n    this._currState.quaternion.copy(this.quaternion);\r\n\r\n    this._tgtState = S;\r\n    \r\n    //this._sDistance = this.position.distanceTo(S.position);\r\n}\r\n\r\nhandleStateTransition(){\r\n    if (this._tStateCall < 0.0) return;\r\n\r\n    let D = this._tStateDur; //(this._sDistance * this._tStateDur);\r\n\r\n    if (D <= 0.0) this._tProgress = 1.0;\r\n    else this._tProgress = (ATON._clock.elapsedTime - this._tStateCall) / D;\r\n\r\n    let cs = this._currState;\r\n    let ts = this._tgtState;\r\n\r\n    // End\r\n    if (this._tProgress >= 1.0){\r\n        this._tStateCall = -1.0;\r\n\r\n        this.position.copy(ts.position);\r\n        //this.quaternion.copy(ts.quaternion);\r\n        this.usermeshnode.quaternion.copy(ts.quaternion);\r\n\r\n        return;\r\n    }\r\n\r\n    this.position.lerpVectors(cs.position, ts.position, this._tProgress);\r\n    this.usermeshnode.quaternion.slerp(ts.quaternion, this._tProgress);\r\n    //THREE.Quaternion.slerp( cs.quaternion, ts.quaternion, this.usermeshnode.quaternion, this._tProgress);\r\n}\r\n\r\nupdate(){\r\n    this.handleStateTransition();\r\n\r\n    let cam  = ATON.Nav._camera;\r\n    let eye = ATON.Nav._currPOV.pos;\r\n    if (cam === undefined || eye === undefined) return;\r\n\r\n    //this.userlabelnode.lookAt( eye );\r\n\r\n    //this.userlabelnode.setRotationFromMatrix(cam.matrix); // quaternion.setFromRotationMatrix( cam.matrix );\r\n    //this.userlabelnode.rotation.copy(cam.rotation);\r\n\r\n    this.userlabelnode.orientToCamera(); //quaternion.copy( ATON.Nav._qOri );\r\n\r\n/*\r\n    this.userlabelnode.rotation.y = Math.atan2(\r\n        ( cam.position.x - this.userlabelnode.position.x ),\r\n        ( cam.position.z - this.userlabelnode.position.z )\r\n    );\r\n*/\r\n    //this.userlabelnode.matrix.copy( cam.matrix );\r\n}\r\n\r\n\r\n};","/*\r\n    ATON VRoadcast\r\n    real-time collaborative networking\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\nimport Avatar from \"./ATON.avatar.js\";\r\n\r\n/**\r\nATON VRoadcast component\r\n@namespace VRoadcast\r\n*/\r\nlet VRoadcast = {};\r\n\r\nVRoadcast.USER_STATE_FREQ = 0.25; // sec\r\nVRoadcast.REPLICATED_EVT = \"EREP\";\r\n\r\n// Thresholds state sending\r\nVRoadcast.THRES_STATE_POS = 0.01;\r\nVRoadcast.THRES_STATE_ORI = 0.08; // radians\r\n\r\nVRoadcast.Avatar = Avatar;\r\n\r\n\r\n/**\r\nInitialize the component\r\n*/\r\nVRoadcast.init = ()=>{\r\n    VRoadcast.address = window.location.origin;\r\n\r\n    VRoadcast.initMaterials();\r\n\r\n    VRoadcast.socket = undefined;\r\n    VRoadcast._connected = false;\r\n\r\n    VRoadcast.uid = undefined; // my userID (0,1,....)\r\n    VRoadcast._numUsers = 0;\r\n\r\n    VRoadcast.avatarList = [];\r\n\r\n    VRoadcast.avaGroup = ATON.createUINode(\"avatars\"); // holds all avatars representations\r\n    VRoadcast.avaGroup.attachToRoot();\r\n\r\n    // send own state with given freq\r\n    window.setInterval( VRoadcast.sendState, VRoadcast.USER_STATE_FREQ*1000.0 );\r\n    VRoadcast._lastStateSent = undefined;\r\n\r\n    console.log(\"VRoadcast initialized\");\r\n    VRoadcast.enableChatLog();\r\n};\r\n\r\nVRoadcast.enableChatLog = ()=>{\r\n    VRoadcast._elChat = $(\"<div></div>\").text(\"\");\r\n};\r\n\r\nVRoadcast.getNumUsers = ()=>{\r\n    return VRoadcast._numUsers;\r\n};\r\n\r\n// Register materials (avatars/users)\r\nVRoadcast.initMaterials = ()=>{\r\n\r\n    VRoadcast.ucolors = [];\r\n    VRoadcast.ucolors.push( new THREE.Color(1,0,0) );\r\n    VRoadcast.ucolors.push( new THREE.Color(1,1,0) );\r\n    VRoadcast.ucolors.push( new THREE.Color(0,1,0) );\r\n    VRoadcast.ucolors.push( new THREE.Color(0,1,1) );\r\n    VRoadcast.ucolors.push( new THREE.Color(0,0,1) );\r\n    VRoadcast.ucolors.push( new THREE.Color(1,0,1) );\r\n\r\n    VRoadcast.ucolorsdark = [];\r\n    VRoadcast.ucolorsdark.push( new THREE.Color(0.2,0.0,0.0) );\r\n    VRoadcast.ucolorsdark.push( new THREE.Color(0.2,0.2,0.0) );\r\n    VRoadcast.ucolorsdark.push( new THREE.Color(0.0,0.2,0.0) );\r\n    VRoadcast.ucolorsdark.push( new THREE.Color(0.0,0.2,0.2) );\r\n    VRoadcast.ucolorsdark.push( new THREE.Color(0.0,0.0,0.2) );\r\n    VRoadcast.ucolorsdark.push( new THREE.Color(0.2,0.0,0.2) );\r\n\r\n    VRoadcast.ucolorhex = [];\r\n    VRoadcast.ucolorhex.push(\"#F00\");\r\n    VRoadcast.ucolorhex.push(\"#FF0\");\r\n    VRoadcast.ucolorhex.push(\"#0F0\");\r\n    VRoadcast.ucolorhex.push(\"#0FF\");\r\n    VRoadcast.ucolorhex.push(\"#00F\");\r\n    VRoadcast.ucolorhex.push(\"#F0F\");\r\n\r\n    let MM = ATON.MatHub.materials;\r\n    MM.avatars = [];\r\n\r\n    let mat = new THREE.MeshBasicMaterial({\r\n        color: VRoadcast.ucolors[0], \r\n        transparent: true, \r\n        opacity: 0.4, \r\n        depthWrite: false,\r\n        flatShading: true\r\n    });\r\n\r\n    MM.avatars.push(mat);\r\n\r\n    for (let c=1; c<VRoadcast.ucolors.length; c++){\r\n        let M = mat.clone();\r\n        M.color = VRoadcast.ucolors[c];\r\n\r\n        MM.avatars.push(M);\r\n    }\r\n};\r\n\r\n/**\r\nFire a replicated event (network)\r\n@param {string} evtname - the event name\r\n@param {object} data - object containing data to be transmitted with this event\r\n\r\n@example\r\nATON.VRoadcast.fireEvent(\"test\", 42);\r\n*/\r\nVRoadcast.fireEvent = (evtname, data)=>{\r\n    if (!VRoadcast._connected) return;\r\n    let sock = VRoadcast.socket;\r\n\r\n    if (sock) sock.emit(VRoadcast.REPLICATED_EVT, {e: evtname, d: data});\r\n    //else ATON.on(\"VRC_Connected\", ()=>{ sock.on(evtname, onReceive); });\r\n};\r\n\r\n/**\r\nSubscribe to a given network event, through given handler\r\n@param {string} evtname - the event name\r\n@param {function} handler - network event handler (how we handle incoming event)\r\n\r\n@example\r\nATON.VRoadcast.on(\"test\", function(data){ console.log(\"Received: \"+data); });\r\n*/\r\nVRoadcast.on = (evtname, handler)=>{\r\n    if (handler === undefined) return;\r\n\r\n    let evhNetwork = ATON.EventHub.evNetwork;\r\n\r\n    if (evhNetwork[evtname] === undefined) evhNetwork[evtname] = []; // First time (event not registered)\r\n    evhNetwork[evtname].push(handler);\r\n};\r\n\r\n/**\r\nReturn true if VRoadcast is connected to the service\r\n@returns {boolean}\r\n*/\r\nVRoadcast.isConnected = ()=>{\r\n    return VRoadcast._connected;\r\n};\r\n\r\n/**\r\nRequest enter in a given scene\r\n@param {string} sceneid - the scene id (sid)\r\n@example\r\nATON.VRoadcast.requestSceneEnter(\"testscene\");\r\n*/\r\nVRoadcast.requestSceneEnter = (sceneid)=>{\r\n    if (!VRoadcast.socket) return;\r\n    if (sceneid === undefined) sceneid = ATON.SceneHub.currID;\r\n\r\n    if (sceneid === undefined){\r\n        console.log(\"VRC ERROR: current scene ID is undefined\");\r\n        return;\r\n    }\r\n\r\n    VRoadcast.socket.emit(\"SENTER\", sceneid );\r\n};\r\n\r\n/**\r\nConnect to VRoadcast service\r\n@param {string} address - the address of the service (optional). Default is same server where main service is running\r\n@example\r\nATON.VRoadcast.connect();\r\n*/\r\nVRoadcast.connect = (address)=>{\r\n    if (VRoadcast._connected) return;\r\n    if (address) VRoadcast.address = address;\r\n\r\n    let opts = {};\r\n\r\n    // Secure connection\r\n    if (window.location.protocol === \"https:\"){\r\n        opts.path = '/svrc/socket.io';\r\n        opts.secure = true;\r\n        opts.rejectUnauthorized = false;\r\n        //opts.transports = ['websocket'], \r\n        //opts.upgrade = false \r\n    }\r\n    else {\r\n        opts.path = '/vrc/socket.io';\r\n    }\r\n\r\n    VRoadcast.socket = io.connect(VRoadcast.address, opts); //, { 'force new connection': true });\r\n\r\n    if (VRoadcast.socket === undefined) return;\r\n    VRoadcast._connected = VRoadcast.socket.connected;\r\n\r\n    VRoadcast._registerSocketHandlers();\r\n};\r\n\r\nVRoadcast.disconnect = ()=>{\r\n    if (VRoadcast.socket === undefined) return;\r\n\r\n    VRoadcast.socket.disconnect();\r\n    VRoadcast._connected = false;\r\n};\r\n\r\n\r\nVRoadcast._onConnected = ()=>{\r\n    //\r\n};\r\n\r\nVRoadcast.setUsername = (username)=>{\r\n    VRoadcast._username = username;\r\n    if (VRoadcast.socket === undefined) return;\r\n    if (VRoadcast.uid === undefined) return;\r\n\r\n    if (VRoadcast._elChat) VRoadcast._elChat.append(\"<i>Your username is now: \"+username+\"</i><br>\");\r\n    VRoadcast.socket.emit(\"UNAME\", username);\r\n};\r\nVRoadcast.setMessage = (msg)=>{\r\n    VRoadcast._msg = msg;\r\n    if (VRoadcast.socket === undefined) return;\r\n    if (VRoadcast.uid === undefined) return;\r\n\r\n    if (VRoadcast._elChat){\r\n        VRoadcast._elChat.append(\"<span style='color:\"+VRoadcast.ucolorhex[VRoadcast.uid%6]+\"'><b>YOU</b>: \"+msg+\"</span><br>\");\r\n        VRoadcast._elChat.scrollTop(VRoadcast._elChat.scrollHeight);\r\n    }\r\n\r\n    VRoadcast.socket.emit(\"UMSG\", msg);\r\n};\r\n\r\n\r\n// Handle incoming server msgs\r\nVRoadcast._registerSocketHandlers = ()=>{\r\n\r\n    // We connected to server\r\n    VRoadcast.socket.on('connect', ()=>{\r\n        VRoadcast._connected = true;\r\n\r\n        // Request enter in scene node (room)\r\n        if (ATON.SceneHub.currID !== undefined) VRoadcast.requestSceneEnter();\r\n        \r\n        console.log(\"VRC connected, entering scene: \"+ATON.SceneHub.currID);\r\n        ATON.fireEvent(\"VRC_Connected\");\r\n\r\n        VRoadcast._onConnected();\r\n    });\r\n\r\n    VRoadcast.socket.on('disconnect', ()=>{\r\n        VRoadcast._connected = false;\r\n        VRoadcast.uid = undefined;\r\n\r\n        VRoadcast.avaGroup.hide();\r\n\r\n        if (VRoadcast._elChat) VRoadcast._elChat.append(\"<i>YOU disconnected from VRoadcast service</i><br>\");\r\n\r\n        console.log(\"VRC disconnected!\");\r\n        ATON.fireEvent(\"VRC_Disconnected\");\r\n    });\r\n\r\n    // Incoming replicated event\r\n    VRoadcast.socket.on(VRoadcast.REPLICATED_EVT, (data)=>{\r\n        let evtname = data.e;\r\n        let d = data.d;\r\n\r\n        let ehList = ATON.EventHub.evNetwork[evtname];\r\n        ATON.EventHub.executeHandlers(ehList, d);\r\n    });\r\n\r\n    VRoadcast.socket.on('ID', (data)=>{\r\n        console.log(\"Your ID is \" + data);\r\n        VRoadcast.uid = data;\r\n\r\n        if (VRoadcast._elChat) VRoadcast._elChat.append(\"<i>Your ID is #\"+data+\"</i><br>\");\r\n\r\n        ATON.fireEvent(\"VRC_IDassigned\", data);\r\n    });\r\n\r\n    VRoadcast.socket.on('UENTER', (data)=>{\r\n        let uid = data;\r\n        //if (uid === VRoadcast.uid) return; // myself\r\n\r\n        console.log(\"User #\" +uid+\" entered the scene\");\r\n        if (VRoadcast._elChat) VRoadcast._elChat.append(\"<i>User #\"+uid+\" entered the scene</i><br>\");\r\n\r\n        VRoadcast.touchAvatar(uid);\r\n    });\r\n\r\n    VRoadcast.socket.on('ULEAVE', (data)=>{\r\n        let uid = data;\r\n        if (uid === undefined) return;\r\n        \r\n        let A = VRoadcast.avatarList[uid];\r\n        if (A) A.hide();\r\n\r\n        console.log(\"User #\" +uid+\" left the scene\");\r\n        if (VRoadcast._elChat) VRoadcast._elChat.append(\"<i>User #\"+uid+\" left the scene</i><br>\");\r\n\r\n        if (VRoadcast._numUsers>0) VRoadcast._numUsers--;\r\n    });\r\n\r\n    VRoadcast.socket.on('USTATE', (data)=>{\r\n        let S = VRoadcast.decodeState(data);\r\n\r\n        let uid = S.userid;\r\n        let A = VRoadcast.touchAvatar(uid);\r\n\r\n        //A.position.copy(S.position);\r\n        //A.quaternion.copy(S.quaternion);\r\n        A.requestStateTransition(S);\r\n    });\r\n\r\n    VRoadcast.socket.on('UNAME', (data)=>{\r\n        let uid   = data.uid;\r\n        let uname = data.name;\r\n\r\n        if (uid === undefined) return;\r\n\r\n        let A = VRoadcast.touchAvatar(uid);\r\n        A.setUsername(uname);\r\n\r\n        console.log(\"User #\" +uid+\" changed username to: \"+uname);\r\n        if (VRoadcast._elChat) VRoadcast._elChat.append(\"<i>User #\"+uid+\" changed username to: \"+uname+\"</i><br>\");\r\n    });\r\n\r\n    VRoadcast.socket.on('UMSG', (data)=>{\r\n        let uid = data.uid;\r\n        let msg = data.msg;\r\n\r\n        if (uid === undefined) return;\r\n\r\n        let A = VRoadcast.touchAvatar(uid);\r\n        A.setMessage(msg);\r\n\r\n        console.log(\"User #\" +uid+\": \"+msg);\r\n        if (VRoadcast._elChat) VRoadcast._elChat.append(\"<span style='color:\"+VRoadcast.ucolorhex[uid%6]+\"'><b>\"+A.username+\"</b>: \"+msg+\"</span><br>\");\r\n    });\r\n};\r\n\r\n// Encode state\r\nVRoadcast.encodeState = (S)=>{\r\n    if (!S) return;\r\n\r\n    let A = new Float32Array(6); // make sufficient room\r\n    A[0] = S.position.x;\r\n    A[1] = S.position.y;\r\n    A[2] = S.position.z;\r\n\r\n    // Convert to byte array, we use last float storage (4 bytes)\r\n    var binData = new Int8Array(A.buffer);\r\n\r\n    binData[16] = (S.quaternion.x * 128.0);\r\n    binData[17] = (S.quaternion.y * 128.0);\r\n    binData[18] = (S.quaternion.z * 128.0);\r\n    binData[19] = (S.quaternion.w * 128.0);\r\n\r\n    binData[20] = S.userid;\r\n\r\n    //binData[21] = parseInt(S.rank);\r\n\r\n    return binData;\r\n}\r\n\r\n// Decode state\r\nVRoadcast.decodeState = (binData)=>{\r\n    let S = {};\r\n    S.userid = binData[20];\r\n\r\n    // First decode quat\r\n    S.quaternion = new THREE.Quaternion(\r\n        binData[16] / 128.0,\r\n        binData[17] / 128.0,\r\n        binData[18] / 128.0,\r\n        binData[19] / 128.0\r\n    );\r\n\r\n    // Now decode floats\r\n    let a8 = new Int8Array(16);\r\n    for (var i=0; i<16; i++) a8[i] = binData[i];\r\n    let A = new Float32Array(a8.buffer);\r\n\r\n    S.position = new THREE.Vector3(A[0],A[1],A[2]);\r\n\r\n    //S.scale = A[3];\r\n\r\n    return S;\r\n}\r\n\r\n\r\n// Update\r\nVRoadcast.update = ()=>{\r\n\r\n    // State interpolation\r\n    for (let a=0; a<VRoadcast.avatarList.length; a++){\r\n        let A = VRoadcast.avatarList[a];\r\n        if (A && A.visible){\r\n            A._tStateDur = VRoadcast.USER_STATE_FREQ;\r\n            A.update();\r\n        }\r\n    }\r\n};\r\n\r\nVRoadcast.sendState = ()=>{\r\n    if (VRoadcast.uid === undefined) return;\r\n    if (!VRoadcast.socket || !VRoadcast._connected) return;\r\n    \r\n    let cpov = ATON.Nav._currPOV;\r\n    if (!cpov) return;\r\n\r\n    //console.log(cpov);\r\n\r\n    let S = {};\r\n    S.position = new THREE.Vector3();\r\n    S.quaternion = new THREE.Quaternion();\r\n\r\n    S.position.copy(cpov.pos);\r\n    S.quaternion.copy(ATON.Nav._qOri);\r\n    S.userid = VRoadcast.uid;\r\n\r\n    // Save bandwidth\r\n    if (VRoadcast._lastStateSent !== undefined){\r\n        let lastPos = VRoadcast._lastStateSent.position;\r\n        let lastOri = VRoadcast._lastStateSent.quaternion;\r\n\r\n        let dPos = lastPos.distanceToSquared(cpov.pos);\r\n        let dOri = lastOri.angleTo(ATON.Nav._qOri);\r\n\r\n        if ( dPos < VRoadcast.THRES_STATE_POS && dOri < VRoadcast.THRES_STATE_ORI) return;\r\n    }\r\n\r\n    // Encode and send\r\n    let binData = VRoadcast.encodeState(S);\r\n    VRoadcast.socket.emit(\"USTATE\", binData/*.buffer*/ );\r\n    VRoadcast._lastStateSent = S;\r\n\r\n    //console.log(\"State sent\");\r\n};\r\n\r\n\r\n// Avatars\r\nVRoadcast.getAvatar = (uid)=>{\r\n    return VRoadcast.avatarList[uid];\r\n};\r\n\r\nVRoadcast.touchAvatar = (uid)=>{\r\n\r\n    // First time\r\n    if (VRoadcast.avatarList[uid] === undefined){\r\n        let A = new VRoadcast.Avatar(uid);\r\n        A.attachTo(VRoadcast.avaGroup);\r\n        \r\n        A.loadRepresentation(ATON.PATH_RES+\"models/vrc/head.gltf\");\r\n        //console.log(VRoadcast.avaGroup);\r\n\r\n        VRoadcast.avatarList[uid] = A;\r\n\r\n        //console.log(VRoadcast.avatarList);\r\n        //console.log(ATON.MatHub.materials.avatars);\r\n        //console.log(A);\r\n        VRoadcast._numUsers++;\r\n    }\r\n\r\n    let A = VRoadcast.avatarList[uid];\r\n    A.show();\r\n\r\n    return A;\r\n}\r\n\r\nVRoadcast.clearAllAvatars = ()=>{\r\n    for (let i in VRoadcast.avatarList){\r\n        let A = VRoadcast.avatarList[i];\r\n        A.hide();\r\n        //A.dispose();\r\n    }\r\n};\r\n\r\nexport default VRoadcast;","/*\r\n    ATON Semantic shapes factory\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\n/**\r\nATON Semantic Factory\r\n@namespace SemFactory\r\n*/\r\nlet SemFactory = {};\r\n\r\nSemFactory.init = ()=>{\r\n    SemFactory.bConvexBuilding = false;\r\n    SemFactory.convexPoints = [];\r\n    //SemFactory.convexMeshes = [];\r\n    SemFactory.convexNode   = undefined; // keeps track of current convex semnode\r\n    SemFactory.currConvexMesh = undefined;\r\n    \r\n    // Temp sem node to hold developing convex mesh\r\n    SemFactory.currSemNode = ATON.createSemanticNode();\r\n    SemFactory.currSemNode.disablePicking();\r\n    SemFactory.currSemNode.attachToRoot();\r\n\r\n    SemFactory.currMaterial = ATON.MatHub.getMaterial(\"semanticShape\"); // current sem material we are using\r\n\r\n    SemFactory._numShapes = 0; // counter of shapes produced\r\n};\r\n\r\n\r\n// Current material\r\nSemFactory.resetMaterial = ()=>{\r\n    SemFactory.currMaterial = ATON.MatHub.getMaterial(\"semanticShape\");\r\n};\r\n\r\nSemFactory.setMaterial = (m)=>{\r\n    if (m === undefined) return;\r\n    SemFactory.currMaterial = m;\r\n};\r\n\r\n\r\n// Convex shapes\r\n// NOTE: if semid exists, add mesh under the same id\r\nSemFactory.addConvexPoint = (/*semid,*/ p)=>{\r\n\r\n    SemFactory.convexPoints.push(p);\r\n    let numPoints = SemFactory.convexPoints.length;\r\n\r\n    // Spatial UI\r\n    let M = new THREE.Mesh( ATON.Utils.geomUnitSphere, ATON.MatHub.getMaterial(\"semanticShapeEdit\"));\r\n    M.position.copy(p);\r\n    M.scale.set(0.001,0.001,0.001);\r\n    ATON.SUI.gPoints.add( M );\r\n\r\n    if (numPoints < 4) return false;\r\n\r\n    // lets build convex shape\r\n    let geom   = new THREE.ConvexBufferGeometry( SemFactory.convexPoints );\r\n    let semesh = new THREE.Mesh( geom, ATON.MatHub.getMaterial(\"semanticShapeEdit\") );\r\n\r\n    //let numMeshes = SemFactory.convexMeshes.length;\r\n\r\n    // First time: create semnode and add it to current sem group\r\n    if (!SemFactory.bConvexBuilding){\r\n        //if (semid === undefined) semid = \"sem\"+SemFactory._numShapes;\r\n\r\n        //SemFactory.convexNode = ATON.getSemanticNode(semid) || ATON.createSemanticNode(semid);\r\n        //SemFactory.convexNode = ATON.createSemanticNode();\r\n        //SemFactory.convexNode.add(semesh);\r\n        SemFactory.currSemNode.add(semesh);\r\n        \r\n        // Store\r\n        semesh.userData._convexPoints = [];\r\n        for (let i=0; i<numPoints; i++){\r\n            //semesh.userData._convexPoints.push( ATON.Utils.setVectorPrecision(SemFactory.convexPoints[i],3) );\r\n\r\n            ATON.Utils.setVectorPrecision(SemFactory.convexPoints[i],4);\r\n            semesh.userData._convexPoints.push(SemFactory.convexPoints[i].x);\r\n            semesh.userData._convexPoints.push(SemFactory.convexPoints[i].y);\r\n            semesh.userData._convexPoints.push(SemFactory.convexPoints[i].z);\r\n        }\r\n\r\n        SemFactory.currConvexMesh = semesh;\r\n        SemFactory.bConvexBuilding = true;\r\n    }\r\n\r\n    // keep updating current semantic geometry\r\n    else {\r\n        let currSemesh = SemFactory.currConvexMesh;\r\n        currSemesh.geometry.dispose();\r\n        currSemesh.geometry = geom;\r\n\r\n        //currSemesh.userData._convexPoints.push( ATON.Utils.setVectorPrecision(p,3) );\r\n\r\n        ATON.Utils.setVectorPrecision(p,4);\r\n        currSemesh.userData._convexPoints.push( p.x );\r\n        currSemesh.userData._convexPoints.push( p.y );\r\n        currSemesh.userData._convexPoints.push( p.z );\r\n    }\r\n\r\n    return true;\r\n};\r\n\r\nSemFactory.stopCurrentConvex = ()=>{\r\n    SemFactory.convexPoints = [];\r\n    SemFactory.bConvexBuilding = false;\r\n\r\n    SemFactory.currSemNode.removeChildren();\r\n    ATON.SUI.gPoints.removeChildren();\r\n};\r\n\r\nSemFactory.getCurrentConvexShape = ()=>{\r\n    return SemFactory.currSemNode\r\n};\r\n\r\nSemFactory.completeConvexShape = (semid)=>{\r\n    SemFactory.convexPoints = [];\r\n    SemFactory.bConvexBuilding = false;\r\n\r\n    //if (SemFactory.convexNode === undefined) return undefined;\r\n    //if (SemFactory.currConvexMesh === undefined) return undefined;\r\n    if (SemFactory.currSemNode === undefined) return;\r\n\r\n    if (semid === undefined) semid = \"sem\"+SemFactory._numShapes;\r\n\r\n    let S = ATON.getSemanticNode(semid) || ATON.createSemanticNode(semid);\r\n    \r\n    S.add(SemFactory.currSemNode.children[0]);\r\n    S.setMaterial( SemFactory.currMaterial );\r\n    S.setDefaultAndHighlightMaterials(SemFactory.currMaterial, ATON.MatHub.materials.semanticShapeHL);\r\n    S.enablePicking();\r\n\r\n    SemFactory.currSemNode.removeChildren();\r\n\r\n/*\r\n    SemFactory.convexNode = ATON.getSemanticNode(semid) || ATON.createSemanticNode(semid);\r\n    SemFactory.convexNode.add(SemFactory.currConvexMesh);\r\n\r\n    SemFactory.convexNode.setMaterial( SemFactory.currMaterial );\r\n    SemFactory.convexNode.setDefaultMaterial(SemFactory.currMaterial);\r\n    SemFactory.convexNode.enablePicking();\r\n*/\r\n    SemFactory._numShapes++;\r\n\r\n    //console.log(SemFactory.convexNode);\r\n    //console.log(SemFactory.convexNode.userData._convexPoints);\r\n\r\n    //return SemFactory.convexNode;\r\n\r\n    // Spatial UI\r\n    ATON.SUI.gPoints.removeChildren();\r\n\r\n    return S;\r\n};\r\n\r\nSemFactory.createConvexShape = (semid, points)=>{\r\n    let geom   = new THREE.ConvexBufferGeometry( points );\r\n    let semesh = new THREE.Mesh( geom, SemFactory.currMaterial );\r\n\r\n    semesh.userData._convexPoints = [];\r\n    for (let i=0; i<points.length; i++){\r\n        let p = points[i];\r\n        ATON.Utils.setVectorPrecision(p,4);\r\n\r\n        semesh.userData._convexPoints.push( p.x );\r\n        semesh.userData._convexPoints.push( p.y );\r\n        semesh.userData._convexPoints.push( p.z );\r\n        }\r\n\r\n    let S = ATON.getOrCreateSemanticNode(semid);\r\n    S.add(semesh);\r\n    S.setDefaultAndHighlightMaterials(SemFactory.currMaterial, ATON.MatHub.materials.semanticShapeHL);\r\n\r\n    S.enablePicking();\r\n\r\n    return S;\r\n};\r\n\r\nSemFactory.addSurfaceConvexPoint = (/*semid,*/ offset)=>{\r\n    if (!ATON._queryDataScene) return false;\r\n\r\n    if (offset === undefined) offset = 0.02;\r\n\r\n    let p   = ATON._queryDataScene.p;\r\n    let eye = ATON.Nav.getCurrentEyeLocation();\r\n/*\r\n    let n = ATON._queryDataScene.n;\r\n    p.x += (n.x * offset);\r\n    p.y += (n.y * offset);\r\n    p.z += (n.z * offset);\r\n*/\r\n    p.lerpVectors(p, eye, offset);\r\n\r\n    SemFactory.addConvexPoint(p);\r\n    return p;\r\n};\r\n\r\n\r\n// Spherical semantic shapes\r\n// NOTE: if semid exists, add mesh under the same id\r\nSemFactory.createSphere = (semid, location, radius)=>{\r\n    if (location === undefined) return undefined;\r\n    if (radius === undefined) return undefined;\r\n\r\n/*\r\n    if (ATON.getSemanticNode(semid)){\r\n        console.log(\"ERROR SemFactory: semantic node \"+semid+\" already exists.\");\r\n        return false;\r\n    }\r\n*/\r\n    if (semid === undefined) semid = \"sem\"+SemFactory._numShapes;\r\n\r\n    let S = ATON.getOrCreateSemanticNode(semid);\r\n\r\n    //let g = new THREE.SphereGeometry( 1.0, 16, 16 );\r\n    let M = new THREE.Mesh( ATON.Utils.geomUnitSphere, SemFactory.currMaterial );\r\n    \r\n    // Note: we add multiple spheres to the same <semid> node\r\n    let sphere = new THREE.Object3D();\r\n    sphere.position.copy(location);\r\n    sphere.scale.set(radius, radius, radius);\r\n    sphere.add(M);\r\n\r\n    S.add( sphere );\r\n    S.enablePicking();\r\n    S.setDefaultAndHighlightMaterials(SemFactory.currMaterial, ATON.MatHub.materials.semanticShapeHL);\r\n\r\n    //SemFactory.currParent.add( S );\r\n\r\n    SemFactory._numShapes++;\r\n\r\n    return S;\r\n};\r\n\r\nSemFactory.createSurfaceSphere = (semid)=>{\r\n    if (!ATON._queryDataScene) return undefined;\r\n\r\n    let p = ATON._queryDataScene.p;\r\n    let r = ATON.SUI.getSelectorRadius();\r\n\r\n    return SemFactory.createSphere(semid, p,r);\r\n};\r\n\r\nexport default SemFactory;","/*\r\n    ATON Front-end blueprint\r\n\r\n    author: bruno.fanini_AT_gmail.com\r\n\r\n===========================================================*/\r\n\r\n/**\r\nATON Front-end routines\r\n@namespace FE\r\n*/\r\nlet FE = {};\r\n\r\n// Semantic-shapes types\r\nFE.SEMSHAPE_SPHERE = 0;\r\nFE.SEMSHAPE_CONVEX = 1;\r\n\r\n\r\nFE.realize = ()=>{\r\n    FE.PATH_RES_ICONS = ATON.PATH_RES+\"icons/\";\r\n\r\n    FE._bPopup = false;     // showing popup\r\n    FE.bPopupBlurBG = 0.25; // blur 3D content on popup show, 0.0 to disable\r\n    FE._userAuth = {};\r\n\r\n    FE._bReqHome = false;   // auto-compute home\r\n\r\n    FE.urlParams = new URLSearchParams(window.location.search);\r\n\r\n    FE._uiSetupBase();\r\n\r\n    ATON.realize();\r\n\r\n    // built-in base front-end parameters\r\n    let ddens = ATON.FE.urlParams.get('d');\r\n    if (ddens && ddens>0.0) ATON.setDefaultPixelDensity(ddens);\r\n};\r\n\r\n// Add basic spinning loader\r\nFE.addBasicLoaderEvents = ()=>{\r\n    ATON.on(\"NodeRequestFired\", ()=>{ $(\"#idLoader\").show(); });\r\n    ATON.on(\"AllNodeRequestsCompleted\", ()=>{ \r\n        $(\"#idLoader\").hide();\r\n        \r\n        //console.log(ATON.Nav.homePOV);\r\n\r\n        if (FE._bReqHome) return;\r\n\r\n        if (ATON.Nav.homePOV === undefined){\r\n            ATON.Nav.computeAndRequestDefaultHome(0.5);\r\n        }\r\n        else {\r\n            ATON.Nav.requestHome(0.5);\r\n        }\r\n\r\n        FE._bReqHome = true;\r\n    });\r\n};\r\n\r\nFE.useMouseWheelToScaleSelector = (f)=>{\r\n\r\n    if (f === undefined) f = 0.001;\r\n\r\n    ATON.on(\"MouseWheel\", (d)=>{\r\n        if (ATON.Nav._controls.enableZoom === undefined) return;\r\n\r\n        if (ATON._kModShift){\r\n            ATON.Nav._controls.enableZoom = false;\r\n\r\n            let r = ATON.SUI.mainSelector.scale.x;\r\n            r += (-d*f);\r\n            if (r > 0.0001) ATON.SUI.setSelectorRadius(r);\r\n        }\r\n        else {\r\n            ATON.Nav._controls.enableZoom = true;\r\n        }\r\n    });\r\n};\r\n\r\nFE.loadSceneID = (sid)=>{\r\n    if (sid === undefined) return;\r\n\r\n    let reqstr = ATON.PATH_RESTAPI_SCENE + sid;\r\n    if (ATON.SceneHub._bEdit) reqstr += \",edit\";\r\n\r\n    ATON.SceneHub.load(reqstr, sid);\r\n    console.log(reqstr);\r\n};\r\n\r\n\r\n\r\n// HTML UI\r\n//=======================================\r\n// Sample basic UI setup\r\nFE.uiBasicSetup = ()=>{\r\n    FE.uiAddButton(\"idTopToolbar\",\"fullscreen\", ATON.toggleFullScreen );\r\n    if (ATON.Utils.isConnectionSecure()) FE.uiAddButton(\"idTopToolbar\",\"vr\", ATON.XR.toggle );\r\n\r\n    FE.uiAddButton(\"idBottomToolbar\",\"home\", ()=>{ ATON.Nav.requestHome(0.1); });\r\n};\r\n\r\nFE._uiSetupBase = ()=>{\r\n    $(\"#idPopup\").click( FE.popupClose );\r\n    $(\"#idLoader\").html(\"<img src='\"+ATON.PATH_RES+\"loader.png'>\");\r\n};\r\n\r\n// Add Generic button to a specific div container\r\nFE.uiAddButton = (idcontainer, icon, onPress)=>{\r\n    let iconurl;\r\n    let iconid;\r\n\r\n    if (icon.endsWith(\".png\")){\r\n        iconurl = icon;\r\n        iconid  = icon.slice(0,-4);\r\n    }\r\n    else {\r\n        iconurl = FE.PATH_RES_ICONS+icon+\".png\";\r\n        iconid  = icon;\r\n    }\r\n\r\n    let htmlcode = \"<button id='btn-\"+iconid+\"' type='button' class='atonBTN'><img src='\"+iconurl+\"'></button>\";\r\n    $(\"#\"+idcontainer).append(htmlcode);\r\n\r\n    if (onPress) $(\"#btn-\"+iconid).click( onPress );\r\n};\r\n\r\nFE.uiSwitchButton = (iconid, b)=>{\r\n    if (b) $(\"#btn-\"+iconid).addClass(\"switchedON\");\r\n    else $(\"#btn-\"+iconid).removeClass(\"switchedON\");\r\n};\r\n\r\nFE.uiAddButtonHome = (idcontainer)=>{\r\n    FE.uiAddButton(idcontainer, \"home\", ()=>{ \r\n        ATON.Nav.requestHome(0.3);\r\n    });\r\n};\r\n\r\nFE.uiAddButtonFirstPerson = (idcontainer)=>{\r\n    FE.uiAddButton(idcontainer, \"fp\", ()=>{\r\n        if (ATON.Nav.isFirstPerson()){\r\n            ATON.Nav.setOrbitControl();\r\n            FE.uiSwitchButton(\"fp\",false);\r\n        }\r\n        else {\r\n            ATON.Nav.setFirstPersonControl();\r\n            FE.uiSwitchButton(\"fp\",true);\r\n        }\r\n    });\r\n};\r\nFE.uiAddButtonVR = (idcontainer)=>{\r\n    if (!ATON.Utils.isConnectionSecure()) return;\r\n    FE.uiAddButton(idcontainer, \"vr\", ATON.XR.toggle );\r\n};\r\nFE.uiAddButtonDeviceOrientation = (idcontainer)=>{\r\n    if (!ATON.Utils.isConnectionSecure()) return;\r\n    if (!ATON.Utils.isMobile()) return;\r\n\r\n    FE.uiAddButton(idcontainer,\"devori\", ()=>{\r\n        if (ATON.Nav.isDevOri()){\r\n            ATON.Nav.setOrbitControl();\r\n            FE.uiSwitchButton(\"devori\",false);\r\n        }\r\n        else {\r\n            ATON.Nav.setDeviceOrientationControl();\r\n            FE.uiSwitchButton(\"devori\",true);\r\n        }\r\n    });\r\n};\r\n\r\nFE.uiAddButtonQR = (idcontainer)=>{\r\n    FE.uiAddButton(idcontainer,\"qr\", FE.popupQR );\r\n};\r\n\r\nFE.uiAddButtonFullScreen = (idcontainer)=>{\r\n    FE.uiAddButton(idcontainer, \"fullscreen\", ()=>{\r\n        ATON.toggleFullScreen();\r\n        screenfull.isFullscreen? FE.uiSwitchButton(\"fullscreen\",false) : FE.uiSwitchButton(\"fullscreen\",true);\r\n    });\r\n};\r\n\r\nFE.uiAddButtonVRC = (idcontainer)=>{\r\n    FE.uiAddButton(idcontainer, \"vrc\", ()=>{\r\n        if (ATON.VRoadcast.isConnected()){\r\n            FE.popupVRC();\r\n        }\r\n        else {\r\n            ATON.VRoadcast.connect();\r\n        }\r\n    });\r\n\r\n    ATON.on(\"VRC_IDassigned\", (uid)=>{\r\n        $(\"#btn-vrc\").addClass(\"atonVRCu\"+(uid%6));\r\n    });\r\n\r\n    ATON.on(\"VRC_Disconnected\", ()=>{\r\n        $(\"#btn-vrc\").attr(\"class\",\"atonBTN\");\r\n    });\r\n};\r\n\r\nFE.uiAddButtonUser = (idcontainer)=>{\r\n    FE.uiAddButton(idcontainer, \"user\", ()=>{\r\n        FE.popupUser();\r\n    });\r\n};\r\n\r\nFE.uiAddButtonEditMode = (idcontainer)=>{\r\n    FE.uiAddButton(idcontainer, \"edit\", ()=>{\r\n        FE.checkAuth((data)=>{\r\n            if (data.username !== undefined){\r\n                ATON.SceneHub._bEdit = !ATON.SceneHub._bEdit;\r\n                FE.uiSwitchButton(\"edit\",ATON.SceneHub._bEdit);\r\n            }\r\n\r\n            else {\r\n                FE.popupUser();  \r\n            }\r\n        });\r\n    });\r\n};\r\n\r\n// Attach ID validator to given input field\r\nFE.uiAttachInputFilterID = (inputid)=>{\r\n    $(\"#\"+inputid).on('keyup change input', ()=>{\r\n        let value = $(\"#\"+inputid).val();\r\n        let regReplace = new RegExp('[^A-Za-z-_]', 'ig');\r\n        $(\"#\"+inputid).val( value.replace(regReplace, '') );\r\n\r\n    });\r\n};\r\n\r\nFE.setupBasicUISounds = ()=>{\r\n    FE.auLib = {};\r\n\r\n    FE.auLib.switch = new Audio(ATON.PATH_RES+\"audio/switch.wav\");\r\n    FE.auLib.switch.loop = false;\r\n};\r\n\r\n\r\n// Popups\r\n//===================================================================\r\nFE.popupShow = (htmlcontent, cssClasses)=>{\r\n    if (FE._bPopup) return false;\r\n\r\n    let clstr = \"atonPopup \";\r\n    if (cssClasses) clstr += cssClasses;\r\n\r\n    let htcont = \"<div id='idPopupContent' class='\"+clstr+\"'>\";\r\n    htcont += htmlcontent+\"</div>\"\r\n\r\n    $('#idPopup').html(htcont);\r\n    $('#idPopupContent').click((e)=>{ e.stopPropagation(); });\r\n    $('#idPopup').fadeIn();\r\n\r\n    FE._bPopup = true;\r\n\r\n    if (FE.bPopupBlurBG > 0.0){\r\n        ATON._renderer.setPixelRatio( FE.bPopupBlurBG );\r\n        ATON._renderer.render( ATON._mainRoot, ATON.Nav._camera );\r\n    }\r\n\r\n    ATON._bPauseQuery = true;\r\n    //ATON.renderPause();\r\n\r\n    $(\"#idTopToolbar\").hide();\r\n    $(\"#idBottomToolbar\").hide();\r\n\r\n    return true;\r\n};\r\n\r\nFE.popupClose = ()=>{\r\n    FE._bPopup = false;\r\n\r\n    //ATON.renderResume();\r\n    if (FE.bPopupBlurBG > 0.0) ATON.resetPixelDensity();\r\n\r\n    $(\"#idPopup\").fadeOut();\r\n    //$(\"#idPopup\").empty();\r\n\r\n    ATON._bPauseQuery = false;\r\n\r\n    $(\"#idTopToolbar\").show();\r\n    $(\"#idBottomToolbar\").show();\r\n\r\n    ATON.focusOn3DView();\r\n};\r\n\r\nFE.popupQR = ()=>{\r\n    let htmlcontent = \"<h1>Share</h1>\";\r\n    htmlcontent += \"<div class='atonQRcontainer' id='idQRcode'></div><br><br>\";\r\n\r\n    if ( !ATON.FE.popupShow(htmlcontent) ) return;\r\n\r\n    let url = window.location.href;\r\n    new QRCode(document.getElementById(\"idQRcode\"), url);\r\n};\r\n\r\nFE.popupVRC = ()=>{\r\n    let htmlcontent = \"\";\r\n    htmlcontent += \"<h1>Collaborative Session</h1>\";\r\n\r\n    htmlcontent += \"<input id='idVRCusername' type='text' size='10' placeholder='username...'>\" \r\n    htmlcontent += \"<div id='idChatBox' style='width:100%; height:150px; text-align:left;' class='scrollableY'></div>\";\r\n\r\n    //htmlcontent += \"<div style='text-align:left'>\";\r\n    htmlcontent += \"<input id='idVRCmsg' style='width:90%' type='text' placeholder='message...'>\";\r\n    //htmlcontent += \"</div>\";\r\n\r\n    htmlcontent += \"<button type='button' class='atonBTN atonBTN-red' id='idVRCdisconnect' style='width:100%'>LEAVE</button>\";\r\n\r\n    if ( !ATON.FE.popupShow(htmlcontent, \"atonPopupLarge\") ) return;\r\n\r\n\r\n    $(\"#idChatBox\").append(ATON.VRoadcast._elChat);\r\n\r\n    $(\"#idVRCmsg\").keypress((e)=>{\r\n        let keycode = (e.keyCode ? e.keyCode : e.which);\r\n        if(keycode == '13'){\r\n            let str = $(\"#idVRCmsg\").val();\r\n            ATON.VRoadcast.setMessage( str );\r\n            $(\"#idVRCmsg\").val(\"\");\r\n            //$(\"#idChatBox:first-child\").scrollTop( $(\"#idChatBox:first-child\").height() );\r\n        }\r\n    });\r\n\r\n    $(\"#idVRCusername\").keypress((e)=>{\r\n        let keycode = (e.keyCode ? e.keyCode : e.which);\r\n        if(keycode == '13'){\r\n            let str = $(\"#idVRCusername\").val();\r\n            ATON.VRoadcast.setUsername( str );\r\n            //$(\"#idVRCusername\").hide();\r\n        }\r\n    });\r\n\r\n    $(\"#idVRCdisconnect\").click(()=>{\r\n        ATON.VRoadcast.disconnect();\r\n        ATON.FE.popupClose();\r\n    });\r\n\r\n};\r\n\r\n// User auth\r\nFE.checkAuth = (onReceive)=>{\r\n    $.ajax({\r\n        type: 'GET',\r\n        url: ATON.PATH_RESTAPI+\"user\",\r\n        xhrFields: { withCredentials: true },            \r\n        dataType: 'json',\r\n\r\n        success: (data)=>{\r\n            FE._userAuth = data;\r\n            console.log(FE._userAuth);\r\n\r\n            onReceive(data);\r\n        }\r\n    });\r\n};\r\n\r\nFE.popupUser = ()=>{\r\n\r\n    FE.checkAuth((r)=>{\r\n        // We are already logged\r\n        if (r.username !== undefined){\r\n            let htmlcontent = \"<img src='\"+FE.PATH_RES_ICONS+\"user.png'><br>\";\r\n            htmlcontent += \"You are logged in as <b>'\"+r.username+\"'</b><br><br>\";\r\n\r\n            htmlcontent += \"<button type='button' class='atonBTN atonBTN-red' id='idLogoutBTN' style='width:100%'>LOGOUT</div>\";\r\n\r\n            if ( !ATON.FE.popupShow(htmlcontent) ) return;\r\n\r\n            $(\"#idLogoutBTN\").click(()=>{\r\n                $.get(ATON.PATH_RESTAPI+\"logout\", (r)=>{\r\n                    console.log(r);\r\n                    ATON.SceneHub.setEditMode(false);\r\n                    ATON.fireEvent(\"Logout\");\r\n                });\r\n\r\n                ATON.FE.popupClose();\r\n            });\r\n\r\n        }\r\n\r\n        // Not logged in\r\n        else {\r\n            let htmlcontent = \"<img src='\"+FE.PATH_RES_ICONS+\"user.png'><br>\";\r\n            htmlcontent += \"username:<input id='idUsername' type='text' maxlength='15' size='15' ><br>\";\r\n            htmlcontent += \"password:<input id='idPassword' type='password' maxlength='15' size='15' ><br>\";\r\n\r\n            htmlcontent += \"<button type='button' class='atonBTN atonBTN-green' id='idLoginBTN' style='width:100%'>LOGIN</div>\";\r\n\r\n            if ( !ATON.FE.popupShow(htmlcontent) ) return;\r\n\r\n            $(\"#idLoginBTN\").click(()=>{\r\n                let jstr = JSON.stringify({\r\n                    username: $(\"#idUsername\").val(),\r\n                    password: $(\"#idPassword\").val()\r\n                });\r\n\r\n                $.ajax({\r\n                    url: ATON.PATH_RESTAPI+\"login\",\r\n                    type:\"POST\",\r\n                    data: jstr,\r\n                    contentType:\"application/json; charset=utf-8\",\r\n                    dataType:\"json\",\r\n\r\n                    success: (r)=>{\r\n                        console.log(r);\r\n                        if (r){\r\n                            ATON.fireEvent(\"Login\", r);\r\n                            ATON.FE.popupClose();\r\n                        }\r\n                    }\r\n\r\n                }).fail((err)=>{\r\n                    //console.log(err);\r\n                    $(\"#idLoginBTN\").html(\"LOGIN FAILED\");\r\n                    $(\"#idLoginBTN\").attr(\"class\",\"atonBTN atonBTN-red\");\r\n                });\r\n            });\r\n        }\r\n    });\r\n};\r\n\r\n\r\nexport default FE;","/*!\r\n    @preserve\r\n\r\n \tATON\r\n\r\n \t@author Bruno Fanini\r\n\tVHLab, CNR ISPC\r\n\r\n==================================================================================*/\r\n\r\n'use strict';\r\n\r\n/**\r\n@namespace ATON\r\n*/\r\nlet ATON = {};\r\nwindow.ATON = ATON;\r\n\r\n// Import\r\nimport Node from \"./ATON.node.js\";\r\nimport POV from \"./ATON.pov.js\";\r\n//import Period from \"./ATON.period.js\";\r\nimport LightProbe from \"./ATON.lightprobe.js\";\r\n\r\nimport EventHub from \"./ATON.eventhub.js\";\r\nimport MatHub from \"./ATON.mathub.js\";\r\nimport Utils from \"./ATON.utils.js\";\r\nimport SceneHub from \"./ATON.scenehub.js\";\r\nimport Nav from \"./ATON.nav.js\";\r\nimport XR from \"./ATON.xr.js\";\r\nimport SUI from \"./ATON.sui.js\";\r\nimport VRoadcast from \"./ATON.vroadcast.js\";\r\nimport SemFactory from \"./ATON.semfactory.js\";\r\nimport FE from \"./ATON.fe.js\";\r\n\r\n// Classes\r\nATON.Node       = Node;\r\nATON.POV        = POV;\r\nATON.LightProbe = LightProbe;\r\n//ATON.Period = Period;\r\n\r\n// NS\r\nATON.EventHub   = EventHub;\r\nATON.Utils      = Utils;\r\nATON.SceneHub   = SceneHub;\r\nATON.MatHub     = MatHub;\r\nATON.Nav        = Nav;\r\nATON.XR         = XR;\r\nATON.SUI        = SUI;\r\nATON.VRoadcast  = VRoadcast;\r\nATON.SemFactory = SemFactory;\r\nATON.FE         = FE;\r\n\r\n//==============================================================\r\n// Consts\r\n//==============================================================\r\nATON.STD_UPVECTOR = new THREE.Vector3(0,1,0);\r\nATON.ROOT_NID = \".\"; // reserved node ID for graph-roots\r\n\r\nATON.RAD2DEG = (180.0 / Math.PI);\r\nATON.DEG2RAD = (Math.PI / 180.0);\r\n\r\n// Node types\r\nATON.NTYPES = {};\r\n// 1 and 2 are reserved\r\nATON.NTYPES.SCENE  = 3;\r\nATON.NTYPES.SEM    = 4;\r\nATON.NTYPES.UI     = 5;\r\n\r\n// Folders\r\nATON.PATH_RESTAPI       = window.location.origin + \"/api/\";\r\nATON.PATH_RESTAPI_SCENE = ATON.PATH_RESTAPI + \"scene/\";\r\nATON.PATH_MODS          = window.location.origin + \"/mods/\";\r\nATON.PATH_THREE         = ATON.PATH_MODS + \"three/\";\r\nATON.PATH_DRACO_LIB     = ATON.PATH_THREE+\"examples/js/libs/draco/\";\r\nATON.PATH_BASIS_LIB     = ATON.PATH_THREE+\"examples/js/libs/basis/\";\r\n\r\nATON.PATH_COLLECTION = window.location.origin + \"/collection/\";\r\nATON.PATH_MODELS     = ATON.PATH_COLLECTION + \"models/\";\r\nATON.PATH_SCENES     = window.location.origin + \"/scenes/\";\r\nATON.PATH_RES        = window.location.origin + \"/res/\";\r\n\r\nATON.SHADOWS_NEAR = 0.1;\r\nATON.SHADOWS_FAR  = 50.0;\r\nATON.SHADOWS_SIZE = 15.0;\r\nATON.SHADOWS_RES  = 1024; // 512\r\n\r\n/**\r\nSet path collection (3D models, audio, panoramas, ...)\r\n@param {string} path - path\r\n*/\r\nATON.setPathCollection = (path)=>{\r\n    ATON.PATH_COLLECTION = window.location.origin + path;\r\n    ATON.PATH_MODELS     = ATON.PATH_COLLECTION+\"models/\";\r\n};\r\n\r\n/**\r\nSet path scenes\r\n@param {string} path - path\r\n*/\r\nATON.setPathScenes = (path)=>{\r\n    ATON.PATH_SCENES = window.location.origin + path;\r\n};\r\n\r\n\r\nATON._setupBaseListeners = ()=>{\r\n    let el = ATON._renderer.domElement;\r\n\r\n    window.addEventListener( 'resize', ATON._onResize, false );\r\n    el.addEventListener( 'mousemove', ATON._updateScreenMove, false );\r\n    ///el.addEventListener('dblclick', ATON._doubleTap, false);\r\n\r\n    el.addEventListener('mousedown', (e)=>{\r\n        if (e.button === 1) ATON.fireEvent(\"MouseMidButton\");      // middle-click\r\n        if (e.button === 2) ATON.fireEvent(\"MouseRightButton\");    // right-click\r\n    });\r\n\r\n    el.addEventListener( 'wheel', ATON._onMouseWheel, false );\r\n\r\n\r\n    // Touch events\r\n    Hammer(el).on(\"doubletap\", (e)=>{\r\n        ATON.fireEvent(\"DoubleTap\", e.srcEvent);\r\n        //console.log(e.srcEvent);\r\n    });\r\n\r\n    Hammer(el).on(\"tap\", (e)=>{\r\n        ATON._updateScreenMove(e.srcEvent);\r\n        ATON._handleQueries();\r\n\r\n        ATON.fireEvent(\"Tap\", e.srcEvent);\r\n        //console.log(e.srcEvent);\r\n\r\n        // UI selection\r\n        if (ATON._hoveredUI === undefined) return;\r\n        let H = ATON.getUINode(ATON._hoveredUI);\r\n        if (H && H.onSelect) H.onSelect();\r\n    });\r\n\r\n    ATON.on(\"DoubleTap\", (e)=>{\r\n        //console.log(e);\r\n        ATON.defaultDoubleTapFromScreenCoords(e);\r\n    });\r\n\r\n    //ATON.on(\"Tap\", (e)=>{\r\n        //console.log(e);\r\n    //});\r\n\r\n\r\n    // Keyboard\r\n    ATON._kModShift = false;\r\n    ATON._kModCtrl  = false;\r\n\r\n    el.addEventListener(\"keydown\", (e)=>{\r\n        if (e.key === \"Shift\")   ATON._kModShift = true;\r\n        if (e.key === \"Control\") ATON._kModCtrl  = true;\r\n        \r\n        ATON.fireEvent(\"KeyPress\", e.key);\r\n        //ATON.fireEvent(\"KeyPress/\"+e.key);\r\n    }, false);\r\n\r\n    el.addEventListener(\"keyup\", (e)=>{\r\n        if (e.key === \"Shift\")   ATON._kModShift = false;\r\n        if (e.key === \"Control\") ATON._kModCtrl  = false;\r\n\r\n        ATON.fireEvent(\"KeyUp\", e.key);\r\n        //ATON.fireEvent(\"KeyUp/\"+e.key);\r\n    }, false);\r\n\r\n    // Defaults\r\n    ATON.on(\"KeyPress\", (k)=>{\r\n\r\n        if (k==='+'){\r\n            let f = ATON.Nav.getFOV() + 1.0;\r\n            ATON.Nav.setFOV(f);\r\n        }\r\n        if (k==='-'){\r\n            let f = ATON.Nav.getFOV() - 1.0;\r\n            ATON.Nav.setFOV(f);\r\n        }\r\n\r\n        if (k==='PageUp'){\r\n            let r = ATON.SUI.mainSelector.scale.x + 0.02;\r\n            ATON.SUI.setSelectorRadius(r);\r\n        }\r\n        if (k==='PageDown'){\r\n            let r = ATON.SUI.mainSelector.scale.x - 0.02;\r\n            r = Math.max(r, 0.01);\r\n            ATON.SUI.setSelectorRadius(r); \r\n        }\r\n    });\r\n\r\n    // Default semantic highlight\r\n/*\r\n    ATON.on(\"SemanticNodeLeave\", (semid)=>{\r\n        let S = ATON.getSemanticNode(semid);\r\n        if (S) S.restoreDefaultMaterial();\r\n    });\r\n    ATON.on(\"SemanticNodeHover\", (semid)=>{\r\n        let S = ATON.getSemanticNode(semid);\r\n        if (S) S.highlight();\r\n    });\r\n*/          \r\n};\r\n\r\nATON._onResize = ()=>{\r\n    ATON.Nav._camera.aspect = window.innerWidth / window.innerHeight;\r\n    ATON.Nav._camera.updateProjectionMatrix();\r\n\r\n    ATON._renderer.setSize( window.innerWidth, window.innerHeight );\r\n    console.log(\"onResize\");\r\n};\r\n\r\nATON._onMouseWheel = (e)=>{\r\n    e.preventDefault();\r\n\r\n    ATON.fireEvent(\"MouseWheel\", e.deltaY);\r\n};\r\n\r\nATON.focusOn3DView = ()=>{\r\n    ATON._renderer.domElement.focus();\r\n};\r\n\r\n// Default retarget from screen coordinates (eg.: on double tap)\r\nATON.defaultDoubleTapFromScreenCoords = (e)=>{\r\n    ATON._updateScreenMove(e);\r\n    ATON._handleQueryScene();\r\n\r\n    let bFPtrans = ATON.Nav.isFirstPerson() || ATON.Nav.isDevOri();\r\n\r\n    // When first-person mode, teleport (non immersive)\r\n    if (ATON._queryDataScene && bFPtrans){\r\n        let P = ATON._queryDataScene.p;\r\n        let N = ATON._queryDataScene.n;\r\n        \r\n        if (N.y > 0.7){\r\n            let currDir = ATON.Nav._vDir;\r\n            let feye = new THREE.Vector3(P.x, P.y+ATON.userHeight, P.z);\r\n            let ftgt = new THREE.Vector3(\r\n                feye.x + currDir.x,\r\n                feye.y + currDir.y,\r\n                feye.z + currDir.z,\r\n            );\r\n\r\n            let POV = new ATON.POV().setPosition(feye).setTarget(ftgt);\r\n\r\n            ATON.Nav.requestPOV(POV, 0.5);\r\n        }\r\n        return;\r\n    }\r\n\r\n    // In orbit mode, focus on selected SemNode...\r\n    let hsn = ATON.getSemanticNode(ATON._hoveredSemNode);\r\n    if (ATON._queryDataSem && hsn){\r\n        ATON.Nav.requestPOVbyNode( hsn, 0.3);\r\n        return;\r\n    }\r\n    // ...or perform standard retarget on picket surface point\r\n    if (ATON._queryDataScene){\r\n        ATON.Nav.requestRetarget(ATON._queryDataScene.p, /*ATON._queryDataScene.n*/undefined, 0.3);\r\n    }\r\n\r\n    // TODO: go POV in sight if any (panorama only mode)\r\n}\r\n\r\n/**\r\nToggle fullscreen\r\n*/\r\nATON.toggleFullScreen = ()=>{\r\n    screenfull.toggle();\r\n/*\r\n    if (b === undefined){\r\n        screenfull.toggle();\r\n        return;\r\n    }\r\n\r\n    if (b) screenfull.request();\r\n*/\r\n};\r\n\r\n\r\n//============================================================================\r\n// ATON init routines\r\n//============================================================================\r\n/**\r\nMain ATON initialization, it will take care of all sub-components initialization, device profiling and much more\r\n@example\r\nATON.realize()\r\n*/\r\nATON.realize = ()=>{\r\n    console.log(\"realize\");\r\n\r\n    ATON.Utils.init();\r\n    ATON.Utils.profileDevice();\r\n    \r\n    //THREE.Object3D.DefaultUp = new THREE.Vector3(0,0,1); // mismatches WebXR y-up\r\n\r\n    // Timing\r\n    ATON._clock = new THREE.Clock(true);\r\n\r\n    let wglopts = {\r\n        //canvas: document.getElementById(\"idView\"),\r\n        antialias: true, //ATON.device.isMobile? false : true,\r\n        alpha: true,\r\n        //pecision: \"mediump\"\r\n        preserveDrawingBuffer: true\r\n    };\r\n\r\n    ATON._renderer = new THREE.WebGLRenderer(wglopts);\r\n    ATON._renderer.setSize( window.innerWidth, window.innerHeight );\r\n    //console.log(ATON._renderer);\r\n\r\n    ATON._stdpxd = 1.0; //window.devicePixelRatio? (window.devicePixelRatio) : 1.0;\r\n    ATON._renderer.setPixelRatio( ATON._stdpxd );\r\n    console.log(ATON._stdpxd);\r\n    \r\n    ATON._renderer.outputEncoding = THREE.sRGBEncoding;\r\n    //console.log(ATON._renderer.getPixelRatio());\r\n\r\n    ATON._renderer.setAnimationLoop( ATON._onFrame );\r\n    //ATON._bDirtyLP = false;\r\n\r\n    ATON._maxAnisotropy = ATON._renderer.capabilities.getMaxAnisotropy();\r\n    console.log(ATON._renderer.capabilities);\r\n\r\n    THREE.Cache.enabled = true;\r\n\r\n    ATON.userHeight = 1.7;\r\n \r\n    document.body.appendChild( ATON._renderer.domElement );\r\n    //console.log(ATON._renderer);\r\n\r\n    ATON.EventHub.init();\r\n    ATON.MatHub.init();\r\n\r\n    //ATON._setupLoadManager();\r\n    ATON._assetsManager = {};\r\n    ATON._aLoader = new THREE.GLTFLoader(/*ATON._loadManager*/);\r\n    ATON._dracoLoader = new THREE.DRACOLoader();\r\n    ATON._dracoLoader.setDecoderPath( ATON.PATH_DRACO_LIB );\r\n    ATON._aLoader.setDRACOLoader( ATON._dracoLoader );\r\n    ATON._numReqLoad = 0;\r\n\r\n    // Periods (TODO:)\r\n    //ATON.periods = [];\r\n\r\n    ATON._lps = []; // lightprobes\r\n    ATON._bAutoLP = false;\r\n    //ATON._dirtyLPs = true;\r\n    ATON._bShadowsFixedBound = false;\r\n\r\n    ATON.initGraphs();\r\n    ATON.SceneHub.init();\r\n\r\n    // Init nav system\r\n    ATON.Nav.init();\r\n\r\n    // XR\r\n    ATON.XR.init();\r\n\r\n    // Spatial UI\r\n    ATON.SUI.init();\r\n\r\n    // VRoadcast\r\n    ATON.VRoadcast.init();\r\n\r\n    // Semantic Factory\r\n    ATON.SemFactory.init();\r\n\r\n    // Query / picked data\r\n    ATON._queryDataScene = undefined;\r\n    ATON._queryDataSem   = undefined;\r\n    ATON._queryDataUI    = undefined;\r\n\r\n    ATON._hoveredSemNode = undefined;\r\n    ATON._hoveredUI      = undefined;\r\n\r\n    ATON._bQuerySemOcclusion = true;\r\n    ATON._bQueryNormals  = true;\r\n    ATON._bPauseQuery    = false;\r\n\r\n    //window.setInterval(()=>{ if (!ATON._bPauseQuery) ATON._handleQueries(); }, 500 );\r\n\r\n    // Basis (future support)\r\n/*\r\n    ATON._basisLoader = new BasisTextureLoader();\r\n    ATON._basisLoader.setTranscoderPath( ATON.PATH_BASIS_LIB );\r\n    ATON._basisLoader.detectSupport( ATON._renderer );\r\n    \r\n    // Register BasisTextureLoader for .basis extension.\r\n    THREE.DefaultLoadingManager.addHandler( /\\.basis$/, ATON._basisLoader );\r\n*/\r\n\r\n\r\n    // Mouse/Touch screen coords\r\n    ATON._screenPointerCoords = new THREE.Vector2(0.0,0.0);\r\n\r\n    // Ray casters\r\n    ATON._rcScene = new THREE.Raycaster();\r\n    ATON._rcScene.layers.set(ATON.NTYPES.SCENE);\r\n    ATON._rcSemantics = new THREE.Raycaster();\r\n    ATON._rcSemantics.layers.set(ATON.NTYPES.SEM);\r\n    ATON._rcUI = new THREE.Raycaster();\r\n    ATON._rcUI.layers.set(ATON.NTYPES.UI);\r\n\r\n    //ATON._registerRCS(); // not used for now\r\n\r\n    ATON._setupBaseListeners();\r\n\r\n    ATON.focusOn3DView();\r\n};\r\n\r\n/**\r\nPause rendering\r\n*/\r\nATON.renderPause = ()=>{\r\n    ATON._renderer.setAnimationLoop( undefined );\r\n};\r\n\r\n/**\r\nResume rendering (if paused)\r\n*/\r\nATON.renderResume = ()=>{\r\n    ATON._renderer.setAnimationLoop( ATON._onFrame );\r\n};\r\n\r\nATON._setupLoadManager = ()=>{\r\n    ATON._loadManager = new THREE.LoadingManager();\r\n    ATON._loadManager.onStart = ( url, itemsLoaded, itemsTotal )=>{\r\n\t    console.log( 'Started loading file: ' + url + '.\\nLoaded ' + itemsLoaded + ' of ' + itemsTotal + ' files.' );\r\n        ATON.fireEvent(\"NodeRequestFired\", url);\r\n    };\r\n\r\n    ATON._loadManager.onLoad = ()=>{\r\n\t    console.log( 'Loading complete!');\r\n        ATON.fireEvent(\"AllNodeRequestsCompleted\");\r\n    };\r\n\r\n    ATON._loadManager.onProgress = ( url, itemsLoaded, itemsTotal )=>{\r\n\t    //console.log( 'Loading file: ' + url + '.\\nLoaded ' + itemsLoaded + ' of ' + itemsTotal + ' files.' );\r\n    };\r\n\r\n    ATON._loadManager.onError = ( url )=>{\r\n\t    console.log( 'There was an error loading ' + url );\r\n    };\r\n};\r\n\r\n/**\r\nSet the default pixel density (standard is 1.0)\r\n@example\r\nATON.setDefaultPixelDensity(0.5)\r\n*/\r\nATON.setDefaultPixelDensity = (d)=>{\r\n    ATON._stdpxd = d;\r\n    ATON._renderer.setPixelRatio( d );\r\n};\r\n\r\n/**\r\nReset pixel density to default\r\n*/\r\nATON.resetPixelDensity = ()=>{\r\n    ATON._renderer.setPixelRatio( ATON._stdpxd );\r\n};\r\n\r\n\r\n//============================================================================\r\n// Scene-graphs\r\n//============================================================================\r\nATON.snodes   = {}; // Visible scene-graph\r\nATON.semnodes = {}; // Semantics graph\r\nATON.uinodes  = {}; // UI graph\r\n\r\n// Visible scene-graph\r\n//=============================================\r\n/**\r\nCreate a scene node (visible scene-graph)\r\n@param {string} id - a string representing unique ID of the node (optional)\r\n@returns {Node}\r\n*/\r\nATON.createSceneNode = (id)=>{\r\n    return new ATON.Node(id, ATON.NTYPES.SCENE);\r\n};\r\n\r\n/**\r\nGet a previously created scene node (visible scene-graph)\r\n@param {string} id - the node ID\r\n@returns {Node}\r\n*/\r\nATON.getSceneNode = (id)=>{ \r\n    if (id === undefined) return undefined;    \r\n    return ATON.snodes[id];\r\n};\r\n\r\n/**\r\nGet or create a scene node (visible scene-graph)\r\n@param {string} id - the node ID\r\n@returns {Node}\r\n*/\r\nATON.getOrCreateSceneNode = (id)=>{\r\n    let N = ATON.getSceneNode(id);\r\n    if (N !== undefined) return N;\r\n    return ATON.createSceneNode(id);\r\n};\r\n\r\n/**\r\nGet root (visible scene-graph)\r\n@returns {Node}\r\n*/\r\nATON.getRootScene = ()=>{\r\n    return ATON._rootVisible;\r\n};\r\n\r\n// Semantics, shape descriptors\r\n//=============================================\r\n\r\n/**\r\nCreate a semantic node\r\n@param {string} id - a string representing unique ID of the node (optional)\r\n@returns {Node}\r\n*/\r\nATON.createSemanticNode = (id)=>{\r\n    return new ATON.Node(id, ATON.NTYPES.SEM);\r\n};\r\n\r\n/**\r\nGet a previously created semantic node\r\n@param {string} id - the node ID\r\n@returns {Node}\r\n*/\r\nATON.getSemanticNode = (id)=>{\r\n    if (id === undefined) return undefined; \r\n    return ATON.semnodes[id];\r\n};\r\n\r\n/**\r\nGet or create a semantic node\r\n@param {string} id - the node ID\r\n@returns {Node}\r\n*/\r\nATON.getOrCreateSemanticNode = (id)=>{\r\n    let S = ATON.getSemanticNode(id);\r\n    if (S !== undefined) return S;\r\n    return ATON.createSemanticNode(id);\r\n};\r\n\r\n/**\r\nGet root of semantic graph\r\n@returns {Node}\r\n*/\r\nATON.getRootSemantics = ()=>{\r\n    return ATON._rootSem;\r\n};\r\n\r\n// UI graph\r\n//=============================================\r\n\r\n/**\r\nCreate a UI node\r\n@param {string} id - a string representing unique ID of the node (optional)\r\n@returns {Node}\r\n*/\r\nATON.createUINode = (id)=>{\r\n    return new ATON.Node(id, ATON.NTYPES.UI);\r\n};\r\n\r\n/**\r\nGet a previously created UI node\r\n@param {string} id - the node ID\r\n@returns {Node}\r\n*/\r\nATON.getUINode = (id)=>{\r\n    if (id === undefined) return undefined; \r\n    return ATON.uinodes[id];\r\n};\r\n\r\n/**\r\nGet root of UI graph\r\n@returns {Node}\r\n*/\r\nATON.getRootUI = ()=>{\r\n    return ATON._rootUI;\r\n};\r\n\r\n// Asset loading routines\r\nATON._assetReqNew = (url)=>{\r\n    ATON._numReqLoad++;\r\n    ATON.fireEvent(\"NodeRequestFired\", url);\r\n};\r\nATON._assetReqComplete = (url)=>{\r\n    ATON.fireEvent(\"NodeRequestCompleted\", url);\r\n    ATON._numReqLoad--;\r\n\r\n    if (ATON._numReqLoad <= 0){\r\n        ATON.fireEvent(\"AllNodeRequestsCompleted\");\r\n\r\n        // Bounds\r\n        let c = ATON._rootVisible.getBound().center;\r\n        let r = ATON._rootVisible.getBound().radius;\r\n\r\n        if (ATON._renderer.shadowMap.enabled){\r\n            ATON._rootVisible.traverse((o) => {\r\n                if (o.isMesh){\r\n                    o.castShadow = true;\r\n                    o.receiveShadow = true;\r\n                }\r\n            });\r\n\r\n            // TODO: experimental\r\n            if (ATON._bShadowsFixedBound){\r\n                ATON.SHADOWS_SIZE = r*1.5;\r\n\r\n                ATON._dMainL.shadow.camera.left   = -ATON.SHADOWS_SIZE;\r\n                ATON._dMainL.shadow.camera.right  = ATON.SHADOWS_SIZE;\r\n                ATON._dMainL.shadow.camera.bottom = -ATON.SHADOWS_SIZE;\r\n                ATON._dMainL.shadow.camera.top    = ATON.SHADOWS_SIZE;\r\n\r\n                ATON.updateDirShadows(c);\r\n            }\r\n        }\r\n\r\n        if (ATON._bAutoLP){\r\n            if (ATON._lps[0] === undefined) ATON.addLightProbe( new ATON.LightProbe().setPosition(c).setNear(r) );\r\n            else {\r\n                ATON._lps[0].setPosition(c.x, c.y, c.z).setNear(r);\r\n            }\r\n            console.log(\"Auto LP\");\r\n        }\r\n\r\n        ATON.getRootScene().assignLightProbesByProximity();\r\n\r\n        //ATON._bDirtyLP = true;\r\n\r\n        // FIXME: dirty\r\n        setTimeout( ()=>{\r\n            if (c && ATON._mMainPano) ATON._mMainPano.position.copy(c);\r\n            ATON.updateLightProbes();\r\n        }, 1000);\r\n\r\n    }\r\n};\r\n\r\n\r\nATON.initGraphs = ()=>{\r\n    // Global root\r\n    ATON._mainRoot = new THREE.Scene();\r\n    ATON._mainRoot.background = new THREE.Color( 0.7,0.7,0.7 );\r\n\r\n    // visible scene-graph\r\n    ATON._rootVisibleGlobal = new THREE.Group();\r\n    ATON._mainRoot.add(ATON._rootVisibleGlobal);\r\n\r\n    ATON._rootVisible = ATON.createSceneNode().setAsRoot();\r\n    ATON._rootVisibleGlobal.add(ATON._rootVisible);\r\n\r\n\r\n    // semantics graph\r\n    ATON._rootSem = ATON.createSemanticNode().setAsRoot();\r\n    ATON._mainRoot.add(ATON._rootSem);\r\n\r\n    // UI graph\r\n    ATON._rootUI = ATON.createUINode().setAsRoot();\r\n    ATON._mainRoot.add(ATON._rootUI);\r\n\r\n    // Uniform lighting\r\n    ATON.ambLight = new THREE.AmbientLight( new THREE.Color(1,1,1) /*ATON._mainRoot.background*/ );\r\n    ATON._rootVisibleGlobal.add(ATON.ambLight);\r\n};\r\n\r\nATON.setBackgroundColor = (bg)=>{\r\n    ATON._mainRoot.background = bg;\r\n};\r\n\r\n//==============================================================\r\n// LightProbes\r\n//==============================================================\r\nATON.setAutoLP = (b)=>{\r\n    ATON._bAutoLP = b;\r\n};\r\n\r\nATON.setNeutralAmbientLight = (a)=>{\r\n    ATON.ambLight.color = new THREE.Color( a,a,a );\r\n};\r\n\r\n/**\r\nAdd a LightProbe to the scene\r\n@param {LightProbe} LP - the light probe being added \r\n*/\r\nATON.addLightProbe = (LP)=>{\r\n    if (ATON._lps.length === 0) ATON.setNeutralAmbientLight(0.1);\r\n\r\n    ATON._lps.push(LP);\r\n};\r\n\r\n/**\r\nUpdate all LightProbes in the scene\r\n*/\r\nATON.updateLightProbes = ()=>{\r\n    if (ATON._lps.length === 0) return;\r\n\r\n    for (let i in ATON._lps) ATON._lps[i].update();\r\n\r\n    // FIXME: indirect LP based on first LP (for now)\r\n    if (ATON._lps[0]){\r\n        if (ATON._indLP) ATON._mainRoot.remove(ATON._indLP);\r\n\r\n        ATON._indLP = THREE.LightProbeGenerator.fromCubeRenderTarget( ATON._renderer, ATON._lps[0]._prevCCtarget );\r\n        ATON._mainRoot.add( ATON._indLP );\r\n    }\r\n\r\n    //for (let i in ATON._lps) ATON._lps[i].update();\r\n\r\n    ATON._rootVisible.traverse((o) => {\r\n        let LP = o.userData.LP;\r\n        if (LP !== undefined && LP instanceof ATON.LightProbe){\r\n            o.material.envMap = LP.getEnvTex();\r\n            //o.material.combine = THREE.AddOperation;\r\n            //o.material.envMapIntensity = 5.0;\r\n        }\r\n    });\r\n\r\n    console.log(\"LPs updated.\");\r\n};\r\n\r\n//==============================================================\r\n// Environment\r\n//==============================================================\r\n\r\n/**\r\nSet the main panorama (360)\r\n@param {string} path - url to equirectangular image\r\n@example\r\nATON.setMainPanorama(\"my/pano.jpg\");\r\n*/\r\nATON.setMainPanorama = (path)=>{\r\n\r\n    let tpano = new THREE.TextureLoader().load(path);\r\n    tpano.encoding = THREE.sRGBEncoding;\r\n\r\n    if (ATON._matMainPano !== undefined){\r\n        ATON._matMainPano.map = tpano;\r\n        //ATON._matMainPano.emissive = tpano;\r\n        return;\r\n    }\r\n\r\n    // First time: create it\r\n    ATON._gMainPano = new THREE.SphereBufferGeometry( 1.0, 60,60 );\r\n\r\n    ATON._matMainPano = new THREE.MeshBasicMaterial({ \r\n        map: tpano, \r\n        //emissive: tpano,\r\n        //castShadow: false,\r\n        //receiveShadow: false,\r\n        fog: false,\r\n        depthTest: false,\r\n        depthWrite: false,\r\n        //depthFunc: THREE.AlwaysDepth,\r\n        //side: THREE.DoubleSide\r\n    });\r\n\r\n    ATON._mMainPano = new THREE.Mesh(ATON._gMainPano, ATON._matMainPano);\r\n    ATON._mMainPano.frustumCulled = false;\r\n    ATON.setMainPanoramaRadius(ATON.Nav.STD_FAR * 0.9);\r\n\r\n    ATON._mMainPano.onAfterRender = ()=>{\r\n        //if (ATON._numReqLoad > 0) return;\r\n        ATON._mMainPano.position.copy(ATON.Nav._currPOV.pos);\r\n    };\r\n\r\n    ATON._rootVisibleGlobal.add(ATON._mMainPano);\r\n};\r\n\r\n\r\nATON.setMainPanoramaRadius = (r)=>{\r\n    if (ATON._gMainPano === undefined) return;\r\n    ATON._gMainPano.scale( -r,r,r );\r\n};\r\n\r\n/**\r\nSet main panorama rotation (radians) around up vector\r\n@param {number} r - rotation\r\n@example\r\nATON.setMainPanoramaRotation(1.5);\r\n*/\r\nATON.setMainPanoramaRotation = (r)=>{\r\n    if (ATON._mMainPano === undefined) return;\r\n    ATON._mMainPano.rotation.set( 0,r,0 );\r\n};\r\n\r\n/**\r\nSet and activate main directional light\r\n@param {THREE.Vector3} v - light direction\r\n@example\r\nATON.setMainLightDirection( new THREE.Vector(0.1,-1.0,0.0) );\r\n*/\r\nATON.setMainLightDirection = (v)=>{\r\n\r\n    let d = v.clone();\r\n\r\n    d.x *= ATON.SHADOWS_FAR * 0.5;\r\n    d.y *= ATON.SHADOWS_FAR * 0.5;\r\n    d.z *= ATON.SHADOWS_FAR * 0.5;\r\n\r\n    if (ATON._dMainL === undefined){\r\n        ATON._dMainL = new THREE.DirectionalLight( new THREE.Color(1,1,1), 1.0 );\r\n        ATON._dMainL.castShadow = false;\r\n\r\n        ATON._dMainLtgt = new THREE.Object3D();\r\n        ATON._rootVisibleGlobal.add(ATON._dMainLtgt);\r\n        ATON._dMainL.target = ATON._dMainLtgt;\r\n\r\n        ATON.setNeutralAmbientLight(0.1);\r\n\r\n        ATON._rootVisibleGlobal.add(ATON._dMainL);\r\n        ATON._dMainLpos = new THREE.Vector3();\r\n    }\r\n\r\n    ATON._dMainLdir = d;\r\n\r\n    ATON._dMainL.position.set(-d.x,-d.y,-d.z);\r\n};\r\n\r\nATON.toggleShadows = (b)=>{\r\n    if (ATON._dMainL === undefined) return;\r\n\r\n    if (b){\r\n        ATON._dMainL.castShadow = true;\r\n        ATON._renderer.shadowMap.enabled = true;\r\n\r\n        //ATON._renderer.shadowMap.type    = THREE.BasicShadowMap;\r\n        //ATON._renderer.shadowMap.type    = THREE.PCFShadowMap;\r\n        ATON._renderer.shadowMap.type    = THREE.PCFSoftShadowMap; // bleeding\r\n        //ATON._renderer.shadowMap.type    = THREE.VSMShadowMap;\r\n\r\n        ATON._dMainL.shadow.mapSize.width  = ATON.SHADOWS_RES;\r\n        ATON._dMainL.shadow.mapSize.height = ATON.SHADOWS_RES;\r\n        ATON._dMainL.shadow.camera.near    = ATON.SHADOWS_NEAR;\r\n        ATON._dMainL.shadow.camera.far     = ATON.SHADOWS_FAR;\r\n        //ATON._dMainL.shadow.bias = 0.0001;\r\n\r\n        ATON._dMainL.shadow.camera.left   = -ATON.SHADOWS_SIZE;\r\n        ATON._dMainL.shadow.camera.right  = ATON.SHADOWS_SIZE;\r\n        ATON._dMainL.shadow.camera.bottom = -ATON.SHADOWS_SIZE;\r\n        ATON._dMainL.shadow.camera.top    = ATON.SHADOWS_SIZE;\r\n\r\n        ATON._rootVisible.traverse((o) => {\r\n            if (o.isMesh){\r\n                o.castShadow = true;\r\n                o.receiveShadow = true;\r\n            }\r\n        });\r\n\r\n        if (ATON._bShadowsFixedBound){\r\n            let c = ATON._rootVisible.getBound().center;\r\n            ATON.updateDirShadows(c);\r\n        }\r\n\r\n        console.log(\"Shadows ON\");\r\n    }\r\n    else {\r\n        ATON._dMainL.castShadow = false;\r\n        ATON._renderer.shadowMap.enabled = false;\r\n        console.log(\"Shadows OFF\");\r\n    }\r\n};\r\n\r\nATON.updateDirShadows = (p)=>{\r\n    if (ATON._dMainLdir === undefined) return;\r\n\r\n    if (p === undefined) p = ATON.Nav.getCurrentEyeLocation();\r\n\r\n    ATON._dMainLpos.x = p.x + (ATON.Nav._vDir.x * ATON.SHADOWS_SIZE);\r\n    ATON._dMainLpos.y = p.y + (ATON.Nav._vDir.y * ATON.SHADOWS_SIZE);\r\n    ATON._dMainLpos.z = p.z + (ATON.Nav._vDir.z * ATON.SHADOWS_SIZE);\r\n\r\n    ATON._dMainL.position.set(\r\n        ATON._dMainLpos.x - ATON._dMainLdir.x, \r\n        ATON._dMainLpos.y - ATON._dMainLdir.y, \r\n        ATON._dMainLpos.z - ATON._dMainLdir.z\r\n    );\r\n    ATON._dMainLtgt.position.copy(ATON._dMainLpos);\r\n};\r\n\r\nATON._updateEnvironment = ()=>{\r\n    if (!ATON._renderer.shadowMap.enabled) return;\r\n    if (ATON._bShadowsFixedBound) return;\r\n\r\n    ATON.updateDirShadows();\r\n};\r\n\r\n//==============================================================\r\n// Update routines\r\n//==============================================================\r\nATON._onFrame = ()=>{\r\n    // TODO: add pause render\r\n\r\n    let dt = ATON._clock.getDelta();\r\n\r\n    ATON._fps = 1.0 / dt;\r\n    ATON._dt  = dt;\r\n    \r\n    ATON.Nav._bControlChange = false;\r\n    ATON.Nav._controls.update(dt);\r\n\r\n    ATON._renderer.render( ATON._mainRoot, ATON.Nav._camera );\r\n\r\n/*\r\n    if (ATON.Nav._bControlChange){\r\n        }\r\n    else {\r\n        //ATON._handleScreenPick();\r\n        }\r\n*/\r\n\r\n    if (ATON.XR._bPresenting) ATON.XR.update();\r\n\r\n    // Spatial queries\r\n    ATON._handleQueries();\r\n\r\n    // Navigation system\r\n    ATON.Nav.update();\r\n\r\n    // VRoadcast\r\n    ATON.VRoadcast.update();\r\n\r\n    // UI\r\n    ATON.SUI.update();\r\n\r\n    // Environment/lighting\r\n    ATON._updateEnvironment();\r\n\r\n    ATON.fireEvent(\"frame\");\r\n};\r\n\r\nATON._updateScreenMove = (e)=>{\r\n    e.preventDefault();\r\n\r\n    if (ATON.Nav._mode === ATON.Nav.MODE_DEVORI){\r\n        ATON._screenPointerCoords.x = 0.0;\r\n        ATON._screenPointerCoords.y = 0.0;\r\n        return;\r\n    }\r\n\r\n\tATON._screenPointerCoords.x = ( e.clientX / window.innerWidth ) * 2 - 1;\r\n\tATON._screenPointerCoords.y = -( e.clientY / window.innerHeight ) * 2 + 1;\r\n\r\n    //console.log(ATON._screenPointerCoords);\r\n};\r\n\r\n//==============================================================\r\n// Query rountines\r\n//==============================================================\r\nATON._registerRCS = ()=>{\r\n    ATON._rcRR = 0;\r\n    ATON._rcHandlers = [];\r\n\r\n    ATON._rcHandlers.push( ATON._handleQueryScene );\r\n    ATON._rcHandlers.push( ATON._handleQuerySemantics );\r\n    ATON._rcHandlers.push( ATON._handleQueryUI );\r\n};\r\n\r\nATON._handleQueries = ()=>{\r\n    if (ATON._bPauseQuery) return;\r\n    if (ATON._numReqLoad > 0) return;\r\n    if (ATON.Nav.isTransitioning()) return; // do not query during POV transitions\r\n    //if (ATON.device.isMobile || !ATON.XR.isPresenting()) return; \r\n\r\n    // round-robin\r\n    //ATON._rcRR = (ATON._rcRR+1) % 2;\r\n    //ATON._rcHandlers[ATON._rcRR]();\r\n\r\n    ATON._handleQueryScene();\r\n    ATON._handleQuerySemantics();\r\n    ATON._handleQueryUI();\r\n};\r\n\r\n// Ray casting visible scenegraph\r\nATON._handleQueryScene = ()=>{\r\n    if (ATON.XR.isPresenting()){\r\n        ATON._rcScene.set( ATON.XR.getControllerWorldLocation(0), ATON.XR.getControllerWorldDirection(0) );\r\n    }\r\n    else \r\n        ATON._rcScene.setFromCamera( ATON._screenPointerCoords, ATON.Nav._camera );\r\n\r\n    ATON._hitsScene = [];\r\n    //ATON._rcScene.intersectObjects( ATON._rootVisible.children, true, ATON._hitsScene );\r\n    ATON._rcScene.intersectObjects( ATON._mainRoot.children, true, ATON._hitsScene );\r\n\r\n    //ATON._hitsOperator(ATON._hits);\r\n\r\n    // Process hits\r\n    let hitsnum = ATON._hitsScene.length;\r\n    if (hitsnum <= 0){\r\n        ATON._queryDataScene = undefined;\r\n        return;\r\n    }\r\n\r\n    let h = ATON._hitsScene[0];\r\n\r\n    ATON._queryDataScene = {};\r\n    ATON._queryDataScene.p = h.point;\r\n    ATON._queryDataScene.d = h.distance;\r\n    ATON._queryDataScene.o = h.object;\r\n    \r\n    //console.log(ATON._queryDataScene.o);\r\n\r\n    // Normals\r\n    if (!ATON._bQueryNormals) return;\r\n    if (h.face === null) return;\r\n    if (h.face.normal === undefined) return;\r\n\r\n    ATON._queryDataScene.matrixWorld = new THREE.Matrix3().getNormalMatrix( h.object.matrixWorld );\r\n    ATON._queryDataScene.n = h.face.normal.clone().applyMatrix3( ATON._queryDataScene.matrixWorld ).normalize();\r\n};\r\n\r\n/**\r\nGet location of current queried point (if any) on visible scene.\r\nIf no point is queried, return undefined\r\n@returns {THREE.Vector3}\r\n@example\r\nlet p = ATON.getSceneQueriedPoint()\r\n*/\r\nATON.getSceneQueriedPoint = ()=>{\r\n    if (ATON._queryDataScene === undefined) return undefined;\r\n    return ATON._queryDataScene.p;\r\n};\r\n\r\n/**\r\nGet distance to queried location (if any) on visible scene.\r\nIf no point is queried, return undefined\r\n@returns {number}\r\n@example\r\nlet d = ATON.getSceneQueriedDistance()\r\n*/\r\nATON.getSceneQueriedDistance = ()=>{\r\n    if (ATON._queryDataScene === undefined) return undefined;\r\n    return ATON._queryDataScene.d;\r\n};\r\n\r\n/**\r\nGet queried location normal (if any) on visible scene.\r\nIf no point is queried, return undefined\r\n@returns {THREE.Vector3}\r\n@example\r\nlet n = ATON.getSceneQueriedNormal()\r\n*/\r\nATON.getSceneQueriedNormal = ()=>{\r\n    if (ATON._queryDataScene === undefined) return undefined;\r\n    return ATON._queryDataScene.n;\r\n};\r\n\r\n\r\n// Ray casting semantic-graph\r\nATON._handleQuerySemantics = ()=>{\r\n    if (ATON.XR.isPresenting()){\r\n        ATON._rcSemantics.set( ATON.XR.getControllerWorldLocation(0), ATON.XR.getControllerWorldDirection(0) );\r\n    }\r\n    else \r\n        ATON._rcSemantics.setFromCamera( ATON._screenPointerCoords, ATON.Nav._camera );\r\n\r\n    ATON._hitsSem = [];\r\n    ATON._rcSemantics.intersectObjects( ATON._mainRoot.children, true, ATON._hitsSem );\r\n\r\n    // Process hits\r\n    let hitsnum = ATON._hitsSem.length;\r\n    if (hitsnum <= 0){\r\n        ATON._queryDataSem = undefined;\r\n\r\n        if (ATON._hoveredSemNode){\r\n            ATON.fireEvent(\"SemanticNodeLeave\", ATON._hoveredSemNode);\r\n            let S = ATON.getSemanticNode(ATON._hoveredSemNode);\r\n            if (S && S.onLeave) S.onLeave();\r\n        }\r\n        \r\n        ATON._hoveredSemNode = undefined;\r\n        return;\r\n    }\r\n\r\n    let h = ATON._hitsSem[0];\r\n\r\n    // Occlusion\r\n    if (ATON._bQuerySemOcclusion && ATON._queryDataScene){\r\n        if (ATON._queryDataScene.d < h.distance){\r\n\r\n            ATON._queryDataSem = undefined;\r\n\r\n            if (ATON._hoveredSemNode){\r\n                ATON.fireEvent(\"SemanticNodeLeave\", ATON._hoveredSemNode);\r\n                let S = ATON.getSemanticNode(ATON._hoveredSemNode);\r\n                if (S && S.onLeave) S.onLeave();\r\n            }\r\n\r\n            ATON._hoveredSemNode = undefined;\r\n            return;\r\n        }\r\n    }\r\n\r\n    ATON._queryDataSem = {};\r\n    ATON._queryDataSem.p = h.point;\r\n    ATON._queryDataSem.d = h.distance;\r\n    ATON._queryDataSem.o = h.object;\r\n    ATON._queryDataSem.list = []; // holds sem-nodes parental list\r\n\r\n    // traverse parents\r\n    let L = ATON._queryDataSem.list;\r\n    let sp = h.object.parent;\r\n    while (sp){\r\n        if (sp.nid && sp.nid !== ATON.ROOT_NID) L.push(sp.nid);\r\n        sp = sp.parent;\r\n    }\r\n\r\n    let hsn = L[0];\r\n    if (hsn){\r\n        if (ATON._hoveredSemNode !== hsn){\r\n            if (ATON._hoveredSemNode){\r\n                ATON.fireEvent(\"SemanticNodeLeave\", ATON._hoveredSemNode);\r\n                let S = ATON.getSemanticNode(ATON._hoveredSemNode);\r\n                if (S && S.onLeave) S.onLeave();\r\n            }\r\n\r\n            ATON._hoveredSemNode = hsn;\r\n            ATON.fireEvent(\"SemanticNodeHover\", hsn);\r\n            let S = ATON.getSemanticNode(hsn);\r\n            if (S && S.onHover) S.onHover();\r\n        }\r\n    }\r\n\r\n    //console.log(L);\r\n};\r\n\r\nATON._handleQueryUI = ()=>{\r\n    if (ATON.XR.isPresenting()){\r\n        ATON._rcUI.set( ATON.XR.getControllerWorldLocation(0), ATON.XR.getControllerWorldDirection(0) );\r\n    }\r\n    else \r\n        ATON._rcUI.setFromCamera( ATON._screenPointerCoords, ATON.Nav._camera );\r\n\r\n    ATON._hitsUI = [];\r\n    ATON._rcUI.intersectObjects( ATON._mainRoot.children, true, ATON._hitsUI );\r\n\r\n    // Process hits\r\n    let hitsnum = ATON._hitsUI.length;\r\n    if (hitsnum <= 0){\r\n        ATON._queryDataUI = undefined;\r\n\r\n        if (ATON._hoveredUI){\r\n            ATON.fireEvent(\"UINodeLeave\", ATON._hoveredUI);\r\n            let S = ATON.getUINode(ATON._hoveredUI);\r\n            if (S && S.onLeave) S.onLeave();\r\n        }\r\n        \r\n        ATON._hoveredUI = undefined;\r\n        return;\r\n    }\r\n\r\n    let h = ATON._hitsUI[0];\r\n\r\n    // Occlusion\r\n    if (ATON._queryDataScene){\r\n        if (ATON._queryDataScene.d < h.distance){\r\n\r\n            ATON._queryDataUI = undefined;\r\n\r\n            if (ATON._hoveredUI){\r\n                ATON.fireEvent(\"SemanticNodeLeave\", ATON._hoveredUI);\r\n                let S = ATON.getUINode(ATON._hoveredUI);\r\n                if (S && S.onLeave) S.onLeave();\r\n            }\r\n\r\n            ATON._hoveredUI = undefined;\r\n            return;\r\n        }\r\n    }\r\n\r\n    ATON._queryDataUI = {};\r\n    ATON._queryDataUI.p = h.point;\r\n    ATON._queryDataUI.d = h.distance;\r\n    ATON._queryDataUI.o = h.object;\r\n    ATON._queryDataUI.list = []; // holds ui-nodes parental list\r\n\r\n    // traverse parents\r\n    let L = ATON._queryDataUI.list;\r\n    let sp = h.object.parent;\r\n    while (sp){\r\n        if (sp.nid && sp.nid !== ATON.ROOT_NID) L.push(sp.nid);\r\n        sp = sp.parent;\r\n    }\r\n\r\n    let hui = L[0];\r\n    if (hui){\r\n        if (ATON._hoveredUI !== hui){\r\n            if (ATON._hoveredUI){\r\n                ATON.fireEvent(\"UINodeLeave\", ATON._hoveredUI);\r\n                let S = ATON.getUINode(ATON._hoveredUI);\r\n                if (S && S.onLeave) S.onLeave();\r\n            }\r\n\r\n            ATON._hoveredUI = hui;\r\n            ATON.fireEvent(\"UINodeHover\", hui);\r\n            let S = ATON.getUINode(hui);\r\n            if (S && S.onHover) S.onHover();\r\n        }\r\n    }\r\n};\r\n\r\n\r\nexport default ATON;\r\n\r\n\r\n"]}